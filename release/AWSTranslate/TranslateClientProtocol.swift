// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Provides translation between one source language and another of the same set of languages.
public protocol TranslateClientProtocol {
    /// Creates a parallel data resource in Amazon Translate by importing an input file from Amazon S3. Parallel data files contain examples that show how you want segments of text to be translated. By adding parallel data, you can influence the style, tone, and word choice in your translation output.
    func createParallelData(input: CreateParallelDataInput) async throws -> CreateParallelDataOutputResponse
    /// Deletes a parallel data resource in Amazon Translate.
    func deleteParallelData(input: DeleteParallelDataInput) async throws -> DeleteParallelDataOutputResponse
    /// A synchronous action that deletes a custom terminology.
    func deleteTerminology(input: DeleteTerminologyInput) async throws -> DeleteTerminologyOutputResponse
    /// Gets the properties associated with an asynchronous batch translation job including name, ID, status, source and target languages, input/output S3 buckets, and so on.
    func describeTextTranslationJob(input: DescribeTextTranslationJobInput) async throws -> DescribeTextTranslationJobOutputResponse
    /// Provides information about a parallel data resource.
    func getParallelData(input: GetParallelDataInput) async throws -> GetParallelDataOutputResponse
    /// Retrieves a custom terminology.
    func getTerminology(input: GetTerminologyInput) async throws -> GetTerminologyOutputResponse
    /// Creates or updates a custom terminology, depending on whether or not one already exists for the given terminology name. Importing a terminology with the same name as an existing one will merge the terminologies based on the chosen merge strategy. Currently, the only supported merge strategy is OVERWRITE, and so the imported terminology will overwrite an existing terminology of the same name. If you import a terminology that overwrites an existing one, the new terminology take up to 10 minutes to fully propagate and be available for use in a translation due to cache policies with the DataPlane service that performs the translations.
    func importTerminology(input: ImportTerminologyInput) async throws -> ImportTerminologyOutputResponse
    /// Provides a list of your parallel data resources in Amazon Translate.
    func listParallelData(input: ListParallelDataInput) async throws -> ListParallelDataOutputResponse
    /// Provides a list of custom terminologies associated with your account.
    func listTerminologies(input: ListTerminologiesInput) async throws -> ListTerminologiesOutputResponse
    /// Gets a list of the batch translation jobs that you have submitted.
    func listTextTranslationJobs(input: ListTextTranslationJobsInput) async throws -> ListTextTranslationJobsOutputResponse
    /// Starts an asynchronous batch translation job. Batch translation jobs can be used to translate large volumes of text across multiple documents at once. For more information, see [async]. Batch translation jobs can be described with the [DescribeTextTranslationJob] operation, listed with the [ListTextTranslationJobs] operation, and stopped with the [StopTextTranslationJob] operation. Amazon Translate does not support batch translation of multiple source languages at once.
    func startTextTranslationJob(input: StartTextTranslationJobInput) async throws -> StartTextTranslationJobOutputResponse
    /// Stops an asynchronous batch translation job that is in progress. If the job's state is IN_PROGRESS, the job will be marked for termination and put into the STOP_REQUESTED state. If the job completes before it can be stopped, it is put into the COMPLETED state. Otherwise, the job is put into the STOPPED state. Asynchronous batch translation jobs are started with the [StartTextTranslationJob] operation. You can use the [DescribeTextTranslationJob] or [ListTextTranslationJobs] operations to get a batch translation job's JobId.
    func stopTextTranslationJob(input: StopTextTranslationJobInput) async throws -> StopTextTranslationJobOutputResponse
    /// Translates input text from the source language to the target language. For a list of available languages and language codes, see [what-is-languages].
    func translateText(input: TranslateTextInput) async throws -> TranslateTextOutputResponse
    /// Updates a previously created parallel data resource by importing a new input file from Amazon S3.
    func updateParallelData(input: UpdateParallelDataInput) async throws -> UpdateParallelDataOutputResponse
}

public enum TranslateClientTypes {}
