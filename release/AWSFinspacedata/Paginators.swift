// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListChangesetsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChangesetsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChangesetsOutputResponse`
extension FinspaceDataClient {
    public func listChangesetsPaginated(input: ListChangesetsInput) -> ClientRuntime.PaginatorSequence<ListChangesetsInput, ListChangesetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChangesetsInput, ListChangesetsOutputResponse>(input: input, inputKey: \ListChangesetsInput.nextToken, outputKey: \ListChangesetsOutputResponse.nextToken, paginationFunction: self.listChangesets(input:))
    }
}

extension ListChangesetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChangesetsInput {
        return ListChangesetsInput(
            datasetId: self.datasetId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListDatasetsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDatasetsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDatasetsOutputResponse`
extension FinspaceDataClient {
    public func listDatasetsPaginated(input: ListDatasetsInput) -> ClientRuntime.PaginatorSequence<ListDatasetsInput, ListDatasetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDatasetsInput, ListDatasetsOutputResponse>(input: input, inputKey: \ListDatasetsInput.nextToken, outputKey: \ListDatasetsOutputResponse.nextToken, paginationFunction: self.listDatasets(input:))
    }
}

extension ListDatasetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDatasetsInput {
        return ListDatasetsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListDataViewsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDataViewsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDataViewsOutputResponse`
extension FinspaceDataClient {
    public func listDataViewsPaginated(input: ListDataViewsInput) -> ClientRuntime.PaginatorSequence<ListDataViewsInput, ListDataViewsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDataViewsInput, ListDataViewsOutputResponse>(input: input, inputKey: \ListDataViewsInput.nextToken, outputKey: \ListDataViewsOutputResponse.nextToken, paginationFunction: self.listDataViews(input:))
    }
}

extension ListDataViewsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataViewsInput {
        return ListDataViewsInput(
            datasetId: self.datasetId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
