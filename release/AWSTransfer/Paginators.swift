// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListAccessesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAccessesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAccessesOutputResponse`
extension TransferClient {
    public func listAccessesPaginated(input: ListAccessesInput) -> ClientRuntime.PaginatorSequence<ListAccessesInput, ListAccessesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAccessesInput, ListAccessesOutputResponse>(input: input, inputKey: \ListAccessesInput.nextToken, outputKey: \ListAccessesOutputResponse.nextToken, paginationFunction: self.listAccesses(input:))
    }
}

extension ListAccessesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAccessesInput {
        return ListAccessesInput(
            maxResults: self.maxResults,
            nextToken: token,
            serverId: self.serverId
        )}
}

/// Paginate over `[ListExecutionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListExecutionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListExecutionsOutputResponse`
extension TransferClient {
    public func listExecutionsPaginated(input: ListExecutionsInput) -> ClientRuntime.PaginatorSequence<ListExecutionsInput, ListExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListExecutionsInput, ListExecutionsOutputResponse>(input: input, inputKey: \ListExecutionsInput.nextToken, outputKey: \ListExecutionsOutputResponse.nextToken, paginationFunction: self.listExecutions(input:))
    }
}

extension ListExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExecutionsInput {
        return ListExecutionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            workflowId: self.workflowId
        )}
}

/// Paginate over `[ListSecurityPoliciesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListSecurityPoliciesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListSecurityPoliciesOutputResponse`
extension TransferClient {
    public func listSecurityPoliciesPaginated(input: ListSecurityPoliciesInput) -> ClientRuntime.PaginatorSequence<ListSecurityPoliciesInput, ListSecurityPoliciesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSecurityPoliciesInput, ListSecurityPoliciesOutputResponse>(input: input, inputKey: \ListSecurityPoliciesInput.nextToken, outputKey: \ListSecurityPoliciesOutputResponse.nextToken, paginationFunction: self.listSecurityPolicies(input:))
    }
}

extension ListSecurityPoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSecurityPoliciesInput {
        return ListSecurityPoliciesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListServersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListServersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListServersOutputResponse`
extension TransferClient {
    public func listServersPaginated(input: ListServersInput) -> ClientRuntime.PaginatorSequence<ListServersInput, ListServersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListServersInput, ListServersOutputResponse>(input: input, inputKey: \ListServersInput.nextToken, outputKey: \ListServersOutputResponse.nextToken, paginationFunction: self.listServers(input:))
    }
}

extension ListServersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListServersInput {
        return ListServersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListTagsForResourceOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListTagsForResourceInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutputResponse`
extension TransferClient {
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutputResponse.nextToken, paginationFunction: self.listTagsForResource(input:))
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            arn: self.arn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListUsersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListUsersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListUsersOutputResponse`
extension TransferClient {
    public func listUsersPaginated(input: ListUsersInput) -> ClientRuntime.PaginatorSequence<ListUsersInput, ListUsersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListUsersInput, ListUsersOutputResponse>(input: input, inputKey: \ListUsersInput.nextToken, outputKey: \ListUsersOutputResponse.nextToken, paginationFunction: self.listUsers(input:))
    }
}

extension ListUsersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListUsersInput {
        return ListUsersInput(
            maxResults: self.maxResults,
            nextToken: token,
            serverId: self.serverId
        )}
}

/// Paginate over `[ListWorkflowsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListWorkflowsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListWorkflowsOutputResponse`
extension TransferClient {
    public func listWorkflowsPaginated(input: ListWorkflowsInput) -> ClientRuntime.PaginatorSequence<ListWorkflowsInput, ListWorkflowsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListWorkflowsInput, ListWorkflowsOutputResponse>(input: input, inputKey: \ListWorkflowsInput.nextToken, outputKey: \ListWorkflowsOutputResponse.nextToken, paginationFunction: self.listWorkflows(input:))
    }
}

extension ListWorkflowsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWorkflowsInput {
        return ListWorkflowsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
