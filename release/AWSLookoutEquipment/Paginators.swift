// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListDataIngestionJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDataIngestionJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDataIngestionJobsOutputResponse`
extension LookoutEquipmentClient {
    public func listDataIngestionJobsPaginated(input: ListDataIngestionJobsInput) -> ClientRuntime.PaginatorSequence<ListDataIngestionJobsInput, ListDataIngestionJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDataIngestionJobsInput, ListDataIngestionJobsOutputResponse>(input: input, inputKey: \ListDataIngestionJobsInput.nextToken, outputKey: \ListDataIngestionJobsOutputResponse.nextToken, paginationFunction: self.listDataIngestionJobs(input:))
    }
}

extension ListDataIngestionJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataIngestionJobsInput {
        return ListDataIngestionJobsInput(
            datasetName: self.datasetName,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

/// Paginate over `[ListDatasetsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDatasetsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDatasetsOutputResponse`
extension LookoutEquipmentClient {
    public func listDatasetsPaginated(input: ListDatasetsInput) -> ClientRuntime.PaginatorSequence<ListDatasetsInput, ListDatasetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDatasetsInput, ListDatasetsOutputResponse>(input: input, inputKey: \ListDatasetsInput.nextToken, outputKey: \ListDatasetsOutputResponse.nextToken, paginationFunction: self.listDatasets(input:))
    }
}

extension ListDatasetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDatasetsInput {
        return ListDatasetsInput(
            datasetNameBeginsWith: self.datasetNameBeginsWith,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListInferenceExecutionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListInferenceExecutionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListInferenceExecutionsOutputResponse`
extension LookoutEquipmentClient {
    public func listInferenceExecutionsPaginated(input: ListInferenceExecutionsInput) -> ClientRuntime.PaginatorSequence<ListInferenceExecutionsInput, ListInferenceExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListInferenceExecutionsInput, ListInferenceExecutionsOutputResponse>(input: input, inputKey: \ListInferenceExecutionsInput.nextToken, outputKey: \ListInferenceExecutionsOutputResponse.nextToken, paginationFunction: self.listInferenceExecutions(input:))
    }
}

extension ListInferenceExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInferenceExecutionsInput {
        return ListInferenceExecutionsInput(
            dataEndTimeBefore: self.dataEndTimeBefore,
            dataStartTimeAfter: self.dataStartTimeAfter,
            inferenceSchedulerName: self.inferenceSchedulerName,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

/// Paginate over `[ListInferenceSchedulersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListInferenceSchedulersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListInferenceSchedulersOutputResponse`
extension LookoutEquipmentClient {
    public func listInferenceSchedulersPaginated(input: ListInferenceSchedulersInput) -> ClientRuntime.PaginatorSequence<ListInferenceSchedulersInput, ListInferenceSchedulersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListInferenceSchedulersInput, ListInferenceSchedulersOutputResponse>(input: input, inputKey: \ListInferenceSchedulersInput.nextToken, outputKey: \ListInferenceSchedulersOutputResponse.nextToken, paginationFunction: self.listInferenceSchedulers(input:))
    }
}

extension ListInferenceSchedulersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInferenceSchedulersInput {
        return ListInferenceSchedulersInput(
            inferenceSchedulerNameBeginsWith: self.inferenceSchedulerNameBeginsWith,
            maxResults: self.maxResults,
            modelName: self.modelName,
            nextToken: token
        )}
}

/// Paginate over `[ListModelsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListModelsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListModelsOutputResponse`
extension LookoutEquipmentClient {
    public func listModelsPaginated(input: ListModelsInput) -> ClientRuntime.PaginatorSequence<ListModelsInput, ListModelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListModelsInput, ListModelsOutputResponse>(input: input, inputKey: \ListModelsInput.nextToken, outputKey: \ListModelsOutputResponse.nextToken, paginationFunction: self.listModels(input:))
    }
}

extension ListModelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListModelsInput {
        return ListModelsInput(
            datasetNameBeginsWith: self.datasetNameBeginsWith,
            maxResults: self.maxResults,
            modelNameBeginsWith: self.modelNameBeginsWith,
            nextToken: token,
            status: self.status
        )}
}
