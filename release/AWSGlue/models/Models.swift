// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Access to a resource was denied.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.Action: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arguments = "Arguments"
        case crawlerName = "CrawlerName"
        case jobName = "JobName"
        case notificationProperty = "NotificationProperty"
        case securityConfiguration = "SecurityConfiguration"
        case timeout = "Timeout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .arguments)
            for (dictKey0, genericmap0) in arguments {
                try argumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let crawlerName = crawlerName {
            try encodeContainer.encode(crawlerName, forKey: .crawlerName)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let notificationProperty = notificationProperty {
            try encodeContainer.encode(notificationProperty, forKey: .notificationProperty)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .arguments)
        var argumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in argumentsContainer {
                if let genericstring0 = genericstring0 {
                    argumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        arguments = argumentsDecoded0
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let crawlerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerName)
        crawlerName = crawlerNameDecoded
    }
}

extension GlueClientTypes {
    /// Defines an action to be initiated by a trigger.
    public struct Action: Swift.Equatable {
        /// The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself. You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling Glue APIs in Python](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that Glue consumes to set up your job, see the [Special Parameters Used by Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) topic in the developer guide.
        public var arguments: [Swift.String:Swift.String]?
        /// The name of the crawler to be used with this action.
        public var crawlerName: Swift.String?
        /// The name of a job to be run.
        public var jobName: Swift.String?
        /// Specifies configuration properties of a job run notification.
        public var notificationProperty: GlueClientTypes.NotificationProperty?
        /// The name of the SecurityConfiguration structure to be used with this action.
        public var securityConfiguration: Swift.String?
        /// The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
        public var timeout: Swift.Int?

        public init (
            arguments: [Swift.String:Swift.String]? = nil,
            crawlerName: Swift.String? = nil,
            jobName: Swift.String? = nil,
            notificationProperty: GlueClientTypes.NotificationProperty? = nil,
            securityConfiguration: Swift.String? = nil,
            timeout: Swift.Int? = nil
        )
        {
            self.arguments = arguments
            self.crawlerName = crawlerName
            self.jobName = jobName
            self.notificationProperty = notificationProperty
            self.securityConfiguration = securityConfiguration
            self.timeout = timeout
        }
    }

}

extension AlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource to be created or added already exists.
public struct AlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.BackfillError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case partitions = "Partitions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let partitions = partitions {
            var partitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitions)
            for backfillerroredpartitionslist0 in partitions {
                try partitionsContainer.encode(backfillerroredpartitionslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.BackfillErrorCode.self, forKey: .code)
        code = codeDecoded
        let partitionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionValueList?].self, forKey: .partitions)
        var partitionsDecoded0:[GlueClientTypes.PartitionValueList]? = nil
        if let partitionsContainer = partitionsContainer {
            partitionsDecoded0 = [GlueClientTypes.PartitionValueList]()
            for structure0 in partitionsContainer {
                if let structure0 = structure0 {
                    partitionsDecoded0?.append(structure0)
                }
            }
        }
        partitions = partitionsDecoded0
    }
}

extension GlueClientTypes {
    /// A list of errors that can occur when registering partition indexes for an existing table. These errors give the details about why an index registration failed and provide a limited number of partitions in the response, so that you can fix the partitions at fault and try registering the index again. The most common set of errors that can occur are categorized as follows:
    ///
    /// * EncryptedPartitionError: The partitions are encrypted.
    ///
    /// * InvalidPartitionTypeDataError: The partition value doesn't match the data type for that partition column.
    ///
    /// * MissingPartitionValueError: The partitions are encrypted.
    ///
    /// * UnsupportedPartitionCharacterError: Characters inside the partition value are not supported. For example: U+0000 , U+0001, U+0002.
    ///
    /// * InternalError: Any error which does not belong to other error codes.
    public struct BackfillError: Swift.Equatable {
        /// The error code for an error that occurred when registering partition indexes for an existing table.
        public var code: GlueClientTypes.BackfillErrorCode?
        /// A list of a limited number of partitions in the response.
        public var partitions: [GlueClientTypes.PartitionValueList]?

        public init (
            code: GlueClientTypes.BackfillErrorCode? = nil,
            partitions: [GlueClientTypes.PartitionValueList]? = nil
        )
        {
            self.code = code
            self.partitions = partitions
        }
    }

}

extension GlueClientTypes {
    public enum BackfillErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case encryptedPartitionError
        case internalError
        case invalidPartitionTypeDataError
        case missingPartitionValueError
        case unsupportedPartitionCharacterError
        case sdkUnknown(Swift.String)

        public static var allCases: [BackfillErrorCode] {
            return [
                .encryptedPartitionError,
                .internalError,
                .invalidPartitionTypeDataError,
                .missingPartitionValueError,
                .unsupportedPartitionCharacterError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .encryptedPartitionError: return "ENCRYPTED_PARTITION_ERROR"
            case .internalError: return "INTERNAL_ERROR"
            case .invalidPartitionTypeDataError: return "INVALID_PARTITION_TYPE_DATA_ERROR"
            case .missingPartitionValueError: return "MISSING_PARTITION_VALUE_ERROR"
            case .unsupportedPartitionCharacterError: return "UNSUPPORTED_PARTITION_CHARACTER_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BackfillErrorCode(rawValue: rawValue) ?? BackfillErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension BatchCreatePartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionInputList = "PartitionInputList"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionInputList = partitionInputList {
            var partitionInputListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionInputList)
            for partitioninputlist0 in partitionInputList {
                try partitionInputListContainer.encode(partitioninputlist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension BatchCreatePartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchCreatePartitionInput: Swift.Equatable {
    /// The ID of the catalog in which the partition is to be created. Currently, this should be the Amazon Web Services account ID.
    public var catalogId: Swift.String?
    /// The name of the metadata database in which the partition is to be created.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A list of PartitionInput structures that define the partitions to be created.
    /// This member is required.
    public var partitionInputList: [GlueClientTypes.PartitionInput]?
    /// The name of the metadata table in which the partition is to be created.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionInputList: [GlueClientTypes.PartitionInput]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.partitionInputList = partitionInputList
        self.tableName = tableName
    }
}

struct BatchCreatePartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionInputList: [GlueClientTypes.PartitionInput]?
}

extension BatchCreatePartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionInputList = "PartitionInputList"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionInputListContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionInput?].self, forKey: .partitionInputList)
        var partitionInputListDecoded0:[GlueClientTypes.PartitionInput]? = nil
        if let partitionInputListContainer = partitionInputListContainer {
            partitionInputListDecoded0 = [GlueClientTypes.PartitionInput]()
            for structure0 in partitionInputListContainer {
                if let structure0 = structure0 {
                    partitionInputListDecoded0?.append(structure0)
                }
            }
        }
        partitionInputList = partitionInputListDecoded0
    }
}

extension BatchCreatePartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchCreatePartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchCreatePartitionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchCreatePartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchCreatePartitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
        } else {
            self.errors = nil
        }
    }
}

public struct BatchCreatePartitionOutputResponse: Swift.Equatable {
    /// The errors encountered when trying to create the requested partitions.
    public var errors: [GlueClientTypes.PartitionError]?

    public init (
        errors: [GlueClientTypes.PartitionError]? = nil
    )
    {
        self.errors = errors
    }
}

struct BatchCreatePartitionOutputResponseBody: Swift.Equatable {
    let errors: [GlueClientTypes.PartitionError]?
}

extension BatchCreatePartitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionError?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.PartitionError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.PartitionError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension BatchDeleteConnectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case connectionNameList = "ConnectionNameList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let connectionNameList = connectionNameList {
            var connectionNameListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connectionNameList)
            for deleteconnectionnamelist0 in connectionNameList {
                try connectionNameListContainer.encode(deleteconnectionnamelist0)
            }
        }
    }
}

extension BatchDeleteConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDeleteConnectionInput: Swift.Equatable {
    /// The ID of the Data Catalog in which the connections reside. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// A list of names of the connections to delete.
    /// This member is required.
    public var connectionNameList: [Swift.String]?

    public init (
        catalogId: Swift.String? = nil,
        connectionNameList: [Swift.String]? = nil
    )
    {
        self.catalogId = catalogId
        self.connectionNameList = connectionNameList
    }
}

struct BatchDeleteConnectionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let connectionNameList: [Swift.String]?
}

extension BatchDeleteConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case connectionNameList = "ConnectionNameList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let connectionNameListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .connectionNameList)
        var connectionNameListDecoded0:[Swift.String]? = nil
        if let connectionNameListContainer = connectionNameListContainer {
            connectionNameListDecoded0 = [Swift.String]()
            for string0 in connectionNameListContainer {
                if let string0 = string0 {
                    connectionNameListDecoded0?.append(string0)
                }
            }
        }
        connectionNameList = connectionNameListDecoded0
    }
}

extension BatchDeleteConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeleteConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeleteConnectionOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDeleteConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.succeeded = output.succeeded
        } else {
            self.errors = nil
            self.succeeded = nil
        }
    }
}

public struct BatchDeleteConnectionOutputResponse: Swift.Equatable {
    /// A map of the names of connections that were not successfully deleted to error details.
    public var errors: [Swift.String:GlueClientTypes.ErrorDetail]?
    /// A list of names of the connection definitions that were successfully deleted.
    public var succeeded: [Swift.String]?

    public init (
        errors: [Swift.String:GlueClientTypes.ErrorDetail]? = nil,
        succeeded: [Swift.String]? = nil
    )
    {
        self.errors = errors
        self.succeeded = succeeded
    }
}

struct BatchDeleteConnectionOutputResponseBody: Swift.Equatable {
    let succeeded: [Swift.String]?
    let errors: [Swift.String:GlueClientTypes.ErrorDetail]?
}

extension BatchDeleteConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case succeeded = "Succeeded"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let succeededContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .succeeded)
        var succeededDecoded0:[Swift.String]? = nil
        if let succeededContainer = succeededContainer {
            succeededDecoded0 = [Swift.String]()
            for string0 in succeededContainer {
                if let string0 = string0 {
                    succeededDecoded0?.append(string0)
                }
            }
        }
        succeeded = succeededDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([Swift.String: GlueClientTypes.ErrorDetail?].self, forKey: .errors)
        var errorsDecoded0: [Swift.String:GlueClientTypes.ErrorDetail]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [Swift.String:GlueClientTypes.ErrorDetail]()
            for (key0, errordetail0) in errorsContainer {
                if let errordetail0 = errordetail0 {
                    errorsDecoded0?[key0] = errordetail0
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension BatchDeletePartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionsToDelete = "PartitionsToDelete"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionsToDelete = partitionsToDelete {
            var partitionsToDeleteContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionsToDelete)
            for batchdeletepartitionvaluelist0 in partitionsToDelete {
                try partitionsToDeleteContainer.encode(batchdeletepartitionvaluelist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension BatchDeletePartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDeletePartitionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partition to be deleted resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database in which the table in question resides.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A list of PartitionInput structures that define the partitions to be deleted.
    /// This member is required.
    public var partitionsToDelete: [GlueClientTypes.PartitionValueList]?
    /// The name of the table that contains the partitions to be deleted.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionsToDelete: [GlueClientTypes.PartitionValueList]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.partitionsToDelete = partitionsToDelete
        self.tableName = tableName
    }
}

struct BatchDeletePartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionsToDelete: [GlueClientTypes.PartitionValueList]?
}

extension BatchDeletePartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionsToDelete = "PartitionsToDelete"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionsToDeleteContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionValueList?].self, forKey: .partitionsToDelete)
        var partitionsToDeleteDecoded0:[GlueClientTypes.PartitionValueList]? = nil
        if let partitionsToDeleteContainer = partitionsToDeleteContainer {
            partitionsToDeleteDecoded0 = [GlueClientTypes.PartitionValueList]()
            for structure0 in partitionsToDeleteContainer {
                if let structure0 = structure0 {
                    partitionsToDeleteDecoded0?.append(structure0)
                }
            }
        }
        partitionsToDelete = partitionsToDeleteDecoded0
    }
}

extension BatchDeletePartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeletePartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeletePartitionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeletePartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDeletePartitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
        } else {
            self.errors = nil
        }
    }
}

public struct BatchDeletePartitionOutputResponse: Swift.Equatable {
    /// The errors encountered when trying to delete the requested partitions.
    public var errors: [GlueClientTypes.PartitionError]?

    public init (
        errors: [GlueClientTypes.PartitionError]? = nil
    )
    {
        self.errors = errors
    }
}

struct BatchDeletePartitionOutputResponseBody: Swift.Equatable {
    let errors: [GlueClientTypes.PartitionError]?
}

extension BatchDeletePartitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionError?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.PartitionError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.PartitionError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension BatchDeleteTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case tablesToDelete = "TablesToDelete"
        case transactionId = "TransactionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tablesToDelete = tablesToDelete {
            var tablesToDeleteContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tablesToDelete)
            for batchdeletetablenamelist0 in tablesToDelete {
                try tablesToDeleteContainer.encode(batchdeletetablenamelist0)
            }
        }
        if let transactionId = transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }
}

extension BatchDeleteTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDeleteTableInput: Swift.Equatable {
    /// The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database in which the tables to delete reside. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A list of the table to delete.
    /// This member is required.
    public var tablesToDelete: [Swift.String]?
    /// The transaction ID at which to delete the table contents.
    public var transactionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        tablesToDelete: [Swift.String]? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.tablesToDelete = tablesToDelete
        self.transactionId = transactionId
    }
}

struct BatchDeleteTableInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tablesToDelete: [Swift.String]?
    let transactionId: Swift.String?
}

extension BatchDeleteTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case tablesToDelete = "TablesToDelete"
        case transactionId = "TransactionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tablesToDeleteContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tablesToDelete)
        var tablesToDeleteDecoded0:[Swift.String]? = nil
        if let tablesToDeleteContainer = tablesToDeleteContainer {
            tablesToDeleteDecoded0 = [Swift.String]()
            for string0 in tablesToDeleteContainer {
                if let string0 = string0 {
                    tablesToDeleteDecoded0?.append(string0)
                }
            }
        }
        tablesToDelete = tablesToDeleteDecoded0
        let transactionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transactionId)
        transactionId = transactionIdDecoded
    }
}

extension BatchDeleteTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeleteTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeleteTableOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNotReadyException(ResourceNotReadyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDeleteTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
        } else {
            self.errors = nil
        }
    }
}

public struct BatchDeleteTableOutputResponse: Swift.Equatable {
    /// A list of errors encountered in attempting to delete the specified tables.
    public var errors: [GlueClientTypes.TableError]?

    public init (
        errors: [GlueClientTypes.TableError]? = nil
    )
    {
        self.errors = errors
    }
}

struct BatchDeleteTableOutputResponseBody: Swift.Equatable {
    let errors: [GlueClientTypes.TableError]?
}

extension BatchDeleteTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.TableError?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.TableError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.TableError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension BatchDeleteTableVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
        case versionIds = "VersionIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let versionIds = versionIds {
            var versionIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .versionIds)
            for batchdeletetableversionlist0 in versionIds {
                try versionIdsContainer.encode(batchdeletetableversionlist0)
            }
        }
    }
}

extension BatchDeleteTableVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDeleteTableVersionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the table. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var tableName: Swift.String?
    /// A list of the IDs of versions to be deleted. A VersionId is a string representation of an integer. Each version is incremented by 1.
    /// This member is required.
    public var versionIds: [Swift.String]?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        tableName: Swift.String? = nil,
        versionIds: [Swift.String]? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.tableName = tableName
        self.versionIds = versionIds
    }
}

struct BatchDeleteTableVersionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let versionIds: [Swift.String]?
}

extension BatchDeleteTableVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
        case versionIds = "VersionIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let versionIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .versionIds)
        var versionIdsDecoded0:[Swift.String]? = nil
        if let versionIdsContainer = versionIdsContainer {
            versionIdsDecoded0 = [Swift.String]()
            for string0 in versionIdsContainer {
                if let string0 = string0 {
                    versionIdsDecoded0?.append(string0)
                }
            }
        }
        versionIds = versionIdsDecoded0
    }
}

extension BatchDeleteTableVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeleteTableVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeleteTableVersionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteTableVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDeleteTableVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
        } else {
            self.errors = nil
        }
    }
}

public struct BatchDeleteTableVersionOutputResponse: Swift.Equatable {
    /// A list of errors encountered while trying to delete the specified table versions.
    public var errors: [GlueClientTypes.TableVersionError]?

    public init (
        errors: [GlueClientTypes.TableVersionError]? = nil
    )
    {
        self.errors = errors
    }
}

struct BatchDeleteTableVersionOutputResponseBody: Swift.Equatable {
    let errors: [GlueClientTypes.TableVersionError]?
}

extension BatchDeleteTableVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.TableVersionError?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.TableVersionError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.TableVersionError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension BatchGetBlueprintsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeBlueprint = "IncludeBlueprint"
        case includeParameterSpec = "IncludeParameterSpec"
        case names = "Names"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeBlueprint = includeBlueprint {
            try encodeContainer.encode(includeBlueprint, forKey: .includeBlueprint)
        }
        if let includeParameterSpec = includeParameterSpec {
            try encodeContainer.encode(includeParameterSpec, forKey: .includeParameterSpec)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for batchgetblueprintnames0 in names {
                try namesContainer.encode(batchgetblueprintnames0)
            }
        }
    }
}

extension BatchGetBlueprintsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchGetBlueprintsInput: Swift.Equatable {
    /// Specifies whether or not to include the blueprint in the response.
    public var includeBlueprint: Swift.Bool?
    /// Specifies whether or not to include the parameters, as a JSON string, for the blueprint in the response.
    public var includeParameterSpec: Swift.Bool?
    /// A list of blueprint names.
    /// This member is required.
    public var names: [Swift.String]?

    public init (
        includeBlueprint: Swift.Bool? = nil,
        includeParameterSpec: Swift.Bool? = nil,
        names: [Swift.String]? = nil
    )
    {
        self.includeBlueprint = includeBlueprint
        self.includeParameterSpec = includeParameterSpec
        self.names = names
    }
}

struct BatchGetBlueprintsInputBody: Swift.Equatable {
    let names: [Swift.String]?
    let includeBlueprint: Swift.Bool?
    let includeParameterSpec: Swift.Bool?
}

extension BatchGetBlueprintsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeBlueprint = "IncludeBlueprint"
        case includeParameterSpec = "IncludeParameterSpec"
        case names = "Names"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .names)
        var namesDecoded0:[Swift.String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [Swift.String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let includeBlueprintDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeBlueprint)
        includeBlueprint = includeBlueprintDecoded
        let includeParameterSpecDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeParameterSpec)
        includeParameterSpec = includeParameterSpecDecoded
    }
}

extension BatchGetBlueprintsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetBlueprintsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetBlueprintsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetBlueprintsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetBlueprintsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blueprints = output.blueprints
            self.missingBlueprints = output.missingBlueprints
        } else {
            self.blueprints = nil
            self.missingBlueprints = nil
        }
    }
}

public struct BatchGetBlueprintsOutputResponse: Swift.Equatable {
    /// Returns a list of blueprint as a Blueprints object.
    public var blueprints: [GlueClientTypes.Blueprint]?
    /// Returns a list of BlueprintNames that were not found.
    public var missingBlueprints: [Swift.String]?

    public init (
        blueprints: [GlueClientTypes.Blueprint]? = nil,
        missingBlueprints: [Swift.String]? = nil
    )
    {
        self.blueprints = blueprints
        self.missingBlueprints = missingBlueprints
    }
}

struct BatchGetBlueprintsOutputResponseBody: Swift.Equatable {
    let blueprints: [GlueClientTypes.Blueprint]?
    let missingBlueprints: [Swift.String]?
}

extension BatchGetBlueprintsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprints = "Blueprints"
        case missingBlueprints = "MissingBlueprints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Blueprint?].self, forKey: .blueprints)
        var blueprintsDecoded0:[GlueClientTypes.Blueprint]? = nil
        if let blueprintsContainer = blueprintsContainer {
            blueprintsDecoded0 = [GlueClientTypes.Blueprint]()
            for structure0 in blueprintsContainer {
                if let structure0 = structure0 {
                    blueprintsDecoded0?.append(structure0)
                }
            }
        }
        blueprints = blueprintsDecoded0
        let missingBlueprintsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .missingBlueprints)
        var missingBlueprintsDecoded0:[Swift.String]? = nil
        if let missingBlueprintsContainer = missingBlueprintsContainer {
            missingBlueprintsDecoded0 = [Swift.String]()
            for string0 in missingBlueprintsContainer {
                if let string0 = string0 {
                    missingBlueprintsDecoded0?.append(string0)
                }
            }
        }
        missingBlueprints = missingBlueprintsDecoded0
    }
}

extension BatchGetCrawlersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerNames = "CrawlerNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawlerNames = crawlerNames {
            var crawlerNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .crawlerNames)
            for crawlernamelist0 in crawlerNames {
                try crawlerNamesContainer.encode(crawlernamelist0)
            }
        }
    }
}

extension BatchGetCrawlersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchGetCrawlersInput: Swift.Equatable {
    /// A list of crawler names, which might be the names returned from the ListCrawlers operation.
    /// This member is required.
    public var crawlerNames: [Swift.String]?

    public init (
        crawlerNames: [Swift.String]? = nil
    )
    {
        self.crawlerNames = crawlerNames
    }
}

struct BatchGetCrawlersInputBody: Swift.Equatable {
    let crawlerNames: [Swift.String]?
}

extension BatchGetCrawlersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerNames = "CrawlerNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .crawlerNames)
        var crawlerNamesDecoded0:[Swift.String]? = nil
        if let crawlerNamesContainer = crawlerNamesContainer {
            crawlerNamesDecoded0 = [Swift.String]()
            for string0 in crawlerNamesContainer {
                if let string0 = string0 {
                    crawlerNamesDecoded0?.append(string0)
                }
            }
        }
        crawlerNames = crawlerNamesDecoded0
    }
}

extension BatchGetCrawlersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetCrawlersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetCrawlersOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetCrawlersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetCrawlersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crawlers = output.crawlers
            self.crawlersNotFound = output.crawlersNotFound
        } else {
            self.crawlers = nil
            self.crawlersNotFound = nil
        }
    }
}

public struct BatchGetCrawlersOutputResponse: Swift.Equatable {
    /// A list of crawler definitions.
    public var crawlers: [GlueClientTypes.Crawler]?
    /// A list of names of crawlers that were not found.
    public var crawlersNotFound: [Swift.String]?

    public init (
        crawlers: [GlueClientTypes.Crawler]? = nil,
        crawlersNotFound: [Swift.String]? = nil
    )
    {
        self.crawlers = crawlers
        self.crawlersNotFound = crawlersNotFound
    }
}

struct BatchGetCrawlersOutputResponseBody: Swift.Equatable {
    let crawlers: [GlueClientTypes.Crawler]?
    let crawlersNotFound: [Swift.String]?
}

extension BatchGetCrawlersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlers = "Crawlers"
        case crawlersNotFound = "CrawlersNotFound"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlersContainer = try containerValues.decodeIfPresent([GlueClientTypes.Crawler?].self, forKey: .crawlers)
        var crawlersDecoded0:[GlueClientTypes.Crawler]? = nil
        if let crawlersContainer = crawlersContainer {
            crawlersDecoded0 = [GlueClientTypes.Crawler]()
            for structure0 in crawlersContainer {
                if let structure0 = structure0 {
                    crawlersDecoded0?.append(structure0)
                }
            }
        }
        crawlers = crawlersDecoded0
        let crawlersNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .crawlersNotFound)
        var crawlersNotFoundDecoded0:[Swift.String]? = nil
        if let crawlersNotFoundContainer = crawlersNotFoundContainer {
            crawlersNotFoundDecoded0 = [Swift.String]()
            for string0 in crawlersNotFoundContainer {
                if let string0 = string0 {
                    crawlersNotFoundDecoded0?.append(string0)
                }
            }
        }
        crawlersNotFound = crawlersNotFoundDecoded0
    }
}

extension BatchGetDevEndpointsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devEndpointNames = "DevEndpointNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let devEndpointNames = devEndpointNames {
            var devEndpointNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .devEndpointNames)
            for devendpointnames0 in devEndpointNames {
                try devEndpointNamesContainer.encode(devendpointnames0)
            }
        }
    }
}

extension BatchGetDevEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchGetDevEndpointsInput: Swift.Equatable {
    /// The list of DevEndpoint names, which might be the names returned from the ListDevEndpoint operation.
    /// This member is required.
    public var devEndpointNames: [Swift.String]?

    public init (
        devEndpointNames: [Swift.String]? = nil
    )
    {
        self.devEndpointNames = devEndpointNames
    }
}

struct BatchGetDevEndpointsInputBody: Swift.Equatable {
    let devEndpointNames: [Swift.String]?
}

extension BatchGetDevEndpointsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devEndpointNames = "DevEndpointNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let devEndpointNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .devEndpointNames)
        var devEndpointNamesDecoded0:[Swift.String]? = nil
        if let devEndpointNamesContainer = devEndpointNamesContainer {
            devEndpointNamesDecoded0 = [Swift.String]()
            for string0 in devEndpointNamesContainer {
                if let string0 = string0 {
                    devEndpointNamesDecoded0?.append(string0)
                }
            }
        }
        devEndpointNames = devEndpointNamesDecoded0
    }
}

extension BatchGetDevEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDevEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetDevEndpointsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDevEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetDevEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.devEndpoints = output.devEndpoints
            self.devEndpointsNotFound = output.devEndpointsNotFound
        } else {
            self.devEndpoints = nil
            self.devEndpointsNotFound = nil
        }
    }
}

public struct BatchGetDevEndpointsOutputResponse: Swift.Equatable {
    /// A list of DevEndpoint definitions.
    public var devEndpoints: [GlueClientTypes.DevEndpoint]?
    /// A list of DevEndpoints not found.
    public var devEndpointsNotFound: [Swift.String]?

    public init (
        devEndpoints: [GlueClientTypes.DevEndpoint]? = nil,
        devEndpointsNotFound: [Swift.String]? = nil
    )
    {
        self.devEndpoints = devEndpoints
        self.devEndpointsNotFound = devEndpointsNotFound
    }
}

struct BatchGetDevEndpointsOutputResponseBody: Swift.Equatable {
    let devEndpoints: [GlueClientTypes.DevEndpoint]?
    let devEndpointsNotFound: [Swift.String]?
}

extension BatchGetDevEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devEndpoints = "DevEndpoints"
        case devEndpointsNotFound = "DevEndpointsNotFound"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let devEndpointsContainer = try containerValues.decodeIfPresent([GlueClientTypes.DevEndpoint?].self, forKey: .devEndpoints)
        var devEndpointsDecoded0:[GlueClientTypes.DevEndpoint]? = nil
        if let devEndpointsContainer = devEndpointsContainer {
            devEndpointsDecoded0 = [GlueClientTypes.DevEndpoint]()
            for structure0 in devEndpointsContainer {
                if let structure0 = structure0 {
                    devEndpointsDecoded0?.append(structure0)
                }
            }
        }
        devEndpoints = devEndpointsDecoded0
        let devEndpointsNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .devEndpointsNotFound)
        var devEndpointsNotFoundDecoded0:[Swift.String]? = nil
        if let devEndpointsNotFoundContainer = devEndpointsNotFoundContainer {
            devEndpointsNotFoundDecoded0 = [Swift.String]()
            for string0 in devEndpointsNotFoundContainer {
                if let string0 = string0 {
                    devEndpointsNotFoundDecoded0?.append(string0)
                }
            }
        }
        devEndpointsNotFound = devEndpointsNotFoundDecoded0
    }
}

extension BatchGetJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobNames = "JobNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobNames = jobNames {
            var jobNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobNames)
            for jobnamelist0 in jobNames {
                try jobNamesContainer.encode(jobnamelist0)
            }
        }
    }
}

extension BatchGetJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchGetJobsInput: Swift.Equatable {
    /// A list of job names, which might be the names returned from the ListJobs operation.
    /// This member is required.
    public var jobNames: [Swift.String]?

    public init (
        jobNames: [Swift.String]? = nil
    )
    {
        self.jobNames = jobNames
    }
}

struct BatchGetJobsInputBody: Swift.Equatable {
    let jobNames: [Swift.String]?
}

extension BatchGetJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobNames = "JobNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobNames)
        var jobNamesDecoded0:[Swift.String]? = nil
        if let jobNamesContainer = jobNamesContainer {
            jobNamesDecoded0 = [Swift.String]()
            for string0 in jobNamesContainer {
                if let string0 = string0 {
                    jobNamesDecoded0?.append(string0)
                }
            }
        }
        jobNames = jobNamesDecoded0
    }
}

extension BatchGetJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobs = output.jobs
            self.jobsNotFound = output.jobsNotFound
        } else {
            self.jobs = nil
            self.jobsNotFound = nil
        }
    }
}

public struct BatchGetJobsOutputResponse: Swift.Equatable {
    /// A list of job definitions.
    public var jobs: [GlueClientTypes.Job]?
    /// A list of names of jobs not found.
    public var jobsNotFound: [Swift.String]?

    public init (
        jobs: [GlueClientTypes.Job]? = nil,
        jobsNotFound: [Swift.String]? = nil
    )
    {
        self.jobs = jobs
        self.jobsNotFound = jobsNotFound
    }
}

struct BatchGetJobsOutputResponseBody: Swift.Equatable {
    let jobs: [GlueClientTypes.Job]?
    let jobsNotFound: [Swift.String]?
}

extension BatchGetJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs = "Jobs"
        case jobsNotFound = "JobsNotFound"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Job?].self, forKey: .jobs)
        var jobsDecoded0:[GlueClientTypes.Job]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [GlueClientTypes.Job]()
            for structure0 in jobsContainer {
                if let structure0 = structure0 {
                    jobsDecoded0?.append(structure0)
                }
            }
        }
        jobs = jobsDecoded0
        let jobsNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobsNotFound)
        var jobsNotFoundDecoded0:[Swift.String]? = nil
        if let jobsNotFoundContainer = jobsNotFoundContainer {
            jobsNotFoundDecoded0 = [Swift.String]()
            for string0 in jobsNotFoundContainer {
                if let string0 = string0 {
                    jobsNotFoundDecoded0?.append(string0)
                }
            }
        }
        jobsNotFound = jobsNotFoundDecoded0
    }
}

extension BatchGetPartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionsToGet = "PartitionsToGet"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionsToGet = partitionsToGet {
            var partitionsToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionsToGet)
            for batchgetpartitionvaluelist0 in partitionsToGet {
                try partitionsToGetContainer.encode(batchgetpartitionvaluelist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension BatchGetPartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchGetPartitionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database where the partitions reside.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A list of partition values identifying the partitions to retrieve.
    /// This member is required.
    public var partitionsToGet: [GlueClientTypes.PartitionValueList]?
    /// The name of the partitions' table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionsToGet: [GlueClientTypes.PartitionValueList]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.partitionsToGet = partitionsToGet
        self.tableName = tableName
    }
}

struct BatchGetPartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionsToGet: [GlueClientTypes.PartitionValueList]?
}

extension BatchGetPartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionsToGet = "PartitionsToGet"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionsToGetContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionValueList?].self, forKey: .partitionsToGet)
        var partitionsToGetDecoded0:[GlueClientTypes.PartitionValueList]? = nil
        if let partitionsToGetContainer = partitionsToGetContainer {
            partitionsToGetDecoded0 = [GlueClientTypes.PartitionValueList]()
            for structure0 in partitionsToGetContainer {
                if let structure0 = structure0 {
                    partitionsToGetDecoded0?.append(structure0)
                }
            }
        }
        partitionsToGet = partitionsToGetDecoded0
    }
}

extension BatchGetPartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetPartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStateException" : self = .invalidStateException(try InvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetPartitionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case invalidStateException(InvalidStateException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetPartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetPartitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.partitions = output.partitions
            self.unprocessedKeys = output.unprocessedKeys
        } else {
            self.partitions = nil
            self.unprocessedKeys = nil
        }
    }
}

public struct BatchGetPartitionOutputResponse: Swift.Equatable {
    /// A list of the requested partitions.
    public var partitions: [GlueClientTypes.Partition]?
    /// A list of the partition values in the request for which partitions were not returned.
    public var unprocessedKeys: [GlueClientTypes.PartitionValueList]?

    public init (
        partitions: [GlueClientTypes.Partition]? = nil,
        unprocessedKeys: [GlueClientTypes.PartitionValueList]? = nil
    )
    {
        self.partitions = partitions
        self.unprocessedKeys = unprocessedKeys
    }
}

struct BatchGetPartitionOutputResponseBody: Swift.Equatable {
    let partitions: [GlueClientTypes.Partition]?
    let unprocessedKeys: [GlueClientTypes.PartitionValueList]?
}

extension BatchGetPartitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partitions = "Partitions"
        case unprocessedKeys = "UnprocessedKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Partition?].self, forKey: .partitions)
        var partitionsDecoded0:[GlueClientTypes.Partition]? = nil
        if let partitionsContainer = partitionsContainer {
            partitionsDecoded0 = [GlueClientTypes.Partition]()
            for structure0 in partitionsContainer {
                if let structure0 = structure0 {
                    partitionsDecoded0?.append(structure0)
                }
            }
        }
        partitions = partitionsDecoded0
        let unprocessedKeysContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionValueList?].self, forKey: .unprocessedKeys)
        var unprocessedKeysDecoded0:[GlueClientTypes.PartitionValueList]? = nil
        if let unprocessedKeysContainer = unprocessedKeysContainer {
            unprocessedKeysDecoded0 = [GlueClientTypes.PartitionValueList]()
            for structure0 in unprocessedKeysContainer {
                if let structure0 = structure0 {
                    unprocessedKeysDecoded0?.append(structure0)
                }
            }
        }
        unprocessedKeys = unprocessedKeysDecoded0
    }
}

extension BatchGetTriggersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case triggerNames = "TriggerNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let triggerNames = triggerNames {
            var triggerNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerNames)
            for triggernamelist0 in triggerNames {
                try triggerNamesContainer.encode(triggernamelist0)
            }
        }
    }
}

extension BatchGetTriggersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchGetTriggersInput: Swift.Equatable {
    /// A list of trigger names, which may be the names returned from the ListTriggers operation.
    /// This member is required.
    public var triggerNames: [Swift.String]?

    public init (
        triggerNames: [Swift.String]? = nil
    )
    {
        self.triggerNames = triggerNames
    }
}

struct BatchGetTriggersInputBody: Swift.Equatable {
    let triggerNames: [Swift.String]?
}

extension BatchGetTriggersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case triggerNames = "TriggerNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .triggerNames)
        var triggerNamesDecoded0:[Swift.String]? = nil
        if let triggerNamesContainer = triggerNamesContainer {
            triggerNamesDecoded0 = [Swift.String]()
            for string0 in triggerNamesContainer {
                if let string0 = string0 {
                    triggerNamesDecoded0?.append(string0)
                }
            }
        }
        triggerNames = triggerNamesDecoded0
    }
}

extension BatchGetTriggersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetTriggersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetTriggersOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetTriggersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetTriggersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.triggers = output.triggers
            self.triggersNotFound = output.triggersNotFound
        } else {
            self.triggers = nil
            self.triggersNotFound = nil
        }
    }
}

public struct BatchGetTriggersOutputResponse: Swift.Equatable {
    /// A list of trigger definitions.
    public var triggers: [GlueClientTypes.Trigger]?
    /// A list of names of triggers not found.
    public var triggersNotFound: [Swift.String]?

    public init (
        triggers: [GlueClientTypes.Trigger]? = nil,
        triggersNotFound: [Swift.String]? = nil
    )
    {
        self.triggers = triggers
        self.triggersNotFound = triggersNotFound
    }
}

struct BatchGetTriggersOutputResponseBody: Swift.Equatable {
    let triggers: [GlueClientTypes.Trigger]?
    let triggersNotFound: [Swift.String]?
}

extension BatchGetTriggersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case triggers = "Triggers"
        case triggersNotFound = "TriggersNotFound"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggersContainer = try containerValues.decodeIfPresent([GlueClientTypes.Trigger?].self, forKey: .triggers)
        var triggersDecoded0:[GlueClientTypes.Trigger]? = nil
        if let triggersContainer = triggersContainer {
            triggersDecoded0 = [GlueClientTypes.Trigger]()
            for structure0 in triggersContainer {
                if let structure0 = structure0 {
                    triggersDecoded0?.append(structure0)
                }
            }
        }
        triggers = triggersDecoded0
        let triggersNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .triggersNotFound)
        var triggersNotFoundDecoded0:[Swift.String]? = nil
        if let triggersNotFoundContainer = triggersNotFoundContainer {
            triggersNotFoundDecoded0 = [Swift.String]()
            for string0 in triggersNotFoundContainer {
                if let string0 = string0 {
                    triggersNotFoundDecoded0?.append(string0)
                }
            }
        }
        triggersNotFound = triggersNotFoundDecoded0
    }
}

extension BatchGetWorkflowsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeGraph = "IncludeGraph"
        case names = "Names"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeGraph = includeGraph {
            try encodeContainer.encode(includeGraph, forKey: .includeGraph)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for workflownames0 in names {
                try namesContainer.encode(workflownames0)
            }
        }
    }
}

extension BatchGetWorkflowsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchGetWorkflowsInput: Swift.Equatable {
    /// Specifies whether to include a graph when returning the workflow resource metadata.
    public var includeGraph: Swift.Bool?
    /// A list of workflow names, which may be the names returned from the ListWorkflows operation.
    /// This member is required.
    public var names: [Swift.String]?

    public init (
        includeGraph: Swift.Bool? = nil,
        names: [Swift.String]? = nil
    )
    {
        self.includeGraph = includeGraph
        self.names = names
    }
}

struct BatchGetWorkflowsInputBody: Swift.Equatable {
    let names: [Swift.String]?
    let includeGraph: Swift.Bool?
}

extension BatchGetWorkflowsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeGraph = "IncludeGraph"
        case names = "Names"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .names)
        var namesDecoded0:[Swift.String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [Swift.String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let includeGraphDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeGraph)
        includeGraph = includeGraphDecoded
    }
}

extension BatchGetWorkflowsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetWorkflowsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetWorkflowsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetWorkflowsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetWorkflowsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.missingWorkflows = output.missingWorkflows
            self.workflows = output.workflows
        } else {
            self.missingWorkflows = nil
            self.workflows = nil
        }
    }
}

public struct BatchGetWorkflowsOutputResponse: Swift.Equatable {
    /// A list of names of workflows not found.
    public var missingWorkflows: [Swift.String]?
    /// A list of workflow resource metadata.
    public var workflows: [GlueClientTypes.Workflow]?

    public init (
        missingWorkflows: [Swift.String]? = nil,
        workflows: [GlueClientTypes.Workflow]? = nil
    )
    {
        self.missingWorkflows = missingWorkflows
        self.workflows = workflows
    }
}

struct BatchGetWorkflowsOutputResponseBody: Swift.Equatable {
    let workflows: [GlueClientTypes.Workflow]?
    let missingWorkflows: [Swift.String]?
}

extension BatchGetWorkflowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case missingWorkflows = "MissingWorkflows"
        case workflows = "Workflows"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Workflow?].self, forKey: .workflows)
        var workflowsDecoded0:[GlueClientTypes.Workflow]? = nil
        if let workflowsContainer = workflowsContainer {
            workflowsDecoded0 = [GlueClientTypes.Workflow]()
            for structure0 in workflowsContainer {
                if let structure0 = structure0 {
                    workflowsDecoded0?.append(structure0)
                }
            }
        }
        workflows = workflowsDecoded0
        let missingWorkflowsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .missingWorkflows)
        var missingWorkflowsDecoded0:[Swift.String]? = nil
        if let missingWorkflowsContainer = missingWorkflowsContainer {
            missingWorkflowsDecoded0 = [Swift.String]()
            for string0 in missingWorkflowsContainer {
                if let string0 = string0 {
                    missingWorkflowsDecoded0?.append(string0)
                }
            }
        }
        missingWorkflows = missingWorkflowsDecoded0
    }
}

extension GlueClientTypes.BatchStopJobRunError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDetail = "ErrorDetail"
        case jobName = "JobName"
        case jobRunId = "JobRunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorDetail = errorDetail {
            try encodeContainer.encode(errorDetail, forKey: .errorDetail)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobRunId = jobRunId {
            try encodeContainer.encode(jobRunId, forKey: .jobRunId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRunId)
        jobRunId = jobRunIdDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ErrorDetail.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
    }
}

extension GlueClientTypes {
    /// Records an error that occurred when attempting to stop a specified job run.
    public struct BatchStopJobRunError: Swift.Equatable {
        /// Specifies details about the error that was encountered.
        public var errorDetail: GlueClientTypes.ErrorDetail?
        /// The name of the job definition that is used in the job run in question.
        public var jobName: Swift.String?
        /// The JobRunId of the job run in question.
        public var jobRunId: Swift.String?

        public init (
            errorDetail: GlueClientTypes.ErrorDetail? = nil,
            jobName: Swift.String? = nil,
            jobRunId: Swift.String? = nil
        )
        {
            self.errorDetail = errorDetail
            self.jobName = jobName
            self.jobRunId = jobRunId
        }
    }

}

extension BatchStopJobRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobRunIds = "JobRunIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobRunIds = jobRunIds {
            var jobRunIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobRunIds)
            for batchstopjobrunjobrunidlist0 in jobRunIds {
                try jobRunIdsContainer.encode(batchstopjobrunjobrunidlist0)
            }
        }
    }
}

extension BatchStopJobRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchStopJobRunInput: Swift.Equatable {
    /// The name of the job definition for which to stop job runs.
    /// This member is required.
    public var jobName: Swift.String?
    /// A list of the JobRunIds that should be stopped for that job definition.
    /// This member is required.
    public var jobRunIds: [Swift.String]?

    public init (
        jobName: Swift.String? = nil,
        jobRunIds: [Swift.String]? = nil
    )
    {
        self.jobName = jobName
        self.jobRunIds = jobRunIds
    }
}

struct BatchStopJobRunInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let jobRunIds: [Swift.String]?
}

extension BatchStopJobRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobRunIds = "JobRunIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobRunIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobRunIds)
        var jobRunIdsDecoded0:[Swift.String]? = nil
        if let jobRunIdsContainer = jobRunIdsContainer {
            jobRunIdsDecoded0 = [Swift.String]()
            for string0 in jobRunIdsContainer {
                if let string0 = string0 {
                    jobRunIdsDecoded0?.append(string0)
                }
            }
        }
        jobRunIds = jobRunIdsDecoded0
    }
}

extension BatchStopJobRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchStopJobRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchStopJobRunOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchStopJobRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchStopJobRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.successfulSubmissions = output.successfulSubmissions
        } else {
            self.errors = nil
            self.successfulSubmissions = nil
        }
    }
}

public struct BatchStopJobRunOutputResponse: Swift.Equatable {
    /// A list of the errors that were encountered in trying to stop JobRuns, including the JobRunId for which each error was encountered and details about the error.
    public var errors: [GlueClientTypes.BatchStopJobRunError]?
    /// A list of the JobRuns that were successfully submitted for stopping.
    public var successfulSubmissions: [GlueClientTypes.BatchStopJobRunSuccessfulSubmission]?

    public init (
        errors: [GlueClientTypes.BatchStopJobRunError]? = nil,
        successfulSubmissions: [GlueClientTypes.BatchStopJobRunSuccessfulSubmission]? = nil
    )
    {
        self.errors = errors
        self.successfulSubmissions = successfulSubmissions
    }
}

struct BatchStopJobRunOutputResponseBody: Swift.Equatable {
    let successfulSubmissions: [GlueClientTypes.BatchStopJobRunSuccessfulSubmission]?
    let errors: [GlueClientTypes.BatchStopJobRunError]?
}

extension BatchStopJobRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case successfulSubmissions = "SuccessfulSubmissions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successfulSubmissionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.BatchStopJobRunSuccessfulSubmission?].self, forKey: .successfulSubmissions)
        var successfulSubmissionsDecoded0:[GlueClientTypes.BatchStopJobRunSuccessfulSubmission]? = nil
        if let successfulSubmissionsContainer = successfulSubmissionsContainer {
            successfulSubmissionsDecoded0 = [GlueClientTypes.BatchStopJobRunSuccessfulSubmission]()
            for structure0 in successfulSubmissionsContainer {
                if let structure0 = structure0 {
                    successfulSubmissionsDecoded0?.append(structure0)
                }
            }
        }
        successfulSubmissions = successfulSubmissionsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.BatchStopJobRunError?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.BatchStopJobRunError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.BatchStopJobRunError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension GlueClientTypes.BatchStopJobRunSuccessfulSubmission: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobRunId = "JobRunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobRunId = jobRunId {
            try encodeContainer.encode(jobRunId, forKey: .jobRunId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRunId)
        jobRunId = jobRunIdDecoded
    }
}

extension GlueClientTypes {
    /// Records a successful request to stop a specified JobRun.
    public struct BatchStopJobRunSuccessfulSubmission: Swift.Equatable {
        /// The name of the job definition used in the job run that was stopped.
        public var jobName: Swift.String?
        /// The JobRunId of the job run that was stopped.
        public var jobRunId: Swift.String?

        public init (
            jobName: Swift.String? = nil,
            jobRunId: Swift.String? = nil
        )
        {
            self.jobName = jobName
            self.jobRunId = jobRunId
        }
    }

}

extension GlueClientTypes.BatchUpdatePartitionFailureEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDetail = "ErrorDetail"
        case partitionValueList = "PartitionValueList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorDetail = errorDetail {
            try encodeContainer.encode(errorDetail, forKey: .errorDetail)
        }
        if let partitionValueList = partitionValueList {
            var partitionValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValueList)
            for boundedpartitionvaluelist0 in partitionValueList {
                try partitionValueListContainer.encode(boundedpartitionvaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionValueListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValueList)
        var partitionValueListDecoded0:[Swift.String]? = nil
        if let partitionValueListContainer = partitionValueListContainer {
            partitionValueListDecoded0 = [Swift.String]()
            for string0 in partitionValueListContainer {
                if let string0 = string0 {
                    partitionValueListDecoded0?.append(string0)
                }
            }
        }
        partitionValueList = partitionValueListDecoded0
        let errorDetailDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ErrorDetail.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
    }
}

extension GlueClientTypes {
    /// Contains information about a batch update partition error.
    public struct BatchUpdatePartitionFailureEntry: Swift.Equatable {
        /// The details about the batch update partition error.
        public var errorDetail: GlueClientTypes.ErrorDetail?
        /// A list of values defining the partitions.
        public var partitionValueList: [Swift.String]?

        public init (
            errorDetail: GlueClientTypes.ErrorDetail? = nil,
            partitionValueList: [Swift.String]? = nil
        )
        {
            self.errorDetail = errorDetail
            self.partitionValueList = partitionValueList
        }
    }

}

extension BatchUpdatePartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case entries = "Entries"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let entries = entries {
            var entriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entries)
            for batchupdatepartitionrequestentrylist0 in entries {
                try entriesContainer.encode(batchupdatepartitionrequestentrylist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension BatchUpdatePartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchUpdatePartitionInput: Swift.Equatable {
    /// The ID of the catalog in which the partition is to be updated. Currently, this should be the Amazon Web Services account ID.
    public var catalogId: Swift.String?
    /// The name of the metadata database in which the partition is to be updated.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A list of up to 100 BatchUpdatePartitionRequestEntry objects to update.
    /// This member is required.
    public var entries: [GlueClientTypes.BatchUpdatePartitionRequestEntry]?
    /// The name of the metadata table in which the partition is to be updated.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        entries: [GlueClientTypes.BatchUpdatePartitionRequestEntry]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.entries = entries
        self.tableName = tableName
    }
}

struct BatchUpdatePartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let entries: [GlueClientTypes.BatchUpdatePartitionRequestEntry]?
}

extension BatchUpdatePartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case entries = "Entries"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let entriesContainer = try containerValues.decodeIfPresent([GlueClientTypes.BatchUpdatePartitionRequestEntry?].self, forKey: .entries)
        var entriesDecoded0:[GlueClientTypes.BatchUpdatePartitionRequestEntry]? = nil
        if let entriesContainer = entriesContainer {
            entriesDecoded0 = [GlueClientTypes.BatchUpdatePartitionRequestEntry]()
            for structure0 in entriesContainer {
                if let structure0 = structure0 {
                    entriesDecoded0?.append(structure0)
                }
            }
        }
        entries = entriesDecoded0
    }
}

extension BatchUpdatePartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchUpdatePartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchUpdatePartitionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchUpdatePartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchUpdatePartitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
        } else {
            self.errors = nil
        }
    }
}

public struct BatchUpdatePartitionOutputResponse: Swift.Equatable {
    /// The errors encountered when trying to update the requested partitions. A list of BatchUpdatePartitionFailureEntry objects.
    public var errors: [GlueClientTypes.BatchUpdatePartitionFailureEntry]?

    public init (
        errors: [GlueClientTypes.BatchUpdatePartitionFailureEntry]? = nil
    )
    {
        self.errors = errors
    }
}

struct BatchUpdatePartitionOutputResponseBody: Swift.Equatable {
    let errors: [GlueClientTypes.BatchUpdatePartitionFailureEntry]?
}

extension BatchUpdatePartitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.BatchUpdatePartitionFailureEntry?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.BatchUpdatePartitionFailureEntry]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.BatchUpdatePartitionFailureEntry]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension GlueClientTypes.BatchUpdatePartitionRequestEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partitionInput = "PartitionInput"
        case partitionValueList = "PartitionValueList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let partitionInput = partitionInput {
            try encodeContainer.encode(partitionInput, forKey: .partitionInput)
        }
        if let partitionValueList = partitionValueList {
            var partitionValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValueList)
            for boundedpartitionvaluelist0 in partitionValueList {
                try partitionValueListContainer.encode(boundedpartitionvaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionValueListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValueList)
        var partitionValueListDecoded0:[Swift.String]? = nil
        if let partitionValueListContainer = partitionValueListContainer {
            partitionValueListDecoded0 = [Swift.String]()
            for string0 in partitionValueListContainer {
                if let string0 = string0 {
                    partitionValueListDecoded0?.append(string0)
                }
            }
        }
        partitionValueList = partitionValueListDecoded0
        let partitionInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PartitionInput.self, forKey: .partitionInput)
        partitionInput = partitionInputDecoded
    }
}

extension GlueClientTypes {
    /// A structure that contains the values and structure used to update a partition.
    public struct BatchUpdatePartitionRequestEntry: Swift.Equatable {
        /// The structure used to update a partition.
        /// This member is required.
        public var partitionInput: GlueClientTypes.PartitionInput?
        /// A list of values defining the partitions.
        /// This member is required.
        public var partitionValueList: [Swift.String]?

        public init (
            partitionInput: GlueClientTypes.PartitionInput? = nil,
            partitionValueList: [Swift.String]? = nil
        )
        {
            self.partitionInput = partitionInput
            self.partitionValueList = partitionValueList
        }
    }

}

extension GlueClientTypes.BinaryColumnStatisticsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case averageLength = "AverageLength"
        case maximumLength = "MaximumLength"
        case numberOfNulls = "NumberOfNulls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if averageLength != 0.0 {
            try encodeContainer.encode(averageLength, forKey: .averageLength)
        }
        if maximumLength != 0 {
            try encodeContainer.encode(maximumLength, forKey: .maximumLength)
        }
        if numberOfNulls != 0 {
            try encodeContainer.encode(numberOfNulls, forKey: .numberOfNulls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumLengthDecoded = try containerValues.decode(Swift.Int.self, forKey: .maximumLength)
        maximumLength = maximumLengthDecoded
        let averageLengthDecoded = try containerValues.decode(Swift.Double.self, forKey: .averageLength)
        averageLength = averageLengthDecoded
        let numberOfNullsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNulls)
        numberOfNulls = numberOfNullsDecoded
    }
}

extension GlueClientTypes {
    /// Defines column statistics supported for bit sequence data values.
    public struct BinaryColumnStatisticsData: Swift.Equatable {
        /// The average bit sequence length in the column.
        /// This member is required.
        public var averageLength: Swift.Double
        /// The size of the longest bit sequence in the column.
        /// This member is required.
        public var maximumLength: Swift.Int
        /// The number of null values in the column.
        /// This member is required.
        public var numberOfNulls: Swift.Int

        public init (
            averageLength: Swift.Double = 0.0,
            maximumLength: Swift.Int = 0,
            numberOfNulls: Swift.Int = 0
        )
        {
            self.averageLength = averageLength
            self.maximumLength = maximumLength
            self.numberOfNulls = numberOfNulls
        }
    }

}

extension GlueClientTypes.Blueprint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintLocation = "BlueprintLocation"
        case blueprintServiceLocation = "BlueprintServiceLocation"
        case createdOn = "CreatedOn"
        case description = "Description"
        case errorMessage = "ErrorMessage"
        case lastActiveDefinition = "LastActiveDefinition"
        case lastModifiedOn = "LastModifiedOn"
        case name = "Name"
        case parameterSpec = "ParameterSpec"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintLocation = blueprintLocation {
            try encodeContainer.encode(blueprintLocation, forKey: .blueprintLocation)
        }
        if let blueprintServiceLocation = blueprintServiceLocation {
            try encodeContainer.encode(blueprintServiceLocation, forKey: .blueprintServiceLocation)
        }
        if let createdOn = createdOn {
            try encodeContainer.encode(createdOn.timeIntervalSince1970, forKey: .createdOn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let lastActiveDefinition = lastActiveDefinition {
            try encodeContainer.encode(lastActiveDefinition, forKey: .lastActiveDefinition)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameterSpec = parameterSpec {
            try encodeContainer.encode(parameterSpec, forKey: .parameterSpec)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let parameterSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterSpec)
        parameterSpec = parameterSpecDecoded
        let blueprintLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintLocation)
        blueprintLocation = blueprintLocationDecoded
        let blueprintServiceLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintServiceLocation)
        blueprintServiceLocation = blueprintServiceLocationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.BlueprintStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let lastActiveDefinitionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LastActiveDefinition.self, forKey: .lastActiveDefinition)
        lastActiveDefinition = lastActiveDefinitionDecoded
    }
}

extension GlueClientTypes {
    /// The details of a blueprint.
    public struct Blueprint: Swift.Equatable {
        /// Specifies the path in Amazon S3 where the blueprint is published.
        public var blueprintLocation: Swift.String?
        /// Specifies a path in Amazon S3 where the blueprint is copied when you call CreateBlueprint/UpdateBlueprint to register the blueprint in Glue.
        public var blueprintServiceLocation: Swift.String?
        /// The date and time the blueprint was registered.
        public var createdOn: ClientRuntime.Date?
        /// The description of the blueprint.
        public var description: Swift.String?
        /// An error message.
        public var errorMessage: Swift.String?
        /// When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.
        public var lastActiveDefinition: GlueClientTypes.LastActiveDefinition?
        /// The date and time the blueprint was last modified.
        public var lastModifiedOn: ClientRuntime.Date?
        /// The name of the blueprint.
        public var name: Swift.String?
        /// A JSON string that indicates the list of parameter specifications for the blueprint.
        public var parameterSpec: Swift.String?
        /// The status of the blueprint registration.
        ///
        /// * Creating — The blueprint registration is in progress.
        ///
        /// * Active — The blueprint has been successfully registered.
        ///
        /// * Updating — An update to the blueprint registration is in progress.
        ///
        /// * Failed — The blueprint registration failed.
        public var status: GlueClientTypes.BlueprintStatus?

        public init (
            blueprintLocation: Swift.String? = nil,
            blueprintServiceLocation: Swift.String? = nil,
            createdOn: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            lastActiveDefinition: GlueClientTypes.LastActiveDefinition? = nil,
            lastModifiedOn: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            parameterSpec: Swift.String? = nil,
            status: GlueClientTypes.BlueprintStatus? = nil
        )
        {
            self.blueprintLocation = blueprintLocation
            self.blueprintServiceLocation = blueprintServiceLocation
            self.createdOn = createdOn
            self.description = description
            self.errorMessage = errorMessage
            self.lastActiveDefinition = lastActiveDefinition
            self.lastModifiedOn = lastModifiedOn
            self.name = name
            self.parameterSpec = parameterSpec
            self.status = status
        }
    }

}

extension GlueClientTypes.BlueprintDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintName = "BlueprintName"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintName = blueprintName {
            try encodeContainer.encode(blueprintName, forKey: .blueprintName)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintName)
        blueprintName = blueprintNameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension GlueClientTypes {
    /// The details of a blueprint.
    public struct BlueprintDetails: Swift.Equatable {
        /// The name of the blueprint.
        public var blueprintName: Swift.String?
        /// The run ID for this blueprint.
        public var runId: Swift.String?

        public init (
            blueprintName: Swift.String? = nil,
            runId: Swift.String? = nil
        )
        {
            self.blueprintName = blueprintName
            self.runId = runId
        }
    }

}

extension GlueClientTypes.BlueprintRun: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintName = "BlueprintName"
        case completedOn = "CompletedOn"
        case errorMessage = "ErrorMessage"
        case parameters = "Parameters"
        case roleArn = "RoleArn"
        case rollbackErrorMessage = "RollbackErrorMessage"
        case runId = "RunId"
        case startedOn = "StartedOn"
        case state = "State"
        case workflowName = "WorkflowName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintName = blueprintName {
            try encodeContainer.encode(blueprintName, forKey: .blueprintName)
        }
        if let completedOn = completedOn {
            try encodeContainer.encode(completedOn.timeIntervalSince1970, forKey: .completedOn)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let rollbackErrorMessage = rollbackErrorMessage {
            try encodeContainer.encode(rollbackErrorMessage, forKey: .rollbackErrorMessage)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let startedOn = startedOn {
            try encodeContainer.encode(startedOn.timeIntervalSince1970, forKey: .startedOn)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let workflowName = workflowName {
            try encodeContainer.encode(workflowName, forKey: .workflowName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintName)
        blueprintName = blueprintNameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let workflowNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowName)
        workflowName = workflowNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.BlueprintRunState.self, forKey: .state)
        state = stateDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let rollbackErrorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rollbackErrorMessage)
        rollbackErrorMessage = rollbackErrorMessageDecoded
        let parametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameters)
        parameters = parametersDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension GlueClientTypes {
    /// The details of a blueprint run.
    public struct BlueprintRun: Swift.Equatable {
        /// The name of the blueprint.
        public var blueprintName: Swift.String?
        /// The date and time that the blueprint run completed.
        public var completedOn: ClientRuntime.Date?
        /// Indicates any errors that are seen while running the blueprint.
        public var errorMessage: Swift.String?
        /// The blueprint parameters as a string. You will have to provide a value for each key that is required from the parameter spec that is defined in the Blueprint$ParameterSpec.
        public var parameters: Swift.String?
        /// The role ARN. This role will be assumed by the Glue service and will be used to create the workflow and other entities of a workflow.
        public var roleArn: Swift.String?
        /// If there are any errors while creating the entities of a workflow, we try to roll back the created entities until that point and delete them. This attribute indicates the errors seen while trying to delete the entities that are created.
        public var rollbackErrorMessage: Swift.String?
        /// The run ID for this blueprint run.
        public var runId: Swift.String?
        /// The date and time that the blueprint run started.
        public var startedOn: ClientRuntime.Date?
        /// The state of the blueprint run. Possible values are:
        ///
        /// * Running — The blueprint run is in progress.
        ///
        /// * Succeeded — The blueprint run completed successfully.
        ///
        /// * Failed — The blueprint run failed and rollback is complete.
        ///
        /// * Rolling Back — The blueprint run failed and rollback is in progress.
        public var state: GlueClientTypes.BlueprintRunState?
        /// The name of a workflow that is created as a result of a successful blueprint run. If a blueprint run has an error, there will not be a workflow created.
        public var workflowName: Swift.String?

        public init (
            blueprintName: Swift.String? = nil,
            completedOn: ClientRuntime.Date? = nil,
            errorMessage: Swift.String? = nil,
            parameters: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            rollbackErrorMessage: Swift.String? = nil,
            runId: Swift.String? = nil,
            startedOn: ClientRuntime.Date? = nil,
            state: GlueClientTypes.BlueprintRunState? = nil,
            workflowName: Swift.String? = nil
        )
        {
            self.blueprintName = blueprintName
            self.completedOn = completedOn
            self.errorMessage = errorMessage
            self.parameters = parameters
            self.roleArn = roleArn
            self.rollbackErrorMessage = rollbackErrorMessage
            self.runId = runId
            self.startedOn = startedOn
            self.state = state
            self.workflowName = workflowName
        }
    }

}

extension GlueClientTypes {
    public enum BlueprintRunState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case rollingBack
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [BlueprintRunState] {
            return [
                .failed,
                .rollingBack,
                .running,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .rollingBack: return "ROLLING_BACK"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlueprintRunState(rawValue: rawValue) ?? BlueprintRunState.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes {
    public enum BlueprintStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [BlueprintStatus] {
            return [
                .active,
                .creating,
                .failed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlueprintStatus(rawValue: rawValue) ?? BlueprintStatus.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.BooleanColumnStatisticsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfFalses = "NumberOfFalses"
        case numberOfNulls = "NumberOfNulls"
        case numberOfTrues = "NumberOfTrues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if numberOfFalses != 0 {
            try encodeContainer.encode(numberOfFalses, forKey: .numberOfFalses)
        }
        if numberOfNulls != 0 {
            try encodeContainer.encode(numberOfNulls, forKey: .numberOfNulls)
        }
        if numberOfTrues != 0 {
            try encodeContainer.encode(numberOfTrues, forKey: .numberOfTrues)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberOfTruesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfTrues)
        numberOfTrues = numberOfTruesDecoded
        let numberOfFalsesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfFalses)
        numberOfFalses = numberOfFalsesDecoded
        let numberOfNullsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNulls)
        numberOfNulls = numberOfNullsDecoded
    }
}

extension GlueClientTypes {
    /// Defines column statistics supported for Boolean data columns.
    public struct BooleanColumnStatisticsData: Swift.Equatable {
        /// The number of false values in the column.
        /// This member is required.
        public var numberOfFalses: Swift.Int
        /// The number of null values in the column.
        /// This member is required.
        public var numberOfNulls: Swift.Int
        /// The number of true values in the column.
        /// This member is required.
        public var numberOfTrues: Swift.Int

        public init (
            numberOfFalses: Swift.Int = 0,
            numberOfNulls: Swift.Int = 0,
            numberOfTrues: Swift.Int = 0
        )
        {
            self.numberOfFalses = numberOfFalses
            self.numberOfNulls = numberOfNulls
            self.numberOfTrues = numberOfTrues
        }
    }

}

extension CancelMLTaskRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskRunId = "TaskRunId"
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskRunId = taskRunId {
            try encodeContainer.encode(taskRunId, forKey: .taskRunId)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }
}

extension CancelMLTaskRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CancelMLTaskRunInput: Swift.Equatable {
    /// A unique identifier for the task run.
    /// This member is required.
    public var taskRunId: Swift.String?
    /// The unique identifier of the machine learning transform.
    /// This member is required.
    public var transformId: Swift.String?

    public init (
        taskRunId: Swift.String? = nil,
        transformId: Swift.String? = nil
    )
    {
        self.taskRunId = taskRunId
        self.transformId = transformId
    }
}

struct CancelMLTaskRunInputBody: Swift.Equatable {
    let transformId: Swift.String?
    let taskRunId: Swift.String?
}

extension CancelMLTaskRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskRunId = "TaskRunId"
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let taskRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
    }
}

extension CancelMLTaskRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelMLTaskRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelMLTaskRunOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelMLTaskRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CancelMLTaskRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
            self.taskRunId = output.taskRunId
            self.transformId = output.transformId
        } else {
            self.status = nil
            self.taskRunId = nil
            self.transformId = nil
        }
    }
}

public struct CancelMLTaskRunOutputResponse: Swift.Equatable {
    /// The status for this run.
    public var status: GlueClientTypes.TaskStatusType?
    /// The unique identifier for the task run.
    public var taskRunId: Swift.String?
    /// The unique identifier of the machine learning transform.
    public var transformId: Swift.String?

    public init (
        status: GlueClientTypes.TaskStatusType? = nil,
        taskRunId: Swift.String? = nil,
        transformId: Swift.String? = nil
    )
    {
        self.status = status
        self.taskRunId = taskRunId
        self.transformId = transformId
    }
}

struct CancelMLTaskRunOutputResponseBody: Swift.Equatable {
    let transformId: Swift.String?
    let taskRunId: Swift.String?
    let status: GlueClientTypes.TaskStatusType?
}

extension CancelMLTaskRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case taskRunId = "TaskRunId"
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let taskRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskStatusType.self, forKey: .status)
        status = statusDecoded
    }
}

extension GlueClientTypes {
    public enum CatalogEncryptionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case ssekms
        case sdkUnknown(Swift.String)

        public static var allCases: [CatalogEncryptionMode] {
            return [
                .disabled,
                .ssekms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .ssekms: return "SSE-KMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CatalogEncryptionMode(rawValue: rawValue) ?? CatalogEncryptionMode.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.CatalogEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a table definition in the Glue Data Catalog.
    public struct CatalogEntry: Swift.Equatable {
        /// The database in which the table metadata resides.
        /// This member is required.
        public var databaseName: Swift.String?
        /// The name of the table in question.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            databaseName: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.databaseName = databaseName
            self.tableName = tableName
        }
    }

}

extension GlueClientTypes.CatalogImportStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importCompleted = "ImportCompleted"
        case importTime = "ImportTime"
        case importedBy = "ImportedBy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if importCompleted != false {
            try encodeContainer.encode(importCompleted, forKey: .importCompleted)
        }
        if let importTime = importTime {
            try encodeContainer.encode(importTime.timeIntervalSince1970, forKey: .importTime)
        }
        if let importedBy = importedBy {
            try encodeContainer.encode(importedBy, forKey: .importedBy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importCompletedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .importCompleted)
        importCompleted = importCompletedDecoded
        let importTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .importTime)
        importTime = importTimeDecoded
        let importedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importedBy)
        importedBy = importedByDecoded
    }
}

extension GlueClientTypes {
    /// A structure containing migration status information.
    public struct CatalogImportStatus: Swift.Equatable {
        /// True if the migration has completed, or False otherwise.
        public var importCompleted: Swift.Bool
        /// The time that the migration was started.
        public var importTime: ClientRuntime.Date?
        /// The name of the person who initiated the migration.
        public var importedBy: Swift.String?

        public init (
            importCompleted: Swift.Bool = false,
            importTime: ClientRuntime.Date? = nil,
            importedBy: Swift.String? = nil
        )
        {
            self.importCompleted = importCompleted
            self.importTime = importTime
            self.importedBy = importedBy
        }
    }

}

extension GlueClientTypes.CatalogTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case tables = "Tables"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tables = tables {
            var tablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tables)
            for catalogtableslist0 in tables {
                try tablesContainer.encode(catalogtableslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tablesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tables)
        var tablesDecoded0:[Swift.String]? = nil
        if let tablesContainer = tablesContainer {
            tablesDecoded0 = [Swift.String]()
            for string0 in tablesContainer {
                if let string0 = string0 {
                    tablesDecoded0?.append(string0)
                }
            }
        }
        tables = tablesDecoded0
    }
}

extension GlueClientTypes {
    /// Specifies an Glue Data Catalog target.
    public struct CatalogTarget: Swift.Equatable {
        /// The name of the database to be synchronized.
        /// This member is required.
        public var databaseName: Swift.String?
        /// A list of the tables to be synchronized.
        /// This member is required.
        public var tables: [Swift.String]?

        public init (
            databaseName: Swift.String? = nil,
            tables: [Swift.String]? = nil
        )
        {
            self.databaseName = databaseName
            self.tables = tables
        }
    }

}

extension CheckSchemaVersionValidityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataFormat = "DataFormat"
        case schemaDefinition = "SchemaDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataFormat = dataFormat {
            try encodeContainer.encode(dataFormat.rawValue, forKey: .dataFormat)
        }
        if let schemaDefinition = schemaDefinition {
            try encodeContainer.encode(schemaDefinition, forKey: .schemaDefinition)
        }
    }
}

extension CheckSchemaVersionValidityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CheckSchemaVersionValidityInput: Swift.Equatable {
    /// The data format of the schema definition. Currently AVRO and JSON are supported.
    /// This member is required.
    public var dataFormat: GlueClientTypes.DataFormat?
    /// The definition of the schema that has to be validated.
    /// This member is required.
    public var schemaDefinition: Swift.String?

    public init (
        dataFormat: GlueClientTypes.DataFormat? = nil,
        schemaDefinition: Swift.String? = nil
    )
    {
        self.dataFormat = dataFormat
        self.schemaDefinition = schemaDefinition
    }
}

struct CheckSchemaVersionValidityInputBody: Swift.Equatable {
    let dataFormat: GlueClientTypes.DataFormat?
    let schemaDefinition: Swift.String?
}

extension CheckSchemaVersionValidityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataFormat = "DataFormat"
        case schemaDefinition = "SchemaDefinition"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataFormatDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let schemaDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaDefinition)
        schemaDefinition = schemaDefinitionDecoded
    }
}

extension CheckSchemaVersionValidityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CheckSchemaVersionValidityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CheckSchemaVersionValidityOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CheckSchemaVersionValidityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CheckSchemaVersionValidityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.error = output.error
            self.valid = output.valid
        } else {
            self.error = nil
            self.valid = false
        }
    }
}

public struct CheckSchemaVersionValidityOutputResponse: Swift.Equatable {
    /// A validation failure error message.
    public var error: Swift.String?
    /// Return true, if the schema is valid and false otherwise.
    public var valid: Swift.Bool

    public init (
        error: Swift.String? = nil,
        valid: Swift.Bool = false
    )
    {
        self.error = error
        self.valid = valid
    }
}

struct CheckSchemaVersionValidityOutputResponseBody: Swift.Equatable {
    let valid: Swift.Bool
    let error: Swift.String?
}

extension CheckSchemaVersionValidityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case valid = "Valid"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validDecoded = try containerValues.decode(Swift.Bool.self, forKey: .valid)
        valid = validDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
    }
}

extension GlueClientTypes.Classifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csvClassifier = "CsvClassifier"
        case grokClassifier = "GrokClassifier"
        case jsonClassifier = "JsonClassifier"
        case xMLClassifier = "XMLClassifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let csvClassifier = csvClassifier {
            try encodeContainer.encode(csvClassifier, forKey: .csvClassifier)
        }
        if let grokClassifier = grokClassifier {
            try encodeContainer.encode(grokClassifier, forKey: .grokClassifier)
        }
        if let jsonClassifier = jsonClassifier {
            try encodeContainer.encode(jsonClassifier, forKey: .jsonClassifier)
        }
        if let xMLClassifier = xMLClassifier {
            try encodeContainer.encode(xMLClassifier, forKey: .xMLClassifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grokClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.GrokClassifier.self, forKey: .grokClassifier)
        grokClassifier = grokClassifierDecoded
        let xMLClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.XMLClassifier.self, forKey: .xMLClassifier)
        xMLClassifier = xMLClassifierDecoded
        let jsonClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JsonClassifier.self, forKey: .jsonClassifier)
        jsonClassifier = jsonClassifierDecoded
        let csvClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CsvClassifier.self, forKey: .csvClassifier)
        csvClassifier = csvClassifierDecoded
    }
}

extension GlueClientTypes {
    /// Classifiers are triggered during a crawl task. A classifier checks whether a given file is in a format it can handle. If it is, the classifier creates a schema in the form of a StructType object that matches that data format. You can use the standard classifiers that Glue provides, or you can write your own classifiers to best categorize your data sources and specify the appropriate schemas to use for them. A classifier can be a grok classifier, an XML classifier, a JSON classifier, or a custom CSV classifier, as specified in one of the fields in the Classifier object.
    public struct Classifier: Swift.Equatable {
        /// A classifier for comma-separated values (CSV).
        public var csvClassifier: GlueClientTypes.CsvClassifier?
        /// A classifier that uses grok.
        public var grokClassifier: GlueClientTypes.GrokClassifier?
        /// A classifier for JSON content.
        public var jsonClassifier: GlueClientTypes.JsonClassifier?
        /// A classifier for XML content.
        public var xMLClassifier: GlueClientTypes.XMLClassifier?

        public init (
            csvClassifier: GlueClientTypes.CsvClassifier? = nil,
            grokClassifier: GlueClientTypes.GrokClassifier? = nil,
            jsonClassifier: GlueClientTypes.JsonClassifier? = nil,
            xMLClassifier: GlueClientTypes.XMLClassifier? = nil
        )
        {
            self.csvClassifier = csvClassifier
            self.grokClassifier = grokClassifier
            self.jsonClassifier = jsonClassifier
            self.xMLClassifier = xMLClassifier
        }
    }

}

extension GlueClientTypes.CloudWatchEncryption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchEncryptionMode = "CloudWatchEncryptionMode"
        case kmsKeyArn = "KmsKeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchEncryptionMode = cloudWatchEncryptionMode {
            try encodeContainer.encode(cloudWatchEncryptionMode.rawValue, forKey: .cloudWatchEncryptionMode)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchEncryptionModeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CloudWatchEncryptionMode.self, forKey: .cloudWatchEncryptionMode)
        cloudWatchEncryptionMode = cloudWatchEncryptionModeDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}

extension GlueClientTypes {
    /// Specifies how Amazon CloudWatch data should be encrypted.
    public struct CloudWatchEncryption: Swift.Equatable {
        /// The encryption mode to use for CloudWatch data.
        public var cloudWatchEncryptionMode: GlueClientTypes.CloudWatchEncryptionMode?
        /// The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
        public var kmsKeyArn: Swift.String?

        public init (
            cloudWatchEncryptionMode: GlueClientTypes.CloudWatchEncryptionMode? = nil,
            kmsKeyArn: Swift.String? = nil
        )
        {
            self.cloudWatchEncryptionMode = cloudWatchEncryptionMode
            self.kmsKeyArn = kmsKeyArn
        }
    }

}

extension GlueClientTypes {
    public enum CloudWatchEncryptionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case ssekms
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudWatchEncryptionMode] {
            return [
                .disabled,
                .ssekms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .ssekms: return "SSE-KMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CloudWatchEncryptionMode(rawValue: rawValue) ?? CloudWatchEncryptionMode.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.CodeGenEdge: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case source = "Source"
        case target = "Target"
        case targetParameter = "TargetParameter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let targetParameter = targetParameter {
            try encodeContainer.encode(targetParameter, forKey: .targetParameter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let targetParameterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetParameter)
        targetParameter = targetParameterDecoded
    }
}

extension GlueClientTypes {
    /// Represents a directional edge in a directed acyclic graph (DAG).
    public struct CodeGenEdge: Swift.Equatable {
        /// The ID of the node at which the edge starts.
        /// This member is required.
        public var source: Swift.String?
        /// The ID of the node at which the edge ends.
        /// This member is required.
        public var target: Swift.String?
        /// The target of the edge.
        public var targetParameter: Swift.String?

        public init (
            source: Swift.String? = nil,
            target: Swift.String? = nil,
            targetParameter: Swift.String? = nil
        )
        {
            self.source = source
            self.target = target
            self.targetParameter = targetParameter
        }
    }

}

extension GlueClientTypes.CodeGenNode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args = "Args"
        case id = "Id"
        case lineNumber = "LineNumber"
        case nodeType = "NodeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for codegennodeargs0 in args {
                try argsContainer.encode(codegennodeargs0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if lineNumber != 0 {
            try encodeContainer.encode(lineNumber, forKey: .lineNumber)
        }
        if let nodeType = nodeType {
            try encodeContainer.encode(nodeType, forKey: .nodeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let argsContainer = try containerValues.decodeIfPresent([GlueClientTypes.CodeGenNodeArg?].self, forKey: .args)
        var argsDecoded0:[GlueClientTypes.CodeGenNodeArg]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [GlueClientTypes.CodeGenNodeArg]()
            for structure0 in argsContainer {
                if let structure0 = structure0 {
                    argsDecoded0?.append(structure0)
                }
            }
        }
        args = argsDecoded0
        let lineNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .lineNumber)
        lineNumber = lineNumberDecoded
    }
}

extension GlueClientTypes {
    /// Represents a node in a directed acyclic graph (DAG)
    public struct CodeGenNode: Swift.Equatable {
        /// Properties of the node, in the form of name-value pairs.
        /// This member is required.
        public var args: [GlueClientTypes.CodeGenNodeArg]?
        /// A node identifier that is unique within the node's graph.
        /// This member is required.
        public var id: Swift.String?
        /// The line number of the node.
        public var lineNumber: Swift.Int
        /// The type of node that this is.
        /// This member is required.
        public var nodeType: Swift.String?

        public init (
            args: [GlueClientTypes.CodeGenNodeArg]? = nil,
            id: Swift.String? = nil,
            lineNumber: Swift.Int = 0,
            nodeType: Swift.String? = nil
        )
        {
            self.args = args
            self.id = id
            self.lineNumber = lineNumber
            self.nodeType = nodeType
        }
    }

}

extension GlueClientTypes.CodeGenNodeArg: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case param = "Param"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if param != false {
            try encodeContainer.encode(param, forKey: .param)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let paramDecoded = try containerValues.decode(Swift.Bool.self, forKey: .param)
        param = paramDecoded
    }
}

extension GlueClientTypes {
    /// An argument or property of a node.
    public struct CodeGenNodeArg: Swift.Equatable {
        /// The name of the argument or property.
        /// This member is required.
        public var name: Swift.String?
        /// True if the value is used as a parameter.
        public var param: Swift.Bool
        /// The value of the argument or property.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            param: Swift.Bool = false,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.param = param
            self.value = value
        }
    }

}

extension GlueClientTypes.Column: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case name = "Name"
        case parameters = "Parameters"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comment = comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension GlueClientTypes {
    /// A column in a Table.
    public struct Column: Swift.Equatable {
        /// A free-form text comment.
        public var comment: Swift.String?
        /// The name of the Column.
        /// This member is required.
        public var name: Swift.String?
        /// These key-value pairs define properties associated with the column.
        public var parameters: [Swift.String:Swift.String]?
        /// The data type of the Column.
        public var type: Swift.String?

        public init (
            comment: Swift.String? = nil,
            name: Swift.String? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            type: Swift.String? = nil
        )
        {
            self.comment = comment
            self.name = name
            self.parameters = parameters
            self.type = type
        }
    }

}

extension GlueClientTypes.ColumnError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnName = "ColumnName"
        case error = "Error"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnName = columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let error = error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnName)
        columnName = columnNameDecoded
        let errorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ErrorDetail.self, forKey: .error)
        error = errorDecoded
    }
}

extension GlueClientTypes {
    /// Encapsulates a column name that failed and the reason for failure.
    public struct ColumnError: Swift.Equatable {
        /// The name of the column that failed.
        public var columnName: Swift.String?
        /// An error message with the reason for the failure of an operation.
        public var error: GlueClientTypes.ErrorDetail?

        public init (
            columnName: Swift.String? = nil,
            error: GlueClientTypes.ErrorDetail? = nil
        )
        {
            self.columnName = columnName
            self.error = error
        }
    }

}

extension GlueClientTypes.ColumnImportance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnName = "ColumnName"
        case importance = "Importance"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnName = columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let importance = importance {
            try encodeContainer.encode(importance, forKey: .importance)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnName)
        columnName = columnNameDecoded
        let importanceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .importance)
        importance = importanceDecoded
    }
}

extension GlueClientTypes {
    /// A structure containing the column name and column importance score for a column. Column importance helps you understand how columns contribute to your model, by identifying which columns in your records are more important than others.
    public struct ColumnImportance: Swift.Equatable {
        /// The name of a column.
        public var columnName: Swift.String?
        /// The column importance score for the column, as a decimal.
        public var importance: Swift.Double?

        public init (
            columnName: Swift.String? = nil,
            importance: Swift.Double? = nil
        )
        {
            self.columnName = columnName
            self.importance = importance
        }
    }

}

extension GlueClientTypes.ColumnStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyzedTime = "AnalyzedTime"
        case columnName = "ColumnName"
        case columnType = "ColumnType"
        case statisticsData = "StatisticsData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyzedTime = analyzedTime {
            try encodeContainer.encode(analyzedTime.timeIntervalSince1970, forKey: .analyzedTime)
        }
        if let columnName = columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let columnType = columnType {
            try encodeContainer.encode(columnType, forKey: .columnType)
        }
        if let statisticsData = statisticsData {
            try encodeContainer.encode(statisticsData, forKey: .statisticsData)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnName)
        columnName = columnNameDecoded
        let columnTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnType)
        columnType = columnTypeDecoded
        let analyzedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .analyzedTime)
        analyzedTime = analyzedTimeDecoded
        let statisticsDataDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ColumnStatisticsData.self, forKey: .statisticsData)
        statisticsData = statisticsDataDecoded
    }
}

extension GlueClientTypes {
    /// Represents the generated column-level statistics for a table or partition.
    public struct ColumnStatistics: Swift.Equatable {
        /// The timestamp of when column statistics were generated.
        /// This member is required.
        public var analyzedTime: ClientRuntime.Date?
        /// Name of column which statistics belong to.
        /// This member is required.
        public var columnName: Swift.String?
        /// The data type of the column.
        /// This member is required.
        public var columnType: Swift.String?
        /// A ColumnStatisticData object that contains the statistics data values.
        /// This member is required.
        public var statisticsData: GlueClientTypes.ColumnStatisticsData?

        public init (
            analyzedTime: ClientRuntime.Date? = nil,
            columnName: Swift.String? = nil,
            columnType: Swift.String? = nil,
            statisticsData: GlueClientTypes.ColumnStatisticsData? = nil
        )
        {
            self.analyzedTime = analyzedTime
            self.columnName = columnName
            self.columnType = columnType
            self.statisticsData = statisticsData
        }
    }

}

extension GlueClientTypes.ColumnStatisticsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case binaryColumnStatisticsData = "BinaryColumnStatisticsData"
        case booleanColumnStatisticsData = "BooleanColumnStatisticsData"
        case dateColumnStatisticsData = "DateColumnStatisticsData"
        case decimalColumnStatisticsData = "DecimalColumnStatisticsData"
        case doubleColumnStatisticsData = "DoubleColumnStatisticsData"
        case longColumnStatisticsData = "LongColumnStatisticsData"
        case stringColumnStatisticsData = "StringColumnStatisticsData"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let binaryColumnStatisticsData = binaryColumnStatisticsData {
            try encodeContainer.encode(binaryColumnStatisticsData, forKey: .binaryColumnStatisticsData)
        }
        if let booleanColumnStatisticsData = booleanColumnStatisticsData {
            try encodeContainer.encode(booleanColumnStatisticsData, forKey: .booleanColumnStatisticsData)
        }
        if let dateColumnStatisticsData = dateColumnStatisticsData {
            try encodeContainer.encode(dateColumnStatisticsData, forKey: .dateColumnStatisticsData)
        }
        if let decimalColumnStatisticsData = decimalColumnStatisticsData {
            try encodeContainer.encode(decimalColumnStatisticsData, forKey: .decimalColumnStatisticsData)
        }
        if let doubleColumnStatisticsData = doubleColumnStatisticsData {
            try encodeContainer.encode(doubleColumnStatisticsData, forKey: .doubleColumnStatisticsData)
        }
        if let longColumnStatisticsData = longColumnStatisticsData {
            try encodeContainer.encode(longColumnStatisticsData, forKey: .longColumnStatisticsData)
        }
        if let stringColumnStatisticsData = stringColumnStatisticsData {
            try encodeContainer.encode(stringColumnStatisticsData, forKey: .stringColumnStatisticsData)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ColumnStatisticsType.self, forKey: .type)
        type = typeDecoded
        let booleanColumnStatisticsDataDecoded = try containerValues.decodeIfPresent(GlueClientTypes.BooleanColumnStatisticsData.self, forKey: .booleanColumnStatisticsData)
        booleanColumnStatisticsData = booleanColumnStatisticsDataDecoded
        let dateColumnStatisticsDataDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DateColumnStatisticsData.self, forKey: .dateColumnStatisticsData)
        dateColumnStatisticsData = dateColumnStatisticsDataDecoded
        let decimalColumnStatisticsDataDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DecimalColumnStatisticsData.self, forKey: .decimalColumnStatisticsData)
        decimalColumnStatisticsData = decimalColumnStatisticsDataDecoded
        let doubleColumnStatisticsDataDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DoubleColumnStatisticsData.self, forKey: .doubleColumnStatisticsData)
        doubleColumnStatisticsData = doubleColumnStatisticsDataDecoded
        let longColumnStatisticsDataDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LongColumnStatisticsData.self, forKey: .longColumnStatisticsData)
        longColumnStatisticsData = longColumnStatisticsDataDecoded
        let stringColumnStatisticsDataDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StringColumnStatisticsData.self, forKey: .stringColumnStatisticsData)
        stringColumnStatisticsData = stringColumnStatisticsDataDecoded
        let binaryColumnStatisticsDataDecoded = try containerValues.decodeIfPresent(GlueClientTypes.BinaryColumnStatisticsData.self, forKey: .binaryColumnStatisticsData)
        binaryColumnStatisticsData = binaryColumnStatisticsDataDecoded
    }
}

extension GlueClientTypes {
    /// Contains the individual types of column statistics data. Only one data object should be set and indicated by the Type attribute.
    public struct ColumnStatisticsData: Swift.Equatable {
        /// Binary column statistics data.
        public var binaryColumnStatisticsData: GlueClientTypes.BinaryColumnStatisticsData?
        /// Boolean column statistics data.
        public var booleanColumnStatisticsData: GlueClientTypes.BooleanColumnStatisticsData?
        /// Date column statistics data.
        public var dateColumnStatisticsData: GlueClientTypes.DateColumnStatisticsData?
        /// Decimal column statistics data.
        public var decimalColumnStatisticsData: GlueClientTypes.DecimalColumnStatisticsData?
        /// Double column statistics data.
        public var doubleColumnStatisticsData: GlueClientTypes.DoubleColumnStatisticsData?
        /// Long column statistics data.
        public var longColumnStatisticsData: GlueClientTypes.LongColumnStatisticsData?
        /// String column statistics data.
        public var stringColumnStatisticsData: GlueClientTypes.StringColumnStatisticsData?
        /// The type of column statistics data.
        /// This member is required.
        public var type: GlueClientTypes.ColumnStatisticsType?

        public init (
            binaryColumnStatisticsData: GlueClientTypes.BinaryColumnStatisticsData? = nil,
            booleanColumnStatisticsData: GlueClientTypes.BooleanColumnStatisticsData? = nil,
            dateColumnStatisticsData: GlueClientTypes.DateColumnStatisticsData? = nil,
            decimalColumnStatisticsData: GlueClientTypes.DecimalColumnStatisticsData? = nil,
            doubleColumnStatisticsData: GlueClientTypes.DoubleColumnStatisticsData? = nil,
            longColumnStatisticsData: GlueClientTypes.LongColumnStatisticsData? = nil,
            stringColumnStatisticsData: GlueClientTypes.StringColumnStatisticsData? = nil,
            type: GlueClientTypes.ColumnStatisticsType? = nil
        )
        {
            self.binaryColumnStatisticsData = binaryColumnStatisticsData
            self.booleanColumnStatisticsData = booleanColumnStatisticsData
            self.dateColumnStatisticsData = dateColumnStatisticsData
            self.decimalColumnStatisticsData = decimalColumnStatisticsData
            self.doubleColumnStatisticsData = doubleColumnStatisticsData
            self.longColumnStatisticsData = longColumnStatisticsData
            self.stringColumnStatisticsData = stringColumnStatisticsData
            self.type = type
        }
    }

}

extension GlueClientTypes.ColumnStatisticsError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnStatistics = "ColumnStatistics"
        case error = "Error"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnStatistics = columnStatistics {
            try encodeContainer.encode(columnStatistics, forKey: .columnStatistics)
        }
        if let error = error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnStatisticsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ColumnStatistics.self, forKey: .columnStatistics)
        columnStatistics = columnStatisticsDecoded
        let errorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ErrorDetail.self, forKey: .error)
        error = errorDecoded
    }
}

extension GlueClientTypes {
    /// Encapsulates a ColumnStatistics object that failed and the reason for failure.
    public struct ColumnStatisticsError: Swift.Equatable {
        /// The ColumnStatistics of the column.
        public var columnStatistics: GlueClientTypes.ColumnStatistics?
        /// An error message with the reason for the failure of an operation.
        public var error: GlueClientTypes.ErrorDetail?

        public init (
            columnStatistics: GlueClientTypes.ColumnStatistics? = nil,
            error: GlueClientTypes.ErrorDetail? = nil
        )
        {
            self.columnStatistics = columnStatistics
            self.error = error
        }
    }

}

extension GlueClientTypes {
    public enum ColumnStatisticsType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case binary
        case boolean
        case date
        case decimal
        case double
        case long
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [ColumnStatisticsType] {
            return [
                .binary,
                .boolean,
                .date,
                .decimal,
                .double,
                .long,
                .string,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .binary: return "BINARY"
            case .boolean: return "BOOLEAN"
            case .date: return "DATE"
            case .decimal: return "DECIMAL"
            case .double: return "DOUBLE"
            case .long: return "LONG"
            case .string: return "STRING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ColumnStatisticsType(rawValue: rawValue) ?? ColumnStatisticsType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes {
    public enum Comparator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case equals
        case greaterThan
        case greaterThanEquals
        case lessThan
        case lessThanEquals
        case sdkUnknown(Swift.String)

        public static var allCases: [Comparator] {
            return [
                .equals,
                .greaterThan,
                .greaterThanEquals,
                .lessThan,
                .lessThanEquals,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .equals: return "EQUALS"
            case .greaterThan: return "GREATER_THAN"
            case .greaterThanEquals: return "GREATER_THAN_EQUALS"
            case .lessThan: return "LESS_THAN"
            case .lessThanEquals: return "LESS_THAN_EQUALS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Comparator(rawValue: rawValue) ?? Comparator.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes {
    public enum Compatibility: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case backward
        case backwardAll
        case disabled
        case forward
        case forwardAll
        case full
        case fullAll
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Compatibility] {
            return [
                .backward,
                .backwardAll,
                .disabled,
                .forward,
                .forwardAll,
                .full,
                .fullAll,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .backward: return "BACKWARD"
            case .backwardAll: return "BACKWARD_ALL"
            case .disabled: return "DISABLED"
            case .forward: return "FORWARD"
            case .forwardAll: return "FORWARD_ALL"
            case .full: return "FULL"
            case .fullAll: return "FULL_ALL"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Compatibility(rawValue: rawValue) ?? Compatibility.sdkUnknown(rawValue)
        }
    }
}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Two processes are trying to modify a resource simultaneously.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConcurrentRunsExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConcurrentRunsExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Too many jobs are being run concurrently.
public struct ConcurrentRunsExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentRunsExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentRunsExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.Condition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlState = "CrawlState"
        case crawlerName = "CrawlerName"
        case jobName = "JobName"
        case logicalOperator = "LogicalOperator"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawlState = crawlState {
            try encodeContainer.encode(crawlState.rawValue, forKey: .crawlState)
        }
        if let crawlerName = crawlerName {
            try encodeContainer.encode(crawlerName, forKey: .crawlerName)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let logicalOperator = logicalOperator {
            try encodeContainer.encode(logicalOperator.rawValue, forKey: .logicalOperator)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logicalOperatorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LogicalOperator.self, forKey: .logicalOperator)
        logicalOperator = logicalOperatorDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobRunState.self, forKey: .state)
        state = stateDecoded
        let crawlerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerName)
        crawlerName = crawlerNameDecoded
        let crawlStateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlState.self, forKey: .crawlState)
        crawlState = crawlStateDecoded
    }
}

extension GlueClientTypes {
    /// Defines a condition under which a trigger fires.
    public struct Condition: Swift.Equatable {
        /// The state of the crawler to which this condition applies.
        public var crawlState: GlueClientTypes.CrawlState?
        /// The name of the crawler to which this condition applies.
        public var crawlerName: Swift.String?
        /// The name of the job whose JobRuns this condition applies to, and on which this trigger waits.
        public var jobName: Swift.String?
        /// A logical operator.
        public var logicalOperator: GlueClientTypes.LogicalOperator?
        /// The condition state. Currently, the only job states that a trigger can listen for are SUCCEEDED, STOPPED, FAILED, and TIMEOUT. The only crawler states that a trigger can listen for are SUCCEEDED, FAILED, and CANCELLED.
        public var state: GlueClientTypes.JobRunState?

        public init (
            crawlState: GlueClientTypes.CrawlState? = nil,
            crawlerName: Swift.String? = nil,
            jobName: Swift.String? = nil,
            logicalOperator: GlueClientTypes.LogicalOperator? = nil,
            state: GlueClientTypes.JobRunState? = nil
        )
        {
            self.crawlState = crawlState
            self.crawlerName = crawlerName
            self.jobName = jobName
            self.logicalOperator = logicalOperator
            self.state = state
        }
    }

}

extension ConditionCheckFailureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConditionCheckFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A specified condition was not satisfied.
public struct ConditionCheckFailureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConditionCheckFailureExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConditionCheckFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The CreatePartitions API was called on a table that has indexes enabled.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.ConfusionMatrix: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numFalseNegatives = "NumFalseNegatives"
        case numFalsePositives = "NumFalsePositives"
        case numTrueNegatives = "NumTrueNegatives"
        case numTruePositives = "NumTruePositives"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numFalseNegatives = numFalseNegatives {
            try encodeContainer.encode(numFalseNegatives, forKey: .numFalseNegatives)
        }
        if let numFalsePositives = numFalsePositives {
            try encodeContainer.encode(numFalsePositives, forKey: .numFalsePositives)
        }
        if let numTrueNegatives = numTrueNegatives {
            try encodeContainer.encode(numTrueNegatives, forKey: .numTrueNegatives)
        }
        if let numTruePositives = numTruePositives {
            try encodeContainer.encode(numTruePositives, forKey: .numTruePositives)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numTruePositivesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numTruePositives)
        numTruePositives = numTruePositivesDecoded
        let numFalsePositivesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numFalsePositives)
        numFalsePositives = numFalsePositivesDecoded
        let numTrueNegativesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numTrueNegatives)
        numTrueNegatives = numTrueNegativesDecoded
        let numFalseNegativesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numFalseNegatives)
        numFalseNegatives = numFalseNegativesDecoded
    }
}

extension GlueClientTypes {
    /// The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making. For more information, see [Confusion matrix](https://en.wikipedia.org/wiki/Confusion_matrix) in Wikipedia.
    public struct ConfusionMatrix: Swift.Equatable {
        /// The number of matches in the data that the transform didn't find, in the confusion matrix for your transform.
        public var numFalseNegatives: Swift.Int?
        /// The number of nonmatches in the data that the transform incorrectly classified as a match, in the confusion matrix for your transform.
        public var numFalsePositives: Swift.Int?
        /// The number of nonmatches in the data that the transform correctly rejected, in the confusion matrix for your transform.
        public var numTrueNegatives: Swift.Int?
        /// The number of matches in the data that the transform correctly found, in the confusion matrix for your transform.
        public var numTruePositives: Swift.Int?

        public init (
            numFalseNegatives: Swift.Int? = nil,
            numFalsePositives: Swift.Int? = nil,
            numTrueNegatives: Swift.Int? = nil,
            numTruePositives: Swift.Int? = nil
        )
        {
            self.numFalseNegatives = numFalseNegatives
            self.numFalsePositives = numFalsePositives
            self.numTrueNegatives = numTrueNegatives
            self.numTruePositives = numTruePositives
        }
    }

}

extension GlueClientTypes.Connection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionProperties = "ConnectionProperties"
        case connectionType = "ConnectionType"
        case creationTime = "CreationTime"
        case description = "Description"
        case lastUpdatedBy = "LastUpdatedBy"
        case lastUpdatedTime = "LastUpdatedTime"
        case matchCriteria = "MatchCriteria"
        case name = "Name"
        case physicalConnectionRequirements = "PhysicalConnectionRequirements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionProperties = connectionProperties {
            var connectionPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .connectionProperties)
            for (dictKey0, connectionproperties0) in connectionProperties {
                try connectionPropertiesContainer.encode(connectionproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let connectionType = connectionType {
            try encodeContainer.encode(connectionType.rawValue, forKey: .connectionType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdatedBy = lastUpdatedBy {
            try encodeContainer.encode(lastUpdatedBy, forKey: .lastUpdatedBy)
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let matchCriteria = matchCriteria {
            var matchCriteriaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchCriteria)
            for matchcriteria0 in matchCriteria {
                try matchCriteriaContainer.encode(matchcriteria0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let physicalConnectionRequirements = physicalConnectionRequirements {
            try encodeContainer.encode(physicalConnectionRequirements, forKey: .physicalConnectionRequirements)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let connectionTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionType.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
        let matchCriteriaContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .matchCriteria)
        var matchCriteriaDecoded0:[Swift.String]? = nil
        if let matchCriteriaContainer = matchCriteriaContainer {
            matchCriteriaDecoded0 = [Swift.String]()
            for string0 in matchCriteriaContainer {
                if let string0 = string0 {
                    matchCriteriaDecoded0?.append(string0)
                }
            }
        }
        matchCriteria = matchCriteriaDecoded0
        let connectionPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .connectionProperties)
        var connectionPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let connectionPropertiesContainer = connectionPropertiesContainer {
            connectionPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, valuestring0) in connectionPropertiesContainer {
                if let valuestring0 = valuestring0 {
                    connectionPropertiesDecoded0?[key0] = valuestring0
                }
            }
        }
        connectionProperties = connectionPropertiesDecoded0
        let physicalConnectionRequirementsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PhysicalConnectionRequirements.self, forKey: .physicalConnectionRequirements)
        physicalConnectionRequirements = physicalConnectionRequirementsDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let lastUpdatedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedBy)
        lastUpdatedBy = lastUpdatedByDecoded
    }
}

extension GlueClientTypes {
    /// Defines a connection to a data source.
    public struct Connection: Swift.Equatable {
        /// These key-value pairs define parameters for the connection:
        ///
        /// * HOST - The host URI: either the fully qualified domain name (FQDN) or the IPv4 address of the database host.
        ///
        /// * PORT - The port number, between 1024 and 65535, of the port on which the database host is listening for database connections.
        ///
        /// * USER_NAME - The name under which to log in to the database. The value string for USER_NAME is "USERNAME".
        ///
        /// * PASSWORD - A password, if one is used, for the user name.
        ///
        /// * ENCRYPTED_PASSWORD - When you enable connection password protection by setting ConnectionPasswordEncryption in the Data Catalog encryption settings, this field stores the encrypted password.
        ///
        /// * JDBC_DRIVER_JAR_URI - The Amazon Simple Storage Service (Amazon S3) path of the JAR file that contains the JDBC driver to use.
        ///
        /// * JDBC_DRIVER_CLASS_NAME - The class name of the JDBC driver to use.
        ///
        /// * JDBC_ENGINE - The name of the JDBC engine to use.
        ///
        /// * JDBC_ENGINE_VERSION - The version of the JDBC engine to use.
        ///
        /// * CONFIG_FILES - (Reserved for future use.)
        ///
        /// * INSTANCE_ID - The instance ID to use.
        ///
        /// * JDBC_CONNECTION_URL - The URL for connecting to a JDBC data source.
        ///
        /// * JDBC_ENFORCE_SSL - A Boolean string (true, false) specifying whether Secure Sockets Layer (SSL) with hostname matching is enforced for the JDBC connection on the client. The default is false.
        ///
        /// * CUSTOM_JDBC_CERT - An Amazon S3 location specifying the customer's root certificate. Glue uses this root certificate to validate the customer’s certificate when connecting to the customer database. Glue only handles X.509 certificates. The certificate provided must be DER-encoded and supplied in Base64 encoding PEM format.
        ///
        /// * SKIP_CUSTOM_JDBC_CERT_VALIDATION - By default, this is false. Glue validates the Signature algorithm and Subject Public Key Algorithm for the customer certificate. The only permitted algorithms for the Signature algorithm are SHA256withRSA, SHA384withRSA or SHA512withRSA. For the Subject Public Key Algorithm, the key length must be at least 2048. You can set the value of this property to true to skip Glue’s validation of the customer certificate.
        ///
        /// * CUSTOM_JDBC_CERT_STRING - A custom JDBC certificate string which is used for domain match or distinguished name match to prevent a man-in-the-middle attack. In Oracle database, this is used as the SSL_SERVER_CERT_DN; in Microsoft SQL Server, this is used as the hostNameInCertificate.
        ///
        /// * CONNECTION_URL - The URL for connecting to a general (non-JDBC) data source.
        ///
        /// * KAFKA_BOOTSTRAP_SERVERS - A comma-separated list of host and port pairs that are the addresses of the Apache Kafka brokers in a Kafka cluster to which a Kafka client will connect to and bootstrap itself.
        ///
        /// * KAFKA_SSL_ENABLED - Whether to enable or disable SSL on an Apache Kafka connection. Default value is "true".
        ///
        /// * KAFKA_CUSTOM_CERT - The Amazon S3 URL for the private CA cert file (.pem format). The default is an empty string.
        ///
        /// * KAFKA_SKIP_CUSTOM_CERT_VALIDATION - Whether to skip the validation of the CA cert file or not. Glue validates for three algorithms: SHA256withRSA, SHA384withRSA and SHA512withRSA. Default value is "false".
        ///
        /// * SECRET_ID - The secret ID used for the secret manager of credentials.
        ///
        /// * CONNECTOR_URL - The connector URL for a MARKETPLACE or CUSTOM connection.
        ///
        /// * CONNECTOR_TYPE - The connector type for a MARKETPLACE or CUSTOM connection.
        ///
        /// * CONNECTOR_CLASS_NAME - The connector class name for a MARKETPLACE or CUSTOM connection.
        ///
        /// * KAFKA_CLIENT_KEYSTORE - The Amazon S3 location of the client keystore file for Kafka client side authentication (Optional).
        ///
        /// * KAFKA_CLIENT_KEYSTORE_PASSWORD - The password to access the provided keystore (Optional).
        ///
        /// * KAFKA_CLIENT_KEY_PASSWORD - A keystore can consist of multiple keys, so this is the password to access the client key to be used with the Kafka server side key (Optional).
        ///
        /// * ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD - The encrypted version of the Kafka client keystore password (if the user has the Glue encrypt passwords setting selected).
        ///
        /// * ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD - The encrypted version of the Kafka client key password (if the user has the Glue encrypt passwords setting selected).
        public var connectionProperties: [Swift.String:Swift.String]?
        /// The type of the connection. Currently, SFTP is not supported.
        public var connectionType: GlueClientTypes.ConnectionType?
        /// The time that this connection definition was created.
        public var creationTime: ClientRuntime.Date?
        /// The description of the connection.
        public var description: Swift.String?
        /// The user, group, or role that last updated this connection definition.
        public var lastUpdatedBy: Swift.String?
        /// The last time that this connection definition was updated.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// A list of criteria that can be used in selecting this connection.
        public var matchCriteria: [Swift.String]?
        /// The name of the connection definition.
        public var name: Swift.String?
        /// A map of physical connection requirements, such as virtual private cloud (VPC) and SecurityGroup, that are needed to make this connection successfully.
        public var physicalConnectionRequirements: GlueClientTypes.PhysicalConnectionRequirements?

        public init (
            connectionProperties: [Swift.String:Swift.String]? = nil,
            connectionType: GlueClientTypes.ConnectionType? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedBy: Swift.String? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            matchCriteria: [Swift.String]? = nil,
            name: Swift.String? = nil,
            physicalConnectionRequirements: GlueClientTypes.PhysicalConnectionRequirements? = nil
        )
        {
            self.connectionProperties = connectionProperties
            self.connectionType = connectionType
            self.creationTime = creationTime
            self.description = description
            self.lastUpdatedBy = lastUpdatedBy
            self.lastUpdatedTime = lastUpdatedTime
            self.matchCriteria = matchCriteria
            self.name = name
            self.physicalConnectionRequirements = physicalConnectionRequirements
        }
    }

}

extension GlueClientTypes.ConnectionInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionProperties = "ConnectionProperties"
        case connectionType = "ConnectionType"
        case description = "Description"
        case matchCriteria = "MatchCriteria"
        case name = "Name"
        case physicalConnectionRequirements = "PhysicalConnectionRequirements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionProperties = connectionProperties {
            var connectionPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .connectionProperties)
            for (dictKey0, connectionproperties0) in connectionProperties {
                try connectionPropertiesContainer.encode(connectionproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let connectionType = connectionType {
            try encodeContainer.encode(connectionType.rawValue, forKey: .connectionType)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let matchCriteria = matchCriteria {
            var matchCriteriaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchCriteria)
            for matchcriteria0 in matchCriteria {
                try matchCriteriaContainer.encode(matchcriteria0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let physicalConnectionRequirements = physicalConnectionRequirements {
            try encodeContainer.encode(physicalConnectionRequirements, forKey: .physicalConnectionRequirements)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let connectionTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionType.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
        let matchCriteriaContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .matchCriteria)
        var matchCriteriaDecoded0:[Swift.String]? = nil
        if let matchCriteriaContainer = matchCriteriaContainer {
            matchCriteriaDecoded0 = [Swift.String]()
            for string0 in matchCriteriaContainer {
                if let string0 = string0 {
                    matchCriteriaDecoded0?.append(string0)
                }
            }
        }
        matchCriteria = matchCriteriaDecoded0
        let connectionPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .connectionProperties)
        var connectionPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let connectionPropertiesContainer = connectionPropertiesContainer {
            connectionPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, valuestring0) in connectionPropertiesContainer {
                if let valuestring0 = valuestring0 {
                    connectionPropertiesDecoded0?[key0] = valuestring0
                }
            }
        }
        connectionProperties = connectionPropertiesDecoded0
        let physicalConnectionRequirementsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PhysicalConnectionRequirements.self, forKey: .physicalConnectionRequirements)
        physicalConnectionRequirements = physicalConnectionRequirementsDecoded
    }
}

extension GlueClientTypes {
    /// A structure that is used to specify a connection to create or update.
    public struct ConnectionInput: Swift.Equatable {
        /// These key-value pairs define parameters for the connection.
        /// This member is required.
        public var connectionProperties: [Swift.String:Swift.String]?
        /// The type of the connection. Currently, these types are supported:
        ///
        /// * JDBC - Designates a connection to a database through Java Database Connectivity (JDBC).
        ///
        /// * KAFKA - Designates a connection to an Apache Kafka streaming platform.
        ///
        /// * MONGODB - Designates a connection to a MongoDB document database.
        ///
        /// * NETWORK - Designates a network connection to a data source within an Amazon Virtual Private Cloud environment (Amazon VPC).
        ///
        /// * MARKETPLACE - Uses configuration settings contained in a connector purchased from Amazon Web Services Marketplace to read from and write to data stores that are not natively supported by Glue.
        ///
        /// * CUSTOM - Uses configuration settings contained in a custom connector to read from and write to data stores that are not natively supported by Glue.
        ///
        ///
        /// SFTP is not supported.
        /// This member is required.
        public var connectionType: GlueClientTypes.ConnectionType?
        /// The description of the connection.
        public var description: Swift.String?
        /// A list of criteria that can be used in selecting this connection.
        public var matchCriteria: [Swift.String]?
        /// The name of the connection.
        /// This member is required.
        public var name: Swift.String?
        /// A map of physical connection requirements, such as virtual private cloud (VPC) and SecurityGroup, that are needed to successfully make this connection.
        public var physicalConnectionRequirements: GlueClientTypes.PhysicalConnectionRequirements?

        public init (
            connectionProperties: [Swift.String:Swift.String]? = nil,
            connectionType: GlueClientTypes.ConnectionType? = nil,
            description: Swift.String? = nil,
            matchCriteria: [Swift.String]? = nil,
            name: Swift.String? = nil,
            physicalConnectionRequirements: GlueClientTypes.PhysicalConnectionRequirements? = nil
        )
        {
            self.connectionProperties = connectionProperties
            self.connectionType = connectionType
            self.description = description
            self.matchCriteria = matchCriteria
            self.name = name
            self.physicalConnectionRequirements = physicalConnectionRequirements
        }
    }

}

extension GlueClientTypes.ConnectionPasswordEncryption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsKmsKeyId = "AwsKmsKeyId"
        case returnConnectionPasswordEncrypted = "ReturnConnectionPasswordEncrypted"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsKmsKeyId = awsKmsKeyId {
            try encodeContainer.encode(awsKmsKeyId, forKey: .awsKmsKeyId)
        }
        if returnConnectionPasswordEncrypted != false {
            try encodeContainer.encode(returnConnectionPasswordEncrypted, forKey: .returnConnectionPasswordEncrypted)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let returnConnectionPasswordEncryptedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .returnConnectionPasswordEncrypted)
        returnConnectionPasswordEncrypted = returnConnectionPasswordEncryptedDecoded
        let awsKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsKmsKeyId)
        awsKmsKeyId = awsKmsKeyIdDecoded
    }
}

extension GlueClientTypes {
    /// The data structure used by the Data Catalog to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. When a CreationConnection request arrives containing a password, the Data Catalog first encrypts the password using your KMS key. It then encrypts the whole connection object again if catalog encryption is also enabled. This encryption requires that you set KMS key permissions to enable or restrict access on the password key according to your security requirements. For example, you might want only administrators to have decrypt permission on the password key.
    public struct ConnectionPasswordEncryption: Swift.Equatable {
        /// An KMS key that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least kms:Encrypt permission on the specified KMS key, to encrypt passwords before storing them in the Data Catalog. You can set the decrypt permission to enable or restrict access on the password key according to your security requirements.
        public var awsKmsKeyId: Swift.String?
        /// When the ReturnConnectionPasswordEncrypted flag is set to "true", passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently from catalog encryption.
        /// This member is required.
        public var returnConnectionPasswordEncrypted: Swift.Bool

        public init (
            awsKmsKeyId: Swift.String? = nil,
            returnConnectionPasswordEncrypted: Swift.Bool = false
        )
        {
            self.awsKmsKeyId = awsKmsKeyId
            self.returnConnectionPasswordEncrypted = returnConnectionPasswordEncrypted
        }
    }

}

extension GlueClientTypes {
    public enum ConnectionPropertyKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configFiles
        case connectionUrl
        case connectorClassName
        case connectorType
        case connectorUrl
        case customJdbcCert
        case customJdbcCertString
        case encryptedKafkaClientKeystorePassword
        case encryptedKafkaClientKeyPassword
        case encryptedPassword
        case host
        case instanceId
        case jdbcConnectionUrl
        case jdbcDriverClassName
        case jdbcDriverJarUri
        case jdbcEnforceSsl
        case jdbcEngine
        case jdbcEngineVersion
        case kafkaBootstrapServers
        case kafkaClientKeystore
        case kafkaClientKeystorePassword
        case kafkaClientKeyPassword
        case kafkaCustomCert
        case kafkaSkipCustomCertValidation
        case kafkaSslEnabled
        case password
        case port
        case secretId
        case skipCustomJdbcCertValidation
        case userName
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionPropertyKey] {
            return [
                .configFiles,
                .connectionUrl,
                .connectorClassName,
                .connectorType,
                .connectorUrl,
                .customJdbcCert,
                .customJdbcCertString,
                .encryptedKafkaClientKeystorePassword,
                .encryptedKafkaClientKeyPassword,
                .encryptedPassword,
                .host,
                .instanceId,
                .jdbcConnectionUrl,
                .jdbcDriverClassName,
                .jdbcDriverJarUri,
                .jdbcEnforceSsl,
                .jdbcEngine,
                .jdbcEngineVersion,
                .kafkaBootstrapServers,
                .kafkaClientKeystore,
                .kafkaClientKeystorePassword,
                .kafkaClientKeyPassword,
                .kafkaCustomCert,
                .kafkaSkipCustomCertValidation,
                .kafkaSslEnabled,
                .password,
                .port,
                .secretId,
                .skipCustomJdbcCertValidation,
                .userName,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configFiles: return "CONFIG_FILES"
            case .connectionUrl: return "CONNECTION_URL"
            case .connectorClassName: return "CONNECTOR_CLASS_NAME"
            case .connectorType: return "CONNECTOR_TYPE"
            case .connectorUrl: return "CONNECTOR_URL"
            case .customJdbcCert: return "CUSTOM_JDBC_CERT"
            case .customJdbcCertString: return "CUSTOM_JDBC_CERT_STRING"
            case .encryptedKafkaClientKeystorePassword: return "ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD"
            case .encryptedKafkaClientKeyPassword: return "ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD"
            case .encryptedPassword: return "ENCRYPTED_PASSWORD"
            case .host: return "HOST"
            case .instanceId: return "INSTANCE_ID"
            case .jdbcConnectionUrl: return "JDBC_CONNECTION_URL"
            case .jdbcDriverClassName: return "JDBC_DRIVER_CLASS_NAME"
            case .jdbcDriverJarUri: return "JDBC_DRIVER_JAR_URI"
            case .jdbcEnforceSsl: return "JDBC_ENFORCE_SSL"
            case .jdbcEngine: return "JDBC_ENGINE"
            case .jdbcEngineVersion: return "JDBC_ENGINE_VERSION"
            case .kafkaBootstrapServers: return "KAFKA_BOOTSTRAP_SERVERS"
            case .kafkaClientKeystore: return "KAFKA_CLIENT_KEYSTORE"
            case .kafkaClientKeystorePassword: return "KAFKA_CLIENT_KEYSTORE_PASSWORD"
            case .kafkaClientKeyPassword: return "KAFKA_CLIENT_KEY_PASSWORD"
            case .kafkaCustomCert: return "KAFKA_CUSTOM_CERT"
            case .kafkaSkipCustomCertValidation: return "KAFKA_SKIP_CUSTOM_CERT_VALIDATION"
            case .kafkaSslEnabled: return "KAFKA_SSL_ENABLED"
            case .password: return "PASSWORD"
            case .port: return "PORT"
            case .secretId: return "SECRET_ID"
            case .skipCustomJdbcCertValidation: return "SKIP_CUSTOM_JDBC_CERT_VALIDATION"
            case .userName: return "USERNAME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectionPropertyKey(rawValue: rawValue) ?? ConnectionPropertyKey.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes {
    public enum ConnectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case custom
        case jdbc
        case kafka
        case marketplace
        case mongodb
        case network
        case sftp
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionType] {
            return [
                .custom,
                .jdbc,
                .kafka,
                .marketplace,
                .mongodb,
                .network,
                .sftp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .custom: return "CUSTOM"
            case .jdbc: return "JDBC"
            case .kafka: return "KAFKA"
            case .marketplace: return "MARKETPLACE"
            case .mongodb: return "MONGODB"
            case .network: return "NETWORK"
            case .sftp: return "SFTP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectionType(rawValue: rawValue) ?? ConnectionType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.ConnectionsList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connections = "Connections"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connections = connections {
            var connectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connections)
            for orchestrationstringlist0 in connections {
                try connectionsContainer.encode(orchestrationstringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .connections)
        var connectionsDecoded0:[Swift.String]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [Swift.String]()
            for string0 in connectionsContainer {
                if let string0 = string0 {
                    connectionsDecoded0?.append(string0)
                }
            }
        }
        connections = connectionsDecoded0
    }
}

extension GlueClientTypes {
    /// Specifies the connections used by a job.
    public struct ConnectionsList: Swift.Equatable {
        /// A list of connections used by the job.
        public var connections: [Swift.String]?

        public init (
            connections: [Swift.String]? = nil
        )
        {
            self.connections = connections
        }
    }

}

extension GlueClientTypes.Crawl: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completedOn = "CompletedOn"
        case errorMessage = "ErrorMessage"
        case logGroup = "LogGroup"
        case logStream = "LogStream"
        case startedOn = "StartedOn"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completedOn = completedOn {
            try encodeContainer.encode(completedOn.timeIntervalSince1970, forKey: .completedOn)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let logGroup = logGroup {
            try encodeContainer.encode(logGroup, forKey: .logGroup)
        }
        if let logStream = logStream {
            try encodeContainer.encode(logStream, forKey: .logStream)
        }
        if let startedOn = startedOn {
            try encodeContainer.encode(startedOn.timeIntervalSince1970, forKey: .startedOn)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlState.self, forKey: .state)
        state = stateDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let logGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroup)
        logGroup = logGroupDecoded
        let logStreamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStream)
        logStream = logStreamDecoded
    }
}

extension GlueClientTypes {
    /// The details of a crawl in the workflow.
    public struct Crawl: Swift.Equatable {
        /// The date and time on which the crawl completed.
        public var completedOn: ClientRuntime.Date?
        /// The error message associated with the crawl.
        public var errorMessage: Swift.String?
        /// The log group associated with the crawl.
        public var logGroup: Swift.String?
        /// The log stream associated with the crawl.
        public var logStream: Swift.String?
        /// The date and time on which the crawl started.
        public var startedOn: ClientRuntime.Date?
        /// The state of the crawler.
        public var state: GlueClientTypes.CrawlState?

        public init (
            completedOn: ClientRuntime.Date? = nil,
            errorMessage: Swift.String? = nil,
            logGroup: Swift.String? = nil,
            logStream: Swift.String? = nil,
            startedOn: ClientRuntime.Date? = nil,
            state: GlueClientTypes.CrawlState? = nil
        )
        {
            self.completedOn = completedOn
            self.errorMessage = errorMessage
            self.logGroup = logGroup
            self.logStream = logStream
            self.startedOn = startedOn
            self.state = state
        }
    }

}

extension GlueClientTypes {
    public enum CrawlState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case cancelling
        case failed
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [CrawlState] {
            return [
                .cancelled,
                .cancelling,
                .failed,
                .running,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .cancelling: return "CANCELLING"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CrawlState(rawValue: rawValue) ?? CrawlState.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.Crawler: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifiers = "Classifiers"
        case configuration = "Configuration"
        case crawlElapsedTime = "CrawlElapsedTime"
        case crawlerSecurityConfiguration = "CrawlerSecurityConfiguration"
        case creationTime = "CreationTime"
        case databaseName = "DatabaseName"
        case description = "Description"
        case lastCrawl = "LastCrawl"
        case lastUpdated = "LastUpdated"
        case lineageConfiguration = "LineageConfiguration"
        case name = "Name"
        case recrawlPolicy = "RecrawlPolicy"
        case role = "Role"
        case schedule = "Schedule"
        case schemaChangePolicy = "SchemaChangePolicy"
        case state = "State"
        case tablePrefix = "TablePrefix"
        case targets = "Targets"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classifiers = classifiers {
            var classifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .classifiers)
            for classifiernamelist0 in classifiers {
                try classifiersContainer.encode(classifiernamelist0)
            }
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if crawlElapsedTime != 0 {
            try encodeContainer.encode(crawlElapsedTime, forKey: .crawlElapsedTime)
        }
        if let crawlerSecurityConfiguration = crawlerSecurityConfiguration {
            try encodeContainer.encode(crawlerSecurityConfiguration, forKey: .crawlerSecurityConfiguration)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastCrawl = lastCrawl {
            try encodeContainer.encode(lastCrawl, forKey: .lastCrawl)
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let lineageConfiguration = lineageConfiguration {
            try encodeContainer.encode(lineageConfiguration, forKey: .lineageConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recrawlPolicy = recrawlPolicy {
            try encodeContainer.encode(recrawlPolicy, forKey: .recrawlPolicy)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let schemaChangePolicy = schemaChangePolicy {
            try encodeContainer.encode(schemaChangePolicy, forKey: .schemaChangePolicy)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tablePrefix = tablePrefix {
            try encodeContainer.encode(tablePrefix, forKey: .tablePrefix)
        }
        if let targets = targets {
            try encodeContainer.encode(targets, forKey: .targets)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let targetsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlerTargets.self, forKey: .targets)
        targets = targetsDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let classifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .classifiers)
        var classifiersDecoded0:[Swift.String]? = nil
        if let classifiersContainer = classifiersContainer {
            classifiersDecoded0 = [Swift.String]()
            for string0 in classifiersContainer {
                if let string0 = string0 {
                    classifiersDecoded0?.append(string0)
                }
            }
        }
        classifiers = classifiersDecoded0
        let recrawlPolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RecrawlPolicy.self, forKey: .recrawlPolicy)
        recrawlPolicy = recrawlPolicyDecoded
        let schemaChangePolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaChangePolicy.self, forKey: .schemaChangePolicy)
        schemaChangePolicy = schemaChangePolicyDecoded
        let lineageConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LineageConfiguration.self, forKey: .lineageConfiguration)
        lineageConfiguration = lineageConfigurationDecoded
        let stateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlerState.self, forKey: .state)
        state = stateDecoded
        let tablePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tablePrefix)
        tablePrefix = tablePrefixDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Schedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let crawlElapsedTimeDecoded = try containerValues.decode(Swift.Int.self, forKey: .crawlElapsedTime)
        crawlElapsedTime = crawlElapsedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let lastCrawlDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LastCrawlInfo.self, forKey: .lastCrawl)
        lastCrawl = lastCrawlDecoded
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let crawlerSecurityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerSecurityConfiguration)
        crawlerSecurityConfiguration = crawlerSecurityConfigurationDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a crawler program that examines a data source and uses classifiers to try to determine its schema. If successful, the crawler records metadata concerning the data source in the Glue Data Catalog.
    public struct Crawler: Swift.Equatable {
        /// A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler.
        public var classifiers: [Swift.String]?
        /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Include and Exclude Patterns](https://docs.aws.amazon.com/glue/latest/dg/define-crawler.html#crawler-data-stores-exclude).
        public var configuration: Swift.String?
        /// If the crawler is running, contains the total time elapsed since the last crawl began.
        public var crawlElapsedTime: Swift.Int
        /// The name of the SecurityConfiguration structure to be used by this crawler.
        public var crawlerSecurityConfiguration: Swift.String?
        /// The time that the crawler was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the database in which the crawler's output is stored.
        public var databaseName: Swift.String?
        /// A description of the crawler.
        public var description: Swift.String?
        /// The status of the last crawl, and potentially error information if an error occurred.
        public var lastCrawl: GlueClientTypes.LastCrawlInfo?
        /// The time that the crawler was last updated.
        public var lastUpdated: ClientRuntime.Date?
        /// A configuration that specifies whether data lineage is enabled for the crawler.
        public var lineageConfiguration: GlueClientTypes.LineageConfiguration?
        /// The name of the crawler.
        public var name: Swift.String?
        /// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
        public var recrawlPolicy: GlueClientTypes.RecrawlPolicy?
        /// The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
        public var role: Swift.String?
        /// For scheduled crawlers, the schedule when the crawler runs.
        public var schedule: GlueClientTypes.Schedule?
        /// The policy that specifies update and delete behaviors for the crawler.
        public var schemaChangePolicy: GlueClientTypes.SchemaChangePolicy?
        /// Indicates whether the crawler is running, or whether a run is pending.
        public var state: GlueClientTypes.CrawlerState?
        /// The prefix added to the names of tables that are created.
        public var tablePrefix: Swift.String?
        /// A collection of targets to crawl.
        public var targets: GlueClientTypes.CrawlerTargets?
        /// The version of the crawler.
        public var version: Swift.Int

        public init (
            classifiers: [Swift.String]? = nil,
            configuration: Swift.String? = nil,
            crawlElapsedTime: Swift.Int = 0,
            crawlerSecurityConfiguration: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            databaseName: Swift.String? = nil,
            description: Swift.String? = nil,
            lastCrawl: GlueClientTypes.LastCrawlInfo? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            lineageConfiguration: GlueClientTypes.LineageConfiguration? = nil,
            name: Swift.String? = nil,
            recrawlPolicy: GlueClientTypes.RecrawlPolicy? = nil,
            role: Swift.String? = nil,
            schedule: GlueClientTypes.Schedule? = nil,
            schemaChangePolicy: GlueClientTypes.SchemaChangePolicy? = nil,
            state: GlueClientTypes.CrawlerState? = nil,
            tablePrefix: Swift.String? = nil,
            targets: GlueClientTypes.CrawlerTargets? = nil,
            version: Swift.Int = 0
        )
        {
            self.classifiers = classifiers
            self.configuration = configuration
            self.crawlElapsedTime = crawlElapsedTime
            self.crawlerSecurityConfiguration = crawlerSecurityConfiguration
            self.creationTime = creationTime
            self.databaseName = databaseName
            self.description = description
            self.lastCrawl = lastCrawl
            self.lastUpdated = lastUpdated
            self.lineageConfiguration = lineageConfiguration
            self.name = name
            self.recrawlPolicy = recrawlPolicy
            self.role = role
            self.schedule = schedule
            self.schemaChangePolicy = schemaChangePolicy
            self.state = state
            self.tablePrefix = tablePrefix
            self.targets = targets
            self.version = version
        }
    }

}

extension GlueClientTypes {
    public enum CrawlerLineageSettings: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disable
        case enable
        case sdkUnknown(Swift.String)

        public static var allCases: [CrawlerLineageSettings] {
            return [
                .disable,
                .enable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disable: return "DISABLE"
            case .enable: return "ENABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CrawlerLineageSettings(rawValue: rawValue) ?? CrawlerLineageSettings.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.CrawlerMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerName = "CrawlerName"
        case lastRuntimeSeconds = "LastRuntimeSeconds"
        case medianRuntimeSeconds = "MedianRuntimeSeconds"
        case stillEstimating = "StillEstimating"
        case tablesCreated = "TablesCreated"
        case tablesDeleted = "TablesDeleted"
        case tablesUpdated = "TablesUpdated"
        case timeLeftSeconds = "TimeLeftSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawlerName = crawlerName {
            try encodeContainer.encode(crawlerName, forKey: .crawlerName)
        }
        if lastRuntimeSeconds != 0.0 {
            try encodeContainer.encode(lastRuntimeSeconds, forKey: .lastRuntimeSeconds)
        }
        if medianRuntimeSeconds != 0.0 {
            try encodeContainer.encode(medianRuntimeSeconds, forKey: .medianRuntimeSeconds)
        }
        if stillEstimating != false {
            try encodeContainer.encode(stillEstimating, forKey: .stillEstimating)
        }
        if tablesCreated != 0 {
            try encodeContainer.encode(tablesCreated, forKey: .tablesCreated)
        }
        if tablesDeleted != 0 {
            try encodeContainer.encode(tablesDeleted, forKey: .tablesDeleted)
        }
        if tablesUpdated != 0 {
            try encodeContainer.encode(tablesUpdated, forKey: .tablesUpdated)
        }
        if timeLeftSeconds != 0.0 {
            try encodeContainer.encode(timeLeftSeconds, forKey: .timeLeftSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerName)
        crawlerName = crawlerNameDecoded
        let timeLeftSecondsDecoded = try containerValues.decode(Swift.Double.self, forKey: .timeLeftSeconds)
        timeLeftSeconds = timeLeftSecondsDecoded
        let stillEstimatingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .stillEstimating)
        stillEstimating = stillEstimatingDecoded
        let lastRuntimeSecondsDecoded = try containerValues.decode(Swift.Double.self, forKey: .lastRuntimeSeconds)
        lastRuntimeSeconds = lastRuntimeSecondsDecoded
        let medianRuntimeSecondsDecoded = try containerValues.decode(Swift.Double.self, forKey: .medianRuntimeSeconds)
        medianRuntimeSeconds = medianRuntimeSecondsDecoded
        let tablesCreatedDecoded = try containerValues.decode(Swift.Int.self, forKey: .tablesCreated)
        tablesCreated = tablesCreatedDecoded
        let tablesUpdatedDecoded = try containerValues.decode(Swift.Int.self, forKey: .tablesUpdated)
        tablesUpdated = tablesUpdatedDecoded
        let tablesDeletedDecoded = try containerValues.decode(Swift.Int.self, forKey: .tablesDeleted)
        tablesDeleted = tablesDeletedDecoded
    }
}

extension GlueClientTypes {
    /// Metrics for a specified crawler.
    public struct CrawlerMetrics: Swift.Equatable {
        /// The name of the crawler.
        public var crawlerName: Swift.String?
        /// The duration of the crawler's most recent run, in seconds.
        public var lastRuntimeSeconds: Swift.Double
        /// The median duration of this crawler's runs, in seconds.
        public var medianRuntimeSeconds: Swift.Double
        /// True if the crawler is still estimating how long it will take to complete this run.
        public var stillEstimating: Swift.Bool
        /// The number of tables created by this crawler.
        public var tablesCreated: Swift.Int
        /// The number of tables deleted by this crawler.
        public var tablesDeleted: Swift.Int
        /// The number of tables updated by this crawler.
        public var tablesUpdated: Swift.Int
        /// The estimated time left to complete a running crawl.
        public var timeLeftSeconds: Swift.Double

        public init (
            crawlerName: Swift.String? = nil,
            lastRuntimeSeconds: Swift.Double = 0.0,
            medianRuntimeSeconds: Swift.Double = 0.0,
            stillEstimating: Swift.Bool = false,
            tablesCreated: Swift.Int = 0,
            tablesDeleted: Swift.Int = 0,
            tablesUpdated: Swift.Int = 0,
            timeLeftSeconds: Swift.Double = 0.0
        )
        {
            self.crawlerName = crawlerName
            self.lastRuntimeSeconds = lastRuntimeSeconds
            self.medianRuntimeSeconds = medianRuntimeSeconds
            self.stillEstimating = stillEstimating
            self.tablesCreated = tablesCreated
            self.tablesDeleted = tablesDeleted
            self.tablesUpdated = tablesUpdated
            self.timeLeftSeconds = timeLeftSeconds
        }
    }

}

extension GlueClientTypes.CrawlerNodeDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawls = "Crawls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawls = crawls {
            var crawlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .crawls)
            for crawllist0 in crawls {
                try crawlsContainer.encode(crawllist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Crawl?].self, forKey: .crawls)
        var crawlsDecoded0:[GlueClientTypes.Crawl]? = nil
        if let crawlsContainer = crawlsContainer {
            crawlsDecoded0 = [GlueClientTypes.Crawl]()
            for structure0 in crawlsContainer {
                if let structure0 = structure0 {
                    crawlsDecoded0?.append(structure0)
                }
            }
        }
        crawls = crawlsDecoded0
    }
}

extension GlueClientTypes {
    /// The details of a Crawler node present in the workflow.
    public struct CrawlerNodeDetails: Swift.Equatable {
        /// A list of crawls represented by the crawl node.
        public var crawls: [GlueClientTypes.Crawl]?

        public init (
            crawls: [GlueClientTypes.Crawl]? = nil
        )
        {
            self.crawls = crawls
        }
    }

}

extension CrawlerNotRunningException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CrawlerNotRunningExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified crawler is not running.
public struct CrawlerNotRunningException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CrawlerNotRunningExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CrawlerNotRunningExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CrawlerRunningException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CrawlerRunningExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation cannot be performed because the crawler is already running.
public struct CrawlerRunningException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CrawlerRunningExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CrawlerRunningExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes {
    public enum CrawlerState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ready
        case running
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [CrawlerState] {
            return [
                .ready,
                .running,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ready: return "READY"
            case .running: return "RUNNING"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CrawlerState(rawValue: rawValue) ?? CrawlerState.sdkUnknown(rawValue)
        }
    }
}

extension CrawlerStoppingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CrawlerStoppingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified crawler is stopping.
public struct CrawlerStoppingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CrawlerStoppingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CrawlerStoppingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.CrawlerTargets: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogTargets = "CatalogTargets"
        case dynamoDBTargets = "DynamoDBTargets"
        case jdbcTargets = "JdbcTargets"
        case mongoDBTargets = "MongoDBTargets"
        case s3Targets = "S3Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogTargets = catalogTargets {
            var catalogTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .catalogTargets)
            for catalogtargetlist0 in catalogTargets {
                try catalogTargetsContainer.encode(catalogtargetlist0)
            }
        }
        if let dynamoDBTargets = dynamoDBTargets {
            var dynamoDBTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dynamoDBTargets)
            for dynamodbtargetlist0 in dynamoDBTargets {
                try dynamoDBTargetsContainer.encode(dynamodbtargetlist0)
            }
        }
        if let jdbcTargets = jdbcTargets {
            var jdbcTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jdbcTargets)
            for jdbctargetlist0 in jdbcTargets {
                try jdbcTargetsContainer.encode(jdbctargetlist0)
            }
        }
        if let mongoDBTargets = mongoDBTargets {
            var mongoDBTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mongoDBTargets)
            for mongodbtargetlist0 in mongoDBTargets {
                try mongoDBTargetsContainer.encode(mongodbtargetlist0)
            }
        }
        if let s3Targets = s3Targets {
            var s3TargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .s3Targets)
            for s3targetlist0 in s3Targets {
                try s3TargetsContainer.encode(s3targetlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3TargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.S3Target?].self, forKey: .s3Targets)
        var s3TargetsDecoded0:[GlueClientTypes.S3Target]? = nil
        if let s3TargetsContainer = s3TargetsContainer {
            s3TargetsDecoded0 = [GlueClientTypes.S3Target]()
            for structure0 in s3TargetsContainer {
                if let structure0 = structure0 {
                    s3TargetsDecoded0?.append(structure0)
                }
            }
        }
        s3Targets = s3TargetsDecoded0
        let jdbcTargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.JdbcTarget?].self, forKey: .jdbcTargets)
        var jdbcTargetsDecoded0:[GlueClientTypes.JdbcTarget]? = nil
        if let jdbcTargetsContainer = jdbcTargetsContainer {
            jdbcTargetsDecoded0 = [GlueClientTypes.JdbcTarget]()
            for structure0 in jdbcTargetsContainer {
                if let structure0 = structure0 {
                    jdbcTargetsDecoded0?.append(structure0)
                }
            }
        }
        jdbcTargets = jdbcTargetsDecoded0
        let mongoDBTargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.MongoDBTarget?].self, forKey: .mongoDBTargets)
        var mongoDBTargetsDecoded0:[GlueClientTypes.MongoDBTarget]? = nil
        if let mongoDBTargetsContainer = mongoDBTargetsContainer {
            mongoDBTargetsDecoded0 = [GlueClientTypes.MongoDBTarget]()
            for structure0 in mongoDBTargetsContainer {
                if let structure0 = structure0 {
                    mongoDBTargetsDecoded0?.append(structure0)
                }
            }
        }
        mongoDBTargets = mongoDBTargetsDecoded0
        let dynamoDBTargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.DynamoDBTarget?].self, forKey: .dynamoDBTargets)
        var dynamoDBTargetsDecoded0:[GlueClientTypes.DynamoDBTarget]? = nil
        if let dynamoDBTargetsContainer = dynamoDBTargetsContainer {
            dynamoDBTargetsDecoded0 = [GlueClientTypes.DynamoDBTarget]()
            for structure0 in dynamoDBTargetsContainer {
                if let structure0 = structure0 {
                    dynamoDBTargetsDecoded0?.append(structure0)
                }
            }
        }
        dynamoDBTargets = dynamoDBTargetsDecoded0
        let catalogTargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.CatalogTarget?].self, forKey: .catalogTargets)
        var catalogTargetsDecoded0:[GlueClientTypes.CatalogTarget]? = nil
        if let catalogTargetsContainer = catalogTargetsContainer {
            catalogTargetsDecoded0 = [GlueClientTypes.CatalogTarget]()
            for structure0 in catalogTargetsContainer {
                if let structure0 = structure0 {
                    catalogTargetsDecoded0?.append(structure0)
                }
            }
        }
        catalogTargets = catalogTargetsDecoded0
    }
}

extension GlueClientTypes {
    /// Specifies data stores to crawl.
    public struct CrawlerTargets: Swift.Equatable {
        /// Specifies Glue Data Catalog targets.
        public var catalogTargets: [GlueClientTypes.CatalogTarget]?
        /// Specifies Amazon DynamoDB targets.
        public var dynamoDBTargets: [GlueClientTypes.DynamoDBTarget]?
        /// Specifies JDBC targets.
        public var jdbcTargets: [GlueClientTypes.JdbcTarget]?
        /// Specifies Amazon DocumentDB or MongoDB targets.
        public var mongoDBTargets: [GlueClientTypes.MongoDBTarget]?
        /// Specifies Amazon Simple Storage Service (Amazon S3) targets.
        public var s3Targets: [GlueClientTypes.S3Target]?

        public init (
            catalogTargets: [GlueClientTypes.CatalogTarget]? = nil,
            dynamoDBTargets: [GlueClientTypes.DynamoDBTarget]? = nil,
            jdbcTargets: [GlueClientTypes.JdbcTarget]? = nil,
            mongoDBTargets: [GlueClientTypes.MongoDBTarget]? = nil,
            s3Targets: [GlueClientTypes.S3Target]? = nil
        )
        {
            self.catalogTargets = catalogTargets
            self.dynamoDBTargets = dynamoDBTargets
            self.jdbcTargets = jdbcTargets
            self.mongoDBTargets = mongoDBTargets
            self.s3Targets = s3Targets
        }
    }

}

extension CreateBlueprintInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintLocation = "BlueprintLocation"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintLocation = blueprintLocation {
            try encodeContainer.encode(blueprintLocation, forKey: .blueprintLocation)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateBlueprintInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateBlueprintInput: Swift.Equatable {
    /// Specifies a path in Amazon S3 where the blueprint is published.
    /// This member is required.
    public var blueprintLocation: Swift.String?
    /// A description of the blueprint.
    public var description: Swift.String?
    /// The name of the blueprint.
    /// This member is required.
    public var name: Swift.String?
    /// The tags to be applied to this blueprint.
    public var tags: [Swift.String:Swift.String]?

    public init (
        blueprintLocation: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.blueprintLocation = blueprintLocation
        self.description = description
        self.name = name
        self.tags = tags
    }
}

struct CreateBlueprintInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let blueprintLocation: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateBlueprintInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintLocation = "BlueprintLocation"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let blueprintLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintLocation)
        blueprintLocation = blueprintLocationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateBlueprintOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBlueprintOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateBlueprintOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBlueprintOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateBlueprintOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct CreateBlueprintOutputResponse: Swift.Equatable {
    /// Returns the name of the blueprint that was registered.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct CreateBlueprintOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension CreateBlueprintOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CreateClassifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csvClassifier = "CsvClassifier"
        case grokClassifier = "GrokClassifier"
        case jsonClassifier = "JsonClassifier"
        case xMLClassifier = "XMLClassifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let csvClassifier = csvClassifier {
            try encodeContainer.encode(csvClassifier, forKey: .csvClassifier)
        }
        if let grokClassifier = grokClassifier {
            try encodeContainer.encode(grokClassifier, forKey: .grokClassifier)
        }
        if let jsonClassifier = jsonClassifier {
            try encodeContainer.encode(jsonClassifier, forKey: .jsonClassifier)
        }
        if let xMLClassifier = xMLClassifier {
            try encodeContainer.encode(xMLClassifier, forKey: .xMLClassifier)
        }
    }
}

extension CreateClassifierInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateClassifierInput: Swift.Equatable {
    /// A CsvClassifier object specifying the classifier to create.
    public var csvClassifier: GlueClientTypes.CreateCsvClassifierRequest?
    /// A GrokClassifier object specifying the classifier to create.
    public var grokClassifier: GlueClientTypes.CreateGrokClassifierRequest?
    /// A JsonClassifier object specifying the classifier to create.
    public var jsonClassifier: GlueClientTypes.CreateJsonClassifierRequest?
    /// An XMLClassifier object specifying the classifier to create.
    public var xMLClassifier: GlueClientTypes.CreateXMLClassifierRequest?

    public init (
        csvClassifier: GlueClientTypes.CreateCsvClassifierRequest? = nil,
        grokClassifier: GlueClientTypes.CreateGrokClassifierRequest? = nil,
        jsonClassifier: GlueClientTypes.CreateJsonClassifierRequest? = nil,
        xMLClassifier: GlueClientTypes.CreateXMLClassifierRequest? = nil
    )
    {
        self.csvClassifier = csvClassifier
        self.grokClassifier = grokClassifier
        self.jsonClassifier = jsonClassifier
        self.xMLClassifier = xMLClassifier
    }
}

struct CreateClassifierInputBody: Swift.Equatable {
    let grokClassifier: GlueClientTypes.CreateGrokClassifierRequest?
    let xMLClassifier: GlueClientTypes.CreateXMLClassifierRequest?
    let jsonClassifier: GlueClientTypes.CreateJsonClassifierRequest?
    let csvClassifier: GlueClientTypes.CreateCsvClassifierRequest?
}

extension CreateClassifierInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csvClassifier = "CsvClassifier"
        case grokClassifier = "GrokClassifier"
        case jsonClassifier = "JsonClassifier"
        case xMLClassifier = "XMLClassifier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grokClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CreateGrokClassifierRequest.self, forKey: .grokClassifier)
        grokClassifier = grokClassifierDecoded
        let xMLClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CreateXMLClassifierRequest.self, forKey: .xMLClassifier)
        xMLClassifier = xMLClassifierDecoded
        let jsonClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CreateJsonClassifierRequest.self, forKey: .jsonClassifier)
        jsonClassifier = jsonClassifierDecoded
        let csvClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CreateCsvClassifierRequest.self, forKey: .csvClassifier)
        csvClassifier = csvClassifierDecoded
    }
}

extension CreateClassifierOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateClassifierOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateClassifierOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateClassifierOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateClassifierOutputResponse: Swift.Equatable {

}

extension CreateConnectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case connectionInput = "ConnectionInput"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let connectionInput = connectionInput {
            try encodeContainer.encode(connectionInput, forKey: .connectionInput)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateConnectionInput: Swift.Equatable {
    /// The ID of the Data Catalog in which to create the connection. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// A ConnectionInput object defining the connection to create.
    /// This member is required.
    public var connectionInput: GlueClientTypes.ConnectionInput?
    /// The tags you assign to the connection.
    public var tags: [Swift.String:Swift.String]?

    public init (
        catalogId: Swift.String? = nil,
        connectionInput: GlueClientTypes.ConnectionInput? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.catalogId = catalogId
        self.connectionInput = connectionInput
        self.tags = tags
    }
}

struct CreateConnectionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let connectionInput: GlueClientTypes.ConnectionInput?
    let tags: [Swift.String:Swift.String]?
}

extension CreateConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case connectionInput = "ConnectionInput"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let connectionInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionInput.self, forKey: .connectionInput)
        connectionInput = connectionInputDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateConnectionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case glueEncryptionException(GlueEncryptionException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateConnectionOutputResponse: Swift.Equatable {

}

extension CreateCrawlerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifiers = "Classifiers"
        case configuration = "Configuration"
        case crawlerSecurityConfiguration = "CrawlerSecurityConfiguration"
        case databaseName = "DatabaseName"
        case description = "Description"
        case lineageConfiguration = "LineageConfiguration"
        case name = "Name"
        case recrawlPolicy = "RecrawlPolicy"
        case role = "Role"
        case schedule = "Schedule"
        case schemaChangePolicy = "SchemaChangePolicy"
        case tablePrefix = "TablePrefix"
        case tags = "Tags"
        case targets = "Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classifiers = classifiers {
            var classifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .classifiers)
            for classifiernamelist0 in classifiers {
                try classifiersContainer.encode(classifiernamelist0)
            }
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let crawlerSecurityConfiguration = crawlerSecurityConfiguration {
            try encodeContainer.encode(crawlerSecurityConfiguration, forKey: .crawlerSecurityConfiguration)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lineageConfiguration = lineageConfiguration {
            try encodeContainer.encode(lineageConfiguration, forKey: .lineageConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recrawlPolicy = recrawlPolicy {
            try encodeContainer.encode(recrawlPolicy, forKey: .recrawlPolicy)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let schemaChangePolicy = schemaChangePolicy {
            try encodeContainer.encode(schemaChangePolicy, forKey: .schemaChangePolicy)
        }
        if let tablePrefix = tablePrefix {
            try encodeContainer.encode(tablePrefix, forKey: .tablePrefix)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let targets = targets {
            try encodeContainer.encode(targets, forKey: .targets)
        }
    }
}

extension CreateCrawlerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateCrawlerInput: Swift.Equatable {
    /// A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
    public var classifiers: [Swift.String]?
    /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Configuring a Crawler](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
    public var configuration: Swift.String?
    /// The name of the SecurityConfiguration structure to be used by this crawler.
    public var crawlerSecurityConfiguration: Swift.String?
    /// The Glue database where results are written, such as: arn:aws:daylight:us-east-1::database/sometable/*.
    public var databaseName: Swift.String?
    /// A description of the new crawler.
    public var description: Swift.String?
    /// Specifies data lineage configuration settings for the crawler.
    public var lineageConfiguration: GlueClientTypes.LineageConfiguration?
    /// Name of the new crawler.
    /// This member is required.
    public var name: Swift.String?
    /// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
    public var recrawlPolicy: GlueClientTypes.RecrawlPolicy?
    /// The IAM role or Amazon Resource Name (ARN) of an IAM role used by the new crawler to access customer resources.
    /// This member is required.
    public var role: Swift.String?
    /// A cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
    public var schedule: Swift.String?
    /// The policy for the crawler's update and deletion behavior.
    public var schemaChangePolicy: GlueClientTypes.SchemaChangePolicy?
    /// The table prefix used for catalog tables that are created.
    public var tablePrefix: Swift.String?
    /// The tags to use with this crawler request. You may use tags to limit access to the crawler. For more information about tags in Glue, see [Amazon Web Services Tags in Glue](https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html) in the developer guide.
    public var tags: [Swift.String:Swift.String]?
    /// A list of collection of targets to crawl.
    /// This member is required.
    public var targets: GlueClientTypes.CrawlerTargets?

    public init (
        classifiers: [Swift.String]? = nil,
        configuration: Swift.String? = nil,
        crawlerSecurityConfiguration: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        description: Swift.String? = nil,
        lineageConfiguration: GlueClientTypes.LineageConfiguration? = nil,
        name: Swift.String? = nil,
        recrawlPolicy: GlueClientTypes.RecrawlPolicy? = nil,
        role: Swift.String? = nil,
        schedule: Swift.String? = nil,
        schemaChangePolicy: GlueClientTypes.SchemaChangePolicy? = nil,
        tablePrefix: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        targets: GlueClientTypes.CrawlerTargets? = nil
    )
    {
        self.classifiers = classifiers
        self.configuration = configuration
        self.crawlerSecurityConfiguration = crawlerSecurityConfiguration
        self.databaseName = databaseName
        self.description = description
        self.lineageConfiguration = lineageConfiguration
        self.name = name
        self.recrawlPolicy = recrawlPolicy
        self.role = role
        self.schedule = schedule
        self.schemaChangePolicy = schemaChangePolicy
        self.tablePrefix = tablePrefix
        self.tags = tags
        self.targets = targets
    }
}

struct CreateCrawlerInputBody: Swift.Equatable {
    let name: Swift.String?
    let role: Swift.String?
    let databaseName: Swift.String?
    let description: Swift.String?
    let targets: GlueClientTypes.CrawlerTargets?
    let schedule: Swift.String?
    let classifiers: [Swift.String]?
    let tablePrefix: Swift.String?
    let schemaChangePolicy: GlueClientTypes.SchemaChangePolicy?
    let recrawlPolicy: GlueClientTypes.RecrawlPolicy?
    let lineageConfiguration: GlueClientTypes.LineageConfiguration?
    let configuration: Swift.String?
    let crawlerSecurityConfiguration: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateCrawlerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifiers = "Classifiers"
        case configuration = "Configuration"
        case crawlerSecurityConfiguration = "CrawlerSecurityConfiguration"
        case databaseName = "DatabaseName"
        case description = "Description"
        case lineageConfiguration = "LineageConfiguration"
        case name = "Name"
        case recrawlPolicy = "RecrawlPolicy"
        case role = "Role"
        case schedule = "Schedule"
        case schemaChangePolicy = "SchemaChangePolicy"
        case tablePrefix = "TablePrefix"
        case tags = "Tags"
        case targets = "Targets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let targetsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlerTargets.self, forKey: .targets)
        targets = targetsDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let classifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .classifiers)
        var classifiersDecoded0:[Swift.String]? = nil
        if let classifiersContainer = classifiersContainer {
            classifiersDecoded0 = [Swift.String]()
            for string0 in classifiersContainer {
                if let string0 = string0 {
                    classifiersDecoded0?.append(string0)
                }
            }
        }
        classifiers = classifiersDecoded0
        let tablePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tablePrefix)
        tablePrefix = tablePrefixDecoded
        let schemaChangePolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaChangePolicy.self, forKey: .schemaChangePolicy)
        schemaChangePolicy = schemaChangePolicyDecoded
        let recrawlPolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RecrawlPolicy.self, forKey: .recrawlPolicy)
        recrawlPolicy = recrawlPolicyDecoded
        let lineageConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LineageConfiguration.self, forKey: .lineageConfiguration)
        lineageConfiguration = lineageConfigurationDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let crawlerSecurityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerSecurityConfiguration)
        crawlerSecurityConfiguration = crawlerSecurityConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateCrawlerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCrawlerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCrawlerOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCrawlerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateCrawlerOutputResponse: Swift.Equatable {

}

extension GlueClientTypes.CreateCsvClassifierRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowSingleColumn = "AllowSingleColumn"
        case containsHeader = "ContainsHeader"
        case delimiter = "Delimiter"
        case disableValueTrimming = "DisableValueTrimming"
        case header = "Header"
        case name = "Name"
        case quoteSymbol = "QuoteSymbol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowSingleColumn = allowSingleColumn {
            try encodeContainer.encode(allowSingleColumn, forKey: .allowSingleColumn)
        }
        if let containsHeader = containsHeader {
            try encodeContainer.encode(containsHeader.rawValue, forKey: .containsHeader)
        }
        if let delimiter = delimiter {
            try encodeContainer.encode(delimiter, forKey: .delimiter)
        }
        if let disableValueTrimming = disableValueTrimming {
            try encodeContainer.encode(disableValueTrimming, forKey: .disableValueTrimming)
        }
        if let header = header {
            var headerContainer = encodeContainer.nestedUnkeyedContainer(forKey: .header)
            for csvheader0 in header {
                try headerContainer.encode(csvheader0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let quoteSymbol = quoteSymbol {
            try encodeContainer.encode(quoteSymbol, forKey: .quoteSymbol)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let quoteSymbolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteSymbol)
        quoteSymbol = quoteSymbolDecoded
        let containsHeaderDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CsvHeaderOption.self, forKey: .containsHeader)
        containsHeader = containsHeaderDecoded
        let headerContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .header)
        var headerDecoded0:[Swift.String]? = nil
        if let headerContainer = headerContainer {
            headerDecoded0 = [Swift.String]()
            for string0 in headerContainer {
                if let string0 = string0 {
                    headerDecoded0?.append(string0)
                }
            }
        }
        header = headerDecoded0
        let disableValueTrimmingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableValueTrimming)
        disableValueTrimming = disableValueTrimmingDecoded
        let allowSingleColumnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowSingleColumn)
        allowSingleColumn = allowSingleColumnDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a custom CSV classifier for CreateClassifier to create.
    public struct CreateCsvClassifierRequest: Swift.Equatable {
        /// Enables the processing of files that contain only one column.
        public var allowSingleColumn: Swift.Bool?
        /// Indicates whether the CSV file contains a header.
        public var containsHeader: GlueClientTypes.CsvHeaderOption?
        /// A custom symbol to denote what separates each column entry in the row.
        public var delimiter: Swift.String?
        /// Specifies not to trim values before identifying the type of column values. The default value is true.
        public var disableValueTrimming: Swift.Bool?
        /// A list of strings representing column names.
        public var header: [Swift.String]?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?
        /// A custom symbol to denote what combines content into a single column value. Must be different from the column delimiter.
        public var quoteSymbol: Swift.String?

        public init (
            allowSingleColumn: Swift.Bool? = nil,
            containsHeader: GlueClientTypes.CsvHeaderOption? = nil,
            delimiter: Swift.String? = nil,
            disableValueTrimming: Swift.Bool? = nil,
            header: [Swift.String]? = nil,
            name: Swift.String? = nil,
            quoteSymbol: Swift.String? = nil
        )
        {
            self.allowSingleColumn = allowSingleColumn
            self.containsHeader = containsHeader
            self.delimiter = delimiter
            self.disableValueTrimming = disableValueTrimming
            self.header = header
            self.name = name
            self.quoteSymbol = quoteSymbol
        }
    }

}

extension CreateDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseInput = "DatabaseInput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseInput = databaseInput {
            try encodeContainer.encode(databaseInput, forKey: .databaseInput)
        }
    }
}

extension CreateDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDatabaseInput: Swift.Equatable {
    /// The ID of the Data Catalog in which to create the database. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The metadata for the database.
    /// This member is required.
    public var databaseInput: GlueClientTypes.DatabaseInput?

    public init (
        catalogId: Swift.String? = nil,
        databaseInput: GlueClientTypes.DatabaseInput? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseInput = databaseInput
    }
}

struct CreateDatabaseInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseInput: GlueClientTypes.DatabaseInput?
}

extension CreateDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseInput = "DatabaseInput"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DatabaseInput.self, forKey: .databaseInput)
        databaseInput = databaseInputDecoded
    }
}

extension CreateDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDatabaseOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case concurrentModificationException(ConcurrentModificationException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateDatabaseOutputResponse: Swift.Equatable {

}

extension CreateDevEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arguments = "Arguments"
        case endpointName = "EndpointName"
        case extraJarsS3Path = "ExtraJarsS3Path"
        case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
        case glueVersion = "GlueVersion"
        case numberOfNodes = "NumberOfNodes"
        case numberOfWorkers = "NumberOfWorkers"
        case publicKey = "PublicKey"
        case publicKeys = "PublicKeys"
        case roleArn = "RoleArn"
        case securityConfiguration = "SecurityConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case subnetId = "SubnetId"
        case tags = "Tags"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .arguments)
            for (dictKey0, mapvalue0) in arguments {
                try argumentsContainer.encode(mapvalue0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let extraJarsS3Path = extraJarsS3Path {
            try encodeContainer.encode(extraJarsS3Path, forKey: .extraJarsS3Path)
        }
        if let extraPythonLibsS3Path = extraPythonLibsS3Path {
            try encodeContainer.encode(extraPythonLibsS3Path, forKey: .extraPythonLibsS3Path)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if numberOfNodes != 0 {
            try encodeContainer.encode(numberOfNodes, forKey: .numberOfNodes)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let publicKey = publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
        if let publicKeys = publicKeys {
            var publicKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicKeys)
            for publickeyslist0 in publicKeys {
                try publicKeysContainer.encode(publickeyslist0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}

extension CreateDevEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDevEndpointInput: Swift.Equatable {
    /// A map of arguments used to configure the DevEndpoint.
    public var arguments: [Swift.String:Swift.String]?
    /// The name to be assigned to the new DevEndpoint.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The path to one or more Java .jar files in an S3 bucket that should be loaded in your DevEndpoint.
    public var extraJarsS3Path: Swift.String?
    /// The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma. You can only use pure Python libraries with a DevEndpoint. Libraries that rely on C extensions, such as the [pandas](http://pandas.pydata.org/) Python data analysis library, are not yet supported.
    public var extraPythonLibsS3Path: Swift.String?
    /// Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. For more information about the available Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide. Development endpoints that are created without specifying a Glue version default to Glue 0.9. You can specify a version of Python support for development endpoints by using the Arguments parameter in the CreateDevEndpoint or UpdateDevEndpoint APIs. If no arguments are provided, the version defaults to Python 2.
    public var glueVersion: Swift.String?
    /// The number of Glue Data Processing Units (DPUs) to allocate to this DevEndpoint.
    public var numberOfNodes: Swift.Int
    /// The number of workers of a defined workerType that are allocated to the development endpoint. The maximum number of workers you can define are 299 for G.1X, and 149 for G.2X.
    public var numberOfWorkers: Swift.Int?
    /// The public key to be used by this DevEndpoint for authentication. This attribute is provided for backward compatibility because the recommended attribute to use is public keys.
    public var publicKey: Swift.String?
    /// A list of public keys to be used by the development endpoints for authentication. The use of this attribute is preferred over a single public key because the public keys allow you to have a different private key per client. If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys. Call the UpdateDevEndpoint API with the public key content in the deletePublicKeys attribute, and the list of new keys in the addPublicKeys attribute.
    public var publicKeys: [Swift.String]?
    /// The IAM role for the DevEndpoint.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The name of the SecurityConfiguration structure to be used with this DevEndpoint.
    public var securityConfiguration: Swift.String?
    /// Security group IDs for the security groups to be used by the new DevEndpoint.
    public var securityGroupIds: [Swift.String]?
    /// The subnet ID for the new DevEndpoint to use.
    public var subnetId: Swift.String?
    /// The tags to use with this DevEndpoint. You may use tags to limit access to the DevEndpoint. For more information about tags in Glue, see [Amazon Web Services Tags in Glue](https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html) in the developer guide.
    public var tags: [Swift.String:Swift.String]?
    /// The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.
    ///
    /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
    ///
    /// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
    ///
    /// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
    ///
    ///
    /// Known issue: when a development endpoint is created with the G.2XWorkerType configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk.
    public var workerType: GlueClientTypes.WorkerType?

    public init (
        arguments: [Swift.String:Swift.String]? = nil,
        endpointName: Swift.String? = nil,
        extraJarsS3Path: Swift.String? = nil,
        extraPythonLibsS3Path: Swift.String? = nil,
        glueVersion: Swift.String? = nil,
        numberOfNodes: Swift.Int = 0,
        numberOfWorkers: Swift.Int? = nil,
        publicKey: Swift.String? = nil,
        publicKeys: [Swift.String]? = nil,
        roleArn: Swift.String? = nil,
        securityConfiguration: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        subnetId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        workerType: GlueClientTypes.WorkerType? = nil
    )
    {
        self.arguments = arguments
        self.endpointName = endpointName
        self.extraJarsS3Path = extraJarsS3Path
        self.extraPythonLibsS3Path = extraPythonLibsS3Path
        self.glueVersion = glueVersion
        self.numberOfNodes = numberOfNodes
        self.numberOfWorkers = numberOfWorkers
        self.publicKey = publicKey
        self.publicKeys = publicKeys
        self.roleArn = roleArn
        self.securityConfiguration = securityConfiguration
        self.securityGroupIds = securityGroupIds
        self.subnetId = subnetId
        self.tags = tags
        self.workerType = workerType
    }
}

struct CreateDevEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let roleArn: Swift.String?
    let securityGroupIds: [Swift.String]?
    let subnetId: Swift.String?
    let publicKey: Swift.String?
    let publicKeys: [Swift.String]?
    let numberOfNodes: Swift.Int
    let workerType: GlueClientTypes.WorkerType?
    let glueVersion: Swift.String?
    let numberOfWorkers: Swift.Int?
    let extraPythonLibsS3Path: Swift.String?
    let extraJarsS3Path: Swift.String?
    let securityConfiguration: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let arguments: [Swift.String:Swift.String]?
}

extension CreateDevEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arguments = "Arguments"
        case endpointName = "EndpointName"
        case extraJarsS3Path = "ExtraJarsS3Path"
        case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
        case glueVersion = "GlueVersion"
        case numberOfNodes = "NumberOfNodes"
        case numberOfWorkers = "NumberOfWorkers"
        case publicKey = "PublicKey"
        case publicKeys = "PublicKeys"
        case roleArn = "RoleArn"
        case securityConfiguration = "SecurityConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case subnetId = "SubnetId"
        case tags = "Tags"
        case workerType = "WorkerType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let publicKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .publicKeys)
        var publicKeysDecoded0:[Swift.String]? = nil
        if let publicKeysContainer = publicKeysContainer {
            publicKeysDecoded0 = [Swift.String]()
            for string0 in publicKeysContainer {
                if let string0 = string0 {
                    publicKeysDecoded0?.append(string0)
                }
            }
        }
        publicKeys = publicKeysDecoded0
        let numberOfNodesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let extraPythonLibsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraPythonLibsS3Path)
        extraPythonLibsS3Path = extraPythonLibsS3PathDecoded
        let extraJarsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraJarsS3Path)
        extraJarsS3Path = extraJarsS3PathDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let argumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .arguments)
        var argumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in argumentsContainer {
                if let genericstring0 = genericstring0 {
                    argumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        arguments = argumentsDecoded0
    }
}

extension CreateDevEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDevEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDevEndpointOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case alreadyExistsException(AlreadyExistsException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDevEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDevEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arguments = output.arguments
            self.availabilityZone = output.availabilityZone
            self.createdTimestamp = output.createdTimestamp
            self.endpointName = output.endpointName
            self.extraJarsS3Path = output.extraJarsS3Path
            self.extraPythonLibsS3Path = output.extraPythonLibsS3Path
            self.failureReason = output.failureReason
            self.glueVersion = output.glueVersion
            self.numberOfNodes = output.numberOfNodes
            self.numberOfWorkers = output.numberOfWorkers
            self.roleArn = output.roleArn
            self.securityConfiguration = output.securityConfiguration
            self.securityGroupIds = output.securityGroupIds
            self.status = output.status
            self.subnetId = output.subnetId
            self.vpcId = output.vpcId
            self.workerType = output.workerType
            self.yarnEndpointAddress = output.yarnEndpointAddress
            self.zeppelinRemoteSparkInterpreterPort = output.zeppelinRemoteSparkInterpreterPort
        } else {
            self.arguments = nil
            self.availabilityZone = nil
            self.createdTimestamp = nil
            self.endpointName = nil
            self.extraJarsS3Path = nil
            self.extraPythonLibsS3Path = nil
            self.failureReason = nil
            self.glueVersion = nil
            self.numberOfNodes = 0
            self.numberOfWorkers = nil
            self.roleArn = nil
            self.securityConfiguration = nil
            self.securityGroupIds = nil
            self.status = nil
            self.subnetId = nil
            self.vpcId = nil
            self.workerType = nil
            self.yarnEndpointAddress = nil
            self.zeppelinRemoteSparkInterpreterPort = 0
        }
    }
}

public struct CreateDevEndpointOutputResponse: Swift.Equatable {
    /// The map of arguments used to configure this DevEndpoint. Valid arguments are:
    ///
    /// * "--enable-glue-datacatalog": ""
    ///
    ///
    /// You can specify a version of Python support for development endpoints by using the Arguments parameter in the CreateDevEndpoint or UpdateDevEndpoint APIs. If no arguments are provided, the version defaults to Python 2.
    public var arguments: [Swift.String:Swift.String]?
    /// The AWS Availability Zone where this DevEndpoint is located.
    public var availabilityZone: Swift.String?
    /// The point in time at which this DevEndpoint was created.
    public var createdTimestamp: ClientRuntime.Date?
    /// The name assigned to the new DevEndpoint.
    public var endpointName: Swift.String?
    /// Path to one or more Java .jar files in an S3 bucket that will be loaded in your DevEndpoint.
    public var extraJarsS3Path: Swift.String?
    /// The paths to one or more Python libraries in an S3 bucket that will be loaded in your DevEndpoint.
    public var extraPythonLibsS3Path: Swift.String?
    /// The reason for a current failure in this DevEndpoint.
    public var failureReason: Swift.String?
    /// Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. For more information about the available Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide.
    public var glueVersion: Swift.String?
    /// The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.
    public var numberOfNodes: Swift.Int
    /// The number of workers of a defined workerType that are allocated to the development endpoint.
    public var numberOfWorkers: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assigned to the new DevEndpoint.
    public var roleArn: Swift.String?
    /// The name of the SecurityConfiguration structure being used with this DevEndpoint.
    public var securityConfiguration: Swift.String?
    /// The security groups assigned to the new DevEndpoint.
    public var securityGroupIds: [Swift.String]?
    /// The current status of the new DevEndpoint.
    public var status: Swift.String?
    /// The subnet ID assigned to the new DevEndpoint.
    public var subnetId: Swift.String?
    /// The ID of the virtual private cloud (VPC) used by this DevEndpoint.
    public var vpcId: Swift.String?
    /// The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X.
    public var workerType: GlueClientTypes.WorkerType?
    /// The address of the YARN endpoint used by this DevEndpoint.
    public var yarnEndpointAddress: Swift.String?
    /// The Apache Zeppelin port for the remote Apache Spark interpreter.
    public var zeppelinRemoteSparkInterpreterPort: Swift.Int

    public init (
        arguments: [Swift.String:Swift.String]? = nil,
        availabilityZone: Swift.String? = nil,
        createdTimestamp: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        extraJarsS3Path: Swift.String? = nil,
        extraPythonLibsS3Path: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        glueVersion: Swift.String? = nil,
        numberOfNodes: Swift.Int = 0,
        numberOfWorkers: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        securityConfiguration: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        status: Swift.String? = nil,
        subnetId: Swift.String? = nil,
        vpcId: Swift.String? = nil,
        workerType: GlueClientTypes.WorkerType? = nil,
        yarnEndpointAddress: Swift.String? = nil,
        zeppelinRemoteSparkInterpreterPort: Swift.Int = 0
    )
    {
        self.arguments = arguments
        self.availabilityZone = availabilityZone
        self.createdTimestamp = createdTimestamp
        self.endpointName = endpointName
        self.extraJarsS3Path = extraJarsS3Path
        self.extraPythonLibsS3Path = extraPythonLibsS3Path
        self.failureReason = failureReason
        self.glueVersion = glueVersion
        self.numberOfNodes = numberOfNodes
        self.numberOfWorkers = numberOfWorkers
        self.roleArn = roleArn
        self.securityConfiguration = securityConfiguration
        self.securityGroupIds = securityGroupIds
        self.status = status
        self.subnetId = subnetId
        self.vpcId = vpcId
        self.workerType = workerType
        self.yarnEndpointAddress = yarnEndpointAddress
        self.zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPort
    }
}

struct CreateDevEndpointOutputResponseBody: Swift.Equatable {
    let endpointName: Swift.String?
    let status: Swift.String?
    let securityGroupIds: [Swift.String]?
    let subnetId: Swift.String?
    let roleArn: Swift.String?
    let yarnEndpointAddress: Swift.String?
    let zeppelinRemoteSparkInterpreterPort: Swift.Int
    let numberOfNodes: Swift.Int
    let workerType: GlueClientTypes.WorkerType?
    let glueVersion: Swift.String?
    let numberOfWorkers: Swift.Int?
    let availabilityZone: Swift.String?
    let vpcId: Swift.String?
    let extraPythonLibsS3Path: Swift.String?
    let extraJarsS3Path: Swift.String?
    let failureReason: Swift.String?
    let securityConfiguration: Swift.String?
    let createdTimestamp: ClientRuntime.Date?
    let arguments: [Swift.String:Swift.String]?
}

extension CreateDevEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arguments = "Arguments"
        case availabilityZone = "AvailabilityZone"
        case createdTimestamp = "CreatedTimestamp"
        case endpointName = "EndpointName"
        case extraJarsS3Path = "ExtraJarsS3Path"
        case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
        case failureReason = "FailureReason"
        case glueVersion = "GlueVersion"
        case numberOfNodes = "NumberOfNodes"
        case numberOfWorkers = "NumberOfWorkers"
        case roleArn = "RoleArn"
        case securityConfiguration = "SecurityConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case status = "Status"
        case subnetId = "SubnetId"
        case vpcId = "VpcId"
        case workerType = "WorkerType"
        case yarnEndpointAddress = "YarnEndpointAddress"
        case zeppelinRemoteSparkInterpreterPort = "ZeppelinRemoteSparkInterpreterPort"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let yarnEndpointAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .yarnEndpointAddress)
        yarnEndpointAddress = yarnEndpointAddressDecoded
        let zeppelinRemoteSparkInterpreterPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .zeppelinRemoteSparkInterpreterPort)
        zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPortDecoded
        let numberOfNodesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let extraPythonLibsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraPythonLibsS3Path)
        extraPythonLibsS3Path = extraPythonLibsS3PathDecoded
        let extraJarsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraJarsS3Path)
        extraJarsS3Path = extraJarsS3PathDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .arguments)
        var argumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in argumentsContainer {
                if let genericstring0 = genericstring0 {
                    argumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        arguments = argumentsDecoded0
    }
}

extension GlueClientTypes.CreateGrokClassifierRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classification = "Classification"
        case customPatterns = "CustomPatterns"
        case grokPattern = "GrokPattern"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classification = classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let customPatterns = customPatterns {
            try encodeContainer.encode(customPatterns, forKey: .customPatterns)
        }
        if let grokPattern = grokPattern {
            try encodeContainer.encode(grokPattern, forKey: .grokPattern)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let grokPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grokPattern)
        grokPattern = grokPatternDecoded
        let customPatternsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customPatterns)
        customPatterns = customPatternsDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a grok classifier for CreateClassifier to create.
    public struct CreateGrokClassifierRequest: Swift.Equatable {
        /// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
        /// This member is required.
        public var classification: Swift.String?
        /// Optional custom grok patterns used by this classifier.
        public var customPatterns: Swift.String?
        /// The grok pattern used by this classifier.
        /// This member is required.
        public var grokPattern: Swift.String?
        /// The name of the new classifier.
        /// This member is required.
        public var name: Swift.String?

        public init (
            classification: Swift.String? = nil,
            customPatterns: Swift.String? = nil,
            grokPattern: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.classification = classification
            self.customPatterns = customPatterns
            self.grokPattern = grokPattern
            self.name = name
        }
    }

}

extension CreateJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case command = "Command"
        case connections = "Connections"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case executionProperty = "ExecutionProperty"
        case glueVersion = "GlueVersion"
        case logUri = "LogUri"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case nonOverridableArguments = "NonOverridableArguments"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case tags = "Tags"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedCapacity != 0 {
            try encodeContainer.encode(allocatedCapacity, forKey: .allocatedCapacity)
        }
        if let command = command {
            try encodeContainer.encode(command, forKey: .command)
        }
        if let connections = connections {
            try encodeContainer.encode(connections, forKey: .connections)
        }
        if let defaultArguments = defaultArguments {
            var defaultArgumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .defaultArguments)
            for (dictKey0, genericmap0) in defaultArguments {
                try defaultArgumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let executionProperty = executionProperty {
            try encodeContainer.encode(executionProperty, forKey: .executionProperty)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let logUri = logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if maxRetries != 0 {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nonOverridableArguments = nonOverridableArguments {
            var nonOverridableArgumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .nonOverridableArguments)
            for (dictKey0, genericmap0) in nonOverridableArguments {
                try nonOverridableArgumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let notificationProperty = notificationProperty {
            try encodeContainer.encode(notificationProperty, forKey: .notificationProperty)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}

extension CreateJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateJobInput: Swift.Equatable {
    /// This parameter is deprecated. Use MaxCapacity instead. The number of Glue data processing units (DPUs) to allocate to this Job. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/).
    @available(*, deprecated, message: "This property is deprecated, use MaxCapacity instead.")
    public var allocatedCapacity: Swift.Int
    /// The JobCommand that runs this job.
    /// This member is required.
    public var command: GlueClientTypes.JobCommand?
    /// The connections used for this job.
    public var connections: GlueClientTypes.ConnectionsList?
    /// The default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling Glue APIs in Python](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that Glue consumes to set up your job, see the [Special Parameters Used by Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) topic in the developer guide.
    public var defaultArguments: [Swift.String:Swift.String]?
    /// Description of the job being defined.
    public var description: Swift.String?
    /// An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
    public var executionProperty: GlueClientTypes.ExecutionProperty?
    /// Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. For more information about the available Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide. Jobs that are created without specifying a Glue version default to Glue 0.9.
    public var glueVersion: Swift.String?
    /// This field is reserved for future use.
    public var logUri: Swift.String?
    /// For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/). Do not set Max Capacity if using WorkerType and NumberOfWorkers. The value that can be allocated for MaxCapacity depends on whether you are running a Python shell job or an Apache Spark ETL job:
    ///
    /// * When you specify a Python shell job (JobCommand.Name="pythonshell"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.
    ///
    /// * When you specify an Apache Spark ETL job (JobCommand.Name="glueetl") or Apache Spark streaming ETL job (JobCommand.Name="gluestreaming"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.
    ///
    ///
    /// For Glue version 2.0 jobs, you cannot instead specify a Maximum capacity. Instead, you should specify a Worker type and the Number of workers.
    public var maxCapacity: Swift.Double?
    /// The maximum number of times to retry this job if it fails.
    public var maxRetries: Swift.Int
    /// The name you assign to this job definition. It must be unique in your account.
    /// This member is required.
    public var name: Swift.String?
    /// Non-overridable arguments for this job, specified as name-value pairs.
    public var nonOverridableArguments: [Swift.String:Swift.String]?
    /// Specifies configuration properties of a job notification.
    public var notificationProperty: GlueClientTypes.NotificationProperty?
    /// The number of workers of a defined workerType that are allocated when a job runs. The maximum number of workers you can define are 299 for G.1X, and 149 for G.2X.
    public var numberOfWorkers: Swift.Int?
    /// The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
    /// This member is required.
    public var role: Swift.String?
    /// The name of the SecurityConfiguration structure to be used with this job.
    public var securityConfiguration: Swift.String?
    /// The tags to use with this job. You may use tags to limit access to the job. For more information about tags in Glue, see [Amazon Web Services Tags in Glue](https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html) in the developer guide.
    public var tags: [Swift.String:Swift.String]?
    /// The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
    public var timeout: Swift.Int?
    /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.
    ///
    /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
    ///
    /// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
    ///
    /// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
    public var workerType: GlueClientTypes.WorkerType?

    public init (
        allocatedCapacity: Swift.Int = 0,
        command: GlueClientTypes.JobCommand? = nil,
        connections: GlueClientTypes.ConnectionsList? = nil,
        defaultArguments: [Swift.String:Swift.String]? = nil,
        description: Swift.String? = nil,
        executionProperty: GlueClientTypes.ExecutionProperty? = nil,
        glueVersion: Swift.String? = nil,
        logUri: Swift.String? = nil,
        maxCapacity: Swift.Double? = nil,
        maxRetries: Swift.Int = 0,
        name: Swift.String? = nil,
        nonOverridableArguments: [Swift.String:Swift.String]? = nil,
        notificationProperty: GlueClientTypes.NotificationProperty? = nil,
        numberOfWorkers: Swift.Int? = nil,
        role: Swift.String? = nil,
        securityConfiguration: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        timeout: Swift.Int? = nil,
        workerType: GlueClientTypes.WorkerType? = nil
    )
    {
        self.allocatedCapacity = allocatedCapacity
        self.command = command
        self.connections = connections
        self.defaultArguments = defaultArguments
        self.description = description
        self.executionProperty = executionProperty
        self.glueVersion = glueVersion
        self.logUri = logUri
        self.maxCapacity = maxCapacity
        self.maxRetries = maxRetries
        self.name = name
        self.nonOverridableArguments = nonOverridableArguments
        self.notificationProperty = notificationProperty
        self.numberOfWorkers = numberOfWorkers
        self.role = role
        self.securityConfiguration = securityConfiguration
        self.tags = tags
        self.timeout = timeout
        self.workerType = workerType
    }
}

struct CreateJobInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let logUri: Swift.String?
    let role: Swift.String?
    let executionProperty: GlueClientTypes.ExecutionProperty?
    let command: GlueClientTypes.JobCommand?
    let defaultArguments: [Swift.String:Swift.String]?
    let nonOverridableArguments: [Swift.String:Swift.String]?
    let connections: GlueClientTypes.ConnectionsList?
    let maxRetries: Swift.Int
    let allocatedCapacity: Swift.Int
    let timeout: Swift.Int?
    let maxCapacity: Swift.Double?
    let securityConfiguration: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let notificationProperty: GlueClientTypes.NotificationProperty?
    let glueVersion: Swift.String?
    let numberOfWorkers: Swift.Int?
    let workerType: GlueClientTypes.WorkerType?
}

extension CreateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case command = "Command"
        case connections = "Connections"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case executionProperty = "ExecutionProperty"
        case glueVersion = "GlueVersion"
        case logUri = "LogUri"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case nonOverridableArguments = "NonOverridableArguments"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case tags = "Tags"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let executionPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ExecutionProperty.self, forKey: .executionProperty)
        executionProperty = executionPropertyDecoded
        let commandDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobCommand.self, forKey: .command)
        command = commandDecoded
        let defaultArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .defaultArguments)
        var defaultArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let defaultArgumentsContainer = defaultArgumentsContainer {
            defaultArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in defaultArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    defaultArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        defaultArguments = defaultArgumentsDecoded0
        let nonOverridableArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .nonOverridableArguments)
        var nonOverridableArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let nonOverridableArgumentsContainer = nonOverridableArgumentsContainer {
            nonOverridableArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in nonOverridableArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    nonOverridableArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        nonOverridableArguments = nonOverridableArgumentsDecoded0
        let connectionsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionsList.self, forKey: .connections)
        connections = connectionsDecoded
        let maxRetriesDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let allocatedCapacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedCapacity)
        allocatedCapacity = allocatedCapacityDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
    }
}

extension CreateJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateJobOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case concurrentModificationException(ConcurrentModificationException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct CreateJobOutputResponse: Swift.Equatable {
    /// The unique name that was provided for this job definition.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct CreateJobOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension CreateJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GlueClientTypes.CreateJsonClassifierRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jsonPath = "JsonPath"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jsonPath = jsonPath {
            try encodeContainer.encode(jsonPath, forKey: .jsonPath)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let jsonPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jsonPath)
        jsonPath = jsonPathDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a JSON classifier for CreateClassifier to create.
    public struct CreateJsonClassifierRequest: Swift.Equatable {
        /// A JsonPath string defining the JSON data for the classifier to classify. Glue supports a subset of JsonPath, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
        /// This member is required.
        public var jsonPath: Swift.String?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?

        public init (
            jsonPath: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.jsonPath = jsonPath
            self.name = name
        }
    }

}

extension CreateMLTransformInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case glueVersion = "GlueVersion"
        case inputRecordTables = "InputRecordTables"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case tags = "Tags"
        case timeout = "Timeout"
        case transformEncryption = "TransformEncryption"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let inputRecordTables = inputRecordTables {
            var inputRecordTablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputRecordTables)
            for gluetables0 in inputRecordTables {
                try inputRecordTablesContainer.encode(gluetables0)
            }
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let maxRetries = maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let transformEncryption = transformEncryption {
            try encodeContainer.encode(transformEncryption, forKey: .transformEncryption)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}

extension CreateMLTransformInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateMLTransformInput: Swift.Equatable {
    /// A description of the machine learning transform that is being defined. The default is an empty string.
    public var description: Swift.String?
    /// This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see [Glue Versions](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions) in the developer guide.
    public var glueVersion: Swift.String?
    /// A list of Glue table definitions used by the transform.
    /// This member is required.
    public var inputRecordTables: [GlueClientTypes.GlueTable]?
    /// The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/). MaxCapacity is a mutually exclusive option with NumberOfWorkers and WorkerType.
    ///
    /// * If either NumberOfWorkers or WorkerType is set, then MaxCapacity cannot be set.
    ///
    /// * If MaxCapacity is set then neither NumberOfWorkers or WorkerType can be set.
    ///
    /// * If WorkerType is set, then NumberOfWorkers is required (and vice versa).
    ///
    /// * MaxCapacity and NumberOfWorkers must both be at least 1.
    ///
    ///
    /// When the WorkerType field is set to a value other than Standard, the MaxCapacity field is set automatically and becomes read-only. When the WorkerType field is set to a value other than Standard, the MaxCapacity field is set automatically and becomes read-only.
    public var maxCapacity: Swift.Double?
    /// The maximum number of times to retry a task for this transform after a task run fails.
    public var maxRetries: Swift.Int?
    /// The unique name that you give the transform when you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The number of workers of a defined workerType that are allocated when this task runs. If WorkerType is set, then NumberOfWorkers is required (and vice versa).
    public var numberOfWorkers: Swift.Int?
    /// The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type.
    /// This member is required.
    public var parameters: GlueClientTypes.TransformParameters?
    /// The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both Glue service role permissions to Glue resources, and Amazon S3 permissions required by the transform.
    ///
    /// * This role needs Glue service role permissions to allow access to resources in Glue. See [Attach a Policy to IAM Users That Access Glue](https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html).
    ///
    /// * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.
    /// This member is required.
    public var role: Swift.String?
    /// The tags to use with this machine learning transform. You may use tags to limit access to the machine learning transform. For more information about tags in Glue, see [Amazon Web Services Tags in Glue](https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html) in the developer guide.
    public var tags: [Swift.String:Swift.String]?
    /// The timeout of the task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
    public var timeout: Swift.Int?
    /// The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.
    public var transformEncryption: GlueClientTypes.TransformEncryption?
    /// The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.
    ///
    /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
    ///
    /// * For the G.1X worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
    ///
    /// * For the G.2X worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
    ///
    ///
    /// MaxCapacity is a mutually exclusive option with NumberOfWorkers and WorkerType.
    ///
    /// * If either NumberOfWorkers or WorkerType is set, then MaxCapacity cannot be set.
    ///
    /// * If MaxCapacity is set then neither NumberOfWorkers or WorkerType can be set.
    ///
    /// * If WorkerType is set, then NumberOfWorkers is required (and vice versa).
    ///
    /// * MaxCapacity and NumberOfWorkers must both be at least 1.
    public var workerType: GlueClientTypes.WorkerType?

    public init (
        description: Swift.String? = nil,
        glueVersion: Swift.String? = nil,
        inputRecordTables: [GlueClientTypes.GlueTable]? = nil,
        maxCapacity: Swift.Double? = nil,
        maxRetries: Swift.Int? = nil,
        name: Swift.String? = nil,
        numberOfWorkers: Swift.Int? = nil,
        parameters: GlueClientTypes.TransformParameters? = nil,
        role: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        timeout: Swift.Int? = nil,
        transformEncryption: GlueClientTypes.TransformEncryption? = nil,
        workerType: GlueClientTypes.WorkerType? = nil
    )
    {
        self.description = description
        self.glueVersion = glueVersion
        self.inputRecordTables = inputRecordTables
        self.maxCapacity = maxCapacity
        self.maxRetries = maxRetries
        self.name = name
        self.numberOfWorkers = numberOfWorkers
        self.parameters = parameters
        self.role = role
        self.tags = tags
        self.timeout = timeout
        self.transformEncryption = transformEncryption
        self.workerType = workerType
    }
}

struct CreateMLTransformInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let inputRecordTables: [GlueClientTypes.GlueTable]?
    let parameters: GlueClientTypes.TransformParameters?
    let role: Swift.String?
    let glueVersion: Swift.String?
    let maxCapacity: Swift.Double?
    let workerType: GlueClientTypes.WorkerType?
    let numberOfWorkers: Swift.Int?
    let timeout: Swift.Int?
    let maxRetries: Swift.Int?
    let tags: [Swift.String:Swift.String]?
    let transformEncryption: GlueClientTypes.TransformEncryption?
}

extension CreateMLTransformInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case glueVersion = "GlueVersion"
        case inputRecordTables = "InputRecordTables"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case tags = "Tags"
        case timeout = "Timeout"
        case transformEncryption = "TransformEncryption"
        case workerType = "WorkerType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let inputRecordTablesContainer = try containerValues.decodeIfPresent([GlueClientTypes.GlueTable?].self, forKey: .inputRecordTables)
        var inputRecordTablesDecoded0:[GlueClientTypes.GlueTable]? = nil
        if let inputRecordTablesContainer = inputRecordTablesContainer {
            inputRecordTablesDecoded0 = [GlueClientTypes.GlueTable]()
            for structure0 in inputRecordTablesContainer {
                if let structure0 = structure0 {
                    inputRecordTablesDecoded0?.append(structure0)
                }
            }
        }
        inputRecordTables = inputRecordTablesDecoded0
        let parametersDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformParameters.self, forKey: .parameters)
        parameters = parametersDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let transformEncryptionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformEncryption.self, forKey: .transformEncryption)
        transformEncryption = transformEncryptionDecoded
    }
}

extension CreateMLTransformOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMLTransformOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMLTransformOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case alreadyExistsException(AlreadyExistsException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMLTransformOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateMLTransformOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.transformId = output.transformId
        } else {
            self.transformId = nil
        }
    }
}

public struct CreateMLTransformOutputResponse: Swift.Equatable {
    /// A unique identifier that is generated for the transform.
    public var transformId: Swift.String?

    public init (
        transformId: Swift.String? = nil
    )
    {
        self.transformId = transformId
    }
}

struct CreateMLTransformOutputResponseBody: Swift.Equatable {
    let transformId: Swift.String?
}

extension CreateMLTransformOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
    }
}

extension CreatePartitionIndexInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionIndex = "PartitionIndex"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionIndex = partitionIndex {
            try encodeContainer.encode(partitionIndex, forKey: .partitionIndex)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension CreatePartitionIndexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePartitionIndexInput: Swift.Equatable {
    /// The catalog ID where the table resides.
    public var catalogId: Swift.String?
    /// Specifies the name of a database in which you want to create a partition index.
    /// This member is required.
    public var databaseName: Swift.String?
    /// Specifies a PartitionIndex structure to create a partition index in an existing table.
    /// This member is required.
    public var partitionIndex: GlueClientTypes.PartitionIndex?
    /// Specifies the name of a table in which you want to create a partition index.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionIndex: GlueClientTypes.PartitionIndex? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.partitionIndex = partitionIndex
        self.tableName = tableName
    }
}

struct CreatePartitionIndexInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionIndex: GlueClientTypes.PartitionIndex?
}

extension CreatePartitionIndexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionIndex = "PartitionIndex"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionIndexDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PartitionIndex.self, forKey: .partitionIndex)
        partitionIndex = partitionIndexDecoded
    }
}

extension CreatePartitionIndexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePartitionIndexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePartitionIndexOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePartitionIndexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreatePartitionIndexOutputResponse: Swift.Equatable {

}

extension CreatePartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionInput = "PartitionInput"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionInput = partitionInput {
            try encodeContainer.encode(partitionInput, forKey: .partitionInput)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension CreatePartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePartitionInput: Swift.Equatable {
    /// The Amazon Web Services account ID of the catalog in which the partition is to be created.
    public var catalogId: Swift.String?
    /// The name of the metadata database in which the partition is to be created.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A PartitionInput structure defining the partition to be created.
    /// This member is required.
    public var partitionInput: GlueClientTypes.PartitionInput?
    /// The name of the metadata table in which the partition is to be created.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionInput: GlueClientTypes.PartitionInput? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.partitionInput = partitionInput
        self.tableName = tableName
    }
}

struct CreatePartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionInput: GlueClientTypes.PartitionInput?
}

extension CreatePartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionInput = "PartitionInput"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PartitionInput.self, forKey: .partitionInput)
        partitionInput = partitionInputDecoded
    }
}

extension CreatePartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePartitionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreatePartitionOutputResponse: Swift.Equatable {

}

extension CreateRegistryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case registryName = "RegistryName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let registryName = registryName {
            try encodeContainer.encode(registryName, forKey: .registryName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateRegistryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRegistryInput: Swift.Equatable {
    /// A description of the registry. If description is not provided, there will not be any default value for this.
    public var description: Swift.String?
    /// Name of the registry to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark. No whitespace.
    /// This member is required.
    public var registryName: Swift.String?
    /// Amazon Web Services tags that contain a key value pair and may be searched by console, command line, or API.
    public var tags: [Swift.String:Swift.String]?

    public init (
        description: Swift.String? = nil,
        registryName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.description = description
        self.registryName = registryName
        self.tags = tags
    }
}

struct CreateRegistryInputBody: Swift.Equatable {
    let registryName: Swift.String?
    let description: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateRegistryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case registryName = "RegistryName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRegistryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRegistryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRegistryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case alreadyExistsException(AlreadyExistsException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRegistryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRegistryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.registryArn = output.registryArn
            self.registryName = output.registryName
            self.tags = output.tags
        } else {
            self.description = nil
            self.registryArn = nil
            self.registryName = nil
            self.tags = nil
        }
    }
}

public struct CreateRegistryOutputResponse: Swift.Equatable {
    /// A description of the registry.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the newly created registry.
    public var registryArn: Swift.String?
    /// The name of the registry.
    public var registryName: Swift.String?
    /// The tags for the registry.
    public var tags: [Swift.String:Swift.String]?

    public init (
        description: Swift.String? = nil,
        registryArn: Swift.String? = nil,
        registryName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.description = description
        self.registryArn = registryArn
        self.registryName = registryName
        self.tags = tags
    }
}

struct CreateRegistryOutputResponseBody: Swift.Equatable {
    let registryArn: Swift.String?
    let registryName: Swift.String?
    let description: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateRegistryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case registryArn = "RegistryArn"
        case registryName = "RegistryName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateSchemaInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibility = "Compatibility"
        case dataFormat = "DataFormat"
        case description = "Description"
        case registryId = "RegistryId"
        case schemaDefinition = "SchemaDefinition"
        case schemaName = "SchemaName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compatibility = compatibility {
            try encodeContainer.encode(compatibility.rawValue, forKey: .compatibility)
        }
        if let dataFormat = dataFormat {
            try encodeContainer.encode(dataFormat.rawValue, forKey: .dataFormat)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let registryId = registryId {
            try encodeContainer.encode(registryId, forKey: .registryId)
        }
        if let schemaDefinition = schemaDefinition {
            try encodeContainer.encode(schemaDefinition, forKey: .schemaDefinition)
        }
        if let schemaName = schemaName {
            try encodeContainer.encode(schemaName, forKey: .schemaName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateSchemaInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateSchemaInput: Swift.Equatable {
    /// The compatibility mode of the schema. The possible values are:
    ///
    /// * NONE: No compatibility mode applies. You can use this choice in development scenarios or if you do not know the compatibility mode that you want to apply to schemas. Any new version added will be accepted without undergoing a compatibility check.
    ///
    /// * DISABLED: This compatibility choice prevents versioning for a particular schema. You can use this choice to prevent future versioning of a schema.
    ///
    /// * BACKWARD: This compatibility choice is recommended as it allows data receivers to read both the current and one previous schema version. This means that for instance, a new schema version cannot drop data fields or change the type of these fields, so they can't be read by readers using the previous version.
    ///
    /// * BACKWARD_ALL: This compatibility choice allows data receivers to read both the current and all previous schema versions. You can use this choice when you need to delete fields or add optional fields, and check compatibility against all previous schema versions.
    ///
    /// * FORWARD: This compatibility choice allows data receivers to read both the current and one next schema version, but not necessarily later versions. You can use this choice when you need to add fields or delete optional fields, but only check compatibility against the last schema version.
    ///
    /// * FORWARD_ALL: This compatibility choice allows data receivers to read written by producers of any new registered schema. You can use this choice when you need to add fields or delete optional fields, and check compatibility against all previous schema versions.
    ///
    /// * FULL: This compatibility choice allows data receivers to read data written by producers using the previous or next version of the schema, but not necessarily earlier or later versions. You can use this choice when you need to add or remove optional fields, but only check compatibility against the last schema version.
    ///
    /// * FULL_ALL: This compatibility choice allows data receivers to read data written by producers using all previous schema versions. You can use this choice when you need to add or remove optional fields, and check compatibility against all previous schema versions.
    public var compatibility: GlueClientTypes.Compatibility?
    /// The data format of the schema definition. Currently AVRO and JSON are supported.
    /// This member is required.
    public var dataFormat: GlueClientTypes.DataFormat?
    /// An optional description of the schema. If description is not provided, there will not be any automatic default value for this.
    public var description: Swift.String?
    /// This is a wrapper shape to contain the registry identity fields. If this is not provided, the default registry will be used. The ARN format for the same will be: arn:aws:glue:us-east-2::registry/default-registry:random-5-letter-id.
    public var registryId: GlueClientTypes.RegistryId?
    /// The schema definition using the DataFormat setting for SchemaName.
    public var schemaDefinition: Swift.String?
    /// Name of the schema to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark. No whitespace.
    /// This member is required.
    public var schemaName: Swift.String?
    /// Amazon Web Services tags that contain a key value pair and may be searched by console, command line, or API. If specified, follows the Amazon Web Services tags-on-create pattern.
    public var tags: [Swift.String:Swift.String]?

    public init (
        compatibility: GlueClientTypes.Compatibility? = nil,
        dataFormat: GlueClientTypes.DataFormat? = nil,
        description: Swift.String? = nil,
        registryId: GlueClientTypes.RegistryId? = nil,
        schemaDefinition: Swift.String? = nil,
        schemaName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.compatibility = compatibility
        self.dataFormat = dataFormat
        self.description = description
        self.registryId = registryId
        self.schemaDefinition = schemaDefinition
        self.schemaName = schemaName
        self.tags = tags
    }
}

struct CreateSchemaInputBody: Swift.Equatable {
    let registryId: GlueClientTypes.RegistryId?
    let schemaName: Swift.String?
    let dataFormat: GlueClientTypes.DataFormat?
    let compatibility: GlueClientTypes.Compatibility?
    let description: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let schemaDefinition: Swift.String?
}

extension CreateSchemaInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibility = "Compatibility"
        case dataFormat = "DataFormat"
        case description = "Description"
        case registryId = "RegistryId"
        case schemaDefinition = "SchemaDefinition"
        case schemaName = "SchemaName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RegistryId.self, forKey: .registryId)
        registryId = registryIdDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let compatibilityDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Compatibility.self, forKey: .compatibility)
        compatibility = compatibilityDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let schemaDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaDefinition)
        schemaDefinition = schemaDefinitionDecoded
    }
}

extension CreateSchemaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSchemaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSchemaOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case alreadyExistsException(AlreadyExistsException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSchemaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateSchemaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compatibility = output.compatibility
            self.dataFormat = output.dataFormat
            self.description = output.description
            self.latestSchemaVersion = output.latestSchemaVersion
            self.nextSchemaVersion = output.nextSchemaVersion
            self.registryArn = output.registryArn
            self.registryName = output.registryName
            self.schemaArn = output.schemaArn
            self.schemaCheckpoint = output.schemaCheckpoint
            self.schemaName = output.schemaName
            self.schemaStatus = output.schemaStatus
            self.schemaVersionId = output.schemaVersionId
            self.schemaVersionStatus = output.schemaVersionStatus
            self.tags = output.tags
        } else {
            self.compatibility = nil
            self.dataFormat = nil
            self.description = nil
            self.latestSchemaVersion = 0
            self.nextSchemaVersion = 0
            self.registryArn = nil
            self.registryName = nil
            self.schemaArn = nil
            self.schemaCheckpoint = 0
            self.schemaName = nil
            self.schemaStatus = nil
            self.schemaVersionId = nil
            self.schemaVersionStatus = nil
            self.tags = nil
        }
    }
}

public struct CreateSchemaOutputResponse: Swift.Equatable {
    /// The schema compatibility mode.
    public var compatibility: GlueClientTypes.Compatibility?
    /// The data format of the schema definition. Currently AVRO and JSON are supported.
    public var dataFormat: GlueClientTypes.DataFormat?
    /// A description of the schema if specified when created.
    public var description: Swift.String?
    /// The latest version of the schema associated with the returned schema definition.
    public var latestSchemaVersion: Swift.Int
    /// The next version of the schema associated with the returned schema definition.
    public var nextSchemaVersion: Swift.Int
    /// The Amazon Resource Name (ARN) of the registry.
    public var registryArn: Swift.String?
    /// The name of the registry.
    public var registryName: Swift.String?
    /// The Amazon Resource Name (ARN) of the schema.
    public var schemaArn: Swift.String?
    /// The version number of the checkpoint (the last time the compatibility mode was changed).
    public var schemaCheckpoint: Swift.Int
    /// The name of the schema.
    public var schemaName: Swift.String?
    /// The status of the schema.
    public var schemaStatus: GlueClientTypes.SchemaStatus?
    /// The unique identifier of the first schema version.
    public var schemaVersionId: Swift.String?
    /// The status of the first schema version created.
    public var schemaVersionStatus: GlueClientTypes.SchemaVersionStatus?
    /// The tags for the schema.
    public var tags: [Swift.String:Swift.String]?

    public init (
        compatibility: GlueClientTypes.Compatibility? = nil,
        dataFormat: GlueClientTypes.DataFormat? = nil,
        description: Swift.String? = nil,
        latestSchemaVersion: Swift.Int = 0,
        nextSchemaVersion: Swift.Int = 0,
        registryArn: Swift.String? = nil,
        registryName: Swift.String? = nil,
        schemaArn: Swift.String? = nil,
        schemaCheckpoint: Swift.Int = 0,
        schemaName: Swift.String? = nil,
        schemaStatus: GlueClientTypes.SchemaStatus? = nil,
        schemaVersionId: Swift.String? = nil,
        schemaVersionStatus: GlueClientTypes.SchemaVersionStatus? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.compatibility = compatibility
        self.dataFormat = dataFormat
        self.description = description
        self.latestSchemaVersion = latestSchemaVersion
        self.nextSchemaVersion = nextSchemaVersion
        self.registryArn = registryArn
        self.registryName = registryName
        self.schemaArn = schemaArn
        self.schemaCheckpoint = schemaCheckpoint
        self.schemaName = schemaName
        self.schemaStatus = schemaStatus
        self.schemaVersionId = schemaVersionId
        self.schemaVersionStatus = schemaVersionStatus
        self.tags = tags
    }
}

struct CreateSchemaOutputResponseBody: Swift.Equatable {
    let registryName: Swift.String?
    let registryArn: Swift.String?
    let schemaName: Swift.String?
    let schemaArn: Swift.String?
    let description: Swift.String?
    let dataFormat: GlueClientTypes.DataFormat?
    let compatibility: GlueClientTypes.Compatibility?
    let schemaCheckpoint: Swift.Int
    let latestSchemaVersion: Swift.Int
    let nextSchemaVersion: Swift.Int
    let schemaStatus: GlueClientTypes.SchemaStatus?
    let tags: [Swift.String:Swift.String]?
    let schemaVersionId: Swift.String?
    let schemaVersionStatus: GlueClientTypes.SchemaVersionStatus?
}

extension CreateSchemaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibility = "Compatibility"
        case dataFormat = "DataFormat"
        case description = "Description"
        case latestSchemaVersion = "LatestSchemaVersion"
        case nextSchemaVersion = "NextSchemaVersion"
        case registryArn = "RegistryArn"
        case registryName = "RegistryName"
        case schemaArn = "SchemaArn"
        case schemaCheckpoint = "SchemaCheckpoint"
        case schemaName = "SchemaName"
        case schemaStatus = "SchemaStatus"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionStatus = "SchemaVersionStatus"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let registryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let compatibilityDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Compatibility.self, forKey: .compatibility)
        compatibility = compatibilityDecoded
        let schemaCheckpointDecoded = try containerValues.decode(Swift.Int.self, forKey: .schemaCheckpoint)
        schemaCheckpoint = schemaCheckpointDecoded
        let latestSchemaVersionDecoded = try containerValues.decode(Swift.Int.self, forKey: .latestSchemaVersion)
        latestSchemaVersion = latestSchemaVersionDecoded
        let nextSchemaVersionDecoded = try containerValues.decode(Swift.Int.self, forKey: .nextSchemaVersion)
        nextSchemaVersion = nextSchemaVersionDecoded
        let schemaStatusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaStatus.self, forKey: .schemaStatus)
        schemaStatus = schemaStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let schemaVersionStatusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionStatus.self, forKey: .schemaVersionStatus)
        schemaVersionStatus = schemaVersionStatusDecoded
    }
}

extension CreateScriptInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dagEdges = "DagEdges"
        case dagNodes = "DagNodes"
        case language = "Language"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dagEdges = dagEdges {
            var dagEdgesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dagEdges)
            for dagedges0 in dagEdges {
                try dagEdgesContainer.encode(dagedges0)
            }
        }
        if let dagNodes = dagNodes {
            var dagNodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dagNodes)
            for dagnodes0 in dagNodes {
                try dagNodesContainer.encode(dagnodes0)
            }
        }
        if let language = language {
            try encodeContainer.encode(language.rawValue, forKey: .language)
        }
    }
}

extension CreateScriptInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateScriptInput: Swift.Equatable {
    /// A list of the edges in the DAG.
    public var dagEdges: [GlueClientTypes.CodeGenEdge]?
    /// A list of the nodes in the DAG.
    public var dagNodes: [GlueClientTypes.CodeGenNode]?
    /// The programming language of the resulting code from the DAG.
    public var language: GlueClientTypes.Language?

    public init (
        dagEdges: [GlueClientTypes.CodeGenEdge]? = nil,
        dagNodes: [GlueClientTypes.CodeGenNode]? = nil,
        language: GlueClientTypes.Language? = nil
    )
    {
        self.dagEdges = dagEdges
        self.dagNodes = dagNodes
        self.language = language
    }
}

struct CreateScriptInputBody: Swift.Equatable {
    let dagNodes: [GlueClientTypes.CodeGenNode]?
    let dagEdges: [GlueClientTypes.CodeGenEdge]?
    let language: GlueClientTypes.Language?
}

extension CreateScriptInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dagEdges = "DagEdges"
        case dagNodes = "DagNodes"
        case language = "Language"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dagNodesContainer = try containerValues.decodeIfPresent([GlueClientTypes.CodeGenNode?].self, forKey: .dagNodes)
        var dagNodesDecoded0:[GlueClientTypes.CodeGenNode]? = nil
        if let dagNodesContainer = dagNodesContainer {
            dagNodesDecoded0 = [GlueClientTypes.CodeGenNode]()
            for structure0 in dagNodesContainer {
                if let structure0 = structure0 {
                    dagNodesDecoded0?.append(structure0)
                }
            }
        }
        dagNodes = dagNodesDecoded0
        let dagEdgesContainer = try containerValues.decodeIfPresent([GlueClientTypes.CodeGenEdge?].self, forKey: .dagEdges)
        var dagEdgesDecoded0:[GlueClientTypes.CodeGenEdge]? = nil
        if let dagEdgesContainer = dagEdgesContainer {
            dagEdgesDecoded0 = [GlueClientTypes.CodeGenEdge]()
            for structure0 in dagEdgesContainer {
                if let structure0 = structure0 {
                    dagEdgesDecoded0?.append(structure0)
                }
            }
        }
        dagEdges = dagEdgesDecoded0
        let languageDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Language.self, forKey: .language)
        language = languageDecoded
    }
}

extension CreateScriptOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateScriptOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateScriptOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateScriptOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateScriptOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pythonScript = output.pythonScript
            self.scalaCode = output.scalaCode
        } else {
            self.pythonScript = nil
            self.scalaCode = nil
        }
    }
}

public struct CreateScriptOutputResponse: Swift.Equatable {
    /// The Python script generated from the DAG.
    public var pythonScript: Swift.String?
    /// The Scala code generated from the DAG.
    public var scalaCode: Swift.String?

    public init (
        pythonScript: Swift.String? = nil,
        scalaCode: Swift.String? = nil
    )
    {
        self.pythonScript = pythonScript
        self.scalaCode = scalaCode
    }
}

struct CreateScriptOutputResponseBody: Swift.Equatable {
    let pythonScript: Swift.String?
    let scalaCode: Swift.String?
}

extension CreateScriptOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pythonScript = "PythonScript"
        case scalaCode = "ScalaCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pythonScriptDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pythonScript)
        pythonScript = pythonScriptDecoded
        let scalaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalaCode)
        scalaCode = scalaCodeDecoded
    }
}

extension CreateSecurityConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionConfiguration = "EncryptionConfiguration"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionConfiguration = encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateSecurityConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateSecurityConfigurationInput: Swift.Equatable {
    /// The encryption configuration for the new security configuration.
    /// This member is required.
    public var encryptionConfiguration: GlueClientTypes.EncryptionConfiguration?
    /// The name for the new security configuration.
    /// This member is required.
    public var name: Swift.String?

    public init (
        encryptionConfiguration: GlueClientTypes.EncryptionConfiguration? = nil,
        name: Swift.String? = nil
    )
    {
        self.encryptionConfiguration = encryptionConfiguration
        self.name = name
    }
}

struct CreateSecurityConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
    let encryptionConfiguration: GlueClientTypes.EncryptionConfiguration?
}

extension CreateSecurityConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionConfiguration = "EncryptionConfiguration"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
    }
}

extension CreateSecurityConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSecurityConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSecurityConfigurationOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSecurityConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateSecurityConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdTimestamp = output.createdTimestamp
            self.name = output.name
        } else {
            self.createdTimestamp = nil
            self.name = nil
        }
    }
}

public struct CreateSecurityConfigurationOutputResponse: Swift.Equatable {
    /// The time at which the new security configuration was created.
    public var createdTimestamp: ClientRuntime.Date?
    /// The name assigned to the new security configuration.
    public var name: Swift.String?

    public init (
        createdTimestamp: ClientRuntime.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.createdTimestamp = createdTimestamp
        self.name = name
    }
}

struct CreateSecurityConfigurationOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let createdTimestamp: ClientRuntime.Date?
}

extension CreateSecurityConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
    }
}

extension CreateTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionIndexes = "PartitionIndexes"
        case tableInput = "TableInput"
        case transactionId = "TransactionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionIndexes = partitionIndexes {
            var partitionIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionIndexes)
            for partitionindexlist0 in partitionIndexes {
                try partitionIndexesContainer.encode(partitionindexlist0)
            }
        }
        if let tableInput = tableInput {
            try encodeContainer.encode(tableInput, forKey: .tableInput)
        }
        if let transactionId = transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }
}

extension CreateTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateTableInput: Swift.Equatable {
    /// The ID of the Data Catalog in which to create the Table. If none is supplied, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A list of partition indexes, PartitionIndex structures, to create in the table.
    public var partitionIndexes: [GlueClientTypes.PartitionIndex]?
    /// The TableInput object that defines the metadata table to create in the catalog.
    /// This member is required.
    public var tableInput: GlueClientTypes.TableInput?
    /// The ID of the transaction.
    public var transactionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionIndexes: [GlueClientTypes.PartitionIndex]? = nil,
        tableInput: GlueClientTypes.TableInput? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.partitionIndexes = partitionIndexes
        self.tableInput = tableInput
        self.transactionId = transactionId
    }
}

struct CreateTableInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableInput: GlueClientTypes.TableInput?
    let partitionIndexes: [GlueClientTypes.PartitionIndex]?
    let transactionId: Swift.String?
}

extension CreateTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionIndexes = "PartitionIndexes"
        case tableInput = "TableInput"
        case transactionId = "TransactionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TableInput.self, forKey: .tableInput)
        tableInput = tableInputDecoded
        let partitionIndexesContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionIndex?].self, forKey: .partitionIndexes)
        var partitionIndexesDecoded0:[GlueClientTypes.PartitionIndex]? = nil
        if let partitionIndexesContainer = partitionIndexesContainer {
            partitionIndexesDecoded0 = [GlueClientTypes.PartitionIndex]()
            for structure0 in partitionIndexesContainer {
                if let structure0 = structure0 {
                    partitionIndexesDecoded0?.append(structure0)
                }
            }
        }
        partitionIndexes = partitionIndexesDecoded0
        let transactionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transactionId)
        transactionId = transactionIdDecoded
    }
}

extension CreateTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTableOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNotReadyException(ResourceNotReadyException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateTableOutputResponse: Swift.Equatable {

}

extension CreateTriggerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case description = "Description"
        case eventBatchingCondition = "EventBatchingCondition"
        case name = "Name"
        case predicate = "Predicate"
        case schedule = "Schedule"
        case startOnCreation = "StartOnCreation"
        case tags = "Tags"
        case type = "Type"
        case workflowName = "WorkflowName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventBatchingCondition = eventBatchingCondition {
            try encodeContainer.encode(eventBatchingCondition, forKey: .eventBatchingCondition)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predicate = predicate {
            try encodeContainer.encode(predicate, forKey: .predicate)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if startOnCreation != false {
            try encodeContainer.encode(startOnCreation, forKey: .startOnCreation)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let workflowName = workflowName {
            try encodeContainer.encode(workflowName, forKey: .workflowName)
        }
    }
}

extension CreateTriggerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateTriggerInput: Swift.Equatable {
    /// The actions initiated by this trigger when it fires.
    /// This member is required.
    public var actions: [GlueClientTypes.Action]?
    /// A description of the new trigger.
    public var description: Swift.String?
    /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
    public var eventBatchingCondition: GlueClientTypes.EventBatchingCondition?
    /// The name of the trigger.
    /// This member is required.
    public var name: Swift.String?
    /// A predicate to specify when the new trigger should fire. This field is required when the trigger type is CONDITIONAL.
    public var predicate: GlueClientTypes.Predicate?
    /// A cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *). This field is required when the trigger type is SCHEDULED.
    public var schedule: Swift.String?
    /// Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
    public var startOnCreation: Swift.Bool
    /// The tags to use with this trigger. You may use tags to limit access to the trigger. For more information about tags in Glue, see [Amazon Web Services Tags in Glue](https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html) in the developer guide.
    public var tags: [Swift.String:Swift.String]?
    /// The type of the new trigger.
    /// This member is required.
    public var type: GlueClientTypes.TriggerType?
    /// The name of the workflow associated with the trigger.
    public var workflowName: Swift.String?

    public init (
        actions: [GlueClientTypes.Action]? = nil,
        description: Swift.String? = nil,
        eventBatchingCondition: GlueClientTypes.EventBatchingCondition? = nil,
        name: Swift.String? = nil,
        predicate: GlueClientTypes.Predicate? = nil,
        schedule: Swift.String? = nil,
        startOnCreation: Swift.Bool = false,
        tags: [Swift.String:Swift.String]? = nil,
        type: GlueClientTypes.TriggerType? = nil,
        workflowName: Swift.String? = nil
    )
    {
        self.actions = actions
        self.description = description
        self.eventBatchingCondition = eventBatchingCondition
        self.name = name
        self.predicate = predicate
        self.schedule = schedule
        self.startOnCreation = startOnCreation
        self.tags = tags
        self.type = type
        self.workflowName = workflowName
    }
}

struct CreateTriggerInputBody: Swift.Equatable {
    let name: Swift.String?
    let workflowName: Swift.String?
    let type: GlueClientTypes.TriggerType?
    let schedule: Swift.String?
    let predicate: GlueClientTypes.Predicate?
    let actions: [GlueClientTypes.Action]?
    let description: Swift.String?
    let startOnCreation: Swift.Bool
    let tags: [Swift.String:Swift.String]?
    let eventBatchingCondition: GlueClientTypes.EventBatchingCondition?
}

extension CreateTriggerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case description = "Description"
        case eventBatchingCondition = "EventBatchingCondition"
        case name = "Name"
        case predicate = "Predicate"
        case schedule = "Schedule"
        case startOnCreation = "StartOnCreation"
        case tags = "Tags"
        case type = "Type"
        case workflowName = "WorkflowName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let workflowNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowName)
        workflowName = workflowNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TriggerType.self, forKey: .type)
        type = typeDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let predicateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Predicate.self, forKey: .predicate)
        predicate = predicateDecoded
        let actionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[GlueClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [GlueClientTypes.Action]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let startOnCreationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .startOnCreation)
        startOnCreation = startOnCreationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let eventBatchingConditionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EventBatchingCondition.self, forKey: .eventBatchingCondition)
        eventBatchingCondition = eventBatchingConditionDecoded
    }
}

extension CreateTriggerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTriggerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTriggerOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTriggerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTriggerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct CreateTriggerOutputResponse: Swift.Equatable {
    /// The name of the trigger.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct CreateTriggerOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension CreateTriggerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CreateUserDefinedFunctionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case functionInput = "FunctionInput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let functionInput = functionInput {
            try encodeContainer.encode(functionInput, forKey: .functionInput)
        }
    }
}

extension CreateUserDefinedFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateUserDefinedFunctionInput: Swift.Equatable {
    /// The ID of the Data Catalog in which to create the function. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database in which to create the function.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A FunctionInput object that defines the function to create in the Data Catalog.
    /// This member is required.
    public var functionInput: GlueClientTypes.UserDefinedFunctionInput?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        functionInput: GlueClientTypes.UserDefinedFunctionInput? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.functionInput = functionInput
    }
}

struct CreateUserDefinedFunctionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let functionInput: GlueClientTypes.UserDefinedFunctionInput?
}

extension CreateUserDefinedFunctionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case functionInput = "FunctionInput"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let functionInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UserDefinedFunctionInput.self, forKey: .functionInput)
        functionInput = functionInputDecoded
    }
}

extension CreateUserDefinedFunctionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateUserDefinedFunctionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUserDefinedFunctionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserDefinedFunctionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateUserDefinedFunctionOutputResponse: Swift.Equatable {

}

extension CreateWorkflowInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultRunProperties = "DefaultRunProperties"
        case description = "Description"
        case maxConcurrentRuns = "MaxConcurrentRuns"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultRunProperties = defaultRunProperties {
            var defaultRunPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .defaultRunProperties)
            for (dictKey0, workflowrunproperties0) in defaultRunProperties {
                try defaultRunPropertiesContainer.encode(workflowrunproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let maxConcurrentRuns = maxConcurrentRuns {
            try encodeContainer.encode(maxConcurrentRuns, forKey: .maxConcurrentRuns)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateWorkflowInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateWorkflowInput: Swift.Equatable {
    /// A collection of properties to be used as part of each execution of the workflow.
    public var defaultRunProperties: [Swift.String:Swift.String]?
    /// A description of the workflow.
    public var description: Swift.String?
    /// You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
    public var maxConcurrentRuns: Swift.Int?
    /// The name to be assigned to the workflow. It should be unique within your account.
    /// This member is required.
    public var name: Swift.String?
    /// The tags to be used with this workflow.
    public var tags: [Swift.String:Swift.String]?

    public init (
        defaultRunProperties: [Swift.String:Swift.String]? = nil,
        description: Swift.String? = nil,
        maxConcurrentRuns: Swift.Int? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.defaultRunProperties = defaultRunProperties
        self.description = description
        self.maxConcurrentRuns = maxConcurrentRuns
        self.name = name
        self.tags = tags
    }
}

struct CreateWorkflowInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let defaultRunProperties: [Swift.String:Swift.String]?
    let tags: [Swift.String:Swift.String]?
    let maxConcurrentRuns: Swift.Int?
}

extension CreateWorkflowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultRunProperties = "DefaultRunProperties"
        case description = "Description"
        case maxConcurrentRuns = "MaxConcurrentRuns"
        case name = "Name"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultRunPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .defaultRunProperties)
        var defaultRunPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let defaultRunPropertiesContainer = defaultRunPropertiesContainer {
            defaultRunPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in defaultRunPropertiesContainer {
                if let genericstring0 = genericstring0 {
                    defaultRunPropertiesDecoded0?[key0] = genericstring0
                }
            }
        }
        defaultRunProperties = defaultRunPropertiesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let maxConcurrentRunsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentRuns)
        maxConcurrentRuns = maxConcurrentRunsDecoded
    }
}

extension CreateWorkflowOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateWorkflowOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateWorkflowOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case concurrentModificationException(ConcurrentModificationException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateWorkflowOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateWorkflowOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct CreateWorkflowOutputResponse: Swift.Equatable {
    /// The name of the workflow which was provided as part of the request.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct CreateWorkflowOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension CreateWorkflowOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GlueClientTypes.CreateXMLClassifierRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classification = "Classification"
        case name = "Name"
        case rowTag = "RowTag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classification = classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rowTag = rowTag {
            try encodeContainer.encode(rowTag, forKey: .rowTag)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let rowTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rowTag)
        rowTag = rowTagDecoded
    }
}

extension GlueClientTypes {
    /// Specifies an XML classifier for CreateClassifier to create.
    public struct CreateXMLClassifierRequest: Swift.Equatable {
        /// An identifier of the data format that the classifier matches.
        /// This member is required.
        public var classification: Swift.String?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?
        /// The XML tag designating the element that contains each record in an XML document being parsed. This can't identify a self-closing element (closed by />). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example,  is okay, but  is not).
        public var rowTag: Swift.String?

        public init (
            classification: Swift.String? = nil,
            name: Swift.String? = nil,
            rowTag: Swift.String? = nil
        )
        {
            self.classification = classification
            self.name = name
            self.rowTag = rowTag
        }
    }

}

extension GlueClientTypes.CsvClassifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowSingleColumn = "AllowSingleColumn"
        case containsHeader = "ContainsHeader"
        case creationTime = "CreationTime"
        case delimiter = "Delimiter"
        case disableValueTrimming = "DisableValueTrimming"
        case header = "Header"
        case lastUpdated = "LastUpdated"
        case name = "Name"
        case quoteSymbol = "QuoteSymbol"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowSingleColumn = allowSingleColumn {
            try encodeContainer.encode(allowSingleColumn, forKey: .allowSingleColumn)
        }
        if let containsHeader = containsHeader {
            try encodeContainer.encode(containsHeader.rawValue, forKey: .containsHeader)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let delimiter = delimiter {
            try encodeContainer.encode(delimiter, forKey: .delimiter)
        }
        if let disableValueTrimming = disableValueTrimming {
            try encodeContainer.encode(disableValueTrimming, forKey: .disableValueTrimming)
        }
        if let header = header {
            var headerContainer = encodeContainer.nestedUnkeyedContainer(forKey: .header)
            for csvheader0 in header {
                try headerContainer.encode(csvheader0)
            }
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let quoteSymbol = quoteSymbol {
            try encodeContainer.encode(quoteSymbol, forKey: .quoteSymbol)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let quoteSymbolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteSymbol)
        quoteSymbol = quoteSymbolDecoded
        let containsHeaderDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CsvHeaderOption.self, forKey: .containsHeader)
        containsHeader = containsHeaderDecoded
        let headerContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .header)
        var headerDecoded0:[Swift.String]? = nil
        if let headerContainer = headerContainer {
            headerDecoded0 = [Swift.String]()
            for string0 in headerContainer {
                if let string0 = string0 {
                    headerDecoded0?.append(string0)
                }
            }
        }
        header = headerDecoded0
        let disableValueTrimmingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableValueTrimming)
        disableValueTrimming = disableValueTrimmingDecoded
        let allowSingleColumnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowSingleColumn)
        allowSingleColumn = allowSingleColumnDecoded
    }
}

extension GlueClientTypes {
    /// A classifier for custom CSV content.
    public struct CsvClassifier: Swift.Equatable {
        /// Enables the processing of files that contain only one column.
        public var allowSingleColumn: Swift.Bool?
        /// Indicates whether the CSV file contains a header.
        public var containsHeader: GlueClientTypes.CsvHeaderOption?
        /// The time that this classifier was registered.
        public var creationTime: ClientRuntime.Date?
        /// A custom symbol to denote what separates each column entry in the row.
        public var delimiter: Swift.String?
        /// Specifies not to trim values before identifying the type of column values. The default value is true.
        public var disableValueTrimming: Swift.Bool?
        /// A list of strings representing column names.
        public var header: [Swift.String]?
        /// The time that this classifier was last updated.
        public var lastUpdated: ClientRuntime.Date?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?
        /// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
        public var quoteSymbol: Swift.String?
        /// The version of this classifier.
        public var version: Swift.Int

        public init (
            allowSingleColumn: Swift.Bool? = nil,
            containsHeader: GlueClientTypes.CsvHeaderOption? = nil,
            creationTime: ClientRuntime.Date? = nil,
            delimiter: Swift.String? = nil,
            disableValueTrimming: Swift.Bool? = nil,
            header: [Swift.String]? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            quoteSymbol: Swift.String? = nil,
            version: Swift.Int = 0
        )
        {
            self.allowSingleColumn = allowSingleColumn
            self.containsHeader = containsHeader
            self.creationTime = creationTime
            self.delimiter = delimiter
            self.disableValueTrimming = disableValueTrimming
            self.header = header
            self.lastUpdated = lastUpdated
            self.name = name
            self.quoteSymbol = quoteSymbol
            self.version = version
        }
    }

}

extension GlueClientTypes {
    public enum CsvHeaderOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case absent
        case present
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [CsvHeaderOption] {
            return [
                .absent,
                .present,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .absent: return "ABSENT"
            case .present: return "PRESENT"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CsvHeaderOption(rawValue: rawValue) ?? CsvHeaderOption.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.DataCatalogEncryptionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionPasswordEncryption = "ConnectionPasswordEncryption"
        case encryptionAtRest = "EncryptionAtRest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionPasswordEncryption = connectionPasswordEncryption {
            try encodeContainer.encode(connectionPasswordEncryption, forKey: .connectionPasswordEncryption)
        }
        if let encryptionAtRest = encryptionAtRest {
            try encodeContainer.encode(encryptionAtRest, forKey: .encryptionAtRest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionAtRestDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EncryptionAtRest.self, forKey: .encryptionAtRest)
        encryptionAtRest = encryptionAtRestDecoded
        let connectionPasswordEncryptionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionPasswordEncryption.self, forKey: .connectionPasswordEncryption)
        connectionPasswordEncryption = connectionPasswordEncryptionDecoded
    }
}

extension GlueClientTypes {
    /// Contains configuration information for maintaining Data Catalog security.
    public struct DataCatalogEncryptionSettings: Swift.Equatable {
        /// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption.
        public var connectionPasswordEncryption: GlueClientTypes.ConnectionPasswordEncryption?
        /// Specifies the encryption-at-rest configuration for the Data Catalog.
        public var encryptionAtRest: GlueClientTypes.EncryptionAtRest?

        public init (
            connectionPasswordEncryption: GlueClientTypes.ConnectionPasswordEncryption? = nil,
            encryptionAtRest: GlueClientTypes.EncryptionAtRest? = nil
        )
        {
            self.connectionPasswordEncryption = connectionPasswordEncryption
            self.encryptionAtRest = encryptionAtRest
        }
    }

}

extension GlueClientTypes {
    public enum DataFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case avro
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [DataFormat] {
            return [
                .avro,
                .json,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .avro: return "AVRO"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataFormat(rawValue: rawValue) ?? DataFormat.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.DataLakePrincipal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataLakePrincipalIdentifier = "DataLakePrincipalIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataLakePrincipalIdentifier = dataLakePrincipalIdentifier {
            try encodeContainer.encode(dataLakePrincipalIdentifier, forKey: .dataLakePrincipalIdentifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataLakePrincipalIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataLakePrincipalIdentifier)
        dataLakePrincipalIdentifier = dataLakePrincipalIdentifierDecoded
    }
}

extension GlueClientTypes {
    /// The Lake Formation principal.
    public struct DataLakePrincipal: Swift.Equatable {
        /// An identifier for the Lake Formation principal.
        public var dataLakePrincipalIdentifier: Swift.String?

        public init (
            dataLakePrincipalIdentifier: Swift.String? = nil
        )
        {
            self.dataLakePrincipalIdentifier = dataLakePrincipalIdentifier
        }
    }

}

extension GlueClientTypes.Database: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case createTableDefaultPermissions = "CreateTableDefaultPermissions"
        case createTime = "CreateTime"
        case description = "Description"
        case locationUri = "LocationUri"
        case name = "Name"
        case parameters = "Parameters"
        case targetDatabase = "TargetDatabase"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let createTableDefaultPermissions = createTableDefaultPermissions {
            var createTableDefaultPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .createTableDefaultPermissions)
            for principalpermissionslist0 in createTableDefaultPermissions {
                try createTableDefaultPermissionsContainer.encode(principalpermissionslist0)
            }
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let locationUri = locationUri {
            try encodeContainer.encode(locationUri, forKey: .locationUri)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let targetDatabase = targetDatabase {
            try encodeContainer.encode(targetDatabase, forKey: .targetDatabase)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let createTableDefaultPermissionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.PrincipalPermissions?].self, forKey: .createTableDefaultPermissions)
        var createTableDefaultPermissionsDecoded0:[GlueClientTypes.PrincipalPermissions]? = nil
        if let createTableDefaultPermissionsContainer = createTableDefaultPermissionsContainer {
            createTableDefaultPermissionsDecoded0 = [GlueClientTypes.PrincipalPermissions]()
            for structure0 in createTableDefaultPermissionsContainer {
                if let structure0 = structure0 {
                    createTableDefaultPermissionsDecoded0?.append(structure0)
                }
            }
        }
        createTableDefaultPermissions = createTableDefaultPermissionsDecoded0
        let targetDatabaseDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DatabaseIdentifier.self, forKey: .targetDatabase)
        targetDatabase = targetDatabaseDecoded
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
    }
}

extension GlueClientTypes {
    /// The Database object represents a logical grouping of tables that might reside in a Hive metastore or an RDBMS.
    public struct Database: Swift.Equatable {
        /// The ID of the Data Catalog in which the database resides.
        public var catalogId: Swift.String?
        /// Creates a set of default permissions on the table for principals.
        public var createTableDefaultPermissions: [GlueClientTypes.PrincipalPermissions]?
        /// The time at which the metadata database was created in the catalog.
        public var createTime: ClientRuntime.Date?
        /// A description of the database.
        public var description: Swift.String?
        /// The location of the database (for example, an HDFS path).
        public var locationUri: Swift.String?
        /// The name of the database. For Hive compatibility, this is folded to lowercase when it is stored.
        /// This member is required.
        public var name: Swift.String?
        /// These key-value pairs define parameters and properties of the database.
        public var parameters: [Swift.String:Swift.String]?
        /// A DatabaseIdentifier structure that describes a target database for resource linking.
        public var targetDatabase: GlueClientTypes.DatabaseIdentifier?

        public init (
            catalogId: Swift.String? = nil,
            createTableDefaultPermissions: [GlueClientTypes.PrincipalPermissions]? = nil,
            createTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            locationUri: Swift.String? = nil,
            name: Swift.String? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            targetDatabase: GlueClientTypes.DatabaseIdentifier? = nil
        )
        {
            self.catalogId = catalogId
            self.createTableDefaultPermissions = createTableDefaultPermissions
            self.createTime = createTime
            self.description = description
            self.locationUri = locationUri
            self.name = name
            self.parameters = parameters
            self.targetDatabase = targetDatabase
        }
    }

}

extension GlueClientTypes.DatabaseIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
    }
}

extension GlueClientTypes {
    /// A structure that describes a target database for resource linking.
    public struct DatabaseIdentifier: Swift.Equatable {
        /// The ID of the Data Catalog in which the database resides.
        public var catalogId: Swift.String?
        /// The name of the catalog database.
        public var databaseName: Swift.String?

        public init (
            catalogId: Swift.String? = nil,
            databaseName: Swift.String? = nil
        )
        {
            self.catalogId = catalogId
            self.databaseName = databaseName
        }
    }

}

extension GlueClientTypes.DatabaseInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTableDefaultPermissions = "CreateTableDefaultPermissions"
        case description = "Description"
        case locationUri = "LocationUri"
        case name = "Name"
        case parameters = "Parameters"
        case targetDatabase = "TargetDatabase"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTableDefaultPermissions = createTableDefaultPermissions {
            var createTableDefaultPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .createTableDefaultPermissions)
            for principalpermissionslist0 in createTableDefaultPermissions {
                try createTableDefaultPermissionsContainer.encode(principalpermissionslist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let locationUri = locationUri {
            try encodeContainer.encode(locationUri, forKey: .locationUri)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let targetDatabase = targetDatabase {
            try encodeContainer.encode(targetDatabase, forKey: .targetDatabase)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let createTableDefaultPermissionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.PrincipalPermissions?].self, forKey: .createTableDefaultPermissions)
        var createTableDefaultPermissionsDecoded0:[GlueClientTypes.PrincipalPermissions]? = nil
        if let createTableDefaultPermissionsContainer = createTableDefaultPermissionsContainer {
            createTableDefaultPermissionsDecoded0 = [GlueClientTypes.PrincipalPermissions]()
            for structure0 in createTableDefaultPermissionsContainer {
                if let structure0 = structure0 {
                    createTableDefaultPermissionsDecoded0?.append(structure0)
                }
            }
        }
        createTableDefaultPermissions = createTableDefaultPermissionsDecoded0
        let targetDatabaseDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DatabaseIdentifier.self, forKey: .targetDatabase)
        targetDatabase = targetDatabaseDecoded
    }
}

extension GlueClientTypes {
    /// The structure used to create or update a database.
    public struct DatabaseInput: Swift.Equatable {
        /// Creates a set of default permissions on the table for principals.
        public var createTableDefaultPermissions: [GlueClientTypes.PrincipalPermissions]?
        /// A description of the database.
        public var description: Swift.String?
        /// The location of the database (for example, an HDFS path).
        public var locationUri: Swift.String?
        /// The name of the database. For Hive compatibility, this is folded to lowercase when it is stored.
        /// This member is required.
        public var name: Swift.String?
        /// These key-value pairs define parameters and properties of the database. These key-value pairs define parameters and properties of the database.
        public var parameters: [Swift.String:Swift.String]?
        /// A DatabaseIdentifier structure that describes a target database for resource linking.
        public var targetDatabase: GlueClientTypes.DatabaseIdentifier?

        public init (
            createTableDefaultPermissions: [GlueClientTypes.PrincipalPermissions]? = nil,
            description: Swift.String? = nil,
            locationUri: Swift.String? = nil,
            name: Swift.String? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            targetDatabase: GlueClientTypes.DatabaseIdentifier? = nil
        )
        {
            self.createTableDefaultPermissions = createTableDefaultPermissions
            self.description = description
            self.locationUri = locationUri
            self.name = name
            self.parameters = parameters
            self.targetDatabase = targetDatabase
        }
    }

}

extension GlueClientTypes.DateColumnStatisticsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumValue = "MaximumValue"
        case minimumValue = "MinimumValue"
        case numberOfDistinctValues = "NumberOfDistinctValues"
        case numberOfNulls = "NumberOfNulls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumValue = maximumValue {
            try encodeContainer.encode(maximumValue.timeIntervalSince1970, forKey: .maximumValue)
        }
        if let minimumValue = minimumValue {
            try encodeContainer.encode(minimumValue.timeIntervalSince1970, forKey: .minimumValue)
        }
        if numberOfDistinctValues != 0 {
            try encodeContainer.encode(numberOfDistinctValues, forKey: .numberOfDistinctValues)
        }
        if numberOfNulls != 0 {
            try encodeContainer.encode(numberOfNulls, forKey: .numberOfNulls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumValueDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .minimumValue)
        minimumValue = minimumValueDecoded
        let maximumValueDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .maximumValue)
        maximumValue = maximumValueDecoded
        let numberOfNullsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNulls)
        numberOfNulls = numberOfNullsDecoded
        let numberOfDistinctValuesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfDistinctValues)
        numberOfDistinctValues = numberOfDistinctValuesDecoded
    }
}

extension GlueClientTypes {
    /// Defines column statistics supported for timestamp data columns.
    public struct DateColumnStatisticsData: Swift.Equatable {
        /// The highest value in the column.
        public var maximumValue: ClientRuntime.Date?
        /// The lowest value in the column.
        public var minimumValue: ClientRuntime.Date?
        /// The number of distinct values in a column.
        /// This member is required.
        public var numberOfDistinctValues: Swift.Int
        /// The number of null values in the column.
        /// This member is required.
        public var numberOfNulls: Swift.Int

        public init (
            maximumValue: ClientRuntime.Date? = nil,
            minimumValue: ClientRuntime.Date? = nil,
            numberOfDistinctValues: Swift.Int = 0,
            numberOfNulls: Swift.Int = 0
        )
        {
            self.maximumValue = maximumValue
            self.minimumValue = minimumValue
            self.numberOfDistinctValues = numberOfDistinctValues
            self.numberOfNulls = numberOfNulls
        }
    }

}

extension GlueClientTypes.DecimalColumnStatisticsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumValue = "MaximumValue"
        case minimumValue = "MinimumValue"
        case numberOfDistinctValues = "NumberOfDistinctValues"
        case numberOfNulls = "NumberOfNulls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumValue = maximumValue {
            try encodeContainer.encode(maximumValue, forKey: .maximumValue)
        }
        if let minimumValue = minimumValue {
            try encodeContainer.encode(minimumValue, forKey: .minimumValue)
        }
        if numberOfDistinctValues != 0 {
            try encodeContainer.encode(numberOfDistinctValues, forKey: .numberOfDistinctValues)
        }
        if numberOfNulls != 0 {
            try encodeContainer.encode(numberOfNulls, forKey: .numberOfNulls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumValueDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DecimalNumber.self, forKey: .minimumValue)
        minimumValue = minimumValueDecoded
        let maximumValueDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DecimalNumber.self, forKey: .maximumValue)
        maximumValue = maximumValueDecoded
        let numberOfNullsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNulls)
        numberOfNulls = numberOfNullsDecoded
        let numberOfDistinctValuesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfDistinctValues)
        numberOfDistinctValues = numberOfDistinctValuesDecoded
    }
}

extension GlueClientTypes {
    /// Defines column statistics supported for fixed-point number data columns.
    public struct DecimalColumnStatisticsData: Swift.Equatable {
        /// The highest value in the column.
        public var maximumValue: GlueClientTypes.DecimalNumber?
        /// The lowest value in the column.
        public var minimumValue: GlueClientTypes.DecimalNumber?
        /// The number of distinct values in a column.
        /// This member is required.
        public var numberOfDistinctValues: Swift.Int
        /// The number of null values in the column.
        /// This member is required.
        public var numberOfNulls: Swift.Int

        public init (
            maximumValue: GlueClientTypes.DecimalNumber? = nil,
            minimumValue: GlueClientTypes.DecimalNumber? = nil,
            numberOfDistinctValues: Swift.Int = 0,
            numberOfNulls: Swift.Int = 0
        )
        {
            self.maximumValue = maximumValue
            self.minimumValue = minimumValue
            self.numberOfDistinctValues = numberOfDistinctValues
            self.numberOfNulls = numberOfNulls
        }
    }

}

extension GlueClientTypes.DecimalNumber: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scale = "Scale"
        case unscaledValue = "UnscaledValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if scale != 0 {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let unscaledValue = unscaledValue {
            try encodeContainer.encode(unscaledValue.base64EncodedString(), forKey: .unscaledValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unscaledValueDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .unscaledValue)
        unscaledValue = unscaledValueDecoded
        let scaleDecoded = try containerValues.decode(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
    }
}

extension GlueClientTypes {
    /// Contains a numeric value in decimal format.
    public struct DecimalNumber: Swift.Equatable {
        /// The scale that determines where the decimal point falls in the unscaled value.
        /// This member is required.
        public var scale: Swift.Int
        /// The unscaled numeric value.
        /// This member is required.
        public var unscaledValue: ClientRuntime.Data?

        public init (
            scale: Swift.Int = 0,
            unscaledValue: ClientRuntime.Data? = nil
        )
        {
            self.scale = scale
            self.unscaledValue = unscaledValue
        }
    }

}

extension GlueClientTypes {
    public enum DeleteBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleteFromDatabase
        case deprecateInDatabase
        case log
        case sdkUnknown(Swift.String)

        public static var allCases: [DeleteBehavior] {
            return [
                .deleteFromDatabase,
                .deprecateInDatabase,
                .log,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleteFromDatabase: return "DELETE_FROM_DATABASE"
            case .deprecateInDatabase: return "DEPRECATE_IN_DATABASE"
            case .log: return "LOG"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeleteBehavior(rawValue: rawValue) ?? DeleteBehavior.sdkUnknown(rawValue)
        }
    }
}

extension DeleteBlueprintInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteBlueprintInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBlueprintInput: Swift.Equatable {
    /// The name of the blueprint to delete.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteBlueprintInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteBlueprintInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteBlueprintOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBlueprintOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBlueprintOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBlueprintOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteBlueprintOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct DeleteBlueprintOutputResponse: Swift.Equatable {
    /// Returns the name of the blueprint that was deleted.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteBlueprintOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteBlueprintOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteClassifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteClassifierInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteClassifierInput: Swift.Equatable {
    /// Name of the classifier to remove.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteClassifierInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteClassifierInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteClassifierOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteClassifierOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteClassifierOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteClassifierOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteClassifierOutputResponse: Swift.Equatable {

}

extension DeleteColumnStatisticsForPartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnName = "ColumnName"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let columnName = columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionValues = partitionValues {
            var partitionValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValues)
            for valuestringlist0 in partitionValues {
                try partitionValuesContainer.encode(valuestringlist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DeleteColumnStatisticsForPartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteColumnStatisticsForPartitionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// Name of the column.
    /// This member is required.
    public var columnName: Swift.String?
    /// The name of the catalog database where the partitions reside.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A list of partition values identifying the partition.
    /// This member is required.
    public var partitionValues: [Swift.String]?
    /// The name of the partitions' table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        columnName: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionValues: [Swift.String]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.columnName = columnName
        self.databaseName = databaseName
        self.partitionValues = partitionValues
        self.tableName = tableName
    }
}

struct DeleteColumnStatisticsForPartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionValues: [Swift.String]?
    let columnName: Swift.String?
}

extension DeleteColumnStatisticsForPartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnName = "ColumnName"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValues)
        var partitionValuesDecoded0:[Swift.String]? = nil
        if let partitionValuesContainer = partitionValuesContainer {
            partitionValuesDecoded0 = [Swift.String]()
            for string0 in partitionValuesContainer {
                if let string0 = string0 {
                    partitionValuesDecoded0?.append(string0)
                }
            }
        }
        partitionValues = partitionValuesDecoded0
        let columnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnName)
        columnName = columnNameDecoded
    }
}

extension DeleteColumnStatisticsForPartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteColumnStatisticsForPartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteColumnStatisticsForPartitionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteColumnStatisticsForPartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteColumnStatisticsForPartitionOutputResponse: Swift.Equatable {

}

extension DeleteColumnStatisticsForTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnName = "ColumnName"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let columnName = columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DeleteColumnStatisticsForTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteColumnStatisticsForTableInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the column.
    /// This member is required.
    public var columnName: Swift.String?
    /// The name of the catalog database where the partitions reside.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partitions' table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        columnName: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.columnName = columnName
        self.databaseName = databaseName
        self.tableName = tableName
    }
}

struct DeleteColumnStatisticsForTableInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let columnName: Swift.String?
}

extension DeleteColumnStatisticsForTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnName = "ColumnName"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let columnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnName)
        columnName = columnNameDecoded
    }
}

extension DeleteColumnStatisticsForTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteColumnStatisticsForTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteColumnStatisticsForTableOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteColumnStatisticsForTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteColumnStatisticsForTableOutputResponse: Swift.Equatable {

}

extension DeleteConnectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case connectionName = "ConnectionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
    }
}

extension DeleteConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteConnectionInput: Swift.Equatable {
    /// The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the connection to delete.
    /// This member is required.
    public var connectionName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        connectionName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.connectionName = connectionName
    }
}

struct DeleteConnectionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let connectionName: Swift.String?
}

extension DeleteConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case connectionName = "ConnectionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
    }
}

extension DeleteConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConnectionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteConnectionOutputResponse: Swift.Equatable {

}

extension DeleteCrawlerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteCrawlerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteCrawlerInput: Swift.Equatable {
    /// The name of the crawler to remove.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteCrawlerInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteCrawlerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteCrawlerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCrawlerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CrawlerRunningException" : self = .crawlerRunningException(try CrawlerRunningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SchedulerTransitioningException" : self = .schedulerTransitioningException(try SchedulerTransitioningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCrawlerOutputError: Swift.Error, Swift.Equatable {
    case crawlerRunningException(CrawlerRunningException)
    case entityNotFoundException(EntityNotFoundException)
    case operationTimeoutException(OperationTimeoutException)
    case schedulerTransitioningException(SchedulerTransitioningException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCrawlerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCrawlerOutputResponse: Swift.Equatable {

}

extension DeleteDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDatabaseInput: Swift.Equatable {
    /// The ID of the Data Catalog in which the database resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the database to delete. For Hive compatibility, this must be all lowercase.
    /// This member is required.
    public var name: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.name = name
    }
}

struct DeleteDatabaseInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let name: Swift.String?
}

extension DeleteDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDatabaseOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDatabaseOutputResponse: Swift.Equatable {

}

extension DeleteDevEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
    }
}

extension DeleteDevEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDevEndpointInput: Swift.Equatable {
    /// The name of the DevEndpoint.
    /// This member is required.
    public var endpointName: Swift.String?

    public init (
        endpointName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
    }
}

struct DeleteDevEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
}

extension DeleteDevEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
    }
}

extension DeleteDevEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDevEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDevEndpointOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDevEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDevEndpointOutputResponse: Swift.Equatable {

}

extension DeleteJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
    }
}

extension DeleteJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteJobInput: Swift.Equatable {
    /// The name of the job definition to delete.
    /// This member is required.
    public var jobName: Swift.String?

    public init (
        jobName: Swift.String? = nil
    )
    {
        self.jobName = jobName
    }
}

struct DeleteJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
}

extension DeleteJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
    }
}

extension DeleteJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteJobOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobName = output.jobName
        } else {
            self.jobName = nil
        }
    }
}

public struct DeleteJobOutputResponse: Swift.Equatable {
    /// The name of the job definition that was deleted.
    public var jobName: Swift.String?

    public init (
        jobName: Swift.String? = nil
    )
    {
        self.jobName = jobName
    }
}

struct DeleteJobOutputResponseBody: Swift.Equatable {
    let jobName: Swift.String?
}

extension DeleteJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
    }
}

extension DeleteMLTransformInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }
}

extension DeleteMLTransformInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteMLTransformInput: Swift.Equatable {
    /// The unique identifier of the transform to delete.
    /// This member is required.
    public var transformId: Swift.String?

    public init (
        transformId: Swift.String? = nil
    )
    {
        self.transformId = transformId
    }
}

struct DeleteMLTransformInputBody: Swift.Equatable {
    let transformId: Swift.String?
}

extension DeleteMLTransformInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
    }
}

extension DeleteMLTransformOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMLTransformOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMLTransformOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMLTransformOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteMLTransformOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.transformId = output.transformId
        } else {
            self.transformId = nil
        }
    }
}

public struct DeleteMLTransformOutputResponse: Swift.Equatable {
    /// The unique identifier of the transform that was deleted.
    public var transformId: Swift.String?

    public init (
        transformId: Swift.String? = nil
    )
    {
        self.transformId = transformId
    }
}

struct DeleteMLTransformOutputResponseBody: Swift.Equatable {
    let transformId: Swift.String?
}

extension DeleteMLTransformOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
    }
}

extension DeletePartitionIndexInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DeletePartitionIndexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePartitionIndexInput: Swift.Equatable {
    /// The catalog ID where the table resides.
    public var catalogId: Swift.String?
    /// Specifies the name of a database from which you want to delete a partition index.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partition index to be deleted.
    /// This member is required.
    public var indexName: Swift.String?
    /// Specifies the name of a table from which you want to delete a partition index.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        indexName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.indexName = indexName
        self.tableName = tableName
    }
}

struct DeletePartitionIndexInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let indexName: Swift.String?
}

extension DeletePartitionIndexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
    }
}

extension DeletePartitionIndexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePartitionIndexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePartitionIndexOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePartitionIndexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePartitionIndexOutputResponse: Swift.Equatable {

}

extension DeletePartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionValues = partitionValues {
            var partitionValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValues)
            for valuestringlist0 in partitionValues {
                try partitionValuesContainer.encode(valuestringlist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DeletePartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePartitionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partition to be deleted resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database in which the table in question resides.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The values that define the partition.
    /// This member is required.
    public var partitionValues: [Swift.String]?
    /// The name of the table that contains the partition to be deleted.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionValues: [Swift.String]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.partitionValues = partitionValues
        self.tableName = tableName
    }
}

struct DeletePartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionValues: [Swift.String]?
}

extension DeletePartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValues)
        var partitionValuesDecoded0:[Swift.String]? = nil
        if let partitionValuesContainer = partitionValuesContainer {
            partitionValuesDecoded0 = [Swift.String]()
            for string0 in partitionValuesContainer {
                if let string0 = string0 {
                    partitionValuesDecoded0?.append(string0)
                }
            }
        }
        partitionValues = partitionValuesDecoded0
    }
}

extension DeletePartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePartitionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePartitionOutputResponse: Swift.Equatable {

}

extension DeleteRegistryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryId = "RegistryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let registryId = registryId {
            try encodeContainer.encode(registryId, forKey: .registryId)
        }
    }
}

extension DeleteRegistryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRegistryInput: Swift.Equatable {
    /// This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).
    /// This member is required.
    public var registryId: GlueClientTypes.RegistryId?

    public init (
        registryId: GlueClientTypes.RegistryId? = nil
    )
    {
        self.registryId = registryId
    }
}

struct DeleteRegistryInputBody: Swift.Equatable {
    let registryId: GlueClientTypes.RegistryId?
}

extension DeleteRegistryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryId = "RegistryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RegistryId.self, forKey: .registryId)
        registryId = registryIdDecoded
    }
}

extension DeleteRegistryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRegistryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRegistryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRegistryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteRegistryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.registryArn = output.registryArn
            self.registryName = output.registryName
            self.status = output.status
        } else {
            self.registryArn = nil
            self.registryName = nil
            self.status = nil
        }
    }
}

public struct DeleteRegistryOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the registry being deleted.
    public var registryArn: Swift.String?
    /// The name of the registry being deleted.
    public var registryName: Swift.String?
    /// The status of the registry. A successful operation will return the Deleting status.
    public var status: GlueClientTypes.RegistryStatus?

    public init (
        registryArn: Swift.String? = nil,
        registryName: Swift.String? = nil,
        status: GlueClientTypes.RegistryStatus? = nil
    )
    {
        self.registryArn = registryArn
        self.registryName = registryName
        self.status = status
    }
}

struct DeleteRegistryOutputResponseBody: Swift.Equatable {
    let registryName: Swift.String?
    let registryArn: Swift.String?
    let status: GlueClientTypes.RegistryStatus?
}

extension DeleteRegistryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryArn = "RegistryArn"
        case registryName = "RegistryName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let registryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RegistryStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DeleteResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyHashCondition = "PolicyHashCondition"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyHashCondition = policyHashCondition {
            try encodeContainer.encode(policyHashCondition, forKey: .policyHashCondition)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DeleteResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// The hash value returned when this policy was set.
    public var policyHashCondition: Swift.String?
    /// The ARN of the Glue resource for the resource policy to be deleted.
    public var resourceArn: Swift.String?

    public init (
        policyHashCondition: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policyHashCondition = policyHashCondition
        self.resourceArn = resourceArn
    }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
    let policyHashCondition: Swift.String?
    let resourceArn: Swift.String?
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyHashCondition = "PolicyHashCondition"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyHashConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyHashCondition)
        policyHashCondition = policyHashConditionDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConditionCheckFailureException" : self = .conditionCheckFailureException(try ConditionCheckFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case conditionCheckFailureException(ConditionCheckFailureException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourcePolicyOutputResponse: Swift.Equatable {

}

extension DeleteSchemaInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaId = "SchemaId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
    }
}

extension DeleteSchemaInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSchemaInput: Swift.Equatable {
    /// This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN).
    /// This member is required.
    public var schemaId: GlueClientTypes.SchemaId?

    public init (
        schemaId: GlueClientTypes.SchemaId? = nil
    )
    {
        self.schemaId = schemaId
    }
}

struct DeleteSchemaInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
}

extension DeleteSchemaInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaId = "SchemaId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
    }
}

extension DeleteSchemaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSchemaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSchemaOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSchemaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteSchemaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.schemaArn = output.schemaArn
            self.schemaName = output.schemaName
            self.status = output.status
        } else {
            self.schemaArn = nil
            self.schemaName = nil
            self.status = nil
        }
    }
}

public struct DeleteSchemaOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the schema being deleted.
    public var schemaArn: Swift.String?
    /// The name of the schema being deleted.
    public var schemaName: Swift.String?
    /// The status of the schema.
    public var status: GlueClientTypes.SchemaStatus?

    public init (
        schemaArn: Swift.String? = nil,
        schemaName: Swift.String? = nil,
        status: GlueClientTypes.SchemaStatus? = nil
    )
    {
        self.schemaArn = schemaArn
        self.schemaName = schemaName
        self.status = status
    }
}

struct DeleteSchemaOutputResponseBody: Swift.Equatable {
    let schemaArn: Swift.String?
    let schemaName: Swift.String?
    let status: GlueClientTypes.SchemaStatus?
}

extension DeleteSchemaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaArn = "SchemaArn"
        case schemaName = "SchemaName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DeleteSchemaVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaId = "SchemaId"
        case versions = "Versions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let versions = versions {
            try encodeContainer.encode(versions, forKey: .versions)
        }
    }
}

extension DeleteSchemaVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSchemaVersionsInput: Swift.Equatable {
    /// This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN).
    /// This member is required.
    public var schemaId: GlueClientTypes.SchemaId?
    /// A version range may be supplied which may be of the format:
    ///
    /// * a single version number, 5
    ///
    /// * a range, 5-8 : deletes versions 5, 6, 7, 8
    /// This member is required.
    public var versions: Swift.String?

    public init (
        schemaId: GlueClientTypes.SchemaId? = nil,
        versions: Swift.String? = nil
    )
    {
        self.schemaId = schemaId
        self.versions = versions
    }
}

struct DeleteSchemaVersionsInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let versions: Swift.String?
}

extension DeleteSchemaVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaId = "SchemaId"
        case versions = "Versions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let versionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versions)
        versions = versionsDecoded
    }
}

extension DeleteSchemaVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSchemaVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSchemaVersionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSchemaVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteSchemaVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.schemaVersionErrors = output.schemaVersionErrors
        } else {
            self.schemaVersionErrors = nil
        }
    }
}

public struct DeleteSchemaVersionsOutputResponse: Swift.Equatable {
    /// A list of SchemaVersionErrorItem objects, each containing an error and schema version.
    public var schemaVersionErrors: [GlueClientTypes.SchemaVersionErrorItem]?

    public init (
        schemaVersionErrors: [GlueClientTypes.SchemaVersionErrorItem]? = nil
    )
    {
        self.schemaVersionErrors = schemaVersionErrors
    }
}

struct DeleteSchemaVersionsOutputResponseBody: Swift.Equatable {
    let schemaVersionErrors: [GlueClientTypes.SchemaVersionErrorItem]?
}

extension DeleteSchemaVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaVersionErrors = "SchemaVersionErrors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaVersionErrorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.SchemaVersionErrorItem?].self, forKey: .schemaVersionErrors)
        var schemaVersionErrorsDecoded0:[GlueClientTypes.SchemaVersionErrorItem]? = nil
        if let schemaVersionErrorsContainer = schemaVersionErrorsContainer {
            schemaVersionErrorsDecoded0 = [GlueClientTypes.SchemaVersionErrorItem]()
            for structure0 in schemaVersionErrorsContainer {
                if let structure0 = structure0 {
                    schemaVersionErrorsDecoded0?.append(structure0)
                }
            }
        }
        schemaVersionErrors = schemaVersionErrorsDecoded0
    }
}

extension DeleteSecurityConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteSecurityConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSecurityConfigurationInput: Swift.Equatable {
    /// The name of the security configuration to delete.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteSecurityConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteSecurityConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteSecurityConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSecurityConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSecurityConfigurationOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSecurityConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSecurityConfigurationOutputResponse: Swift.Equatable {

}

extension DeleteTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case name = "Name"
        case transactionId = "TransactionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let transactionId = transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }
}

extension DeleteTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteTableInput: Swift.Equatable {
    /// The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the table to be deleted. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var name: Swift.String?
    /// The transaction ID at which to delete the table contents.
    public var transactionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        name: Swift.String? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.name = name
        self.transactionId = transactionId
    }
}

struct DeleteTableInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let name: Swift.String?
    let transactionId: Swift.String?
}

extension DeleteTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case name = "Name"
        case transactionId = "TransactionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let transactionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transactionId)
        transactionId = transactionIdDecoded
    }
}

extension DeleteTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTableOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNotReadyException(ResourceNotReadyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTableOutputResponse: Swift.Equatable {

}

extension DeleteTableVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let versionId = versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }
}

extension DeleteTableVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteTableVersionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the table. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var tableName: Swift.String?
    /// The ID of the table version to be deleted. A VersionID is a string representation of an integer. Each version is incremented by 1.
    /// This member is required.
    public var versionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        tableName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.tableName = tableName
        self.versionId = versionId
    }
}

struct DeleteTableVersionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let versionId: Swift.String?
}

extension DeleteTableVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
        case versionId = "VersionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension DeleteTableVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTableVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTableVersionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTableVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTableVersionOutputResponse: Swift.Equatable {

}

extension DeleteTriggerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteTriggerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteTriggerInput: Swift.Equatable {
    /// The name of the trigger to delete.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteTriggerInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteTriggerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteTriggerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTriggerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTriggerOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTriggerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteTriggerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct DeleteTriggerOutputResponse: Swift.Equatable {
    /// The name of the trigger that was deleted.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteTriggerOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteTriggerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteUserDefinedFunctionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case functionName = "FunctionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let functionName = functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
    }
}

extension DeleteUserDefinedFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteUserDefinedFunctionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the function to be deleted is located. If none is supplied, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database where the function is located.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the function definition to be deleted.
    /// This member is required.
    public var functionName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        functionName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.functionName = functionName
    }
}

struct DeleteUserDefinedFunctionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let functionName: Swift.String?
}

extension DeleteUserDefinedFunctionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case functionName = "FunctionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let functionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionName)
        functionName = functionNameDecoded
    }
}

extension DeleteUserDefinedFunctionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserDefinedFunctionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserDefinedFunctionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserDefinedFunctionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserDefinedFunctionOutputResponse: Swift.Equatable {

}

extension DeleteWorkflowInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteWorkflowInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteWorkflowInput: Swift.Equatable {
    /// Name of the workflow to be deleted.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteWorkflowInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteWorkflowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteWorkflowOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteWorkflowOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteWorkflowOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWorkflowOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteWorkflowOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct DeleteWorkflowOutputResponse: Swift.Equatable {
    /// Name of the workflow specified in input.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteWorkflowOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteWorkflowOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GlueClientTypes.DevEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arguments = "Arguments"
        case availabilityZone = "AvailabilityZone"
        case createdTimestamp = "CreatedTimestamp"
        case endpointName = "EndpointName"
        case extraJarsS3Path = "ExtraJarsS3Path"
        case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
        case failureReason = "FailureReason"
        case glueVersion = "GlueVersion"
        case lastModifiedTimestamp = "LastModifiedTimestamp"
        case lastUpdateStatus = "LastUpdateStatus"
        case numberOfNodes = "NumberOfNodes"
        case numberOfWorkers = "NumberOfWorkers"
        case privateAddress = "PrivateAddress"
        case publicAddress = "PublicAddress"
        case publicKey = "PublicKey"
        case publicKeys = "PublicKeys"
        case roleArn = "RoleArn"
        case securityConfiguration = "SecurityConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case status = "Status"
        case subnetId = "SubnetId"
        case vpcId = "VpcId"
        case workerType = "WorkerType"
        case yarnEndpointAddress = "YarnEndpointAddress"
        case zeppelinRemoteSparkInterpreterPort = "ZeppelinRemoteSparkInterpreterPort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .arguments)
            for (dictKey0, mapvalue0) in arguments {
                try argumentsContainer.encode(mapvalue0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let createdTimestamp = createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let extraJarsS3Path = extraJarsS3Path {
            try encodeContainer.encode(extraJarsS3Path, forKey: .extraJarsS3Path)
        }
        if let extraPythonLibsS3Path = extraPythonLibsS3Path {
            try encodeContainer.encode(extraPythonLibsS3Path, forKey: .extraPythonLibsS3Path)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let lastModifiedTimestamp = lastModifiedTimestamp {
            try encodeContainer.encode(lastModifiedTimestamp.timeIntervalSince1970, forKey: .lastModifiedTimestamp)
        }
        if let lastUpdateStatus = lastUpdateStatus {
            try encodeContainer.encode(lastUpdateStatus, forKey: .lastUpdateStatus)
        }
        if numberOfNodes != 0 {
            try encodeContainer.encode(numberOfNodes, forKey: .numberOfNodes)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let privateAddress = privateAddress {
            try encodeContainer.encode(privateAddress, forKey: .privateAddress)
        }
        if let publicAddress = publicAddress {
            try encodeContainer.encode(publicAddress, forKey: .publicAddress)
        }
        if let publicKey = publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
        if let publicKeys = publicKeys {
            var publicKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicKeys)
            for publickeyslist0 in publicKeys {
                try publicKeysContainer.encode(publickeyslist0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
        if let yarnEndpointAddress = yarnEndpointAddress {
            try encodeContainer.encode(yarnEndpointAddress, forKey: .yarnEndpointAddress)
        }
        if zeppelinRemoteSparkInterpreterPort != 0 {
            try encodeContainer.encode(zeppelinRemoteSparkInterpreterPort, forKey: .zeppelinRemoteSparkInterpreterPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let yarnEndpointAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .yarnEndpointAddress)
        yarnEndpointAddress = yarnEndpointAddressDecoded
        let privateAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateAddress)
        privateAddress = privateAddressDecoded
        let zeppelinRemoteSparkInterpreterPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .zeppelinRemoteSparkInterpreterPort)
        zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPortDecoded
        let publicAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicAddress)
        publicAddress = publicAddressDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let numberOfNodesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let extraPythonLibsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraPythonLibsS3Path)
        extraPythonLibsS3Path = extraPythonLibsS3PathDecoded
        let extraJarsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraJarsS3Path)
        extraJarsS3Path = extraJarsS3PathDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let lastUpdateStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdateStatus)
        lastUpdateStatus = lastUpdateStatusDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let lastModifiedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimestamp)
        lastModifiedTimestamp = lastModifiedTimestampDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let publicKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .publicKeys)
        var publicKeysDecoded0:[Swift.String]? = nil
        if let publicKeysContainer = publicKeysContainer {
            publicKeysDecoded0 = [Swift.String]()
            for string0 in publicKeysContainer {
                if let string0 = string0 {
                    publicKeysDecoded0?.append(string0)
                }
            }
        }
        publicKeys = publicKeysDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .arguments)
        var argumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in argumentsContainer {
                if let genericstring0 = genericstring0 {
                    argumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        arguments = argumentsDecoded0
    }
}

extension GlueClientTypes {
    /// A development endpoint where a developer can remotely debug extract, transform, and load (ETL) scripts.
    public struct DevEndpoint: Swift.Equatable {
        /// A map of arguments used to configure the DevEndpoint. Valid arguments are:
        ///
        /// * "--enable-glue-datacatalog": ""
        ///
        ///
        /// You can specify a version of Python support for development endpoints by using the Arguments parameter in the CreateDevEndpoint or UpdateDevEndpoint APIs. If no arguments are provided, the version defaults to Python 2.
        public var arguments: [Swift.String:Swift.String]?
        /// The AWS Availability Zone where this DevEndpoint is located.
        public var availabilityZone: Swift.String?
        /// The point in time at which this DevEndpoint was created.
        public var createdTimestamp: ClientRuntime.Date?
        /// The name of the DevEndpoint.
        public var endpointName: Swift.String?
        /// The path to one or more Java .jar files in an S3 bucket that should be loaded in your DevEndpoint. You can only use pure Java/Scala libraries with a DevEndpoint.
        public var extraJarsS3Path: Swift.String?
        /// The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma. You can only use pure Python libraries with a DevEndpoint. Libraries that rely on C extensions, such as the [pandas](http://pandas.pydata.org/) Python data analysis library, are not currently supported.
        public var extraPythonLibsS3Path: Swift.String?
        /// The reason for a current failure in this DevEndpoint.
        public var failureReason: Swift.String?
        /// Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. For more information about the available Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide. Development endpoints that are created without specifying a Glue version default to Glue 0.9. You can specify a version of Python support for development endpoints by using the Arguments parameter in the CreateDevEndpoint or UpdateDevEndpoint APIs. If no arguments are provided, the version defaults to Python 2.
        public var glueVersion: Swift.String?
        /// The point in time at which this DevEndpoint was last modified.
        public var lastModifiedTimestamp: ClientRuntime.Date?
        /// The status of the last update.
        public var lastUpdateStatus: Swift.String?
        /// The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.
        public var numberOfNodes: Swift.Int
        /// The number of workers of a defined workerType that are allocated to the development endpoint. The maximum number of workers you can define are 299 for G.1X, and 149 for G.2X.
        public var numberOfWorkers: Swift.Int?
        /// A private IP address to access the DevEndpoint within a VPC if the DevEndpoint is created within one. The PrivateAddress field is present only when you create the DevEndpoint within your VPC.
        public var privateAddress: Swift.String?
        /// The public IP address used by this DevEndpoint. The PublicAddress field is present only when you create a non-virtual private cloud (VPC) DevEndpoint.
        public var publicAddress: Swift.String?
        /// The public key to be used by this DevEndpoint for authentication. This attribute is provided for backward compatibility because the recommended attribute to use is public keys.
        public var publicKey: Swift.String?
        /// A list of public keys to be used by the DevEndpoints for authentication. Using this attribute is preferred over a single public key because the public keys allow you to have a different private key per client. If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys. Call the UpdateDevEndpoint API operation with the public key content in the deletePublicKeys attribute, and the list of new keys in the addPublicKeys attribute.
        public var publicKeys: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the IAM role used in this DevEndpoint.
        public var roleArn: Swift.String?
        /// The name of the SecurityConfiguration structure to be used with this DevEndpoint.
        public var securityConfiguration: Swift.String?
        /// A list of security group identifiers used in this DevEndpoint.
        public var securityGroupIds: [Swift.String]?
        /// The current status of this DevEndpoint.
        public var status: Swift.String?
        /// The subnet ID for this DevEndpoint.
        public var subnetId: Swift.String?
        /// The ID of the virtual private cloud (VPC) used by this DevEndpoint.
        public var vpcId: Swift.String?
        /// The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.
        ///
        /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
        ///
        /// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
        ///
        /// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
        ///
        ///
        /// Known issue: when a development endpoint is created with the G.2XWorkerType configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk.
        public var workerType: GlueClientTypes.WorkerType?
        /// The YARN endpoint address used by this DevEndpoint.
        public var yarnEndpointAddress: Swift.String?
        /// The Apache Zeppelin port for the remote Apache Spark interpreter.
        public var zeppelinRemoteSparkInterpreterPort: Swift.Int

        public init (
            arguments: [Swift.String:Swift.String]? = nil,
            availabilityZone: Swift.String? = nil,
            createdTimestamp: ClientRuntime.Date? = nil,
            endpointName: Swift.String? = nil,
            extraJarsS3Path: Swift.String? = nil,
            extraPythonLibsS3Path: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            glueVersion: Swift.String? = nil,
            lastModifiedTimestamp: ClientRuntime.Date? = nil,
            lastUpdateStatus: Swift.String? = nil,
            numberOfNodes: Swift.Int = 0,
            numberOfWorkers: Swift.Int? = nil,
            privateAddress: Swift.String? = nil,
            publicAddress: Swift.String? = nil,
            publicKey: Swift.String? = nil,
            publicKeys: [Swift.String]? = nil,
            roleArn: Swift.String? = nil,
            securityConfiguration: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            status: Swift.String? = nil,
            subnetId: Swift.String? = nil,
            vpcId: Swift.String? = nil,
            workerType: GlueClientTypes.WorkerType? = nil,
            yarnEndpointAddress: Swift.String? = nil,
            zeppelinRemoteSparkInterpreterPort: Swift.Int = 0
        )
        {
            self.arguments = arguments
            self.availabilityZone = availabilityZone
            self.createdTimestamp = createdTimestamp
            self.endpointName = endpointName
            self.extraJarsS3Path = extraJarsS3Path
            self.extraPythonLibsS3Path = extraPythonLibsS3Path
            self.failureReason = failureReason
            self.glueVersion = glueVersion
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.lastUpdateStatus = lastUpdateStatus
            self.numberOfNodes = numberOfNodes
            self.numberOfWorkers = numberOfWorkers
            self.privateAddress = privateAddress
            self.publicAddress = publicAddress
            self.publicKey = publicKey
            self.publicKeys = publicKeys
            self.roleArn = roleArn
            self.securityConfiguration = securityConfiguration
            self.securityGroupIds = securityGroupIds
            self.status = status
            self.subnetId = subnetId
            self.vpcId = vpcId
            self.workerType = workerType
            self.yarnEndpointAddress = yarnEndpointAddress
            self.zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPort
        }
    }

}

extension GlueClientTypes.DevEndpointCustomLibraries: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case extraJarsS3Path = "ExtraJarsS3Path"
        case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let extraJarsS3Path = extraJarsS3Path {
            try encodeContainer.encode(extraJarsS3Path, forKey: .extraJarsS3Path)
        }
        if let extraPythonLibsS3Path = extraPythonLibsS3Path {
            try encodeContainer.encode(extraPythonLibsS3Path, forKey: .extraPythonLibsS3Path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let extraPythonLibsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraPythonLibsS3Path)
        extraPythonLibsS3Path = extraPythonLibsS3PathDecoded
        let extraJarsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraJarsS3Path)
        extraJarsS3Path = extraJarsS3PathDecoded
    }
}

extension GlueClientTypes {
    /// Custom libraries to be loaded into a development endpoint.
    public struct DevEndpointCustomLibraries: Swift.Equatable {
        /// The path to one or more Java .jar files in an S3 bucket that should be loaded in your DevEndpoint. You can only use pure Java/Scala libraries with a DevEndpoint.
        public var extraJarsS3Path: Swift.String?
        /// The paths to one or more Python libraries in an Amazon Simple Storage Service (Amazon S3) bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma. You can only use pure Python libraries with a DevEndpoint. Libraries that rely on C extensions, such as the [pandas](http://pandas.pydata.org/) Python data analysis library, are not currently supported.
        public var extraPythonLibsS3Path: Swift.String?

        public init (
            extraJarsS3Path: Swift.String? = nil,
            extraPythonLibsS3Path: Swift.String? = nil
        )
        {
            self.extraJarsS3Path = extraJarsS3Path
            self.extraPythonLibsS3Path = extraPythonLibsS3Path
        }
    }

}

extension GlueClientTypes.DoubleColumnStatisticsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumValue = "MaximumValue"
        case minimumValue = "MinimumValue"
        case numberOfDistinctValues = "NumberOfDistinctValues"
        case numberOfNulls = "NumberOfNulls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumValue != 0.0 {
            try encodeContainer.encode(maximumValue, forKey: .maximumValue)
        }
        if minimumValue != 0.0 {
            try encodeContainer.encode(minimumValue, forKey: .minimumValue)
        }
        if numberOfDistinctValues != 0 {
            try encodeContainer.encode(numberOfDistinctValues, forKey: .numberOfDistinctValues)
        }
        if numberOfNulls != 0 {
            try encodeContainer.encode(numberOfNulls, forKey: .numberOfNulls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumValueDecoded = try containerValues.decode(Swift.Double.self, forKey: .minimumValue)
        minimumValue = minimumValueDecoded
        let maximumValueDecoded = try containerValues.decode(Swift.Double.self, forKey: .maximumValue)
        maximumValue = maximumValueDecoded
        let numberOfNullsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNulls)
        numberOfNulls = numberOfNullsDecoded
        let numberOfDistinctValuesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfDistinctValues)
        numberOfDistinctValues = numberOfDistinctValuesDecoded
    }
}

extension GlueClientTypes {
    /// Defines column statistics supported for floating-point number data columns.
    public struct DoubleColumnStatisticsData: Swift.Equatable {
        /// The highest value in the column.
        public var maximumValue: Swift.Double
        /// The lowest value in the column.
        public var minimumValue: Swift.Double
        /// The number of distinct values in a column.
        /// This member is required.
        public var numberOfDistinctValues: Swift.Int
        /// The number of null values in the column.
        /// This member is required.
        public var numberOfNulls: Swift.Int

        public init (
            maximumValue: Swift.Double = 0.0,
            minimumValue: Swift.Double = 0.0,
            numberOfDistinctValues: Swift.Int = 0,
            numberOfNulls: Swift.Int = 0
        )
        {
            self.maximumValue = maximumValue
            self.minimumValue = minimumValue
            self.numberOfDistinctValues = numberOfDistinctValues
            self.numberOfNulls = numberOfNulls
        }
    }

}

extension GlueClientTypes.DynamoDBTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case path = "Path"
        case scanAll
        case scanRate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let scanAll = scanAll {
            try encodeContainer.encode(scanAll, forKey: .scanAll)
        }
        if let scanRate = scanRate {
            try encodeContainer.encode(scanRate, forKey: .scanRate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let scanAllDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .scanAll)
        scanAll = scanAllDecoded
        let scanRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .scanRate)
        scanRate = scanRateDecoded
    }
}

extension GlueClientTypes {
    /// Specifies an Amazon DynamoDB table to crawl.
    public struct DynamoDBTarget: Swift.Equatable {
        /// The name of the DynamoDB table to crawl.
        public var path: Swift.String?
        /// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. A value of true means to scan all records, while a value of false means to sample the records. If no value is specified, the value defaults to true.
        public var scanAll: Swift.Bool?
        /// The percentage of the configured read capacity units to use by the Glue crawler. Read capacity units is a term defined by DynamoDB, and is a numeric value that acts as rate limiter for the number of reads that can be performed on that table per second. The valid values are null or a value between 0.1 to 1.5. A null value is used when user does not provide a value, and defaults to 0.5 of the configured Read Capacity Unit (for provisioned tables), or 0.25 of the max configured Read Capacity Unit (for tables using on-demand mode).
        public var scanRate: Swift.Double?

        public init (
            path: Swift.String? = nil,
            scanAll: Swift.Bool? = nil,
            scanRate: Swift.Double? = nil
        )
        {
            self.path = path
            self.scanAll = scanAll
            self.scanRate = scanRate
        }
    }

}

extension GlueClientTypes.Edge: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationId = "DestinationId"
        case sourceId = "SourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationId = destinationId {
            try encodeContainer.encode(destinationId, forKey: .destinationId)
        }
        if let sourceId = sourceId {
            try encodeContainer.encode(sourceId, forKey: .sourceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
        let destinationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationId)
        destinationId = destinationIdDecoded
    }
}

extension GlueClientTypes {
    /// An edge represents a directed connection between two components on a workflow graph.
    public struct Edge: Swift.Equatable {
        /// The unique of the node within the workflow where the edge ends.
        public var destinationId: Swift.String?
        /// The unique of the node within the workflow where the edge starts.
        public var sourceId: Swift.String?

        public init (
            destinationId: Swift.String? = nil,
            sourceId: Swift.String? = nil
        )
        {
            self.destinationId = destinationId
            self.sourceId = sourceId
        }
    }

}

extension GlueClientTypes {
    public enum EnableHybridValues: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `false`
        case `true`
        case sdkUnknown(Swift.String)

        public static var allCases: [EnableHybridValues] {
            return [
                .false,
                .true,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .false: return "FALSE"
            case .true: return "TRUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnableHybridValues(rawValue: rawValue) ?? EnableHybridValues.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.EncryptionAtRest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogEncryptionMode = "CatalogEncryptionMode"
        case sseAwsKmsKeyId = "SseAwsKmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogEncryptionMode = catalogEncryptionMode {
            try encodeContainer.encode(catalogEncryptionMode.rawValue, forKey: .catalogEncryptionMode)
        }
        if let sseAwsKmsKeyId = sseAwsKmsKeyId {
            try encodeContainer.encode(sseAwsKmsKeyId, forKey: .sseAwsKmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogEncryptionModeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CatalogEncryptionMode.self, forKey: .catalogEncryptionMode)
        catalogEncryptionMode = catalogEncryptionModeDecoded
        let sseAwsKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sseAwsKmsKeyId)
        sseAwsKmsKeyId = sseAwsKmsKeyIdDecoded
    }
}

extension GlueClientTypes {
    /// Specifies the encryption-at-rest configuration for the Data Catalog.
    public struct EncryptionAtRest: Swift.Equatable {
        /// The encryption-at-rest mode for encrypting Data Catalog data.
        /// This member is required.
        public var catalogEncryptionMode: GlueClientTypes.CatalogEncryptionMode?
        /// The ID of the KMS key to use for encryption at rest.
        public var sseAwsKmsKeyId: Swift.String?

        public init (
            catalogEncryptionMode: GlueClientTypes.CatalogEncryptionMode? = nil,
            sseAwsKmsKeyId: Swift.String? = nil
        )
        {
            self.catalogEncryptionMode = catalogEncryptionMode
            self.sseAwsKmsKeyId = sseAwsKmsKeyId
        }
    }

}

extension GlueClientTypes.EncryptionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchEncryption = "CloudWatchEncryption"
        case jobBookmarksEncryption = "JobBookmarksEncryption"
        case s3Encryption = "S3Encryption"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchEncryption = cloudWatchEncryption {
            try encodeContainer.encode(cloudWatchEncryption, forKey: .cloudWatchEncryption)
        }
        if let jobBookmarksEncryption = jobBookmarksEncryption {
            try encodeContainer.encode(jobBookmarksEncryption, forKey: .jobBookmarksEncryption)
        }
        if let s3Encryption = s3Encryption {
            var s3EncryptionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .s3Encryption)
            for s3encryptionlist0 in s3Encryption {
                try s3EncryptionContainer.encode(s3encryptionlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3EncryptionContainer = try containerValues.decodeIfPresent([GlueClientTypes.S3Encryption?].self, forKey: .s3Encryption)
        var s3EncryptionDecoded0:[GlueClientTypes.S3Encryption]? = nil
        if let s3EncryptionContainer = s3EncryptionContainer {
            s3EncryptionDecoded0 = [GlueClientTypes.S3Encryption]()
            for structure0 in s3EncryptionContainer {
                if let structure0 = structure0 {
                    s3EncryptionDecoded0?.append(structure0)
                }
            }
        }
        s3Encryption = s3EncryptionDecoded0
        let cloudWatchEncryptionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CloudWatchEncryption.self, forKey: .cloudWatchEncryption)
        cloudWatchEncryption = cloudWatchEncryptionDecoded
        let jobBookmarksEncryptionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobBookmarksEncryption.self, forKey: .jobBookmarksEncryption)
        jobBookmarksEncryption = jobBookmarksEncryptionDecoded
    }
}

extension GlueClientTypes {
    /// Specifies an encryption configuration.
    public struct EncryptionConfiguration: Swift.Equatable {
        /// The encryption configuration for Amazon CloudWatch.
        public var cloudWatchEncryption: GlueClientTypes.CloudWatchEncryption?
        /// The encryption configuration for job bookmarks.
        public var jobBookmarksEncryption: GlueClientTypes.JobBookmarksEncryption?
        /// The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.
        public var s3Encryption: [GlueClientTypes.S3Encryption]?

        public init (
            cloudWatchEncryption: GlueClientTypes.CloudWatchEncryption? = nil,
            jobBookmarksEncryption: GlueClientTypes.JobBookmarksEncryption? = nil,
            s3Encryption: [GlueClientTypes.S3Encryption]? = nil
        )
        {
            self.cloudWatchEncryption = cloudWatchEncryption
            self.jobBookmarksEncryption = jobBookmarksEncryption
            self.s3Encryption = s3Encryption
        }
    }

}

extension EntityNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EntityNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A specified entity does not exist
public struct EntityNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct EntityNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension EntityNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.ErrorDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension GlueClientTypes {
    /// Contains details about an error.
    public struct ErrorDetail: Swift.Equatable {
        /// The code associated with this error.
        public var errorCode: Swift.String?
        /// A message describing the error.
        public var errorMessage: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }

}

extension GlueClientTypes.ErrorDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension GlueClientTypes {
    /// An object containing error details.
    public struct ErrorDetails: Swift.Equatable {
        /// The error code for an error.
        public var errorCode: Swift.String?
        /// The error message for an error.
        public var errorMessage: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }

}

extension GlueClientTypes.EvaluationMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findMatchesMetrics = "FindMatchesMetrics"
        case transformType = "TransformType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let findMatchesMetrics = findMatchesMetrics {
            try encodeContainer.encode(findMatchesMetrics, forKey: .findMatchesMetrics)
        }
        if let transformType = transformType {
            try encodeContainer.encode(transformType.rawValue, forKey: .transformType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformType.self, forKey: .transformType)
        transformType = transformTypeDecoded
        let findMatchesMetricsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.FindMatchesMetrics.self, forKey: .findMatchesMetrics)
        findMatchesMetrics = findMatchesMetricsDecoded
    }
}

extension GlueClientTypes {
    /// Evaluation metrics provide an estimate of the quality of your machine learning transform.
    public struct EvaluationMetrics: Swift.Equatable {
        /// The evaluation metrics for the find matches algorithm.
        public var findMatchesMetrics: GlueClientTypes.FindMatchesMetrics?
        /// The type of machine learning transform.
        /// This member is required.
        public var transformType: GlueClientTypes.TransformType?

        public init (
            findMatchesMetrics: GlueClientTypes.FindMatchesMetrics? = nil,
            transformType: GlueClientTypes.TransformType? = nil
        )
        {
            self.findMatchesMetrics = findMatchesMetrics
            self.transformType = transformType
        }
    }

}

extension GlueClientTypes.EventBatchingCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case batchWindow = "BatchWindow"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if batchSize != 0 {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let batchWindow = batchWindow {
            try encodeContainer.encode(batchWindow, forKey: .batchWindow)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let batchWindowDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchWindow)
        batchWindow = batchWindowDecoded
    }
}

extension GlueClientTypes {
    /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
    public struct EventBatchingCondition: Swift.Equatable {
        /// Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
        /// This member is required.
        public var batchSize: Swift.Int
        /// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
        public var batchWindow: Swift.Int?

        public init (
            batchSize: Swift.Int = 0,
            batchWindow: Swift.Int? = nil
        )
        {
            self.batchSize = batchSize
            self.batchWindow = batchWindow
        }
    }

}

extension GlueClientTypes.ExecutionProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxConcurrentRuns = "MaxConcurrentRuns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxConcurrentRuns != 0 {
            try encodeContainer.encode(maxConcurrentRuns, forKey: .maxConcurrentRuns)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxConcurrentRunsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxConcurrentRuns)
        maxConcurrentRuns = maxConcurrentRunsDecoded
    }
}

extension GlueClientTypes {
    /// An execution property of a job.
    public struct ExecutionProperty: Swift.Equatable {
        /// The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.
        public var maxConcurrentRuns: Swift.Int

        public init (
            maxConcurrentRuns: Swift.Int = 0
        )
        {
            self.maxConcurrentRuns = maxConcurrentRuns
        }
    }

}

extension GlueClientTypes {
    public enum ExistCondition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mustExist
        case `none`
        case notExist
        case sdkUnknown(Swift.String)

        public static var allCases: [ExistCondition] {
            return [
                .mustExist,
                .none,
                .notExist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mustExist: return "MUST_EXIST"
            case .none: return "NONE"
            case .notExist: return "NOT_EXIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExistCondition(rawValue: rawValue) ?? ExistCondition.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.ExportLabelsTaskRunProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputS3Path = "OutputS3Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputS3Path = outputS3Path {
            try encodeContainer.encode(outputS3Path, forKey: .outputS3Path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Path)
        outputS3Path = outputS3PathDecoded
    }
}

extension GlueClientTypes {
    /// Specifies configuration properties for an exporting labels task run.
    public struct ExportLabelsTaskRunProperties: Swift.Equatable {
        /// The Amazon Simple Storage Service (Amazon S3) path where you will export the labels.
        public var outputS3Path: Swift.String?

        public init (
            outputS3Path: Swift.String? = nil
        )
        {
            self.outputS3Path = outputS3Path
        }
    }

}

extension GlueClientTypes.FindMatchesMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case areaUnderPRCurve = "AreaUnderPRCurve"
        case columnImportances = "ColumnImportances"
        case confusionMatrix = "ConfusionMatrix"
        case f1 = "F1"
        case precision = "Precision"
        case recall = "Recall"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let areaUnderPRCurve = areaUnderPRCurve {
            try encodeContainer.encode(areaUnderPRCurve, forKey: .areaUnderPRCurve)
        }
        if let columnImportances = columnImportances {
            var columnImportancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnImportances)
            for columnimportancelist0 in columnImportances {
                try columnImportancesContainer.encode(columnimportancelist0)
            }
        }
        if let confusionMatrix = confusionMatrix {
            try encodeContainer.encode(confusionMatrix, forKey: .confusionMatrix)
        }
        if let f1 = f1 {
            try encodeContainer.encode(f1, forKey: .f1)
        }
        if let precision = precision {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if let recall = recall {
            try encodeContainer.encode(recall, forKey: .recall)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let areaUnderPRCurveDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .areaUnderPRCurve)
        areaUnderPRCurve = areaUnderPRCurveDecoded
        let precisionDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .precision)
        precision = precisionDecoded
        let recallDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recall)
        recall = recallDecoded
        let f1Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .f1)
        f1 = f1Decoded
        let confusionMatrixDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConfusionMatrix.self, forKey: .confusionMatrix)
        confusionMatrix = confusionMatrixDecoded
        let columnImportancesContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnImportance?].self, forKey: .columnImportances)
        var columnImportancesDecoded0:[GlueClientTypes.ColumnImportance]? = nil
        if let columnImportancesContainer = columnImportancesContainer {
            columnImportancesDecoded0 = [GlueClientTypes.ColumnImportance]()
            for structure0 in columnImportancesContainer {
                if let structure0 = structure0 {
                    columnImportancesDecoded0?.append(structure0)
                }
            }
        }
        columnImportances = columnImportancesDecoded0
    }
}

extension GlueClientTypes {
    /// The evaluation metrics for the find matches algorithm. The quality of your machine learning transform is measured by getting your transform to predict some matches and comparing the results to known matches from the same dataset. The quality metrics are based on a subset of your data, so they are not precise.
    public struct FindMatchesMetrics: Swift.Equatable {
        /// The area under the precision/recall curve (AUPRC) is a single number measuring the overall quality of the transform, that is independent of the choice made for precision vs. recall. Higher values indicate that you have a more attractive precision vs. recall tradeoff. For more information, see [Precision and recall](https://en.wikipedia.org/wiki/Precision_and_recall) in Wikipedia.
        public var areaUnderPRCurve: Swift.Double?
        /// A list of ColumnImportance structures containing column importance metrics, sorted in order of descending importance.
        public var columnImportances: [GlueClientTypes.ColumnImportance]?
        /// The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making. For more information, see [Confusion matrix](https://en.wikipedia.org/wiki/Confusion_matrix) in Wikipedia.
        public var confusionMatrix: GlueClientTypes.ConfusionMatrix?
        /// The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is the best accuracy. For more information, see [F1 score](https://en.wikipedia.org/wiki/F1_score) in Wikipedia.
        public var f1: Swift.Double?
        /// The precision metric indicates when often your transform is correct when it predicts a match. Specifically, it measures how well the transform finds true positives from the total true positives possible. For more information, see [Precision and recall](https://en.wikipedia.org/wiki/Precision_and_recall) in Wikipedia.
        public var precision: Swift.Double?
        /// The recall metric indicates that for an actual match, how often your transform predicts the match. Specifically, it measures how well the transform finds true positives from the total records in the source data. For more information, see [Precision and recall](https://en.wikipedia.org/wiki/Precision_and_recall) in Wikipedia.
        public var recall: Swift.Double?

        public init (
            areaUnderPRCurve: Swift.Double? = nil,
            columnImportances: [GlueClientTypes.ColumnImportance]? = nil,
            confusionMatrix: GlueClientTypes.ConfusionMatrix? = nil,
            f1: Swift.Double? = nil,
            precision: Swift.Double? = nil,
            recall: Swift.Double? = nil
        )
        {
            self.areaUnderPRCurve = areaUnderPRCurve
            self.columnImportances = columnImportances
            self.confusionMatrix = confusionMatrix
            self.f1 = f1
            self.precision = precision
            self.recall = recall
        }
    }

}

extension GlueClientTypes.FindMatchesParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accuracyCostTradeoff = "AccuracyCostTradeoff"
        case enforceProvidedLabels = "EnforceProvidedLabels"
        case precisionRecallTradeoff = "PrecisionRecallTradeoff"
        case primaryKeyColumnName = "PrimaryKeyColumnName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accuracyCostTradeoff = accuracyCostTradeoff {
            try encodeContainer.encode(accuracyCostTradeoff, forKey: .accuracyCostTradeoff)
        }
        if let enforceProvidedLabels = enforceProvidedLabels {
            try encodeContainer.encode(enforceProvidedLabels, forKey: .enforceProvidedLabels)
        }
        if let precisionRecallTradeoff = precisionRecallTradeoff {
            try encodeContainer.encode(precisionRecallTradeoff, forKey: .precisionRecallTradeoff)
        }
        if let primaryKeyColumnName = primaryKeyColumnName {
            try encodeContainer.encode(primaryKeyColumnName, forKey: .primaryKeyColumnName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let primaryKeyColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .primaryKeyColumnName)
        primaryKeyColumnName = primaryKeyColumnNameDecoded
        let precisionRecallTradeoffDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .precisionRecallTradeoff)
        precisionRecallTradeoff = precisionRecallTradeoffDecoded
        let accuracyCostTradeoffDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .accuracyCostTradeoff)
        accuracyCostTradeoff = accuracyCostTradeoffDecoded
        let enforceProvidedLabelsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enforceProvidedLabels)
        enforceProvidedLabels = enforceProvidedLabelsDecoded
    }
}

extension GlueClientTypes {
    /// The parameters to configure the find matches transform.
    public struct FindMatchesParameters: Swift.Equatable {
        /// The value that is selected when tuning your transform for a balance between accuracy and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of 1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost, which results in a less accurate FindMatches transform, sometimes with unacceptable accuracy. Accuracy measures how well the transform finds true positives and true negatives. Increasing accuracy requires more machine resources and cost. But it also results in increased recall. Cost measures how many compute resources, and thus money, are consumed to run the transform.
        public var accuracyCostTradeoff: Swift.Double?
        /// The value to switch on or off to force the output to match the provided labels from users. If the value is True, the find matches transform forces the output to match the provided labels. The results override the normal conflation results. If the value is False, the find matches transform does not ensure all the labels provided are respected, and the results rely on the trained model. Note that setting this value to true may increase the conflation execution time.
        public var enforceProvidedLabels: Swift.Bool?
        /// The value selected when tuning your transform for a balance between precision and recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to 1.0 means very low recall, and choosing values close to 0.0 results in very low precision. The precision metric indicates how often your model is correct when it predicts a match. The recall metric indicates that for an actual match, how often your model predicts the match.
        public var precisionRecallTradeoff: Swift.Double?
        /// The name of a column that uniquely identifies rows in the source table. Used to help identify matching records.
        public var primaryKeyColumnName: Swift.String?

        public init (
            accuracyCostTradeoff: Swift.Double? = nil,
            enforceProvidedLabels: Swift.Bool? = nil,
            precisionRecallTradeoff: Swift.Double? = nil,
            primaryKeyColumnName: Swift.String? = nil
        )
        {
            self.accuracyCostTradeoff = accuracyCostTradeoff
            self.enforceProvidedLabels = enforceProvidedLabels
            self.precisionRecallTradeoff = precisionRecallTradeoff
            self.primaryKeyColumnName = primaryKeyColumnName
        }
    }

}

extension GlueClientTypes.FindMatchesTaskRunProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case jobName = "JobName"
        case jobRunId = "JobRunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobRunId = jobRunId {
            try encodeContainer.encode(jobRunId, forKey: .jobRunId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRunId)
        jobRunId = jobRunIdDecoded
    }
}

extension GlueClientTypes {
    /// Specifies configuration properties for a Find Matches task run.
    public struct FindMatchesTaskRunProperties: Swift.Equatable {
        /// The job ID for the Find Matches task run.
        public var jobId: Swift.String?
        /// The name assigned to the job for the Find Matches task run.
        public var jobName: Swift.String?
        /// The job run ID for the Find Matches task run.
        public var jobRunId: Swift.String?

        public init (
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobRunId: Swift.String? = nil
        )
        {
            self.jobId = jobId
            self.jobName = jobName
            self.jobRunId = jobRunId
        }
    }

}

extension GetBlueprintInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeBlueprint = "IncludeBlueprint"
        case includeParameterSpec = "IncludeParameterSpec"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeBlueprint = includeBlueprint {
            try encodeContainer.encode(includeBlueprint, forKey: .includeBlueprint)
        }
        if let includeParameterSpec = includeParameterSpec {
            try encodeContainer.encode(includeParameterSpec, forKey: .includeParameterSpec)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetBlueprintInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBlueprintInput: Swift.Equatable {
    /// Specifies whether or not to include the blueprint in the response.
    public var includeBlueprint: Swift.Bool?
    /// Specifies whether or not to include the parameter specification.
    public var includeParameterSpec: Swift.Bool?
    /// The name of the blueprint.
    /// This member is required.
    public var name: Swift.String?

    public init (
        includeBlueprint: Swift.Bool? = nil,
        includeParameterSpec: Swift.Bool? = nil,
        name: Swift.String? = nil
    )
    {
        self.includeBlueprint = includeBlueprint
        self.includeParameterSpec = includeParameterSpec
        self.name = name
    }
}

struct GetBlueprintInputBody: Swift.Equatable {
    let name: Swift.String?
    let includeBlueprint: Swift.Bool?
    let includeParameterSpec: Swift.Bool?
}

extension GetBlueprintInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeBlueprint = "IncludeBlueprint"
        case includeParameterSpec = "IncludeParameterSpec"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let includeBlueprintDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeBlueprint)
        includeBlueprint = includeBlueprintDecoded
        let includeParameterSpecDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeParameterSpec)
        includeParameterSpec = includeParameterSpecDecoded
    }
}

extension GetBlueprintOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlueprintOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBlueprintOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlueprintOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBlueprintOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blueprint = output.blueprint
        } else {
            self.blueprint = nil
        }
    }
}

public struct GetBlueprintOutputResponse: Swift.Equatable {
    /// Returns a Blueprint object.
    public var blueprint: GlueClientTypes.Blueprint?

    public init (
        blueprint: GlueClientTypes.Blueprint? = nil
    )
    {
        self.blueprint = blueprint
    }
}

struct GetBlueprintOutputResponseBody: Swift.Equatable {
    let blueprint: GlueClientTypes.Blueprint?
}

extension GetBlueprintOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprint = "Blueprint"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Blueprint.self, forKey: .blueprint)
        blueprint = blueprintDecoded
    }
}

extension GetBlueprintRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintName = "BlueprintName"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintName = blueprintName {
            try encodeContainer.encode(blueprintName, forKey: .blueprintName)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }
}

extension GetBlueprintRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBlueprintRunInput: Swift.Equatable {
    /// The name of the blueprint.
    /// This member is required.
    public var blueprintName: Swift.String?
    /// The run ID for the blueprint run you want to retrieve.
    /// This member is required.
    public var runId: Swift.String?

    public init (
        blueprintName: Swift.String? = nil,
        runId: Swift.String? = nil
    )
    {
        self.blueprintName = blueprintName
        self.runId = runId
    }
}

struct GetBlueprintRunInputBody: Swift.Equatable {
    let blueprintName: Swift.String?
    let runId: Swift.String?
}

extension GetBlueprintRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintName = "BlueprintName"
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintName)
        blueprintName = blueprintNameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension GetBlueprintRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlueprintRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBlueprintRunOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlueprintRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBlueprintRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blueprintRun = output.blueprintRun
        } else {
            self.blueprintRun = nil
        }
    }
}

public struct GetBlueprintRunOutputResponse: Swift.Equatable {
    /// Returns a BlueprintRun object.
    public var blueprintRun: GlueClientTypes.BlueprintRun?

    public init (
        blueprintRun: GlueClientTypes.BlueprintRun? = nil
    )
    {
        self.blueprintRun = blueprintRun
    }
}

struct GetBlueprintRunOutputResponseBody: Swift.Equatable {
    let blueprintRun: GlueClientTypes.BlueprintRun?
}

extension GetBlueprintRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintRun = "BlueprintRun"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintRunDecoded = try containerValues.decodeIfPresent(GlueClientTypes.BlueprintRun.self, forKey: .blueprintRun)
        blueprintRun = blueprintRunDecoded
    }
}

extension GetBlueprintRunsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintName = "BlueprintName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintName = blueprintName {
            try encodeContainer.encode(blueprintName, forKey: .blueprintName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetBlueprintRunsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBlueprintRunsInput: Swift.Equatable {
    /// The name of the blueprint.
    /// This member is required.
    public var blueprintName: Swift.String?
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?

    public init (
        blueprintName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.blueprintName = blueprintName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetBlueprintRunsInputBody: Swift.Equatable {
    let blueprintName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetBlueprintRunsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintName = "BlueprintName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintName)
        blueprintName = blueprintNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetBlueprintRunsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlueprintRunsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBlueprintRunsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlueprintRunsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBlueprintRunsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blueprintRuns = output.blueprintRuns
            self.nextToken = output.nextToken
        } else {
            self.blueprintRuns = nil
            self.nextToken = nil
        }
    }
}

public struct GetBlueprintRunsOutputResponse: Swift.Equatable {
    /// Returns a list of BlueprintRun objects.
    public var blueprintRuns: [GlueClientTypes.BlueprintRun]?
    /// A continuation token, if not all blueprint runs have been returned.
    public var nextToken: Swift.String?

    public init (
        blueprintRuns: [GlueClientTypes.BlueprintRun]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.blueprintRuns = blueprintRuns
        self.nextToken = nextToken
    }
}

struct GetBlueprintRunsOutputResponseBody: Swift.Equatable {
    let blueprintRuns: [GlueClientTypes.BlueprintRun]?
    let nextToken: Swift.String?
}

extension GetBlueprintRunsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintRuns = "BlueprintRuns"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintRunsContainer = try containerValues.decodeIfPresent([GlueClientTypes.BlueprintRun?].self, forKey: .blueprintRuns)
        var blueprintRunsDecoded0:[GlueClientTypes.BlueprintRun]? = nil
        if let blueprintRunsContainer = blueprintRunsContainer {
            blueprintRunsDecoded0 = [GlueClientTypes.BlueprintRun]()
            for structure0 in blueprintRunsContainer {
                if let structure0 = structure0 {
                    blueprintRunsDecoded0?.append(structure0)
                }
            }
        }
        blueprintRuns = blueprintRunsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetCatalogImportStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
    }
}

extension GetCatalogImportStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetCatalogImportStatusInput: Swift.Equatable {
    /// The ID of the catalog to migrate. Currently, this should be the Amazon Web Services account ID.
    public var catalogId: Swift.String?

    public init (
        catalogId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
    }
}

struct GetCatalogImportStatusInputBody: Swift.Equatable {
    let catalogId: Swift.String?
}

extension GetCatalogImportStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
    }
}

extension GetCatalogImportStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCatalogImportStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCatalogImportStatusOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCatalogImportStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCatalogImportStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.importStatus = output.importStatus
        } else {
            self.importStatus = nil
        }
    }
}

public struct GetCatalogImportStatusOutputResponse: Swift.Equatable {
    /// The status of the specified catalog migration.
    public var importStatus: GlueClientTypes.CatalogImportStatus?

    public init (
        importStatus: GlueClientTypes.CatalogImportStatus? = nil
    )
    {
        self.importStatus = importStatus
    }
}

struct GetCatalogImportStatusOutputResponseBody: Swift.Equatable {
    let importStatus: GlueClientTypes.CatalogImportStatus?
}

extension GetCatalogImportStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importStatus = "ImportStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importStatusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CatalogImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
    }
}

extension GetClassifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetClassifierInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetClassifierInput: Swift.Equatable {
    /// Name of the classifier to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetClassifierInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension GetClassifierInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GetClassifierOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetClassifierOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetClassifierOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetClassifierOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetClassifierOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.classifier = output.classifier
        } else {
            self.classifier = nil
        }
    }
}

public struct GetClassifierOutputResponse: Swift.Equatable {
    /// The requested classifier.
    public var classifier: GlueClientTypes.Classifier?

    public init (
        classifier: GlueClientTypes.Classifier? = nil
    )
    {
        self.classifier = classifier
    }
}

struct GetClassifierOutputResponseBody: Swift.Equatable {
    let classifier: GlueClientTypes.Classifier?
}

extension GetClassifierOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifier = "Classifier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let classifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Classifier.self, forKey: .classifier)
        classifier = classifierDecoded
    }
}

extension GetClassifiersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetClassifiersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetClassifiersInput: Swift.Equatable {
    /// The size of the list to return (optional).
    public var maxResults: Swift.Int?
    /// An optional continuation token.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetClassifiersInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetClassifiersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetClassifiersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetClassifiersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetClassifiersOutputError: Swift.Error, Swift.Equatable {
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetClassifiersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetClassifiersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.classifiers = output.classifiers
            self.nextToken = output.nextToken
        } else {
            self.classifiers = nil
            self.nextToken = nil
        }
    }
}

public struct GetClassifiersOutputResponse: Swift.Equatable {
    /// The requested list of classifier objects.
    public var classifiers: [GlueClientTypes.Classifier]?
    /// A continuation token.
    public var nextToken: Swift.String?

    public init (
        classifiers: [GlueClientTypes.Classifier]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.classifiers = classifiers
        self.nextToken = nextToken
    }
}

struct GetClassifiersOutputResponseBody: Swift.Equatable {
    let classifiers: [GlueClientTypes.Classifier]?
    let nextToken: Swift.String?
}

extension GetClassifiersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifiers = "Classifiers"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let classifiersContainer = try containerValues.decodeIfPresent([GlueClientTypes.Classifier?].self, forKey: .classifiers)
        var classifiersDecoded0:[GlueClientTypes.Classifier]? = nil
        if let classifiersContainer = classifiersContainer {
            classifiersDecoded0 = [GlueClientTypes.Classifier]()
            for structure0 in classifiersContainer {
                if let structure0 = structure0 {
                    classifiersDecoded0?.append(structure0)
                }
            }
        }
        classifiers = classifiersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetColumnStatisticsForPartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnNames = "ColumnNames"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let columnNames = columnNames {
            var columnNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnNames)
            for getcolumnnameslist0 in columnNames {
                try columnNamesContainer.encode(getcolumnnameslist0)
            }
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionValues = partitionValues {
            var partitionValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValues)
            for valuestringlist0 in partitionValues {
                try partitionValuesContainer.encode(valuestringlist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension GetColumnStatisticsForPartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetColumnStatisticsForPartitionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// A list of the column names.
    /// This member is required.
    public var columnNames: [Swift.String]?
    /// The name of the catalog database where the partitions reside.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A list of partition values identifying the partition.
    /// This member is required.
    public var partitionValues: [Swift.String]?
    /// The name of the partitions' table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        columnNames: [Swift.String]? = nil,
        databaseName: Swift.String? = nil,
        partitionValues: [Swift.String]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.columnNames = columnNames
        self.databaseName = databaseName
        self.partitionValues = partitionValues
        self.tableName = tableName
    }
}

struct GetColumnStatisticsForPartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionValues: [Swift.String]?
    let columnNames: [Swift.String]?
}

extension GetColumnStatisticsForPartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnNames = "ColumnNames"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValues)
        var partitionValuesDecoded0:[Swift.String]? = nil
        if let partitionValuesContainer = partitionValuesContainer {
            partitionValuesDecoded0 = [Swift.String]()
            for string0 in partitionValuesContainer {
                if let string0 = string0 {
                    partitionValuesDecoded0?.append(string0)
                }
            }
        }
        partitionValues = partitionValuesDecoded0
        let columnNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .columnNames)
        var columnNamesDecoded0:[Swift.String]? = nil
        if let columnNamesContainer = columnNamesContainer {
            columnNamesDecoded0 = [Swift.String]()
            for string0 in columnNamesContainer {
                if let string0 = string0 {
                    columnNamesDecoded0?.append(string0)
                }
            }
        }
        columnNames = columnNamesDecoded0
    }
}

extension GetColumnStatisticsForPartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetColumnStatisticsForPartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetColumnStatisticsForPartitionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetColumnStatisticsForPartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetColumnStatisticsForPartitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.columnStatisticsList = output.columnStatisticsList
            self.errors = output.errors
        } else {
            self.columnStatisticsList = nil
            self.errors = nil
        }
    }
}

public struct GetColumnStatisticsForPartitionOutputResponse: Swift.Equatable {
    /// List of ColumnStatistics that failed to be retrieved.
    public var columnStatisticsList: [GlueClientTypes.ColumnStatistics]?
    /// Error occurred during retrieving column statistics data.
    public var errors: [GlueClientTypes.ColumnError]?

    public init (
        columnStatisticsList: [GlueClientTypes.ColumnStatistics]? = nil,
        errors: [GlueClientTypes.ColumnError]? = nil
    )
    {
        self.columnStatisticsList = columnStatisticsList
        self.errors = errors
    }
}

struct GetColumnStatisticsForPartitionOutputResponseBody: Swift.Equatable {
    let columnStatisticsList: [GlueClientTypes.ColumnStatistics]?
    let errors: [GlueClientTypes.ColumnError]?
}

extension GetColumnStatisticsForPartitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnStatisticsList = "ColumnStatisticsList"
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnStatisticsListContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnStatistics?].self, forKey: .columnStatisticsList)
        var columnStatisticsListDecoded0:[GlueClientTypes.ColumnStatistics]? = nil
        if let columnStatisticsListContainer = columnStatisticsListContainer {
            columnStatisticsListDecoded0 = [GlueClientTypes.ColumnStatistics]()
            for structure0 in columnStatisticsListContainer {
                if let structure0 = structure0 {
                    columnStatisticsListDecoded0?.append(structure0)
                }
            }
        }
        columnStatisticsList = columnStatisticsListDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnError?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.ColumnError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.ColumnError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension GetColumnStatisticsForTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnNames = "ColumnNames"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let columnNames = columnNames {
            var columnNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnNames)
            for getcolumnnameslist0 in columnNames {
                try columnNamesContainer.encode(getcolumnnameslist0)
            }
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension GetColumnStatisticsForTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetColumnStatisticsForTableInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// A list of the column names.
    /// This member is required.
    public var columnNames: [Swift.String]?
    /// The name of the catalog database where the partitions reside.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partitions' table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        columnNames: [Swift.String]? = nil,
        databaseName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.columnNames = columnNames
        self.databaseName = databaseName
        self.tableName = tableName
    }
}

struct GetColumnStatisticsForTableInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let columnNames: [Swift.String]?
}

extension GetColumnStatisticsForTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnNames = "ColumnNames"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let columnNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .columnNames)
        var columnNamesDecoded0:[Swift.String]? = nil
        if let columnNamesContainer = columnNamesContainer {
            columnNamesDecoded0 = [Swift.String]()
            for string0 in columnNamesContainer {
                if let string0 = string0 {
                    columnNamesDecoded0?.append(string0)
                }
            }
        }
        columnNames = columnNamesDecoded0
    }
}

extension GetColumnStatisticsForTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetColumnStatisticsForTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetColumnStatisticsForTableOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetColumnStatisticsForTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetColumnStatisticsForTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.columnStatisticsList = output.columnStatisticsList
            self.errors = output.errors
        } else {
            self.columnStatisticsList = nil
            self.errors = nil
        }
    }
}

public struct GetColumnStatisticsForTableOutputResponse: Swift.Equatable {
    /// List of ColumnStatistics that failed to be retrieved.
    public var columnStatisticsList: [GlueClientTypes.ColumnStatistics]?
    /// List of ColumnStatistics that failed to be retrieved.
    public var errors: [GlueClientTypes.ColumnError]?

    public init (
        columnStatisticsList: [GlueClientTypes.ColumnStatistics]? = nil,
        errors: [GlueClientTypes.ColumnError]? = nil
    )
    {
        self.columnStatisticsList = columnStatisticsList
        self.errors = errors
    }
}

struct GetColumnStatisticsForTableOutputResponseBody: Swift.Equatable {
    let columnStatisticsList: [GlueClientTypes.ColumnStatistics]?
    let errors: [GlueClientTypes.ColumnError]?
}

extension GetColumnStatisticsForTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnStatisticsList = "ColumnStatisticsList"
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnStatisticsListContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnStatistics?].self, forKey: .columnStatisticsList)
        var columnStatisticsListDecoded0:[GlueClientTypes.ColumnStatistics]? = nil
        if let columnStatisticsListContainer = columnStatisticsListContainer {
            columnStatisticsListDecoded0 = [GlueClientTypes.ColumnStatistics]()
            for structure0 in columnStatisticsListContainer {
                if let structure0 = structure0 {
                    columnStatisticsListDecoded0?.append(structure0)
                }
            }
        }
        columnStatisticsList = columnStatisticsListDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnError?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.ColumnError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.ColumnError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension GetConnectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case hidePassword = "HidePassword"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if hidePassword != false {
            try encodeContainer.encode(hidePassword, forKey: .hidePassword)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetConnectionInput: Swift.Equatable {
    /// The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// Allows you to retrieve the connection metadata without returning the password. For instance, the AWS Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.
    public var hidePassword: Swift.Bool
    /// The name of the connection definition to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        hidePassword: Swift.Bool = false,
        name: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.hidePassword = hidePassword
        self.name = name
    }
}

struct GetConnectionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let name: Swift.String?
    let hidePassword: Swift.Bool
}

extension GetConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case hidePassword = "HidePassword"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let hidePasswordDecoded = try containerValues.decode(Swift.Bool.self, forKey: .hidePassword)
        hidePassword = hidePasswordDecoded
    }
}

extension GetConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetConnectionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connection = output.connection
        } else {
            self.connection = nil
        }
    }
}

public struct GetConnectionOutputResponse: Swift.Equatable {
    /// The requested connection definition.
    public var connection: GlueClientTypes.Connection?

    public init (
        connection: GlueClientTypes.Connection? = nil
    )
    {
        self.connection = connection
    }
}

struct GetConnectionOutputResponseBody: Swift.Equatable {
    let connection: GlueClientTypes.Connection?
}

extension GetConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connection = "Connection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Connection.self, forKey: .connection)
        connection = connectionDecoded
    }
}

extension GlueClientTypes.GetConnectionsFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionType = "ConnectionType"
        case matchCriteria = "MatchCriteria"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionType = connectionType {
            try encodeContainer.encode(connectionType.rawValue, forKey: .connectionType)
        }
        if let matchCriteria = matchCriteria {
            var matchCriteriaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchCriteria)
            for matchcriteria0 in matchCriteria {
                try matchCriteriaContainer.encode(matchcriteria0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchCriteriaContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .matchCriteria)
        var matchCriteriaDecoded0:[Swift.String]? = nil
        if let matchCriteriaContainer = matchCriteriaContainer {
            matchCriteriaDecoded0 = [Swift.String]()
            for string0 in matchCriteriaContainer {
                if let string0 = string0 {
                    matchCriteriaDecoded0?.append(string0)
                }
            }
        }
        matchCriteria = matchCriteriaDecoded0
        let connectionTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionType.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
    }
}

extension GlueClientTypes {
    /// Filters the connection definitions that are returned by the GetConnections API operation.
    public struct GetConnectionsFilter: Swift.Equatable {
        /// The type of connections to return. Currently, SFTP is not supported.
        public var connectionType: GlueClientTypes.ConnectionType?
        /// A criteria string that must match the criteria recorded in the connection definition for that connection definition to be returned.
        public var matchCriteria: [Swift.String]?

        public init (
            connectionType: GlueClientTypes.ConnectionType? = nil,
            matchCriteria: [Swift.String]? = nil
        )
        {
            self.connectionType = connectionType
            self.matchCriteria = matchCriteria
        }
    }

}

extension GetConnectionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case filter = "Filter"
        case hidePassword = "HidePassword"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if hidePassword != false {
            try encodeContainer.encode(hidePassword, forKey: .hidePassword)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetConnectionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetConnectionsInput: Swift.Equatable {
    /// The ID of the Data Catalog in which the connections reside. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// A filter that controls which connections are returned.
    public var filter: GlueClientTypes.GetConnectionsFilter?
    /// Allows you to retrieve the connection metadata without returning the password. For instance, the AWS Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.
    public var hidePassword: Swift.Bool
    /// The maximum number of connections to return in one response.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        filter: GlueClientTypes.GetConnectionsFilter? = nil,
        hidePassword: Swift.Bool = false,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.filter = filter
        self.hidePassword = hidePassword
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetConnectionsInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let filter: GlueClientTypes.GetConnectionsFilter?
    let hidePassword: Swift.Bool
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case filter = "Filter"
        case hidePassword = "HidePassword"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let filterDecoded = try containerValues.decodeIfPresent(GlueClientTypes.GetConnectionsFilter.self, forKey: .filter)
        filter = filterDecoded
        let hidePasswordDecoded = try containerValues.decode(Swift.Bool.self, forKey: .hidePassword)
        hidePassword = hidePasswordDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetConnectionsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connectionList = output.connectionList
            self.nextToken = output.nextToken
        } else {
            self.connectionList = nil
            self.nextToken = nil
        }
    }
}

public struct GetConnectionsOutputResponse: Swift.Equatable {
    /// A list of requested connection definitions.
    public var connectionList: [GlueClientTypes.Connection]?
    /// A continuation token, if the list of connections returned does not include the last of the filtered connections.
    public var nextToken: Swift.String?

    public init (
        connectionList: [GlueClientTypes.Connection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connectionList = connectionList
        self.nextToken = nextToken
    }
}

struct GetConnectionsOutputResponseBody: Swift.Equatable {
    let connectionList: [GlueClientTypes.Connection]?
    let nextToken: Swift.String?
}

extension GetConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionList = "ConnectionList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionListContainer = try containerValues.decodeIfPresent([GlueClientTypes.Connection?].self, forKey: .connectionList)
        var connectionListDecoded0:[GlueClientTypes.Connection]? = nil
        if let connectionListContainer = connectionListContainer {
            connectionListDecoded0 = [GlueClientTypes.Connection]()
            for structure0 in connectionListContainer {
                if let structure0 = structure0 {
                    connectionListDecoded0?.append(structure0)
                }
            }
        }
        connectionList = connectionListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetCrawlerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetCrawlerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetCrawlerInput: Swift.Equatable {
    /// The name of the crawler to retrieve metadata for.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetCrawlerInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension GetCrawlerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GetCrawlerMetricsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerNameList = "CrawlerNameList"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawlerNameList = crawlerNameList {
            var crawlerNameListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .crawlerNameList)
            for crawlernamelist0 in crawlerNameList {
                try crawlerNameListContainer.encode(crawlernamelist0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetCrawlerMetricsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetCrawlerMetricsInput: Swift.Equatable {
    /// A list of the names of crawlers about which to retrieve metrics.
    public var crawlerNameList: [Swift.String]?
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?

    public init (
        crawlerNameList: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crawlerNameList = crawlerNameList
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetCrawlerMetricsInputBody: Swift.Equatable {
    let crawlerNameList: [Swift.String]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetCrawlerMetricsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerNameList = "CrawlerNameList"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerNameListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .crawlerNameList)
        var crawlerNameListDecoded0:[Swift.String]? = nil
        if let crawlerNameListContainer = crawlerNameListContainer {
            crawlerNameListDecoded0 = [Swift.String]()
            for string0 in crawlerNameListContainer {
                if let string0 = string0 {
                    crawlerNameListDecoded0?.append(string0)
                }
            }
        }
        crawlerNameList = crawlerNameListDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetCrawlerMetricsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCrawlerMetricsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCrawlerMetricsOutputError: Swift.Error, Swift.Equatable {
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCrawlerMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCrawlerMetricsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crawlerMetricsList = output.crawlerMetricsList
            self.nextToken = output.nextToken
        } else {
            self.crawlerMetricsList = nil
            self.nextToken = nil
        }
    }
}

public struct GetCrawlerMetricsOutputResponse: Swift.Equatable {
    /// A list of metrics for the specified crawler.
    public var crawlerMetricsList: [GlueClientTypes.CrawlerMetrics]?
    /// A continuation token, if the returned list does not contain the last metric available.
    public var nextToken: Swift.String?

    public init (
        crawlerMetricsList: [GlueClientTypes.CrawlerMetrics]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crawlerMetricsList = crawlerMetricsList
        self.nextToken = nextToken
    }
}

struct GetCrawlerMetricsOutputResponseBody: Swift.Equatable {
    let crawlerMetricsList: [GlueClientTypes.CrawlerMetrics]?
    let nextToken: Swift.String?
}

extension GetCrawlerMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerMetricsList = "CrawlerMetricsList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerMetricsListContainer = try containerValues.decodeIfPresent([GlueClientTypes.CrawlerMetrics?].self, forKey: .crawlerMetricsList)
        var crawlerMetricsListDecoded0:[GlueClientTypes.CrawlerMetrics]? = nil
        if let crawlerMetricsListContainer = crawlerMetricsListContainer {
            crawlerMetricsListDecoded0 = [GlueClientTypes.CrawlerMetrics]()
            for structure0 in crawlerMetricsListContainer {
                if let structure0 = structure0 {
                    crawlerMetricsListDecoded0?.append(structure0)
                }
            }
        }
        crawlerMetricsList = crawlerMetricsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetCrawlerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCrawlerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCrawlerOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCrawlerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCrawlerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crawler = output.crawler
        } else {
            self.crawler = nil
        }
    }
}

public struct GetCrawlerOutputResponse: Swift.Equatable {
    /// The metadata for the specified crawler.
    public var crawler: GlueClientTypes.Crawler?

    public init (
        crawler: GlueClientTypes.Crawler? = nil
    )
    {
        self.crawler = crawler
    }
}

struct GetCrawlerOutputResponseBody: Swift.Equatable {
    let crawler: GlueClientTypes.Crawler?
}

extension GetCrawlerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawler = "Crawler"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Crawler.self, forKey: .crawler)
        crawler = crawlerDecoded
    }
}

extension GetCrawlersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetCrawlersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetCrawlersInput: Swift.Equatable {
    /// The number of crawlers to return on each call.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetCrawlersInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetCrawlersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetCrawlersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCrawlersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCrawlersOutputError: Swift.Error, Swift.Equatable {
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCrawlersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCrawlersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crawlers = output.crawlers
            self.nextToken = output.nextToken
        } else {
            self.crawlers = nil
            self.nextToken = nil
        }
    }
}

public struct GetCrawlersOutputResponse: Swift.Equatable {
    /// A list of crawler metadata.
    public var crawlers: [GlueClientTypes.Crawler]?
    /// A continuation token, if the returned list has not reached the end of those defined in this customer account.
    public var nextToken: Swift.String?

    public init (
        crawlers: [GlueClientTypes.Crawler]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crawlers = crawlers
        self.nextToken = nextToken
    }
}

struct GetCrawlersOutputResponseBody: Swift.Equatable {
    let crawlers: [GlueClientTypes.Crawler]?
    let nextToken: Swift.String?
}

extension GetCrawlersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlers = "Crawlers"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlersContainer = try containerValues.decodeIfPresent([GlueClientTypes.Crawler?].self, forKey: .crawlers)
        var crawlersDecoded0:[GlueClientTypes.Crawler]? = nil
        if let crawlersContainer = crawlersContainer {
            crawlersDecoded0 = [GlueClientTypes.Crawler]()
            for structure0 in crawlersContainer {
                if let structure0 = structure0 {
                    crawlersDecoded0?.append(structure0)
                }
            }
        }
        crawlers = crawlersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetDataCatalogEncryptionSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
    }
}

extension GetDataCatalogEncryptionSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDataCatalogEncryptionSettingsInput: Swift.Equatable {
    /// The ID of the Data Catalog to retrieve the security configuration for. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?

    public init (
        catalogId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
    }
}

struct GetDataCatalogEncryptionSettingsInputBody: Swift.Equatable {
    let catalogId: Swift.String?
}

extension GetDataCatalogEncryptionSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
    }
}

extension GetDataCatalogEncryptionSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDataCatalogEncryptionSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDataCatalogEncryptionSettingsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDataCatalogEncryptionSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDataCatalogEncryptionSettingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataCatalogEncryptionSettings = output.dataCatalogEncryptionSettings
        } else {
            self.dataCatalogEncryptionSettings = nil
        }
    }
}

public struct GetDataCatalogEncryptionSettingsOutputResponse: Swift.Equatable {
    /// The requested security configuration.
    public var dataCatalogEncryptionSettings: GlueClientTypes.DataCatalogEncryptionSettings?

    public init (
        dataCatalogEncryptionSettings: GlueClientTypes.DataCatalogEncryptionSettings? = nil
    )
    {
        self.dataCatalogEncryptionSettings = dataCatalogEncryptionSettings
    }
}

struct GetDataCatalogEncryptionSettingsOutputResponseBody: Swift.Equatable {
    let dataCatalogEncryptionSettings: GlueClientTypes.DataCatalogEncryptionSettings?
}

extension GetDataCatalogEncryptionSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataCatalogEncryptionSettings = "DataCatalogEncryptionSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataCatalogEncryptionSettingsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataCatalogEncryptionSettings.self, forKey: .dataCatalogEncryptionSettings)
        dataCatalogEncryptionSettings = dataCatalogEncryptionSettingsDecoded
    }
}

extension GetDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDatabaseInput: Swift.Equatable {
    /// The ID of the Data Catalog in which the database resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the database to retrieve. For Hive compatibility, this should be all lowercase.
    /// This member is required.
    public var name: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.name = name
    }
}

struct GetDatabaseInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let name: Swift.String?
}

extension GetDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GetDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDatabaseOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.database = output.database
        } else {
            self.database = nil
        }
    }
}

public struct GetDatabaseOutputResponse: Swift.Equatable {
    /// The definition of the specified database in the Data Catalog.
    public var database: GlueClientTypes.Database?

    public init (
        database: GlueClientTypes.Database? = nil
    )
    {
        self.database = database
    }
}

struct GetDatabaseOutputResponseBody: Swift.Equatable {
    let database: GlueClientTypes.Database?
}

extension GetDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case database = "Database"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Database.self, forKey: .database)
        database = databaseDecoded
    }
}

extension GetDatabasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceShareType = "ResourceShareType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceShareType = resourceShareType {
            try encodeContainer.encode(resourceShareType.rawValue, forKey: .resourceShareType)
        }
    }
}

extension GetDatabasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDatabasesInput: Swift.Equatable {
    /// The ID of the Data Catalog from which to retrieve Databases. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The maximum number of databases to return in one response.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?
    /// Allows you to specify that you want to list the databases shared with your account. The allowable values are FOREIGN or ALL.
    ///
    /// * If set to FOREIGN, will list the databases shared with your account.
    ///
    /// * If set to ALL, will list the databases shared with your account, as well as the databases in yor local account.
    public var resourceShareType: GlueClientTypes.ResourceShareType?

    public init (
        catalogId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceShareType: GlueClientTypes.ResourceShareType? = nil
    )
    {
        self.catalogId = catalogId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceShareType = resourceShareType
    }
}

struct GetDatabasesInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let resourceShareType: GlueClientTypes.ResourceShareType?
}

extension GetDatabasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceShareType = "ResourceShareType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let resourceShareTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ResourceShareType.self, forKey: .resourceShareType)
        resourceShareType = resourceShareTypeDecoded
    }
}

extension GetDatabasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDatabasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDatabasesOutputError: Swift.Error, Swift.Equatable {
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDatabasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDatabasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.databaseList = output.databaseList
            self.nextToken = output.nextToken
        } else {
            self.databaseList = nil
            self.nextToken = nil
        }
    }
}

public struct GetDatabasesOutputResponse: Swift.Equatable {
    /// A list of Database objects from the specified catalog.
    /// This member is required.
    public var databaseList: [GlueClientTypes.Database]?
    /// A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.
    public var nextToken: Swift.String?

    public init (
        databaseList: [GlueClientTypes.Database]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.databaseList = databaseList
        self.nextToken = nextToken
    }
}

struct GetDatabasesOutputResponseBody: Swift.Equatable {
    let databaseList: [GlueClientTypes.Database]?
    let nextToken: Swift.String?
}

extension GetDatabasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseList = "DatabaseList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseListContainer = try containerValues.decodeIfPresent([GlueClientTypes.Database?].self, forKey: .databaseList)
        var databaseListDecoded0:[GlueClientTypes.Database]? = nil
        if let databaseListContainer = databaseListContainer {
            databaseListDecoded0 = [GlueClientTypes.Database]()
            for structure0 in databaseListContainer {
                if let structure0 = structure0 {
                    databaseListDecoded0?.append(structure0)
                }
            }
        }
        databaseList = databaseListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetDataflowGraphInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pythonScript = "PythonScript"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pythonScript = pythonScript {
            try encodeContainer.encode(pythonScript, forKey: .pythonScript)
        }
    }
}

extension GetDataflowGraphInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDataflowGraphInput: Swift.Equatable {
    /// The Python script to transform.
    public var pythonScript: Swift.String?

    public init (
        pythonScript: Swift.String? = nil
    )
    {
        self.pythonScript = pythonScript
    }
}

struct GetDataflowGraphInputBody: Swift.Equatable {
    let pythonScript: Swift.String?
}

extension GetDataflowGraphInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pythonScript = "PythonScript"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pythonScriptDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pythonScript)
        pythonScript = pythonScriptDecoded
    }
}

extension GetDataflowGraphOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDataflowGraphOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDataflowGraphOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDataflowGraphOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDataflowGraphOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dagEdges = output.dagEdges
            self.dagNodes = output.dagNodes
        } else {
            self.dagEdges = nil
            self.dagNodes = nil
        }
    }
}

public struct GetDataflowGraphOutputResponse: Swift.Equatable {
    /// A list of the edges in the resulting DAG.
    public var dagEdges: [GlueClientTypes.CodeGenEdge]?
    /// A list of the nodes in the resulting DAG.
    public var dagNodes: [GlueClientTypes.CodeGenNode]?

    public init (
        dagEdges: [GlueClientTypes.CodeGenEdge]? = nil,
        dagNodes: [GlueClientTypes.CodeGenNode]? = nil
    )
    {
        self.dagEdges = dagEdges
        self.dagNodes = dagNodes
    }
}

struct GetDataflowGraphOutputResponseBody: Swift.Equatable {
    let dagNodes: [GlueClientTypes.CodeGenNode]?
    let dagEdges: [GlueClientTypes.CodeGenEdge]?
}

extension GetDataflowGraphOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dagEdges = "DagEdges"
        case dagNodes = "DagNodes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dagNodesContainer = try containerValues.decodeIfPresent([GlueClientTypes.CodeGenNode?].self, forKey: .dagNodes)
        var dagNodesDecoded0:[GlueClientTypes.CodeGenNode]? = nil
        if let dagNodesContainer = dagNodesContainer {
            dagNodesDecoded0 = [GlueClientTypes.CodeGenNode]()
            for structure0 in dagNodesContainer {
                if let structure0 = structure0 {
                    dagNodesDecoded0?.append(structure0)
                }
            }
        }
        dagNodes = dagNodesDecoded0
        let dagEdgesContainer = try containerValues.decodeIfPresent([GlueClientTypes.CodeGenEdge?].self, forKey: .dagEdges)
        var dagEdgesDecoded0:[GlueClientTypes.CodeGenEdge]? = nil
        if let dagEdgesContainer = dagEdgesContainer {
            dagEdgesDecoded0 = [GlueClientTypes.CodeGenEdge]()
            for structure0 in dagEdgesContainer {
                if let structure0 = structure0 {
                    dagEdgesDecoded0?.append(structure0)
                }
            }
        }
        dagEdges = dagEdgesDecoded0
    }
}

extension GetDevEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
    }
}

extension GetDevEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDevEndpointInput: Swift.Equatable {
    /// Name of the DevEndpoint to retrieve information for.
    /// This member is required.
    public var endpointName: Swift.String?

    public init (
        endpointName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
    }
}

struct GetDevEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
}

extension GetDevEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
    }
}

extension GetDevEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDevEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDevEndpointOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDevEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDevEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.devEndpoint = output.devEndpoint
        } else {
            self.devEndpoint = nil
        }
    }
}

public struct GetDevEndpointOutputResponse: Swift.Equatable {
    /// A DevEndpoint definition.
    public var devEndpoint: GlueClientTypes.DevEndpoint?

    public init (
        devEndpoint: GlueClientTypes.DevEndpoint? = nil
    )
    {
        self.devEndpoint = devEndpoint
    }
}

struct GetDevEndpointOutputResponseBody: Swift.Equatable {
    let devEndpoint: GlueClientTypes.DevEndpoint?
}

extension GetDevEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devEndpoint = "DevEndpoint"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let devEndpointDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DevEndpoint.self, forKey: .devEndpoint)
        devEndpoint = devEndpointDecoded
    }
}

extension GetDevEndpointsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetDevEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDevEndpointsInput: Swift.Equatable {
    /// The maximum size of information to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetDevEndpointsInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetDevEndpointsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetDevEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDevEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDevEndpointsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDevEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDevEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.devEndpoints = output.devEndpoints
            self.nextToken = output.nextToken
        } else {
            self.devEndpoints = nil
            self.nextToken = nil
        }
    }
}

public struct GetDevEndpointsOutputResponse: Swift.Equatable {
    /// A list of DevEndpoint definitions.
    public var devEndpoints: [GlueClientTypes.DevEndpoint]?
    /// A continuation token, if not all DevEndpoint definitions have yet been returned.
    public var nextToken: Swift.String?

    public init (
        devEndpoints: [GlueClientTypes.DevEndpoint]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.devEndpoints = devEndpoints
        self.nextToken = nextToken
    }
}

struct GetDevEndpointsOutputResponseBody: Swift.Equatable {
    let devEndpoints: [GlueClientTypes.DevEndpoint]?
    let nextToken: Swift.String?
}

extension GetDevEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devEndpoints = "DevEndpoints"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let devEndpointsContainer = try containerValues.decodeIfPresent([GlueClientTypes.DevEndpoint?].self, forKey: .devEndpoints)
        var devEndpointsDecoded0:[GlueClientTypes.DevEndpoint]? = nil
        if let devEndpointsContainer = devEndpointsContainer {
            devEndpointsDecoded0 = [GlueClientTypes.DevEndpoint]()
            for structure0 in devEndpointsContainer {
                if let structure0 = structure0 {
                    devEndpointsDecoded0?.append(structure0)
                }
            }
        }
        devEndpoints = devEndpointsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetJobBookmarkInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }
}

extension GetJobBookmarkInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetJobBookmarkInput: Swift.Equatable {
    /// The name of the job in question.
    /// This member is required.
    public var jobName: Swift.String?
    /// The unique run identifier associated with this job run.
    public var runId: Swift.String?

    public init (
        jobName: Swift.String? = nil,
        runId: Swift.String? = nil
    )
    {
        self.jobName = jobName
        self.runId = runId
    }
}

struct GetJobBookmarkInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let runId: Swift.String?
}

extension GetJobBookmarkInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension GetJobBookmarkOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJobBookmarkOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetJobBookmarkOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJobBookmarkOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetJobBookmarkOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobBookmarkEntry = output.jobBookmarkEntry
        } else {
            self.jobBookmarkEntry = nil
        }
    }
}

public struct GetJobBookmarkOutputResponse: Swift.Equatable {
    /// A structure that defines a point that a job can resume processing.
    public var jobBookmarkEntry: GlueClientTypes.JobBookmarkEntry?

    public init (
        jobBookmarkEntry: GlueClientTypes.JobBookmarkEntry? = nil
    )
    {
        self.jobBookmarkEntry = jobBookmarkEntry
    }
}

struct GetJobBookmarkOutputResponseBody: Swift.Equatable {
    let jobBookmarkEntry: GlueClientTypes.JobBookmarkEntry?
}

extension GetJobBookmarkOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobBookmarkEntry = "JobBookmarkEntry"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobBookmarkEntryDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobBookmarkEntry.self, forKey: .jobBookmarkEntry)
        jobBookmarkEntry = jobBookmarkEntryDecoded
    }
}

extension GetJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
    }
}

extension GetJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetJobInput: Swift.Equatable {
    /// The name of the job definition to retrieve.
    /// This member is required.
    public var jobName: Swift.String?

    public init (
        jobName: Swift.String? = nil
    )
    {
        self.jobName = jobName
    }
}

struct GetJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
}

extension GetJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
    }
}

extension GetJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetJobOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.job = output.job
        } else {
            self.job = nil
        }
    }
}

public struct GetJobOutputResponse: Swift.Equatable {
    /// The requested job definition.
    public var job: GlueClientTypes.Job?

    public init (
        job: GlueClientTypes.Job? = nil
    )
    {
        self.job = job
    }
}

struct GetJobOutputResponseBody: Swift.Equatable {
    let job: GlueClientTypes.Job?
}

extension GetJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case job = "Job"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Job.self, forKey: .job)
        job = jobDecoded
    }
}

extension GetJobRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case predecessorsIncluded = "PredecessorsIncluded"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if predecessorsIncluded != false {
            try encodeContainer.encode(predecessorsIncluded, forKey: .predecessorsIncluded)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }
}

extension GetJobRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetJobRunInput: Swift.Equatable {
    /// Name of the job definition being run.
    /// This member is required.
    public var jobName: Swift.String?
    /// True if a list of predecessor runs should be returned.
    public var predecessorsIncluded: Swift.Bool
    /// The ID of the job run.
    /// This member is required.
    public var runId: Swift.String?

    public init (
        jobName: Swift.String? = nil,
        predecessorsIncluded: Swift.Bool = false,
        runId: Swift.String? = nil
    )
    {
        self.jobName = jobName
        self.predecessorsIncluded = predecessorsIncluded
        self.runId = runId
    }
}

struct GetJobRunInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let runId: Swift.String?
    let predecessorsIncluded: Swift.Bool
}

extension GetJobRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case predecessorsIncluded = "PredecessorsIncluded"
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let predecessorsIncludedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .predecessorsIncluded)
        predecessorsIncluded = predecessorsIncludedDecoded
    }
}

extension GetJobRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJobRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetJobRunOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJobRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetJobRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobRun = output.jobRun
        } else {
            self.jobRun = nil
        }
    }
}

public struct GetJobRunOutputResponse: Swift.Equatable {
    /// The requested job-run metadata.
    public var jobRun: GlueClientTypes.JobRun?

    public init (
        jobRun: GlueClientTypes.JobRun? = nil
    )
    {
        self.jobRun = jobRun
    }
}

struct GetJobRunOutputResponseBody: Swift.Equatable {
    let jobRun: GlueClientTypes.JobRun?
}

extension GetJobRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobRun = "JobRun"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobRunDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobRun.self, forKey: .jobRun)
        jobRun = jobRunDecoded
    }
}

extension GetJobRunsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetJobRunsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetJobRunsInput: Swift.Equatable {
    /// The name of the job definition for which to retrieve all job runs.
    /// This member is required.
    public var jobName: Swift.String?
    /// The maximum size of the response.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?

    public init (
        jobName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobName = jobName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetJobRunsInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetJobRunsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetJobRunsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJobRunsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetJobRunsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJobRunsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetJobRunsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobRuns = output.jobRuns
            self.nextToken = output.nextToken
        } else {
            self.jobRuns = nil
            self.nextToken = nil
        }
    }
}

public struct GetJobRunsOutputResponse: Swift.Equatable {
    /// A list of job-run metadata objects.
    public var jobRuns: [GlueClientTypes.JobRun]?
    /// A continuation token, if not all requested job runs have been returned.
    public var nextToken: Swift.String?

    public init (
        jobRuns: [GlueClientTypes.JobRun]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobRuns = jobRuns
        self.nextToken = nextToken
    }
}

struct GetJobRunsOutputResponseBody: Swift.Equatable {
    let jobRuns: [GlueClientTypes.JobRun]?
    let nextToken: Swift.String?
}

extension GetJobRunsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobRuns = "JobRuns"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobRunsContainer = try containerValues.decodeIfPresent([GlueClientTypes.JobRun?].self, forKey: .jobRuns)
        var jobRunsDecoded0:[GlueClientTypes.JobRun]? = nil
        if let jobRunsContainer = jobRunsContainer {
            jobRunsDecoded0 = [GlueClientTypes.JobRun]()
            for structure0 in jobRunsContainer {
                if let structure0 = structure0 {
                    jobRunsDecoded0?.append(structure0)
                }
            }
        }
        jobRuns = jobRunsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetJobsInput: Swift.Equatable {
    /// The maximum size of the response.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetJobsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetJobsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobs = output.jobs
            self.nextToken = output.nextToken
        } else {
            self.jobs = nil
            self.nextToken = nil
        }
    }
}

public struct GetJobsOutputResponse: Swift.Equatable {
    /// A list of job definitions.
    public var jobs: [GlueClientTypes.Job]?
    /// A continuation token, if not all job definitions have yet been returned.
    public var nextToken: Swift.String?

    public init (
        jobs: [GlueClientTypes.Job]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobs = jobs
        self.nextToken = nextToken
    }
}

struct GetJobsOutputResponseBody: Swift.Equatable {
    let jobs: [GlueClientTypes.Job]?
    let nextToken: Swift.String?
}

extension GetJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs = "Jobs"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Job?].self, forKey: .jobs)
        var jobsDecoded0:[GlueClientTypes.Job]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [GlueClientTypes.Job]()
            for structure0 in jobsContainer {
                if let structure0 = structure0 {
                    jobsDecoded0?.append(structure0)
                }
            }
        }
        jobs = jobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetMLTaskRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskRunId = "TaskRunId"
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskRunId = taskRunId {
            try encodeContainer.encode(taskRunId, forKey: .taskRunId)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }
}

extension GetMLTaskRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMLTaskRunInput: Swift.Equatable {
    /// The unique identifier of the task run.
    /// This member is required.
    public var taskRunId: Swift.String?
    /// The unique identifier of the machine learning transform.
    /// This member is required.
    public var transformId: Swift.String?

    public init (
        taskRunId: Swift.String? = nil,
        transformId: Swift.String? = nil
    )
    {
        self.taskRunId = taskRunId
        self.transformId = transformId
    }
}

struct GetMLTaskRunInputBody: Swift.Equatable {
    let transformId: Swift.String?
    let taskRunId: Swift.String?
}

extension GetMLTaskRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskRunId = "TaskRunId"
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let taskRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
    }
}

extension GetMLTaskRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMLTaskRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMLTaskRunOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMLTaskRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMLTaskRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.completedOn = output.completedOn
            self.errorString = output.errorString
            self.executionTime = output.executionTime
            self.lastModifiedOn = output.lastModifiedOn
            self.logGroupName = output.logGroupName
            self.properties = output.properties
            self.startedOn = output.startedOn
            self.status = output.status
            self.taskRunId = output.taskRunId
            self.transformId = output.transformId
        } else {
            self.completedOn = nil
            self.errorString = nil
            self.executionTime = 0
            self.lastModifiedOn = nil
            self.logGroupName = nil
            self.properties = nil
            self.startedOn = nil
            self.status = nil
            self.taskRunId = nil
            self.transformId = nil
        }
    }
}

public struct GetMLTaskRunOutputResponse: Swift.Equatable {
    /// The date and time when this task run was completed.
    public var completedOn: ClientRuntime.Date?
    /// The error strings that are associated with the task run.
    public var errorString: Swift.String?
    /// The amount of time (in seconds) that the task run consumed resources.
    public var executionTime: Swift.Int
    /// The date and time when this task run was last modified.
    public var lastModifiedOn: ClientRuntime.Date?
    /// The names of the log groups that are associated with the task run.
    public var logGroupName: Swift.String?
    /// The list of properties that are associated with the task run.
    public var properties: GlueClientTypes.TaskRunProperties?
    /// The date and time when this task run started.
    public var startedOn: ClientRuntime.Date?
    /// The status for this task run.
    public var status: GlueClientTypes.TaskStatusType?
    /// The unique run identifier associated with this run.
    public var taskRunId: Swift.String?
    /// The unique identifier of the task run.
    public var transformId: Swift.String?

    public init (
        completedOn: ClientRuntime.Date? = nil,
        errorString: Swift.String? = nil,
        executionTime: Swift.Int = 0,
        lastModifiedOn: ClientRuntime.Date? = nil,
        logGroupName: Swift.String? = nil,
        properties: GlueClientTypes.TaskRunProperties? = nil,
        startedOn: ClientRuntime.Date? = nil,
        status: GlueClientTypes.TaskStatusType? = nil,
        taskRunId: Swift.String? = nil,
        transformId: Swift.String? = nil
    )
    {
        self.completedOn = completedOn
        self.errorString = errorString
        self.executionTime = executionTime
        self.lastModifiedOn = lastModifiedOn
        self.logGroupName = logGroupName
        self.properties = properties
        self.startedOn = startedOn
        self.status = status
        self.taskRunId = taskRunId
        self.transformId = transformId
    }
}

struct GetMLTaskRunOutputResponseBody: Swift.Equatable {
    let transformId: Swift.String?
    let taskRunId: Swift.String?
    let status: GlueClientTypes.TaskStatusType?
    let logGroupName: Swift.String?
    let properties: GlueClientTypes.TaskRunProperties?
    let errorString: Swift.String?
    let startedOn: ClientRuntime.Date?
    let lastModifiedOn: ClientRuntime.Date?
    let completedOn: ClientRuntime.Date?
    let executionTime: Swift.Int
}

extension GetMLTaskRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completedOn = "CompletedOn"
        case errorString = "ErrorString"
        case executionTime = "ExecutionTime"
        case lastModifiedOn = "LastModifiedOn"
        case logGroupName = "LogGroupName"
        case properties = "Properties"
        case startedOn = "StartedOn"
        case status = "Status"
        case taskRunId = "TaskRunId"
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let taskRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskStatusType.self, forKey: .status)
        status = statusDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let propertiesDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskRunProperties.self, forKey: .properties)
        properties = propertiesDecoded
        let errorStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorString)
        errorString = errorStringDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let executionTimeDecoded = try containerValues.decode(Swift.Int.self, forKey: .executionTime)
        executionTime = executionTimeDecoded
    }
}

extension GetMLTaskRunsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sort = "Sort"
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sort = sort {
            try encodeContainer.encode(sort, forKey: .sort)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }
}

extension GetMLTaskRunsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMLTaskRunsInput: Swift.Equatable {
    /// The filter criteria, in the TaskRunFilterCriteria structure, for the task run.
    public var filter: GlueClientTypes.TaskRunFilterCriteria?
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// A token for pagination of the results. The default is empty.
    public var nextToken: Swift.String?
    /// The sorting criteria, in the TaskRunSortCriteria structure, for the task run.
    public var sort: GlueClientTypes.TaskRunSortCriteria?
    /// The unique identifier of the machine learning transform.
    /// This member is required.
    public var transformId: Swift.String?

    public init (
        filter: GlueClientTypes.TaskRunFilterCriteria? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sort: GlueClientTypes.TaskRunSortCriteria? = nil,
        transformId: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sort = sort
        self.transformId = transformId
    }
}

struct GetMLTaskRunsInputBody: Swift.Equatable {
    let transformId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filter: GlueClientTypes.TaskRunFilterCriteria?
    let sort: GlueClientTypes.TaskRunSortCriteria?
}

extension GetMLTaskRunsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sort = "Sort"
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filterDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskRunFilterCriteria.self, forKey: .filter)
        filter = filterDecoded
        let sortDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskRunSortCriteria.self, forKey: .sort)
        sort = sortDecoded
    }
}

extension GetMLTaskRunsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMLTaskRunsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMLTaskRunsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMLTaskRunsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMLTaskRunsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.taskRuns = output.taskRuns
        } else {
            self.nextToken = nil
            self.taskRuns = nil
        }
    }
}

public struct GetMLTaskRunsOutputResponse: Swift.Equatable {
    /// A pagination token, if more results are available.
    public var nextToken: Swift.String?
    /// A list of task runs that are associated with the transform.
    public var taskRuns: [GlueClientTypes.TaskRun]?

    public init (
        nextToken: Swift.String? = nil,
        taskRuns: [GlueClientTypes.TaskRun]? = nil
    )
    {
        self.nextToken = nextToken
        self.taskRuns = taskRuns
    }
}

struct GetMLTaskRunsOutputResponseBody: Swift.Equatable {
    let taskRuns: [GlueClientTypes.TaskRun]?
    let nextToken: Swift.String?
}

extension GetMLTaskRunsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case taskRuns = "TaskRuns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskRunsContainer = try containerValues.decodeIfPresent([GlueClientTypes.TaskRun?].self, forKey: .taskRuns)
        var taskRunsDecoded0:[GlueClientTypes.TaskRun]? = nil
        if let taskRunsContainer = taskRunsContainer {
            taskRunsDecoded0 = [GlueClientTypes.TaskRun]()
            for structure0 in taskRunsContainer {
                if let structure0 = structure0 {
                    taskRunsDecoded0?.append(structure0)
                }
            }
        }
        taskRuns = taskRunsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetMLTransformInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }
}

extension GetMLTransformInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMLTransformInput: Swift.Equatable {
    /// The unique identifier of the transform, generated at the time that the transform was created.
    /// This member is required.
    public var transformId: Swift.String?

    public init (
        transformId: Swift.String? = nil
    )
    {
        self.transformId = transformId
    }
}

struct GetMLTransformInputBody: Swift.Equatable {
    let transformId: Swift.String?
}

extension GetMLTransformInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
    }
}

extension GetMLTransformOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMLTransformOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMLTransformOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMLTransformOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMLTransformOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdOn = output.createdOn
            self.description = output.description
            self.evaluationMetrics = output.evaluationMetrics
            self.glueVersion = output.glueVersion
            self.inputRecordTables = output.inputRecordTables
            self.labelCount = output.labelCount
            self.lastModifiedOn = output.lastModifiedOn
            self.maxCapacity = output.maxCapacity
            self.maxRetries = output.maxRetries
            self.name = output.name
            self.numberOfWorkers = output.numberOfWorkers
            self.parameters = output.parameters
            self.role = output.role
            self.schema = output.schema
            self.status = output.status
            self.timeout = output.timeout
            self.transformEncryption = output.transformEncryption
            self.transformId = output.transformId
            self.workerType = output.workerType
        } else {
            self.createdOn = nil
            self.description = nil
            self.evaluationMetrics = nil
            self.glueVersion = nil
            self.inputRecordTables = nil
            self.labelCount = 0
            self.lastModifiedOn = nil
            self.maxCapacity = nil
            self.maxRetries = nil
            self.name = nil
            self.numberOfWorkers = nil
            self.parameters = nil
            self.role = nil
            self.schema = nil
            self.status = nil
            self.timeout = nil
            self.transformEncryption = nil
            self.transformId = nil
            self.workerType = nil
        }
    }
}

public struct GetMLTransformOutputResponse: Swift.Equatable {
    /// The date and time when the transform was created.
    public var createdOn: ClientRuntime.Date?
    /// A description of the transform.
    public var description: Swift.String?
    /// The latest evaluation metrics.
    public var evaluationMetrics: GlueClientTypes.EvaluationMetrics?
    /// This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see [Glue Versions](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions) in the developer guide.
    public var glueVersion: Swift.String?
    /// A list of Glue table definitions used by the transform.
    public var inputRecordTables: [GlueClientTypes.GlueTable]?
    /// The number of labels available for this transform.
    public var labelCount: Swift.Int
    /// The date and time when the transform was last modified.
    public var lastModifiedOn: ClientRuntime.Date?
    /// The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/). When the WorkerType field is set to a value other than Standard, the MaxCapacity field is set automatically and becomes read-only.
    public var maxCapacity: Swift.Double?
    /// The maximum number of times to retry a task for this transform after a task run fails.
    public var maxRetries: Swift.Int?
    /// The unique name given to the transform when it was created.
    public var name: Swift.String?
    /// The number of workers of a defined workerType that are allocated when this task runs.
    public var numberOfWorkers: Swift.Int?
    /// The configuration parameters that are specific to the algorithm used.
    public var parameters: GlueClientTypes.TransformParameters?
    /// The name or Amazon Resource Name (ARN) of the IAM role with the required permissions.
    public var role: Swift.String?
    /// The Map object that represents the schema that this transform accepts. Has an upper bound of 100 columns.
    public var schema: [GlueClientTypes.SchemaColumn]?
    /// The last known status of the transform (to indicate whether it can be used or not). One of "NOT_READY", "READY", or "DELETING".
    public var status: GlueClientTypes.TransformStatusType?
    /// The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
    public var timeout: Swift.Int?
    /// The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.
    public var transformEncryption: GlueClientTypes.TransformEncryption?
    /// The unique identifier of the transform, generated at the time that the transform was created.
    public var transformId: Swift.String?
    /// The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.
    ///
    /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
    ///
    /// * For the G.1X worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
    ///
    /// * For the G.2X worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
    public var workerType: GlueClientTypes.WorkerType?

    public init (
        createdOn: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        evaluationMetrics: GlueClientTypes.EvaluationMetrics? = nil,
        glueVersion: Swift.String? = nil,
        inputRecordTables: [GlueClientTypes.GlueTable]? = nil,
        labelCount: Swift.Int = 0,
        lastModifiedOn: ClientRuntime.Date? = nil,
        maxCapacity: Swift.Double? = nil,
        maxRetries: Swift.Int? = nil,
        name: Swift.String? = nil,
        numberOfWorkers: Swift.Int? = nil,
        parameters: GlueClientTypes.TransformParameters? = nil,
        role: Swift.String? = nil,
        schema: [GlueClientTypes.SchemaColumn]? = nil,
        status: GlueClientTypes.TransformStatusType? = nil,
        timeout: Swift.Int? = nil,
        transformEncryption: GlueClientTypes.TransformEncryption? = nil,
        transformId: Swift.String? = nil,
        workerType: GlueClientTypes.WorkerType? = nil
    )
    {
        self.createdOn = createdOn
        self.description = description
        self.evaluationMetrics = evaluationMetrics
        self.glueVersion = glueVersion
        self.inputRecordTables = inputRecordTables
        self.labelCount = labelCount
        self.lastModifiedOn = lastModifiedOn
        self.maxCapacity = maxCapacity
        self.maxRetries = maxRetries
        self.name = name
        self.numberOfWorkers = numberOfWorkers
        self.parameters = parameters
        self.role = role
        self.schema = schema
        self.status = status
        self.timeout = timeout
        self.transformEncryption = transformEncryption
        self.transformId = transformId
        self.workerType = workerType
    }
}

struct GetMLTransformOutputResponseBody: Swift.Equatable {
    let transformId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let status: GlueClientTypes.TransformStatusType?
    let createdOn: ClientRuntime.Date?
    let lastModifiedOn: ClientRuntime.Date?
    let inputRecordTables: [GlueClientTypes.GlueTable]?
    let parameters: GlueClientTypes.TransformParameters?
    let evaluationMetrics: GlueClientTypes.EvaluationMetrics?
    let labelCount: Swift.Int
    let schema: [GlueClientTypes.SchemaColumn]?
    let role: Swift.String?
    let glueVersion: Swift.String?
    let maxCapacity: Swift.Double?
    let workerType: GlueClientTypes.WorkerType?
    let numberOfWorkers: Swift.Int?
    let timeout: Swift.Int?
    let maxRetries: Swift.Int?
    let transformEncryption: GlueClientTypes.TransformEncryption?
}

extension GetMLTransformOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdOn = "CreatedOn"
        case description = "Description"
        case evaluationMetrics = "EvaluationMetrics"
        case glueVersion = "GlueVersion"
        case inputRecordTables = "InputRecordTables"
        case labelCount = "LabelCount"
        case lastModifiedOn = "LastModifiedOn"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case schema = "Schema"
        case status = "Status"
        case timeout = "Timeout"
        case transformEncryption = "TransformEncryption"
        case transformId = "TransformId"
        case workerType = "WorkerType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformStatusType.self, forKey: .status)
        status = statusDecoded
        let createdOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let inputRecordTablesContainer = try containerValues.decodeIfPresent([GlueClientTypes.GlueTable?].self, forKey: .inputRecordTables)
        var inputRecordTablesDecoded0:[GlueClientTypes.GlueTable]? = nil
        if let inputRecordTablesContainer = inputRecordTablesContainer {
            inputRecordTablesDecoded0 = [GlueClientTypes.GlueTable]()
            for structure0 in inputRecordTablesContainer {
                if let structure0 = structure0 {
                    inputRecordTablesDecoded0?.append(structure0)
                }
            }
        }
        inputRecordTables = inputRecordTablesDecoded0
        let parametersDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformParameters.self, forKey: .parameters)
        parameters = parametersDecoded
        let evaluationMetricsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EvaluationMetrics.self, forKey: .evaluationMetrics)
        evaluationMetrics = evaluationMetricsDecoded
        let labelCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .labelCount)
        labelCount = labelCountDecoded
        let schemaContainer = try containerValues.decodeIfPresent([GlueClientTypes.SchemaColumn?].self, forKey: .schema)
        var schemaDecoded0:[GlueClientTypes.SchemaColumn]? = nil
        if let schemaContainer = schemaContainer {
            schemaDecoded0 = [GlueClientTypes.SchemaColumn]()
            for structure0 in schemaContainer {
                if let structure0 = structure0 {
                    schemaDecoded0?.append(structure0)
                }
            }
        }
        schema = schemaDecoded0
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let transformEncryptionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformEncryption.self, forKey: .transformEncryption)
        transformEncryption = transformEncryptionDecoded
    }
}

extension GetMLTransformsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sort = "Sort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sort = sort {
            try encodeContainer.encode(sort, forKey: .sort)
        }
    }
}

extension GetMLTransformsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMLTransformsInput: Swift.Equatable {
    /// The filter transformation criteria.
    public var filter: GlueClientTypes.TransformFilterCriteria?
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// A paginated token to offset the results.
    public var nextToken: Swift.String?
    /// The sorting criteria.
    public var sort: GlueClientTypes.TransformSortCriteria?

    public init (
        filter: GlueClientTypes.TransformFilterCriteria? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sort: GlueClientTypes.TransformSortCriteria? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sort = sort
    }
}

struct GetMLTransformsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filter: GlueClientTypes.TransformFilterCriteria?
    let sort: GlueClientTypes.TransformSortCriteria?
}

extension GetMLTransformsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sort = "Sort"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filterDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformFilterCriteria.self, forKey: .filter)
        filter = filterDecoded
        let sortDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformSortCriteria.self, forKey: .sort)
        sort = sortDecoded
    }
}

extension GetMLTransformsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMLTransformsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMLTransformsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMLTransformsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMLTransformsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.transforms = output.transforms
        } else {
            self.nextToken = nil
            self.transforms = nil
        }
    }
}

public struct GetMLTransformsOutputResponse: Swift.Equatable {
    /// A pagination token, if more results are available.
    public var nextToken: Swift.String?
    /// A list of machine learning transforms.
    /// This member is required.
    public var transforms: [GlueClientTypes.MLTransform]?

    public init (
        nextToken: Swift.String? = nil,
        transforms: [GlueClientTypes.MLTransform]? = nil
    )
    {
        self.nextToken = nextToken
        self.transforms = transforms
    }
}

struct GetMLTransformsOutputResponseBody: Swift.Equatable {
    let transforms: [GlueClientTypes.MLTransform]?
    let nextToken: Swift.String?
}

extension GetMLTransformsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case transforms = "Transforms"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformsContainer = try containerValues.decodeIfPresent([GlueClientTypes.MLTransform?].self, forKey: .transforms)
        var transformsDecoded0:[GlueClientTypes.MLTransform]? = nil
        if let transformsContainer = transformsContainer {
            transformsDecoded0 = [GlueClientTypes.MLTransform]()
            for structure0 in transformsContainer {
                if let structure0 = structure0 {
                    transformsDecoded0?.append(structure0)
                }
            }
        }
        transforms = transformsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetMappingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location = "Location"
        case sinks = "Sinks"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let sinks = sinks {
            var sinksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sinks)
            for catalogentries0 in sinks {
                try sinksContainer.encode(catalogentries0)
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }
}

extension GetMappingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMappingInput: Swift.Equatable {
    /// Parameters for the mapping.
    public var location: GlueClientTypes.Location?
    /// A list of target tables.
    public var sinks: [GlueClientTypes.CatalogEntry]?
    /// Specifies the source table.
    /// This member is required.
    public var source: GlueClientTypes.CatalogEntry?

    public init (
        location: GlueClientTypes.Location? = nil,
        sinks: [GlueClientTypes.CatalogEntry]? = nil,
        source: GlueClientTypes.CatalogEntry? = nil
    )
    {
        self.location = location
        self.sinks = sinks
        self.source = source
    }
}

struct GetMappingInputBody: Swift.Equatable {
    let source: GlueClientTypes.CatalogEntry?
    let sinks: [GlueClientTypes.CatalogEntry]?
    let location: GlueClientTypes.Location?
}

extension GetMappingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location = "Location"
        case sinks = "Sinks"
        case source = "Source"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CatalogEntry.self, forKey: .source)
        source = sourceDecoded
        let sinksContainer = try containerValues.decodeIfPresent([GlueClientTypes.CatalogEntry?].self, forKey: .sinks)
        var sinksDecoded0:[GlueClientTypes.CatalogEntry]? = nil
        if let sinksContainer = sinksContainer {
            sinksDecoded0 = [GlueClientTypes.CatalogEntry]()
            for structure0 in sinksContainer {
                if let structure0 = structure0 {
                    sinksDecoded0?.append(structure0)
                }
            }
        }
        sinks = sinksDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Location.self, forKey: .location)
        location = locationDecoded
    }
}

extension GetMappingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMappingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMappingOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMappingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMappingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mapping = output.mapping
        } else {
            self.mapping = nil
        }
    }
}

public struct GetMappingOutputResponse: Swift.Equatable {
    /// A list of mappings to the specified targets.
    /// This member is required.
    public var mapping: [GlueClientTypes.MappingEntry]?

    public init (
        mapping: [GlueClientTypes.MappingEntry]? = nil
    )
    {
        self.mapping = mapping
    }
}

struct GetMappingOutputResponseBody: Swift.Equatable {
    let mapping: [GlueClientTypes.MappingEntry]?
}

extension GetMappingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mapping = "Mapping"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mappingContainer = try containerValues.decodeIfPresent([GlueClientTypes.MappingEntry?].self, forKey: .mapping)
        var mappingDecoded0:[GlueClientTypes.MappingEntry]? = nil
        if let mappingContainer = mappingContainer {
            mappingDecoded0 = [GlueClientTypes.MappingEntry]()
            for structure0 in mappingContainer {
                if let structure0 = structure0 {
                    mappingDecoded0?.append(structure0)
                }
            }
        }
        mapping = mappingDecoded0
    }
}

extension GetPartitionIndexesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case nextToken = "NextToken"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension GetPartitionIndexesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPartitionIndexesInput: Swift.Equatable {
    /// The catalog ID where the table resides.
    public var catalogId: Swift.String?
    /// Specifies the name of a database from which you want to retrieve partition indexes.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A continuation token, included if this is a continuation call.
    public var nextToken: Swift.String?
    /// Specifies the name of a table for which you want to retrieve the partition indexes.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.nextToken = nextToken
        self.tableName = tableName
    }
}

struct GetPartitionIndexesInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let nextToken: Swift.String?
}

extension GetPartitionIndexesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case nextToken = "NextToken"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetPartitionIndexesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPartitionIndexesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPartitionIndexesOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPartitionIndexesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPartitionIndexesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.partitionIndexDescriptorList = output.partitionIndexDescriptorList
        } else {
            self.nextToken = nil
            self.partitionIndexDescriptorList = nil
        }
    }
}

public struct GetPartitionIndexesOutputResponse: Swift.Equatable {
    /// A continuation token, present if the current list segment is not the last.
    public var nextToken: Swift.String?
    /// A list of index descriptors.
    public var partitionIndexDescriptorList: [GlueClientTypes.PartitionIndexDescriptor]?

    public init (
        nextToken: Swift.String? = nil,
        partitionIndexDescriptorList: [GlueClientTypes.PartitionIndexDescriptor]? = nil
    )
    {
        self.nextToken = nextToken
        self.partitionIndexDescriptorList = partitionIndexDescriptorList
    }
}

struct GetPartitionIndexesOutputResponseBody: Swift.Equatable {
    let partitionIndexDescriptorList: [GlueClientTypes.PartitionIndexDescriptor]?
    let nextToken: Swift.String?
}

extension GetPartitionIndexesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case partitionIndexDescriptorList = "PartitionIndexDescriptorList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionIndexDescriptorListContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionIndexDescriptor?].self, forKey: .partitionIndexDescriptorList)
        var partitionIndexDescriptorListDecoded0:[GlueClientTypes.PartitionIndexDescriptor]? = nil
        if let partitionIndexDescriptorListContainer = partitionIndexDescriptorListContainer {
            partitionIndexDescriptorListDecoded0 = [GlueClientTypes.PartitionIndexDescriptor]()
            for structure0 in partitionIndexDescriptorListContainer {
                if let structure0 = structure0 {
                    partitionIndexDescriptorListDecoded0?.append(structure0)
                }
            }
        }
        partitionIndexDescriptorList = partitionIndexDescriptorListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetPartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionValues = partitionValues {
            var partitionValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValues)
            for valuestringlist0 in partitionValues {
                try partitionValuesContainer.encode(valuestringlist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension GetPartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPartitionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partition in question resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database where the partition resides.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The values that define the partition.
    /// This member is required.
    public var partitionValues: [Swift.String]?
    /// The name of the partition's table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionValues: [Swift.String]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.partitionValues = partitionValues
        self.tableName = tableName
    }
}

struct GetPartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionValues: [Swift.String]?
}

extension GetPartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValues)
        var partitionValuesDecoded0:[Swift.String]? = nil
        if let partitionValuesContainer = partitionValuesContainer {
            partitionValuesDecoded0 = [Swift.String]()
            for string0 in partitionValuesContainer {
                if let string0 = string0 {
                    partitionValuesDecoded0?.append(string0)
                }
            }
        }
        partitionValues = partitionValuesDecoded0
    }
}

extension GetPartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPartitionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPartitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.partition = output.partition
        } else {
            self.partition = nil
        }
    }
}

public struct GetPartitionOutputResponse: Swift.Equatable {
    /// The requested information, in the form of a Partition object.
    public var partition: GlueClientTypes.Partition?

    public init (
        partition: GlueClientTypes.Partition? = nil
    )
    {
        self.partition = partition
    }
}

struct GetPartitionOutputResponseBody: Swift.Equatable {
    let partition: GlueClientTypes.Partition?
}

extension GetPartitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partition = "Partition"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Partition.self, forKey: .partition)
        partition = partitionDecoded
    }
}

extension GetPartitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case excludeColumnSchema = "ExcludeColumnSchema"
        case expression = "Expression"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case queryAsOfTime = "QueryAsOfTime"
        case segment = "Segment"
        case tableName = "TableName"
        case transactionId = "TransactionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let excludeColumnSchema = excludeColumnSchema {
            try encodeContainer.encode(excludeColumnSchema, forKey: .excludeColumnSchema)
        }
        if let expression = expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let queryAsOfTime = queryAsOfTime {
            try encodeContainer.encode(queryAsOfTime.timeIntervalSince1970, forKey: .queryAsOfTime)
        }
        if let segment = segment {
            try encodeContainer.encode(segment, forKey: .segment)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let transactionId = transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }
}

extension GetPartitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPartitionsInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partitions in question reside. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database where the partitions reside.
    /// This member is required.
    public var databaseName: Swift.String?
    /// When true, specifies not returning the partition column schema. Useful when you are interested only in other partition attributes such as partition values or location. This approach avoids the problem of a large response by not returning duplicate data.
    public var excludeColumnSchema: Swift.Bool?
    /// An expression that filters the partitions to be returned. The expression uses SQL syntax similar to the SQL WHERE filter clause. The SQL statement parser [JSQLParser](http://jsqlparser.sourceforge.net/home.php) parses the expression. Operators: The following are the operators that you can use in the Expression API call: = Checks whether the values of the two operands are equal; if yes, then the condition becomes true. Example: Assume 'variable a' holds 10 and 'variable b' holds 20. (a = b) is not true. < > Checks whether the values of two operands are equal; if the values are not equal, then the condition becomes true. Example: (a < > b) is true. > Checks whether the value of the left operand is greater than the value of the right operand; if yes, then the condition becomes true. Example: (a > b) is not true. < Checks whether the value of the left operand is less than the value of the right operand; if yes, then the condition becomes true. Example: (a < b) is true. >= Checks whether the value of the left operand is greater than or equal to the value of the right operand; if yes, then the condition becomes true. Example: (a >= b) is not true. <= Checks whether the value of the left operand is less than or equal to the value of the right operand; if yes, then the condition becomes true. Example: (a <= b) is true. AND, OR, IN, BETWEEN, LIKE, NOT, IS NULL Logical operators. Supported Partition Key Types: The following are the supported partition keys.
    ///
    /// * string
    ///
    /// * date
    ///
    /// * timestamp
    ///
    /// * int
    ///
    /// * bigint
    ///
    /// * long
    ///
    /// * tinyint
    ///
    /// * smallint
    ///
    /// * decimal
    ///
    ///
    /// If an type is encountered that is not valid, an exception is thrown. The following list shows the valid operators on each type. When you define a crawler, the partitionKey type is created as a STRING, to be compatible with the catalog partitions. Sample API Call:
    public var expression: Swift.String?
    /// The maximum number of partitions to return in a single response.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is not the first call to retrieve these partitions.
    public var nextToken: Swift.String?
    /// The time as of when to read the partition contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with TransactionId.
    public var queryAsOfTime: ClientRuntime.Date?
    /// The segment of the table's partitions to scan in this request.
    public var segment: GlueClientTypes.Segment?
    /// The name of the partitions' table.
    /// This member is required.
    public var tableName: Swift.String?
    /// The transaction ID at which to read the partition contents.
    public var transactionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        excludeColumnSchema: Swift.Bool? = nil,
        expression: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queryAsOfTime: ClientRuntime.Date? = nil,
        segment: GlueClientTypes.Segment? = nil,
        tableName: Swift.String? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.excludeColumnSchema = excludeColumnSchema
        self.expression = expression
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queryAsOfTime = queryAsOfTime
        self.segment = segment
        self.tableName = tableName
        self.transactionId = transactionId
    }
}

struct GetPartitionsInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let expression: Swift.String?
    let nextToken: Swift.String?
    let segment: GlueClientTypes.Segment?
    let maxResults: Swift.Int?
    let excludeColumnSchema: Swift.Bool?
    let transactionId: Swift.String?
    let queryAsOfTime: ClientRuntime.Date?
}

extension GetPartitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case excludeColumnSchema = "ExcludeColumnSchema"
        case expression = "Expression"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case queryAsOfTime = "QueryAsOfTime"
        case segment = "Segment"
        case tableName = "TableName"
        case transactionId = "TransactionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let segmentDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Segment.self, forKey: .segment)
        segment = segmentDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let excludeColumnSchemaDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .excludeColumnSchema)
        excludeColumnSchema = excludeColumnSchemaDecoded
        let transactionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transactionId)
        transactionId = transactionIdDecoded
        let queryAsOfTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .queryAsOfTime)
        queryAsOfTime = queryAsOfTimeDecoded
    }
}

extension GetPartitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPartitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStateException" : self = .invalidStateException(try InvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPartitionsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case invalidStateException(InvalidStateException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNotReadyException(ResourceNotReadyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPartitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPartitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.partitions = output.partitions
        } else {
            self.nextToken = nil
            self.partitions = nil
        }
    }
}

public struct GetPartitionsOutputResponse: Swift.Equatable {
    /// A continuation token, if the returned list of partitions does not include the last one.
    public var nextToken: Swift.String?
    /// A list of requested partitions.
    public var partitions: [GlueClientTypes.Partition]?

    public init (
        nextToken: Swift.String? = nil,
        partitions: [GlueClientTypes.Partition]? = nil
    )
    {
        self.nextToken = nextToken
        self.partitions = partitions
    }
}

struct GetPartitionsOutputResponseBody: Swift.Equatable {
    let partitions: [GlueClientTypes.Partition]?
    let nextToken: Swift.String?
}

extension GetPartitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case partitions = "Partitions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Partition?].self, forKey: .partitions)
        var partitionsDecoded0:[GlueClientTypes.Partition]? = nil
        if let partitionsContainer = partitionsContainer {
            partitionsDecoded0 = [GlueClientTypes.Partition]()
            for structure0 in partitionsContainer {
                if let structure0 = structure0 {
                    partitionsDecoded0?.append(structure0)
                }
            }
        }
        partitions = partitionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetPlanInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalPlanOptionsMap = "AdditionalPlanOptionsMap"
        case language = "Language"
        case location = "Location"
        case mapping = "Mapping"
        case sinks = "Sinks"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalPlanOptionsMap = additionalPlanOptionsMap {
            var additionalPlanOptionsMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .additionalPlanOptionsMap)
            for (dictKey0, additionalplanoptionsmap0) in additionalPlanOptionsMap {
                try additionalPlanOptionsMapContainer.encode(additionalplanoptionsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let language = language {
            try encodeContainer.encode(language.rawValue, forKey: .language)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let mapping = mapping {
            var mappingContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mapping)
            for mappinglist0 in mapping {
                try mappingContainer.encode(mappinglist0)
            }
        }
        if let sinks = sinks {
            var sinksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sinks)
            for catalogentries0 in sinks {
                try sinksContainer.encode(catalogentries0)
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }
}

extension GetPlanInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPlanInput: Swift.Equatable {
    /// A map to hold additional optional key-value parameters. Currently, these key-value pairs are supported:
    ///
    /// * inferSchema — Specifies whether to set inferSchema to true or false for the default script generated by an Glue job. For example, to set inferSchema to true, pass the following key value pair: --additional-plan-options-map '{"inferSchema":"true"}'
    public var additionalPlanOptionsMap: [Swift.String:Swift.String]?
    /// The programming language of the code to perform the mapping.
    public var language: GlueClientTypes.Language?
    /// The parameters for the mapping.
    public var location: GlueClientTypes.Location?
    /// The list of mappings from a source table to target tables.
    /// This member is required.
    public var mapping: [GlueClientTypes.MappingEntry]?
    /// The target tables.
    public var sinks: [GlueClientTypes.CatalogEntry]?
    /// The source table.
    /// This member is required.
    public var source: GlueClientTypes.CatalogEntry?

    public init (
        additionalPlanOptionsMap: [Swift.String:Swift.String]? = nil,
        language: GlueClientTypes.Language? = nil,
        location: GlueClientTypes.Location? = nil,
        mapping: [GlueClientTypes.MappingEntry]? = nil,
        sinks: [GlueClientTypes.CatalogEntry]? = nil,
        source: GlueClientTypes.CatalogEntry? = nil
    )
    {
        self.additionalPlanOptionsMap = additionalPlanOptionsMap
        self.language = language
        self.location = location
        self.mapping = mapping
        self.sinks = sinks
        self.source = source
    }
}

struct GetPlanInputBody: Swift.Equatable {
    let mapping: [GlueClientTypes.MappingEntry]?
    let source: GlueClientTypes.CatalogEntry?
    let sinks: [GlueClientTypes.CatalogEntry]?
    let location: GlueClientTypes.Location?
    let language: GlueClientTypes.Language?
    let additionalPlanOptionsMap: [Swift.String:Swift.String]?
}

extension GetPlanInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalPlanOptionsMap = "AdditionalPlanOptionsMap"
        case language = "Language"
        case location = "Location"
        case mapping = "Mapping"
        case sinks = "Sinks"
        case source = "Source"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mappingContainer = try containerValues.decodeIfPresent([GlueClientTypes.MappingEntry?].self, forKey: .mapping)
        var mappingDecoded0:[GlueClientTypes.MappingEntry]? = nil
        if let mappingContainer = mappingContainer {
            mappingDecoded0 = [GlueClientTypes.MappingEntry]()
            for structure0 in mappingContainer {
                if let structure0 = structure0 {
                    mappingDecoded0?.append(structure0)
                }
            }
        }
        mapping = mappingDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CatalogEntry.self, forKey: .source)
        source = sourceDecoded
        let sinksContainer = try containerValues.decodeIfPresent([GlueClientTypes.CatalogEntry?].self, forKey: .sinks)
        var sinksDecoded0:[GlueClientTypes.CatalogEntry]? = nil
        if let sinksContainer = sinksContainer {
            sinksDecoded0 = [GlueClientTypes.CatalogEntry]()
            for structure0 in sinksContainer {
                if let structure0 = structure0 {
                    sinksDecoded0?.append(structure0)
                }
            }
        }
        sinks = sinksDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Location.self, forKey: .location)
        location = locationDecoded
        let languageDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Language.self, forKey: .language)
        language = languageDecoded
        let additionalPlanOptionsMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .additionalPlanOptionsMap)
        var additionalPlanOptionsMapDecoded0: [Swift.String:Swift.String]? = nil
        if let additionalPlanOptionsMapContainer = additionalPlanOptionsMapContainer {
            additionalPlanOptionsMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in additionalPlanOptionsMapContainer {
                if let genericstring0 = genericstring0 {
                    additionalPlanOptionsMapDecoded0?[key0] = genericstring0
                }
            }
        }
        additionalPlanOptionsMap = additionalPlanOptionsMapDecoded0
    }
}

extension GetPlanOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPlanOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPlanOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPlanOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPlanOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pythonScript = output.pythonScript
            self.scalaCode = output.scalaCode
        } else {
            self.pythonScript = nil
            self.scalaCode = nil
        }
    }
}

public struct GetPlanOutputResponse: Swift.Equatable {
    /// A Python script to perform the mapping.
    public var pythonScript: Swift.String?
    /// The Scala code to perform the mapping.
    public var scalaCode: Swift.String?

    public init (
        pythonScript: Swift.String? = nil,
        scalaCode: Swift.String? = nil
    )
    {
        self.pythonScript = pythonScript
        self.scalaCode = scalaCode
    }
}

struct GetPlanOutputResponseBody: Swift.Equatable {
    let pythonScript: Swift.String?
    let scalaCode: Swift.String?
}

extension GetPlanOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pythonScript = "PythonScript"
        case scalaCode = "ScalaCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pythonScriptDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pythonScript)
        pythonScript = pythonScriptDecoded
        let scalaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalaCode)
        scalaCode = scalaCodeDecoded
    }
}

extension GetRegistryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryId = "RegistryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let registryId = registryId {
            try encodeContainer.encode(registryId, forKey: .registryId)
        }
    }
}

extension GetRegistryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRegistryInput: Swift.Equatable {
    /// This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).
    /// This member is required.
    public var registryId: GlueClientTypes.RegistryId?

    public init (
        registryId: GlueClientTypes.RegistryId? = nil
    )
    {
        self.registryId = registryId
    }
}

struct GetRegistryInputBody: Swift.Equatable {
    let registryId: GlueClientTypes.RegistryId?
}

extension GetRegistryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryId = "RegistryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RegistryId.self, forKey: .registryId)
        registryId = registryIdDecoded
    }
}

extension GetRegistryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRegistryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRegistryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRegistryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRegistryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdTime = output.createdTime
            self.description = output.description
            self.registryArn = output.registryArn
            self.registryName = output.registryName
            self.status = output.status
            self.updatedTime = output.updatedTime
        } else {
            self.createdTime = nil
            self.description = nil
            self.registryArn = nil
            self.registryName = nil
            self.status = nil
            self.updatedTime = nil
        }
    }
}

public struct GetRegistryOutputResponse: Swift.Equatable {
    /// The date and time the registry was created.
    public var createdTime: Swift.String?
    /// A description of the registry.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the registry.
    public var registryArn: Swift.String?
    /// The name of the registry.
    public var registryName: Swift.String?
    /// The status of the registry.
    public var status: GlueClientTypes.RegistryStatus?
    /// The date and time the registry was updated.
    public var updatedTime: Swift.String?

    public init (
        createdTime: Swift.String? = nil,
        description: Swift.String? = nil,
        registryArn: Swift.String? = nil,
        registryName: Swift.String? = nil,
        status: GlueClientTypes.RegistryStatus? = nil,
        updatedTime: Swift.String? = nil
    )
    {
        self.createdTime = createdTime
        self.description = description
        self.registryArn = registryArn
        self.registryName = registryName
        self.status = status
        self.updatedTime = updatedTime
    }
}

struct GetRegistryOutputResponseBody: Swift.Equatable {
    let registryName: Swift.String?
    let registryArn: Swift.String?
    let description: Swift.String?
    let status: GlueClientTypes.RegistryStatus?
    let createdTime: Swift.String?
    let updatedTime: Swift.String?
}

extension GetRegistryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case description = "Description"
        case registryArn = "RegistryArn"
        case registryName = "RegistryName"
        case status = "Status"
        case updatedTime = "UpdatedTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let registryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RegistryStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let updatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedTime)
        updatedTime = updatedTimeDecoded
    }
}

extension GetResourcePoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetResourcePoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetResourcePoliciesInput: Swift.Equatable {
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetResourcePoliciesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetResourcePoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetResourcePoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetResourcePoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetResourcePoliciesOutputError: Swift.Error, Swift.Equatable {
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetResourcePoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetResourcePoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.getResourcePoliciesResponseList = output.getResourcePoliciesResponseList
            self.nextToken = output.nextToken
        } else {
            self.getResourcePoliciesResponseList = nil
            self.nextToken = nil
        }
    }
}

public struct GetResourcePoliciesOutputResponse: Swift.Equatable {
    /// A list of the individual resource policies and the account-level resource policy.
    public var getResourcePoliciesResponseList: [GlueClientTypes.GluePolicy]?
    /// A continuation token, if the returned list does not contain the last resource policy available.
    public var nextToken: Swift.String?

    public init (
        getResourcePoliciesResponseList: [GlueClientTypes.GluePolicy]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.getResourcePoliciesResponseList = getResourcePoliciesResponseList
        self.nextToken = nextToken
    }
}

struct GetResourcePoliciesOutputResponseBody: Swift.Equatable {
    let getResourcePoliciesResponseList: [GlueClientTypes.GluePolicy]?
    let nextToken: Swift.String?
}

extension GetResourcePoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case getResourcePoliciesResponseList = "GetResourcePoliciesResponseList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let getResourcePoliciesResponseListContainer = try containerValues.decodeIfPresent([GlueClientTypes.GluePolicy?].self, forKey: .getResourcePoliciesResponseList)
        var getResourcePoliciesResponseListDecoded0:[GlueClientTypes.GluePolicy]? = nil
        if let getResourcePoliciesResponseListContainer = getResourcePoliciesResponseListContainer {
            getResourcePoliciesResponseListDecoded0 = [GlueClientTypes.GluePolicy]()
            for structure0 in getResourcePoliciesResponseListContainer {
                if let structure0 = structure0 {
                    getResourcePoliciesResponseListDecoded0?.append(structure0)
                }
            }
        }
        getResourcePoliciesResponseList = getResourcePoliciesResponseListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension GetResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetResourcePolicyInput: Swift.Equatable {
    /// The ARN of the Glue resource for which to retrieve the resource policy. If not supplied, the Data Catalog resource policy is returned. Use GetResourcePolicies to view all existing resource policies. For more information see [Specifying Glue Resource ARNs](https://docs.aws.amazon.com/glue/latest/dg/glue-specifying-resource-arns.html).
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension GetResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createTime = output.createTime
            self.policyHash = output.policyHash
            self.policyInJson = output.policyInJson
            self.updateTime = output.updateTime
        } else {
            self.createTime = nil
            self.policyHash = nil
            self.policyInJson = nil
            self.updateTime = nil
        }
    }
}

public struct GetResourcePolicyOutputResponse: Swift.Equatable {
    /// The date and time at which the policy was created.
    public var createTime: ClientRuntime.Date?
    /// Contains the hash value associated with this policy.
    public var policyHash: Swift.String?
    /// Contains the requested policy document, in JSON format.
    public var policyInJson: Swift.String?
    /// The date and time at which the policy was last updated.
    public var updateTime: ClientRuntime.Date?

    public init (
        createTime: ClientRuntime.Date? = nil,
        policyHash: Swift.String? = nil,
        policyInJson: Swift.String? = nil,
        updateTime: ClientRuntime.Date? = nil
    )
    {
        self.createTime = createTime
        self.policyHash = policyHash
        self.policyInJson = policyInJson
        self.updateTime = updateTime
    }
}

struct GetResourcePolicyOutputResponseBody: Swift.Equatable {
    let policyInJson: Swift.String?
    let policyHash: Swift.String?
    let createTime: ClientRuntime.Date?
    let updateTime: ClientRuntime.Date?
}

extension GetResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime = "CreateTime"
        case policyHash = "PolicyHash"
        case policyInJson = "PolicyInJson"
        case updateTime = "UpdateTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyInJsonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyInJson)
        policyInJson = policyInJsonDecoded
        let policyHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyHash)
        policyHash = policyHashDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateTime)
        updateTime = updateTimeDecoded
    }
}

extension GetSchemaByDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaDefinition = "SchemaDefinition"
        case schemaId = "SchemaId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let schemaDefinition = schemaDefinition {
            try encodeContainer.encode(schemaDefinition, forKey: .schemaDefinition)
        }
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
    }
}

extension GetSchemaByDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSchemaByDefinitionInput: Swift.Equatable {
    /// The definition of the schema for which schema details are required.
    /// This member is required.
    public var schemaDefinition: Swift.String?
    /// This is a wrapper structure to contain schema identity fields. The structure contains:
    ///
    /// * SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of SchemaArn or SchemaName has to be provided.
    ///
    /// * SchemaId$SchemaName: The name of the schema. One of SchemaArn or SchemaName has to be provided.
    /// This member is required.
    public var schemaId: GlueClientTypes.SchemaId?

    public init (
        schemaDefinition: Swift.String? = nil,
        schemaId: GlueClientTypes.SchemaId? = nil
    )
    {
        self.schemaDefinition = schemaDefinition
        self.schemaId = schemaId
    }
}

struct GetSchemaByDefinitionInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let schemaDefinition: Swift.String?
}

extension GetSchemaByDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaDefinition = "SchemaDefinition"
        case schemaId = "SchemaId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaDefinition)
        schemaDefinition = schemaDefinitionDecoded
    }
}

extension GetSchemaByDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSchemaByDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSchemaByDefinitionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSchemaByDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSchemaByDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdTime = output.createdTime
            self.dataFormat = output.dataFormat
            self.schemaArn = output.schemaArn
            self.schemaVersionId = output.schemaVersionId
            self.status = output.status
        } else {
            self.createdTime = nil
            self.dataFormat = nil
            self.schemaArn = nil
            self.schemaVersionId = nil
            self.status = nil
        }
    }
}

public struct GetSchemaByDefinitionOutputResponse: Swift.Equatable {
    /// The date and time the schema was created.
    public var createdTime: Swift.String?
    /// The data format of the schema definition. Currently only AVRO and JSON are supported.
    public var dataFormat: GlueClientTypes.DataFormat?
    /// The Amazon Resource Name (ARN) of the schema.
    public var schemaArn: Swift.String?
    /// The schema ID of the schema version.
    public var schemaVersionId: Swift.String?
    /// The status of the schema version.
    public var status: GlueClientTypes.SchemaVersionStatus?

    public init (
        createdTime: Swift.String? = nil,
        dataFormat: GlueClientTypes.DataFormat? = nil,
        schemaArn: Swift.String? = nil,
        schemaVersionId: Swift.String? = nil,
        status: GlueClientTypes.SchemaVersionStatus? = nil
    )
    {
        self.createdTime = createdTime
        self.dataFormat = dataFormat
        self.schemaArn = schemaArn
        self.schemaVersionId = schemaVersionId
        self.status = status
    }
}

struct GetSchemaByDefinitionOutputResponseBody: Swift.Equatable {
    let schemaVersionId: Swift.String?
    let schemaArn: Swift.String?
    let dataFormat: GlueClientTypes.DataFormat?
    let status: GlueClientTypes.SchemaVersionStatus?
    let createdTime: Swift.String?
}

extension GetSchemaByDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case dataFormat = "DataFormat"
        case schemaArn = "SchemaArn"
        case schemaVersionId = "SchemaVersionId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
    }
}

extension GetSchemaInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaId = "SchemaId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
    }
}

extension GetSchemaInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSchemaInput: Swift.Equatable {
    /// This is a wrapper structure to contain schema identity fields. The structure contains:
    ///
    /// * SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either SchemaArn or SchemaName and RegistryName has to be provided.
    ///
    /// * SchemaId$SchemaName: The name of the schema. Either SchemaArn or SchemaName and RegistryName has to be provided.
    /// This member is required.
    public var schemaId: GlueClientTypes.SchemaId?

    public init (
        schemaId: GlueClientTypes.SchemaId? = nil
    )
    {
        self.schemaId = schemaId
    }
}

struct GetSchemaInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
}

extension GetSchemaInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaId = "SchemaId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
    }
}

extension GetSchemaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSchemaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSchemaOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSchemaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSchemaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compatibility = output.compatibility
            self.createdTime = output.createdTime
            self.dataFormat = output.dataFormat
            self.description = output.description
            self.latestSchemaVersion = output.latestSchemaVersion
            self.nextSchemaVersion = output.nextSchemaVersion
            self.registryArn = output.registryArn
            self.registryName = output.registryName
            self.schemaArn = output.schemaArn
            self.schemaCheckpoint = output.schemaCheckpoint
            self.schemaName = output.schemaName
            self.schemaStatus = output.schemaStatus
            self.updatedTime = output.updatedTime
        } else {
            self.compatibility = nil
            self.createdTime = nil
            self.dataFormat = nil
            self.description = nil
            self.latestSchemaVersion = 0
            self.nextSchemaVersion = 0
            self.registryArn = nil
            self.registryName = nil
            self.schemaArn = nil
            self.schemaCheckpoint = 0
            self.schemaName = nil
            self.schemaStatus = nil
            self.updatedTime = nil
        }
    }
}

public struct GetSchemaOutputResponse: Swift.Equatable {
    /// The compatibility mode of the schema.
    public var compatibility: GlueClientTypes.Compatibility?
    /// The date and time the schema was created.
    public var createdTime: Swift.String?
    /// The data format of the schema definition. Currently AVRO and JSON are supported.
    public var dataFormat: GlueClientTypes.DataFormat?
    /// A description of schema if specified when created
    public var description: Swift.String?
    /// The latest version of the schema associated with the returned schema definition.
    public var latestSchemaVersion: Swift.Int
    /// The next version of the schema associated with the returned schema definition.
    public var nextSchemaVersion: Swift.Int
    /// The Amazon Resource Name (ARN) of the registry.
    public var registryArn: Swift.String?
    /// The name of the registry.
    public var registryName: Swift.String?
    /// The Amazon Resource Name (ARN) of the schema.
    public var schemaArn: Swift.String?
    /// The version number of the checkpoint (the last time the compatibility mode was changed).
    public var schemaCheckpoint: Swift.Int
    /// The name of the schema.
    public var schemaName: Swift.String?
    /// The status of the schema.
    public var schemaStatus: GlueClientTypes.SchemaStatus?
    /// The date and time the schema was updated.
    public var updatedTime: Swift.String?

    public init (
        compatibility: GlueClientTypes.Compatibility? = nil,
        createdTime: Swift.String? = nil,
        dataFormat: GlueClientTypes.DataFormat? = nil,
        description: Swift.String? = nil,
        latestSchemaVersion: Swift.Int = 0,
        nextSchemaVersion: Swift.Int = 0,
        registryArn: Swift.String? = nil,
        registryName: Swift.String? = nil,
        schemaArn: Swift.String? = nil,
        schemaCheckpoint: Swift.Int = 0,
        schemaName: Swift.String? = nil,
        schemaStatus: GlueClientTypes.SchemaStatus? = nil,
        updatedTime: Swift.String? = nil
    )
    {
        self.compatibility = compatibility
        self.createdTime = createdTime
        self.dataFormat = dataFormat
        self.description = description
        self.latestSchemaVersion = latestSchemaVersion
        self.nextSchemaVersion = nextSchemaVersion
        self.registryArn = registryArn
        self.registryName = registryName
        self.schemaArn = schemaArn
        self.schemaCheckpoint = schemaCheckpoint
        self.schemaName = schemaName
        self.schemaStatus = schemaStatus
        self.updatedTime = updatedTime
    }
}

struct GetSchemaOutputResponseBody: Swift.Equatable {
    let registryName: Swift.String?
    let registryArn: Swift.String?
    let schemaName: Swift.String?
    let schemaArn: Swift.String?
    let description: Swift.String?
    let dataFormat: GlueClientTypes.DataFormat?
    let compatibility: GlueClientTypes.Compatibility?
    let schemaCheckpoint: Swift.Int
    let latestSchemaVersion: Swift.Int
    let nextSchemaVersion: Swift.Int
    let schemaStatus: GlueClientTypes.SchemaStatus?
    let createdTime: Swift.String?
    let updatedTime: Swift.String?
}

extension GetSchemaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibility = "Compatibility"
        case createdTime = "CreatedTime"
        case dataFormat = "DataFormat"
        case description = "Description"
        case latestSchemaVersion = "LatestSchemaVersion"
        case nextSchemaVersion = "NextSchemaVersion"
        case registryArn = "RegistryArn"
        case registryName = "RegistryName"
        case schemaArn = "SchemaArn"
        case schemaCheckpoint = "SchemaCheckpoint"
        case schemaName = "SchemaName"
        case schemaStatus = "SchemaStatus"
        case updatedTime = "UpdatedTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let registryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let compatibilityDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Compatibility.self, forKey: .compatibility)
        compatibility = compatibilityDecoded
        let schemaCheckpointDecoded = try containerValues.decode(Swift.Int.self, forKey: .schemaCheckpoint)
        schemaCheckpoint = schemaCheckpointDecoded
        let latestSchemaVersionDecoded = try containerValues.decode(Swift.Int.self, forKey: .latestSchemaVersion)
        latestSchemaVersion = latestSchemaVersionDecoded
        let nextSchemaVersionDecoded = try containerValues.decode(Swift.Int.self, forKey: .nextSchemaVersion)
        nextSchemaVersion = nextSchemaVersionDecoded
        let schemaStatusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaStatus.self, forKey: .schemaStatus)
        schemaStatus = schemaStatusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let updatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedTime)
        updatedTime = updatedTimeDecoded
    }
}

extension GetSchemaVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let schemaVersionId = schemaVersionId {
            try encodeContainer.encode(schemaVersionId, forKey: .schemaVersionId)
        }
        if let schemaVersionNumber = schemaVersionNumber {
            try encodeContainer.encode(schemaVersionNumber, forKey: .schemaVersionNumber)
        }
    }
}

extension GetSchemaVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSchemaVersionInput: Swift.Equatable {
    /// This is a wrapper structure to contain schema identity fields. The structure contains:
    ///
    /// * SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either SchemaArn or SchemaName and RegistryName has to be provided.
    ///
    /// * SchemaId$SchemaName: The name of the schema. Either SchemaArn or SchemaName and RegistryName has to be provided.
    public var schemaId: GlueClientTypes.SchemaId?
    /// The SchemaVersionId of the schema version. This field is required for fetching by schema ID. Either this or the SchemaId wrapper has to be provided.
    public var schemaVersionId: Swift.String?
    /// The version number of the schema.
    public var schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?

    public init (
        schemaId: GlueClientTypes.SchemaId? = nil,
        schemaVersionId: Swift.String? = nil,
        schemaVersionNumber: GlueClientTypes.SchemaVersionNumber? = nil
    )
    {
        self.schemaId = schemaId
        self.schemaVersionId = schemaVersionId
        self.schemaVersionNumber = schemaVersionNumber
    }
}

struct GetSchemaVersionInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let schemaVersionId: Swift.String?
    let schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?
}

extension GetSchemaVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let schemaVersionNumberDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionNumber.self, forKey: .schemaVersionNumber)
        schemaVersionNumber = schemaVersionNumberDecoded
    }
}

extension GetSchemaVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSchemaVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSchemaVersionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSchemaVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSchemaVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdTime = output.createdTime
            self.dataFormat = output.dataFormat
            self.schemaArn = output.schemaArn
            self.schemaDefinition = output.schemaDefinition
            self.schemaVersionId = output.schemaVersionId
            self.status = output.status
            self.versionNumber = output.versionNumber
        } else {
            self.createdTime = nil
            self.dataFormat = nil
            self.schemaArn = nil
            self.schemaDefinition = nil
            self.schemaVersionId = nil
            self.status = nil
            self.versionNumber = 0
        }
    }
}

public struct GetSchemaVersionOutputResponse: Swift.Equatable {
    /// The date and time the schema version was created.
    public var createdTime: Swift.String?
    /// The data format of the schema definition. Currently AVRO and JSON are supported.
    public var dataFormat: GlueClientTypes.DataFormat?
    /// The Amazon Resource Name (ARN) of the schema.
    public var schemaArn: Swift.String?
    /// The schema definition for the schema ID.
    public var schemaDefinition: Swift.String?
    /// The SchemaVersionId of the schema version.
    public var schemaVersionId: Swift.String?
    /// The status of the schema version.
    public var status: GlueClientTypes.SchemaVersionStatus?
    /// The version number of the schema.
    public var versionNumber: Swift.Int

    public init (
        createdTime: Swift.String? = nil,
        dataFormat: GlueClientTypes.DataFormat? = nil,
        schemaArn: Swift.String? = nil,
        schemaDefinition: Swift.String? = nil,
        schemaVersionId: Swift.String? = nil,
        status: GlueClientTypes.SchemaVersionStatus? = nil,
        versionNumber: Swift.Int = 0
    )
    {
        self.createdTime = createdTime
        self.dataFormat = dataFormat
        self.schemaArn = schemaArn
        self.schemaDefinition = schemaDefinition
        self.schemaVersionId = schemaVersionId
        self.status = status
        self.versionNumber = versionNumber
    }
}

struct GetSchemaVersionOutputResponseBody: Swift.Equatable {
    let schemaVersionId: Swift.String?
    let schemaDefinition: Swift.String?
    let dataFormat: GlueClientTypes.DataFormat?
    let schemaArn: Swift.String?
    let versionNumber: Swift.Int
    let status: GlueClientTypes.SchemaVersionStatus?
    let createdTime: Swift.String?
}

extension GetSchemaVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case dataFormat = "DataFormat"
        case schemaArn = "SchemaArn"
        case schemaDefinition = "SchemaDefinition"
        case schemaVersionId = "SchemaVersionId"
        case status = "Status"
        case versionNumber = "VersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let schemaDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaDefinition)
        schemaDefinition = schemaDefinitionDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let versionNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
    }
}

extension GetSchemaVersionsDiffInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firstSchemaVersionNumber = "FirstSchemaVersionNumber"
        case schemaDiffType = "SchemaDiffType"
        case schemaId = "SchemaId"
        case secondSchemaVersionNumber = "SecondSchemaVersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firstSchemaVersionNumber = firstSchemaVersionNumber {
            try encodeContainer.encode(firstSchemaVersionNumber, forKey: .firstSchemaVersionNumber)
        }
        if let schemaDiffType = schemaDiffType {
            try encodeContainer.encode(schemaDiffType.rawValue, forKey: .schemaDiffType)
        }
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let secondSchemaVersionNumber = secondSchemaVersionNumber {
            try encodeContainer.encode(secondSchemaVersionNumber, forKey: .secondSchemaVersionNumber)
        }
    }
}

extension GetSchemaVersionsDiffInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSchemaVersionsDiffInput: Swift.Equatable {
    /// The first of the two schema versions to be compared.
    /// This member is required.
    public var firstSchemaVersionNumber: GlueClientTypes.SchemaVersionNumber?
    /// Refers to SYNTAX_DIFF, which is the currently supported diff type.
    /// This member is required.
    public var schemaDiffType: GlueClientTypes.SchemaDiffType?
    /// This is a wrapper structure to contain schema identity fields. The structure contains:
    ///
    /// * SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of SchemaArn or SchemaName has to be provided.
    ///
    /// * SchemaId$SchemaName: The name of the schema. One of SchemaArn or SchemaName has to be provided.
    /// This member is required.
    public var schemaId: GlueClientTypes.SchemaId?
    /// The second of the two schema versions to be compared.
    /// This member is required.
    public var secondSchemaVersionNumber: GlueClientTypes.SchemaVersionNumber?

    public init (
        firstSchemaVersionNumber: GlueClientTypes.SchemaVersionNumber? = nil,
        schemaDiffType: GlueClientTypes.SchemaDiffType? = nil,
        schemaId: GlueClientTypes.SchemaId? = nil,
        secondSchemaVersionNumber: GlueClientTypes.SchemaVersionNumber? = nil
    )
    {
        self.firstSchemaVersionNumber = firstSchemaVersionNumber
        self.schemaDiffType = schemaDiffType
        self.schemaId = schemaId
        self.secondSchemaVersionNumber = secondSchemaVersionNumber
    }
}

struct GetSchemaVersionsDiffInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let firstSchemaVersionNumber: GlueClientTypes.SchemaVersionNumber?
    let secondSchemaVersionNumber: GlueClientTypes.SchemaVersionNumber?
    let schemaDiffType: GlueClientTypes.SchemaDiffType?
}

extension GetSchemaVersionsDiffInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firstSchemaVersionNumber = "FirstSchemaVersionNumber"
        case schemaDiffType = "SchemaDiffType"
        case schemaId = "SchemaId"
        case secondSchemaVersionNumber = "SecondSchemaVersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let firstSchemaVersionNumberDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionNumber.self, forKey: .firstSchemaVersionNumber)
        firstSchemaVersionNumber = firstSchemaVersionNumberDecoded
        let secondSchemaVersionNumberDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionNumber.self, forKey: .secondSchemaVersionNumber)
        secondSchemaVersionNumber = secondSchemaVersionNumberDecoded
        let schemaDiffTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaDiffType.self, forKey: .schemaDiffType)
        schemaDiffType = schemaDiffTypeDecoded
    }
}

extension GetSchemaVersionsDiffOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSchemaVersionsDiffOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSchemaVersionsDiffOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSchemaVersionsDiffOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSchemaVersionsDiffOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.diff = output.diff
        } else {
            self.diff = nil
        }
    }
}

public struct GetSchemaVersionsDiffOutputResponse: Swift.Equatable {
    /// The difference between schemas as a string in JsonPatch format.
    public var diff: Swift.String?

    public init (
        diff: Swift.String? = nil
    )
    {
        self.diff = diff
    }
}

struct GetSchemaVersionsDiffOutputResponseBody: Swift.Equatable {
    let diff: Swift.String?
}

extension GetSchemaVersionsDiffOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diff = "Diff"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diffDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diff)
        diff = diffDecoded
    }
}

extension GetSecurityConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetSecurityConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSecurityConfigurationInput: Swift.Equatable {
    /// The name of the security configuration to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetSecurityConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension GetSecurityConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GetSecurityConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSecurityConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSecurityConfigurationOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSecurityConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSecurityConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.securityConfiguration = output.securityConfiguration
        } else {
            self.securityConfiguration = nil
        }
    }
}

public struct GetSecurityConfigurationOutputResponse: Swift.Equatable {
    /// The requested security configuration.
    public var securityConfiguration: GlueClientTypes.SecurityConfiguration?

    public init (
        securityConfiguration: GlueClientTypes.SecurityConfiguration? = nil
    )
    {
        self.securityConfiguration = securityConfiguration
    }
}

struct GetSecurityConfigurationOutputResponseBody: Swift.Equatable {
    let securityConfiguration: GlueClientTypes.SecurityConfiguration?
}

extension GetSecurityConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityConfiguration = "SecurityConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SecurityConfiguration.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
    }
}

extension GetSecurityConfigurationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetSecurityConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSecurityConfigurationsInput: Swift.Equatable {
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetSecurityConfigurationsInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetSecurityConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetSecurityConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSecurityConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSecurityConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSecurityConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSecurityConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.securityConfigurations = output.securityConfigurations
        } else {
            self.nextToken = nil
            self.securityConfigurations = nil
        }
    }
}

public struct GetSecurityConfigurationsOutputResponse: Swift.Equatable {
    /// A continuation token, if there are more security configurations to return.
    public var nextToken: Swift.String?
    /// A list of security configurations.
    public var securityConfigurations: [GlueClientTypes.SecurityConfiguration]?

    public init (
        nextToken: Swift.String? = nil,
        securityConfigurations: [GlueClientTypes.SecurityConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.securityConfigurations = securityConfigurations
    }
}

struct GetSecurityConfigurationsOutputResponseBody: Swift.Equatable {
    let securityConfigurations: [GlueClientTypes.SecurityConfiguration]?
    let nextToken: Swift.String?
}

extension GetSecurityConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case securityConfigurations = "SecurityConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityConfigurationsContainer = try containerValues.decodeIfPresent([GlueClientTypes.SecurityConfiguration?].self, forKey: .securityConfigurations)
        var securityConfigurationsDecoded0:[GlueClientTypes.SecurityConfiguration]? = nil
        if let securityConfigurationsContainer = securityConfigurationsContainer {
            securityConfigurationsDecoded0 = [GlueClientTypes.SecurityConfiguration]()
            for structure0 in securityConfigurationsContainer {
                if let structure0 = structure0 {
                    securityConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        securityConfigurations = securityConfigurationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case name = "Name"
        case queryAsOfTime = "QueryAsOfTime"
        case transactionId = "TransactionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queryAsOfTime = queryAsOfTime {
            try encodeContainer.encode(queryAsOfTime.timeIntervalSince1970, forKey: .queryAsOfTime)
        }
        if let transactionId = transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }
}

extension GetTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTableInput: Swift.Equatable {
    /// The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the table for which to retrieve the definition. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var name: Swift.String?
    /// The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with TransactionId.
    public var queryAsOfTime: ClientRuntime.Date?
    /// The transaction ID at which to read the table contents.
    public var transactionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        name: Swift.String? = nil,
        queryAsOfTime: ClientRuntime.Date? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.name = name
        self.queryAsOfTime = queryAsOfTime
        self.transactionId = transactionId
    }
}

struct GetTableInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let name: Swift.String?
    let transactionId: Swift.String?
    let queryAsOfTime: ClientRuntime.Date?
}

extension GetTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case name = "Name"
        case queryAsOfTime = "QueryAsOfTime"
        case transactionId = "TransactionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let transactionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transactionId)
        transactionId = transactionIdDecoded
        let queryAsOfTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .queryAsOfTime)
        queryAsOfTime = queryAsOfTimeDecoded
    }
}

extension GetTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTableOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNotReadyException(ResourceNotReadyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.table = output.table
        } else {
            self.table = nil
        }
    }
}

public struct GetTableOutputResponse: Swift.Equatable {
    /// The Table object that defines the specified table.
    public var table: GlueClientTypes.Table?

    public init (
        table: GlueClientTypes.Table? = nil
    )
    {
        self.table = table
    }
}

struct GetTableOutputResponseBody: Swift.Equatable {
    let table: GlueClientTypes.Table?
}

extension GetTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case table = "Table"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Table.self, forKey: .table)
        table = tableDecoded
    }
}

extension GetTableVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let versionId = versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }
}

extension GetTableVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTableVersionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the table. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var tableName: Swift.String?
    /// The ID value of the table version to be retrieved. A VersionID is a string representation of an integer. Each version is incremented by 1.
    public var versionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        tableName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.tableName = tableName
        self.versionId = versionId
    }
}

struct GetTableVersionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let versionId: Swift.String?
}

extension GetTableVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
        case versionId = "VersionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension GetTableVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTableVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTableVersionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTableVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTableVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tableVersion = output.tableVersion
        } else {
            self.tableVersion = nil
        }
    }
}

public struct GetTableVersionOutputResponse: Swift.Equatable {
    /// The requested table version.
    public var tableVersion: GlueClientTypes.TableVersion?

    public init (
        tableVersion: GlueClientTypes.TableVersion? = nil
    )
    {
        self.tableVersion = tableVersion
    }
}

struct GetTableVersionOutputResponseBody: Swift.Equatable {
    let tableVersion: GlueClientTypes.TableVersion?
}

extension GetTableVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableVersion = "TableVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableVersionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TableVersion.self, forKey: .tableVersion)
        tableVersion = tableVersionDecoded
    }
}

extension GetTableVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension GetTableVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTableVersionsInput: Swift.Equatable {
    /// The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The maximum number of table versions to return in one response.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is not the first call.
    public var nextToken: Swift.String?
    /// The name of the table. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tableName = tableName
    }
}

struct GetTableVersionsInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetTableVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetTableVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTableVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTableVersionsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTableVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTableVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tableVersions = output.tableVersions
        } else {
            self.nextToken = nil
            self.tableVersions = nil
        }
    }
}

public struct GetTableVersionsOutputResponse: Swift.Equatable {
    /// A continuation token, if the list of available versions does not include the last one.
    public var nextToken: Swift.String?
    /// A list of strings identifying available versions of the specified table.
    public var tableVersions: [GlueClientTypes.TableVersion]?

    public init (
        nextToken: Swift.String? = nil,
        tableVersions: [GlueClientTypes.TableVersion]? = nil
    )
    {
        self.nextToken = nextToken
        self.tableVersions = tableVersions
    }
}

struct GetTableVersionsOutputResponseBody: Swift.Equatable {
    let tableVersions: [GlueClientTypes.TableVersion]?
    let nextToken: Swift.String?
}

extension GetTableVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tableVersions = "TableVersions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableVersionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.TableVersion?].self, forKey: .tableVersions)
        var tableVersionsDecoded0:[GlueClientTypes.TableVersion]? = nil
        if let tableVersionsContainer = tableVersionsContainer {
            tableVersionsDecoded0 = [GlueClientTypes.TableVersion]()
            for structure0 in tableVersionsContainer {
                if let structure0 = structure0 {
                    tableVersionsDecoded0?.append(structure0)
                }
            }
        }
        tableVersions = tableVersionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetTablesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case expression = "Expression"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case queryAsOfTime = "QueryAsOfTime"
        case transactionId = "TransactionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let expression = expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let queryAsOfTime = queryAsOfTime {
            try encodeContainer.encode(queryAsOfTime.timeIntervalSince1970, forKey: .queryAsOfTime)
        }
        if let transactionId = transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }
}

extension GetTablesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTablesInput: Swift.Equatable {
    /// The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A regular expression pattern. If present, only those tables whose names match the pattern are returned.
    public var expression: Swift.String?
    /// The maximum number of tables to return in a single response.
    public var maxResults: Swift.Int?
    /// A continuation token, included if this is a continuation call.
    public var nextToken: Swift.String?
    /// The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with TransactionId.
    public var queryAsOfTime: ClientRuntime.Date?
    /// The transaction ID at which to read the table contents.
    public var transactionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        expression: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queryAsOfTime: ClientRuntime.Date? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.expression = expression
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queryAsOfTime = queryAsOfTime
        self.transactionId = transactionId
    }
}

struct GetTablesInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let expression: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let transactionId: Swift.String?
    let queryAsOfTime: ClientRuntime.Date?
}

extension GetTablesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case expression = "Expression"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case queryAsOfTime = "QueryAsOfTime"
        case transactionId = "TransactionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let transactionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transactionId)
        transactionId = transactionIdDecoded
        let queryAsOfTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .queryAsOfTime)
        queryAsOfTime = queryAsOfTimeDecoded
    }
}

extension GetTablesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTablesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTablesOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTablesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTablesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tableList = output.tableList
        } else {
            self.nextToken = nil
            self.tableList = nil
        }
    }
}

public struct GetTablesOutputResponse: Swift.Equatable {
    /// A continuation token, present if the current list segment is not the last.
    public var nextToken: Swift.String?
    /// A list of the requested Table objects.
    public var tableList: [GlueClientTypes.Table]?

    public init (
        nextToken: Swift.String? = nil,
        tableList: [GlueClientTypes.Table]? = nil
    )
    {
        self.nextToken = nextToken
        self.tableList = tableList
    }
}

struct GetTablesOutputResponseBody: Swift.Equatable {
    let tableList: [GlueClientTypes.Table]?
    let nextToken: Swift.String?
}

extension GetTablesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tableList = "TableList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableListContainer = try containerValues.decodeIfPresent([GlueClientTypes.Table?].self, forKey: .tableList)
        var tableListDecoded0:[GlueClientTypes.Table]? = nil
        if let tableListContainer = tableListContainer {
            tableListDecoded0 = [GlueClientTypes.Table]()
            for structure0 in tableListContainer {
                if let structure0 = structure0 {
                    tableListDecoded0?.append(structure0)
                }
            }
        }
        tableList = tableListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension GetTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource for which to retrieve tags.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetTagsInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension GetTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTagsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct GetTagsOutputResponse: Swift.Equatable {
    /// The requested tags.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct GetTagsOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension GetTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension GetTriggerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetTriggerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTriggerInput: Swift.Equatable {
    /// The name of the trigger to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetTriggerInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension GetTriggerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GetTriggerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTriggerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTriggerOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTriggerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTriggerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trigger = output.trigger
        } else {
            self.trigger = nil
        }
    }
}

public struct GetTriggerOutputResponse: Swift.Equatable {
    /// The requested trigger definition.
    public var trigger: GlueClientTypes.Trigger?

    public init (
        trigger: GlueClientTypes.Trigger? = nil
    )
    {
        self.trigger = trigger
    }
}

struct GetTriggerOutputResponseBody: Swift.Equatable {
    let trigger: GlueClientTypes.Trigger?
}

extension GetTriggerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trigger = "Trigger"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Trigger.self, forKey: .trigger)
        trigger = triggerDecoded
    }
}

extension GetTriggersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dependentJobName = "DependentJobName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dependentJobName = dependentJobName {
            try encodeContainer.encode(dependentJobName, forKey: .dependentJobName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetTriggersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTriggersInput: Swift.Equatable {
    /// The name of the job to retrieve triggers for. The trigger that can start this job is returned, and if there is no such trigger, all triggers are returned.
    public var dependentJobName: Swift.String?
    /// The maximum size of the response.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?

    public init (
        dependentJobName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dependentJobName = dependentJobName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetTriggersInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let dependentJobName: Swift.String?
    let maxResults: Swift.Int?
}

extension GetTriggersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dependentJobName = "DependentJobName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let dependentJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dependentJobName)
        dependentJobName = dependentJobNameDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetTriggersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTriggersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTriggersOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTriggersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTriggersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.triggers = output.triggers
        } else {
            self.nextToken = nil
            self.triggers = nil
        }
    }
}

public struct GetTriggersOutputResponse: Swift.Equatable {
    /// A continuation token, if not all the requested triggers have yet been returned.
    public var nextToken: Swift.String?
    /// A list of triggers for the specified job.
    public var triggers: [GlueClientTypes.Trigger]?

    public init (
        nextToken: Swift.String? = nil,
        triggers: [GlueClientTypes.Trigger]? = nil
    )
    {
        self.nextToken = nextToken
        self.triggers = triggers
    }
}

struct GetTriggersOutputResponseBody: Swift.Equatable {
    let triggers: [GlueClientTypes.Trigger]?
    let nextToken: Swift.String?
}

extension GetTriggersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case triggers = "Triggers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggersContainer = try containerValues.decodeIfPresent([GlueClientTypes.Trigger?].self, forKey: .triggers)
        var triggersDecoded0:[GlueClientTypes.Trigger]? = nil
        if let triggersContainer = triggersContainer {
            triggersDecoded0 = [GlueClientTypes.Trigger]()
            for structure0 in triggersContainer {
                if let structure0 = structure0 {
                    triggersDecoded0?.append(structure0)
                }
            }
        }
        triggers = triggersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetUserDefinedFunctionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case functionName = "FunctionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let functionName = functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
    }
}

extension GetUserDefinedFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetUserDefinedFunctionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the function to be retrieved is located. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database where the function is located.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the function.
    /// This member is required.
    public var functionName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        functionName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.functionName = functionName
    }
}

struct GetUserDefinedFunctionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let functionName: Swift.String?
}

extension GetUserDefinedFunctionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case functionName = "FunctionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let functionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionName)
        functionName = functionNameDecoded
    }
}

extension GetUserDefinedFunctionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUserDefinedFunctionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetUserDefinedFunctionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUserDefinedFunctionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetUserDefinedFunctionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userDefinedFunction = output.userDefinedFunction
        } else {
            self.userDefinedFunction = nil
        }
    }
}

public struct GetUserDefinedFunctionOutputResponse: Swift.Equatable {
    /// The requested function definition.
    public var userDefinedFunction: GlueClientTypes.UserDefinedFunction?

    public init (
        userDefinedFunction: GlueClientTypes.UserDefinedFunction? = nil
    )
    {
        self.userDefinedFunction = userDefinedFunction
    }
}

struct GetUserDefinedFunctionOutputResponseBody: Swift.Equatable {
    let userDefinedFunction: GlueClientTypes.UserDefinedFunction?
}

extension GetUserDefinedFunctionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userDefinedFunction = "UserDefinedFunction"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userDefinedFunctionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UserDefinedFunction.self, forKey: .userDefinedFunction)
        userDefinedFunction = userDefinedFunctionDecoded
    }
}

extension GetUserDefinedFunctionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pattern = "Pattern"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pattern = pattern {
            try encodeContainer.encode(pattern, forKey: .pattern)
        }
    }
}

extension GetUserDefinedFunctionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetUserDefinedFunctionsInput: Swift.Equatable {
    /// The ID of the Data Catalog where the functions to be retrieved are located. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database where the functions are located. If none is provided, functions from all the databases across the catalog will be returned.
    public var databaseName: Swift.String?
    /// The maximum number of functions to return in one response.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?
    /// An optional function-name pattern string that filters the function definitions returned.
    /// This member is required.
    public var pattern: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pattern: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pattern = pattern
    }
}

struct GetUserDefinedFunctionsInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let pattern: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetUserDefinedFunctionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pattern = "Pattern"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let patternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pattern)
        pattern = patternDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetUserDefinedFunctionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUserDefinedFunctionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetUserDefinedFunctionsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUserDefinedFunctionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetUserDefinedFunctionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.userDefinedFunctions = output.userDefinedFunctions
        } else {
            self.nextToken = nil
            self.userDefinedFunctions = nil
        }
    }
}

public struct GetUserDefinedFunctionsOutputResponse: Swift.Equatable {
    /// A continuation token, if the list of functions returned does not include the last requested function.
    public var nextToken: Swift.String?
    /// A list of requested function definitions.
    public var userDefinedFunctions: [GlueClientTypes.UserDefinedFunction]?

    public init (
        nextToken: Swift.String? = nil,
        userDefinedFunctions: [GlueClientTypes.UserDefinedFunction]? = nil
    )
    {
        self.nextToken = nextToken
        self.userDefinedFunctions = userDefinedFunctions
    }
}

struct GetUserDefinedFunctionsOutputResponseBody: Swift.Equatable {
    let userDefinedFunctions: [GlueClientTypes.UserDefinedFunction]?
    let nextToken: Swift.String?
}

extension GetUserDefinedFunctionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case userDefinedFunctions = "UserDefinedFunctions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userDefinedFunctionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.UserDefinedFunction?].self, forKey: .userDefinedFunctions)
        var userDefinedFunctionsDecoded0:[GlueClientTypes.UserDefinedFunction]? = nil
        if let userDefinedFunctionsContainer = userDefinedFunctionsContainer {
            userDefinedFunctionsDecoded0 = [GlueClientTypes.UserDefinedFunction]()
            for structure0 in userDefinedFunctionsContainer {
                if let structure0 = structure0 {
                    userDefinedFunctionsDecoded0?.append(structure0)
                }
            }
        }
        userDefinedFunctions = userDefinedFunctionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetWorkflowInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeGraph = "IncludeGraph"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeGraph = includeGraph {
            try encodeContainer.encode(includeGraph, forKey: .includeGraph)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetWorkflowInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetWorkflowInput: Swift.Equatable {
    /// Specifies whether to include a graph when returning the workflow resource metadata.
    public var includeGraph: Swift.Bool?
    /// The name of the workflow to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init (
        includeGraph: Swift.Bool? = nil,
        name: Swift.String? = nil
    )
    {
        self.includeGraph = includeGraph
        self.name = name
    }
}

struct GetWorkflowInputBody: Swift.Equatable {
    let name: Swift.String?
    let includeGraph: Swift.Bool?
}

extension GetWorkflowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeGraph = "IncludeGraph"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let includeGraphDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeGraph)
        includeGraph = includeGraphDecoded
    }
}

extension GetWorkflowOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWorkflowOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetWorkflowOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWorkflowOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetWorkflowOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.workflow = output.workflow
        } else {
            self.workflow = nil
        }
    }
}

public struct GetWorkflowOutputResponse: Swift.Equatable {
    /// The resource metadata for the workflow.
    public var workflow: GlueClientTypes.Workflow?

    public init (
        workflow: GlueClientTypes.Workflow? = nil
    )
    {
        self.workflow = workflow
    }
}

struct GetWorkflowOutputResponseBody: Swift.Equatable {
    let workflow: GlueClientTypes.Workflow?
}

extension GetWorkflowOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workflow = "Workflow"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Workflow.self, forKey: .workflow)
        workflow = workflowDecoded
    }
}

extension GetWorkflowRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeGraph = "IncludeGraph"
        case name = "Name"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeGraph = includeGraph {
            try encodeContainer.encode(includeGraph, forKey: .includeGraph)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }
}

extension GetWorkflowRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetWorkflowRunInput: Swift.Equatable {
    /// Specifies whether to include the workflow graph in response or not.
    public var includeGraph: Swift.Bool?
    /// Name of the workflow being run.
    /// This member is required.
    public var name: Swift.String?
    /// The ID of the workflow run.
    /// This member is required.
    public var runId: Swift.String?

    public init (
        includeGraph: Swift.Bool? = nil,
        name: Swift.String? = nil,
        runId: Swift.String? = nil
    )
    {
        self.includeGraph = includeGraph
        self.name = name
        self.runId = runId
    }
}

struct GetWorkflowRunInputBody: Swift.Equatable {
    let name: Swift.String?
    let runId: Swift.String?
    let includeGraph: Swift.Bool?
}

extension GetWorkflowRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeGraph = "IncludeGraph"
        case name = "Name"
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let includeGraphDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeGraph)
        includeGraph = includeGraphDecoded
    }
}

extension GetWorkflowRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWorkflowRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetWorkflowRunOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWorkflowRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetWorkflowRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.run = output.run
        } else {
            self.run = nil
        }
    }
}

public struct GetWorkflowRunOutputResponse: Swift.Equatable {
    /// The requested workflow run metadata.
    public var run: GlueClientTypes.WorkflowRun?

    public init (
        run: GlueClientTypes.WorkflowRun? = nil
    )
    {
        self.run = run
    }
}

struct GetWorkflowRunOutputResponseBody: Swift.Equatable {
    let run: GlueClientTypes.WorkflowRun?
}

extension GetWorkflowRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case run = "Run"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkflowRun.self, forKey: .run)
        run = runDecoded
    }
}

extension GetWorkflowRunPropertiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }
}

extension GetWorkflowRunPropertiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetWorkflowRunPropertiesInput: Swift.Equatable {
    /// Name of the workflow which was run.
    /// This member is required.
    public var name: Swift.String?
    /// The ID of the workflow run whose run properties should be returned.
    /// This member is required.
    public var runId: Swift.String?

    public init (
        name: Swift.String? = nil,
        runId: Swift.String? = nil
    )
    {
        self.name = name
        self.runId = runId
    }
}

struct GetWorkflowRunPropertiesInputBody: Swift.Equatable {
    let name: Swift.String?
    let runId: Swift.String?
}

extension GetWorkflowRunPropertiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension GetWorkflowRunPropertiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWorkflowRunPropertiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetWorkflowRunPropertiesOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWorkflowRunPropertiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetWorkflowRunPropertiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.runProperties = output.runProperties
        } else {
            self.runProperties = nil
        }
    }
}

public struct GetWorkflowRunPropertiesOutputResponse: Swift.Equatable {
    /// The workflow run properties which were set during the specified run.
    public var runProperties: [Swift.String:Swift.String]?

    public init (
        runProperties: [Swift.String:Swift.String]? = nil
    )
    {
        self.runProperties = runProperties
    }
}

struct GetWorkflowRunPropertiesOutputResponseBody: Swift.Equatable {
    let runProperties: [Swift.String:Swift.String]?
}

extension GetWorkflowRunPropertiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case runProperties = "RunProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .runProperties)
        var runPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let runPropertiesContainer = runPropertiesContainer {
            runPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in runPropertiesContainer {
                if let genericstring0 = genericstring0 {
                    runPropertiesDecoded0?[key0] = genericstring0
                }
            }
        }
        runProperties = runPropertiesDecoded0
    }
}

extension GetWorkflowRunsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeGraph = "IncludeGraph"
        case maxResults = "MaxResults"
        case name = "Name"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeGraph = includeGraph {
            try encodeContainer.encode(includeGraph, forKey: .includeGraph)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetWorkflowRunsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetWorkflowRunsInput: Swift.Equatable {
    /// Specifies whether to include the workflow graph in response or not.
    public var includeGraph: Swift.Bool?
    /// The maximum number of workflow runs to be included in the response.
    public var maxResults: Swift.Int?
    /// Name of the workflow whose metadata of runs should be returned.
    /// This member is required.
    public var name: Swift.String?
    /// The maximum size of the response.
    public var nextToken: Swift.String?

    public init (
        includeGraph: Swift.Bool? = nil,
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.includeGraph = includeGraph
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

struct GetWorkflowRunsInputBody: Swift.Equatable {
    let name: Swift.String?
    let includeGraph: Swift.Bool?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetWorkflowRunsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeGraph = "IncludeGraph"
        case maxResults = "MaxResults"
        case name = "Name"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let includeGraphDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeGraph)
        includeGraph = includeGraphDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetWorkflowRunsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWorkflowRunsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetWorkflowRunsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWorkflowRunsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetWorkflowRunsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.runs = output.runs
        } else {
            self.nextToken = nil
            self.runs = nil
        }
    }
}

public struct GetWorkflowRunsOutputResponse: Swift.Equatable {
    /// A continuation token, if not all requested workflow runs have been returned.
    public var nextToken: Swift.String?
    /// A list of workflow run metadata objects.
    public var runs: [GlueClientTypes.WorkflowRun]?

    public init (
        nextToken: Swift.String? = nil,
        runs: [GlueClientTypes.WorkflowRun]? = nil
    )
    {
        self.nextToken = nextToken
        self.runs = runs
    }
}

struct GetWorkflowRunsOutputResponseBody: Swift.Equatable {
    let runs: [GlueClientTypes.WorkflowRun]?
    let nextToken: Swift.String?
}

extension GetWorkflowRunsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case runs = "Runs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runsContainer = try containerValues.decodeIfPresent([GlueClientTypes.WorkflowRun?].self, forKey: .runs)
        var runsDecoded0:[GlueClientTypes.WorkflowRun]? = nil
        if let runsContainer = runsContainer {
            runsDecoded0 = [GlueClientTypes.WorkflowRun]()
            for structure0 in runsContainer {
                if let structure0 = structure0 {
                    runsDecoded0?.append(structure0)
                }
            }
        }
        runs = runsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GlueEncryptionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GlueEncryptionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An encryption operation failed.
public struct GlueEncryptionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GlueEncryptionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension GlueEncryptionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.GluePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime = "CreateTime"
        case policyHash = "PolicyHash"
        case policyInJson = "PolicyInJson"
        case updateTime = "UpdateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let policyHash = policyHash {
            try encodeContainer.encode(policyHash, forKey: .policyHash)
        }
        if let policyInJson = policyInJson {
            try encodeContainer.encode(policyInJson, forKey: .policyInJson)
        }
        if let updateTime = updateTime {
            try encodeContainer.encode(updateTime.timeIntervalSince1970, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyInJsonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyInJson)
        policyInJson = policyInJsonDecoded
        let policyHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyHash)
        policyHash = policyHashDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateTime)
        updateTime = updateTimeDecoded
    }
}

extension GlueClientTypes {
    /// A structure for returning a resource policy.
    public struct GluePolicy: Swift.Equatable {
        /// The date and time at which the policy was created.
        public var createTime: ClientRuntime.Date?
        /// Contains the hash value associated with this policy.
        public var policyHash: Swift.String?
        /// Contains the requested policy document, in JSON format.
        public var policyInJson: Swift.String?
        /// The date and time at which the policy was last updated.
        public var updateTime: ClientRuntime.Date?

        public init (
            createTime: ClientRuntime.Date? = nil,
            policyHash: Swift.String? = nil,
            policyInJson: Swift.String? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.createTime = createTime
            self.policyHash = policyHash
            self.policyInJson = policyInJson
            self.updateTime = updateTime
        }
    }

}

extension GlueClientTypes.GlueTable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case connectionName = "ConnectionName"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
    }
}

extension GlueClientTypes {
    /// The database and table in the Glue Data Catalog that is used for input or output data.
    public struct GlueTable: Swift.Equatable {
        /// A unique identifier for the Glue Data Catalog.
        public var catalogId: Swift.String?
        /// The name of the connection to the Glue Data Catalog.
        public var connectionName: Swift.String?
        /// A database name in the Glue Data Catalog.
        /// This member is required.
        public var databaseName: Swift.String?
        /// A table name in the Glue Data Catalog.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            catalogId: Swift.String? = nil,
            connectionName: Swift.String? = nil,
            databaseName: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.catalogId = catalogId
            self.connectionName = connectionName
            self.databaseName = databaseName
            self.tableName = tableName
        }
    }

}

extension GlueClientTypes.GrokClassifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classification = "Classification"
        case creationTime = "CreationTime"
        case customPatterns = "CustomPatterns"
        case grokPattern = "GrokPattern"
        case lastUpdated = "LastUpdated"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classification = classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let customPatterns = customPatterns {
            try encodeContainer.encode(customPatterns, forKey: .customPatterns)
        }
        if let grokPattern = grokPattern {
            try encodeContainer.encode(grokPattern, forKey: .grokPattern)
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let grokPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grokPattern)
        grokPattern = grokPatternDecoded
        let customPatternsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customPatterns)
        customPatterns = customPatternsDecoded
    }
}

extension GlueClientTypes {
    /// A classifier that uses grok patterns.
    public struct GrokClassifier: Swift.Equatable {
        /// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and so on.
        /// This member is required.
        public var classification: Swift.String?
        /// The time that this classifier was registered.
        public var creationTime: ClientRuntime.Date?
        /// Optional custom grok patterns defined by this classifier. For more information, see custom patterns in [Writing Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html).
        public var customPatterns: Swift.String?
        /// The grok pattern applied to a data store by this classifier. For more information, see built-in patterns in [Writing Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html).
        /// This member is required.
        public var grokPattern: Swift.String?
        /// The time that this classifier was last updated.
        public var lastUpdated: ClientRuntime.Date?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?
        /// The version of this classifier.
        public var version: Swift.Int

        public init (
            classification: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            customPatterns: Swift.String? = nil,
            grokPattern: Swift.String? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            version: Swift.Int = 0
        )
        {
            self.classification = classification
            self.creationTime = creationTime
            self.customPatterns = customPatterns
            self.grokPattern = grokPattern
            self.lastUpdated = lastUpdated
            self.name = name
            self.version = version
        }
    }

}

extension IdempotentParameterMismatchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IdempotentParameterMismatchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The same unique identifier was associated with two different records.
public struct IdempotentParameterMismatchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IdempotentParameterMismatchExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IdempotentParameterMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IllegalBlueprintStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IllegalBlueprintStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

public struct IllegalBlueprintStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IllegalBlueprintStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IllegalBlueprintStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IllegalWorkflowStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IllegalWorkflowStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The workflow is in an invalid state to perform a requested operation.
public struct IllegalWorkflowStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IllegalWorkflowStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IllegalWorkflowStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ImportCatalogToGlueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
    }
}

extension ImportCatalogToGlueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ImportCatalogToGlueInput: Swift.Equatable {
    /// The ID of the catalog to import. Currently, this should be the Amazon Web Services account ID.
    public var catalogId: Swift.String?

    public init (
        catalogId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
    }
}

struct ImportCatalogToGlueInputBody: Swift.Equatable {
    let catalogId: Swift.String?
}

extension ImportCatalogToGlueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
    }
}

extension ImportCatalogToGlueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ImportCatalogToGlueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ImportCatalogToGlueOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ImportCatalogToGlueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ImportCatalogToGlueOutputResponse: Swift.Equatable {

}

extension GlueClientTypes.ImportLabelsTaskRunProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputS3Path = "InputS3Path"
        case replace = "Replace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputS3Path = inputS3Path {
            try encodeContainer.encode(inputS3Path, forKey: .inputS3Path)
        }
        if replace != false {
            try encodeContainer.encode(replace, forKey: .replace)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputS3Path)
        inputS3Path = inputS3PathDecoded
        let replaceDecoded = try containerValues.decode(Swift.Bool.self, forKey: .replace)
        replace = replaceDecoded
    }
}

extension GlueClientTypes {
    /// Specifies configuration properties for an importing labels task run.
    public struct ImportLabelsTaskRunProperties: Swift.Equatable {
        /// The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.
        public var inputS3Path: Swift.String?
        /// Indicates whether to overwrite your existing labels.
        public var replace: Swift.Bool

        public init (
            inputS3Path: Swift.String? = nil,
            replace: Swift.Bool = false
        )
        {
            self.inputS3Path = inputS3Path
            self.replace = replace
        }
    }

}

extension InternalServiceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An internal service error occurred.
public struct InternalServiceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInputException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input provided was not valid.
public struct InvalidInputException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error that indicates your data is in an invalid state.
public struct InvalidStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.JdbcTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionName = "ConnectionName"
        case exclusions = "Exclusions"
        case path = "Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let exclusions = exclusions {
            var exclusionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusions)
            for pathlist0 in exclusions {
                try exclusionsContainer.encode(pathlist0)
            }
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let exclusionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusions)
        var exclusionsDecoded0:[Swift.String]? = nil
        if let exclusionsContainer = exclusionsContainer {
            exclusionsDecoded0 = [Swift.String]()
            for string0 in exclusionsContainer {
                if let string0 = string0 {
                    exclusionsDecoded0?.append(string0)
                }
            }
        }
        exclusions = exclusionsDecoded0
    }
}

extension GlueClientTypes {
    /// Specifies a JDBC data store to crawl.
    public struct JdbcTarget: Swift.Equatable {
        /// The name of the connection to use to connect to the JDBC target.
        public var connectionName: Swift.String?
        /// A list of glob patterns used to exclude from the crawl. For more information, see [Catalog Tables with a Crawler](https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html).
        public var exclusions: [Swift.String]?
        /// The path of the JDBC target.
        public var path: Swift.String?

        public init (
            connectionName: Swift.String? = nil,
            exclusions: [Swift.String]? = nil,
            path: Swift.String? = nil
        )
        {
            self.connectionName = connectionName
            self.exclusions = exclusions
            self.path = path
        }
    }

}

extension GlueClientTypes.Job: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case command = "Command"
        case connections = "Connections"
        case createdOn = "CreatedOn"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case executionProperty = "ExecutionProperty"
        case glueVersion = "GlueVersion"
        case lastModifiedOn = "LastModifiedOn"
        case logUri = "LogUri"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case nonOverridableArguments = "NonOverridableArguments"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedCapacity != 0 {
            try encodeContainer.encode(allocatedCapacity, forKey: .allocatedCapacity)
        }
        if let command = command {
            try encodeContainer.encode(command, forKey: .command)
        }
        if let connections = connections {
            try encodeContainer.encode(connections, forKey: .connections)
        }
        if let createdOn = createdOn {
            try encodeContainer.encode(createdOn.timeIntervalSince1970, forKey: .createdOn)
        }
        if let defaultArguments = defaultArguments {
            var defaultArgumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .defaultArguments)
            for (dictKey0, genericmap0) in defaultArguments {
                try defaultArgumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let executionProperty = executionProperty {
            try encodeContainer.encode(executionProperty, forKey: .executionProperty)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let logUri = logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if maxRetries != 0 {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nonOverridableArguments = nonOverridableArguments {
            var nonOverridableArgumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .nonOverridableArguments)
            for (dictKey0, genericmap0) in nonOverridableArguments {
                try nonOverridableArgumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let notificationProperty = notificationProperty {
            try encodeContainer.encode(notificationProperty, forKey: .notificationProperty)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let createdOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let executionPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ExecutionProperty.self, forKey: .executionProperty)
        executionProperty = executionPropertyDecoded
        let commandDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobCommand.self, forKey: .command)
        command = commandDecoded
        let defaultArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .defaultArguments)
        var defaultArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let defaultArgumentsContainer = defaultArgumentsContainer {
            defaultArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in defaultArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    defaultArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        defaultArguments = defaultArgumentsDecoded0
        let nonOverridableArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .nonOverridableArguments)
        var nonOverridableArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let nonOverridableArgumentsContainer = nonOverridableArgumentsContainer {
            nonOverridableArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in nonOverridableArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    nonOverridableArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        nonOverridableArguments = nonOverridableArgumentsDecoded0
        let connectionsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionsList.self, forKey: .connections)
        connections = connectionsDecoded
        let maxRetriesDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let allocatedCapacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedCapacity)
        allocatedCapacity = allocatedCapacityDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a job definition.
    public struct Job: Swift.Equatable {
        /// This field is deprecated. Use MaxCapacity instead. The number of Glue data processing units (DPUs) allocated to runs of this job. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/).
        @available(*, deprecated, message: "This property is deprecated, use MaxCapacity instead.")
        public var allocatedCapacity: Swift.Int
        /// The JobCommand that runs this job.
        public var command: GlueClientTypes.JobCommand?
        /// The connections used for this job.
        public var connections: GlueClientTypes.ConnectionsList?
        /// The time and date that this job definition was created.
        public var createdOn: ClientRuntime.Date?
        /// The default arguments for this job, specified as name-value pairs. You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling Glue APIs in Python](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that Glue consumes to set up your job, see the [Special Parameters Used by Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) topic in the developer guide.
        public var defaultArguments: [Swift.String:Swift.String]?
        /// A description of the job.
        public var description: Swift.String?
        /// An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
        public var executionProperty: GlueClientTypes.ExecutionProperty?
        /// Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. For more information about the available Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide. Jobs that are created without specifying a Glue version default to Glue 0.9.
        public var glueVersion: Swift.String?
        /// The last point in time when this job definition was modified.
        public var lastModifiedOn: ClientRuntime.Date?
        /// This field is reserved for future use.
        public var logUri: Swift.String?
        /// For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/). Do not set Max Capacity if using WorkerType and NumberOfWorkers. The value that can be allocated for MaxCapacity depends on whether you are running a Python shell job, an Apache Spark ETL job, or an Apache Spark streaming ETL job:
        ///
        /// * When you specify a Python shell job (JobCommand.Name="pythonshell"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.
        ///
        /// * When you specify an Apache Spark ETL job (JobCommand.Name="glueetl") or Apache Spark streaming ETL job (JobCommand.Name="gluestreaming"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.
        ///
        ///
        /// For Glue version 2.0 jobs, you cannot instead specify a Maximum capacity. Instead, you should specify a Worker type and the Number of workers.
        public var maxCapacity: Swift.Double?
        /// The maximum number of times to retry this job after a JobRun fails.
        public var maxRetries: Swift.Int
        /// The name you assign to this job definition.
        public var name: Swift.String?
        /// Non-overridable arguments for this job, specified as name-value pairs.
        public var nonOverridableArguments: [Swift.String:Swift.String]?
        /// Specifies configuration properties of a job notification.
        public var notificationProperty: GlueClientTypes.NotificationProperty?
        /// The number of workers of a defined workerType that are allocated when a job runs. The maximum number of workers you can define are 299 for G.1X, and 149 for G.2X.
        public var numberOfWorkers: Swift.Int?
        /// The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
        public var role: Swift.String?
        /// The name of the SecurityConfiguration structure to be used with this job.
        public var securityConfiguration: Swift.String?
        /// The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
        public var timeout: Swift.Int?
        /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.
        ///
        /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
        ///
        /// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
        ///
        /// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
        public var workerType: GlueClientTypes.WorkerType?

        public init (
            allocatedCapacity: Swift.Int = 0,
            command: GlueClientTypes.JobCommand? = nil,
            connections: GlueClientTypes.ConnectionsList? = nil,
            createdOn: ClientRuntime.Date? = nil,
            defaultArguments: [Swift.String:Swift.String]? = nil,
            description: Swift.String? = nil,
            executionProperty: GlueClientTypes.ExecutionProperty? = nil,
            glueVersion: Swift.String? = nil,
            lastModifiedOn: ClientRuntime.Date? = nil,
            logUri: Swift.String? = nil,
            maxCapacity: Swift.Double? = nil,
            maxRetries: Swift.Int = 0,
            name: Swift.String? = nil,
            nonOverridableArguments: [Swift.String:Swift.String]? = nil,
            notificationProperty: GlueClientTypes.NotificationProperty? = nil,
            numberOfWorkers: Swift.Int? = nil,
            role: Swift.String? = nil,
            securityConfiguration: Swift.String? = nil,
            timeout: Swift.Int? = nil,
            workerType: GlueClientTypes.WorkerType? = nil
        )
        {
            self.allocatedCapacity = allocatedCapacity
            self.command = command
            self.connections = connections
            self.createdOn = createdOn
            self.defaultArguments = defaultArguments
            self.description = description
            self.executionProperty = executionProperty
            self.glueVersion = glueVersion
            self.lastModifiedOn = lastModifiedOn
            self.logUri = logUri
            self.maxCapacity = maxCapacity
            self.maxRetries = maxRetries
            self.name = name
            self.nonOverridableArguments = nonOverridableArguments
            self.notificationProperty = notificationProperty
            self.numberOfWorkers = numberOfWorkers
            self.role = role
            self.securityConfiguration = securityConfiguration
            self.timeout = timeout
            self.workerType = workerType
        }
    }

}

extension GlueClientTypes.JobBookmarkEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attempt = "Attempt"
        case jobBookmark = "JobBookmark"
        case jobName = "JobName"
        case previousRunId = "PreviousRunId"
        case run = "Run"
        case runId = "RunId"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if attempt != 0 {
            try encodeContainer.encode(attempt, forKey: .attempt)
        }
        if let jobBookmark = jobBookmark {
            try encodeContainer.encode(jobBookmark, forKey: .jobBookmark)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let previousRunId = previousRunId {
            try encodeContainer.encode(previousRunId, forKey: .previousRunId)
        }
        if run != 0 {
            try encodeContainer.encode(run, forKey: .run)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let runDecoded = try containerValues.decode(Swift.Int.self, forKey: .run)
        run = runDecoded
        let attemptDecoded = try containerValues.decode(Swift.Int.self, forKey: .attempt)
        attempt = attemptDecoded
        let previousRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousRunId)
        previousRunId = previousRunIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let jobBookmarkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobBookmark)
        jobBookmark = jobBookmarkDecoded
    }
}

extension GlueClientTypes {
    /// Defines a point that a job can resume processing.
    public struct JobBookmarkEntry: Swift.Equatable {
        /// The attempt ID number.
        public var attempt: Swift.Int
        /// The bookmark itself.
        public var jobBookmark: Swift.String?
        /// The name of the job in question.
        public var jobName: Swift.String?
        /// The unique run identifier associated with the previous job run.
        public var previousRunId: Swift.String?
        /// The run ID number.
        public var run: Swift.Int
        /// The run ID number.
        public var runId: Swift.String?
        /// The version of the job.
        public var version: Swift.Int

        public init (
            attempt: Swift.Int = 0,
            jobBookmark: Swift.String? = nil,
            jobName: Swift.String? = nil,
            previousRunId: Swift.String? = nil,
            run: Swift.Int = 0,
            runId: Swift.String? = nil,
            version: Swift.Int = 0
        )
        {
            self.attempt = attempt
            self.jobBookmark = jobBookmark
            self.jobName = jobName
            self.previousRunId = previousRunId
            self.run = run
            self.runId = runId
            self.version = version
        }
    }

}

extension GlueClientTypes.JobBookmarksEncryption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobBookmarksEncryptionMode = "JobBookmarksEncryptionMode"
        case kmsKeyArn = "KmsKeyArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobBookmarksEncryptionMode = jobBookmarksEncryptionMode {
            try encodeContainer.encode(jobBookmarksEncryptionMode.rawValue, forKey: .jobBookmarksEncryptionMode)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobBookmarksEncryptionModeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobBookmarksEncryptionMode.self, forKey: .jobBookmarksEncryptionMode)
        jobBookmarksEncryptionMode = jobBookmarksEncryptionModeDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}

extension GlueClientTypes {
    /// Specifies how job bookmark data should be encrypted.
    public struct JobBookmarksEncryption: Swift.Equatable {
        /// The encryption mode to use for job bookmarks data.
        public var jobBookmarksEncryptionMode: GlueClientTypes.JobBookmarksEncryptionMode?
        /// The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
        public var kmsKeyArn: Swift.String?

        public init (
            jobBookmarksEncryptionMode: GlueClientTypes.JobBookmarksEncryptionMode? = nil,
            kmsKeyArn: Swift.String? = nil
        )
        {
            self.jobBookmarksEncryptionMode = jobBookmarksEncryptionMode
            self.kmsKeyArn = kmsKeyArn
        }
    }

}

extension GlueClientTypes {
    public enum JobBookmarksEncryptionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csekms
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [JobBookmarksEncryptionMode] {
            return [
                .csekms,
                .disabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csekms: return "CSE-KMS"
            case .disabled: return "DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobBookmarksEncryptionMode(rawValue: rawValue) ?? JobBookmarksEncryptionMode.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.JobCommand: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case pythonVersion = "PythonVersion"
        case scriptLocation = "ScriptLocation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pythonVersion = pythonVersion {
            try encodeContainer.encode(pythonVersion, forKey: .pythonVersion)
        }
        if let scriptLocation = scriptLocation {
            try encodeContainer.encode(scriptLocation, forKey: .scriptLocation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scriptLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptLocation)
        scriptLocation = scriptLocationDecoded
        let pythonVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pythonVersion)
        pythonVersion = pythonVersionDecoded
    }
}

extension GlueClientTypes {
    /// Specifies code that runs when a job is run.
    public struct JobCommand: Swift.Equatable {
        /// The name of the job command. For an Apache Spark ETL job, this must be glueetl. For a Python shell job, it must be pythonshell. For an Apache Spark streaming ETL job, this must be gluestreaming.
        public var name: Swift.String?
        /// The Python version being used to run a Python shell job. Allowed values are 2 or 3.
        public var pythonVersion: Swift.String?
        /// Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that runs a job.
        public var scriptLocation: Swift.String?

        public init (
            name: Swift.String? = nil,
            pythonVersion: Swift.String? = nil,
            scriptLocation: Swift.String? = nil
        )
        {
            self.name = name
            self.pythonVersion = pythonVersion
            self.scriptLocation = scriptLocation
        }
    }

}

extension GlueClientTypes.JobNodeDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobRuns = "JobRuns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobRuns = jobRuns {
            var jobRunsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobRuns)
            for jobrunlist0 in jobRuns {
                try jobRunsContainer.encode(jobrunlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobRunsContainer = try containerValues.decodeIfPresent([GlueClientTypes.JobRun?].self, forKey: .jobRuns)
        var jobRunsDecoded0:[GlueClientTypes.JobRun]? = nil
        if let jobRunsContainer = jobRunsContainer {
            jobRunsDecoded0 = [GlueClientTypes.JobRun]()
            for structure0 in jobRunsContainer {
                if let structure0 = structure0 {
                    jobRunsDecoded0?.append(structure0)
                }
            }
        }
        jobRuns = jobRunsDecoded0
    }
}

extension GlueClientTypes {
    /// The details of a Job node present in the workflow.
    public struct JobNodeDetails: Swift.Equatable {
        /// The information for the job runs represented by the job node.
        public var jobRuns: [GlueClientTypes.JobRun]?

        public init (
            jobRuns: [GlueClientTypes.JobRun]? = nil
        )
        {
            self.jobRuns = jobRuns
        }
    }

}

extension GlueClientTypes.JobRun: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case arguments = "Arguments"
        case attempt = "Attempt"
        case completedOn = "CompletedOn"
        case errorMessage = "ErrorMessage"
        case executionTime = "ExecutionTime"
        case glueVersion = "GlueVersion"
        case id = "Id"
        case jobName = "JobName"
        case jobRunState = "JobRunState"
        case lastModifiedOn = "LastModifiedOn"
        case logGroupName = "LogGroupName"
        case maxCapacity = "MaxCapacity"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case predecessorRuns = "PredecessorRuns"
        case previousRunId = "PreviousRunId"
        case securityConfiguration = "SecurityConfiguration"
        case startedOn = "StartedOn"
        case timeout = "Timeout"
        case triggerName = "TriggerName"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedCapacity != 0 {
            try encodeContainer.encode(allocatedCapacity, forKey: .allocatedCapacity)
        }
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .arguments)
            for (dictKey0, genericmap0) in arguments {
                try argumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if attempt != 0 {
            try encodeContainer.encode(attempt, forKey: .attempt)
        }
        if let completedOn = completedOn {
            try encodeContainer.encode(completedOn.timeIntervalSince1970, forKey: .completedOn)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if executionTime != 0 {
            try encodeContainer.encode(executionTime, forKey: .executionTime)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobRunState = jobRunState {
            try encodeContainer.encode(jobRunState.rawValue, forKey: .jobRunState)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let notificationProperty = notificationProperty {
            try encodeContainer.encode(notificationProperty, forKey: .notificationProperty)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let predecessorRuns = predecessorRuns {
            var predecessorRunsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .predecessorRuns)
            for predecessorlist0 in predecessorRuns {
                try predecessorRunsContainer.encode(predecessorlist0)
            }
        }
        if let previousRunId = previousRunId {
            try encodeContainer.encode(previousRunId, forKey: .previousRunId)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let startedOn = startedOn {
            try encodeContainer.encode(startedOn.timeIntervalSince1970, forKey: .startedOn)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let triggerName = triggerName {
            try encodeContainer.encode(triggerName, forKey: .triggerName)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let attemptDecoded = try containerValues.decode(Swift.Int.self, forKey: .attempt)
        attempt = attemptDecoded
        let previousRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousRunId)
        previousRunId = previousRunIdDecoded
        let triggerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .triggerName)
        triggerName = triggerNameDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let jobRunStateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobRunState.self, forKey: .jobRunState)
        jobRunState = jobRunStateDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .arguments)
        var argumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in argumentsContainer {
                if let genericstring0 = genericstring0 {
                    argumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        arguments = argumentsDecoded0
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let predecessorRunsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Predecessor?].self, forKey: .predecessorRuns)
        var predecessorRunsDecoded0:[GlueClientTypes.Predecessor]? = nil
        if let predecessorRunsContainer = predecessorRunsContainer {
            predecessorRunsDecoded0 = [GlueClientTypes.Predecessor]()
            for structure0 in predecessorRunsContainer {
                if let structure0 = structure0 {
                    predecessorRunsDecoded0?.append(structure0)
                }
            }
        }
        predecessorRuns = predecessorRunsDecoded0
        let allocatedCapacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedCapacity)
        allocatedCapacity = allocatedCapacityDecoded
        let executionTimeDecoded = try containerValues.decode(Swift.Int.self, forKey: .executionTime)
        executionTime = executionTimeDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
    }
}

extension GlueClientTypes {
    /// Contains information about a job run.
    public struct JobRun: Swift.Equatable {
        /// This field is deprecated. Use MaxCapacity instead. The number of Glue data processing units (DPUs) allocated to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/).
        @available(*, deprecated, message: "This property is deprecated, use MaxCapacity instead.")
        public var allocatedCapacity: Swift.Int
        /// The job arguments associated with this run. For this job run, they replace the default arguments set in the job definition itself. You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes. For information about how to specify and consume your own job arguments, see the [Calling Glue APIs in Python](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that Glue consumes to set up your job, see the [Special Parameters Used by Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) topic in the developer guide.
        public var arguments: [Swift.String:Swift.String]?
        /// The number of the attempt to run this job.
        public var attempt: Swift.Int
        /// The date and time that this job run completed.
        public var completedOn: ClientRuntime.Date?
        /// An error message associated with this job run.
        public var errorMessage: Swift.String?
        /// The amount of time (in seconds) that the job run consumed resources.
        public var executionTime: Swift.Int
        /// Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. For more information about the available Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide. Jobs that are created without specifying a Glue version default to Glue 0.9.
        public var glueVersion: Swift.String?
        /// The ID of this job run.
        public var id: Swift.String?
        /// The name of the job definition being used in this run.
        public var jobName: Swift.String?
        /// The current state of the job run. For more information about the statuses of jobs that have terminated abnormally, see [Glue Job Run Statuses](https://docs.aws.amazon.com/glue/latest/dg/job-run-statuses.html).
        public var jobRunState: GlueClientTypes.JobRunState?
        /// The last time that this job run was modified.
        public var lastModifiedOn: ClientRuntime.Date?
        /// The name of the log group for secure logging that can be server-side encrypted in Amazon CloudWatch using KMS. This name can be /aws-glue/jobs/, in which case the default encryption is NONE. If you add a role name and SecurityConfiguration name (in other words, /aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/), then that security configuration is used to encrypt the log group.
        public var logGroupName: Swift.String?
        /// The number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/). Do not set Max Capacity if using WorkerType and NumberOfWorkers. The value that can be allocated for MaxCapacity depends on whether you are running a Python shell job or an Apache Spark ETL job:
        ///
        /// * When you specify a Python shell job (JobCommand.Name="pythonshell"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.
        ///
        /// * When you specify an Apache Spark ETL job (JobCommand.Name="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.
        public var maxCapacity: Swift.Double?
        /// Specifies configuration properties of a job run notification.
        public var notificationProperty: GlueClientTypes.NotificationProperty?
        /// The number of workers of a defined workerType that are allocated when a job runs. The maximum number of workers you can define are 299 for G.1X, and 149 for G.2X.
        public var numberOfWorkers: Swift.Int?
        /// A list of predecessors to this job run.
        public var predecessorRuns: [GlueClientTypes.Predecessor]?
        /// The ID of the previous run of this job. For example, the JobRunId specified in the StartJobRun action.
        public var previousRunId: Swift.String?
        /// The name of the SecurityConfiguration structure to be used with this job run.
        public var securityConfiguration: Swift.String?
        /// The date and time at which this job run was started.
        public var startedOn: ClientRuntime.Date?
        /// The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
        public var timeout: Swift.Int?
        /// The name of the trigger that started this job run.
        public var triggerName: Swift.String?
        /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.
        ///
        /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
        ///
        /// * For the G.1X worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
        ///
        /// * For the G.2X worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
        public var workerType: GlueClientTypes.WorkerType?

        public init (
            allocatedCapacity: Swift.Int = 0,
            arguments: [Swift.String:Swift.String]? = nil,
            attempt: Swift.Int = 0,
            completedOn: ClientRuntime.Date? = nil,
            errorMessage: Swift.String? = nil,
            executionTime: Swift.Int = 0,
            glueVersion: Swift.String? = nil,
            id: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobRunState: GlueClientTypes.JobRunState? = nil,
            lastModifiedOn: ClientRuntime.Date? = nil,
            logGroupName: Swift.String? = nil,
            maxCapacity: Swift.Double? = nil,
            notificationProperty: GlueClientTypes.NotificationProperty? = nil,
            numberOfWorkers: Swift.Int? = nil,
            predecessorRuns: [GlueClientTypes.Predecessor]? = nil,
            previousRunId: Swift.String? = nil,
            securityConfiguration: Swift.String? = nil,
            startedOn: ClientRuntime.Date? = nil,
            timeout: Swift.Int? = nil,
            triggerName: Swift.String? = nil,
            workerType: GlueClientTypes.WorkerType? = nil
        )
        {
            self.allocatedCapacity = allocatedCapacity
            self.arguments = arguments
            self.attempt = attempt
            self.completedOn = completedOn
            self.errorMessage = errorMessage
            self.executionTime = executionTime
            self.glueVersion = glueVersion
            self.id = id
            self.jobName = jobName
            self.jobRunState = jobRunState
            self.lastModifiedOn = lastModifiedOn
            self.logGroupName = logGroupName
            self.maxCapacity = maxCapacity
            self.notificationProperty = notificationProperty
            self.numberOfWorkers = numberOfWorkers
            self.predecessorRuns = predecessorRuns
            self.previousRunId = previousRunId
            self.securityConfiguration = securityConfiguration
            self.startedOn = startedOn
            self.timeout = timeout
            self.triggerName = triggerName
            self.workerType = workerType
        }
    }

}

extension GlueClientTypes {
    public enum JobRunState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case running
        case starting
        case stopped
        case stopping
        case succeeded
        case timeout
        case sdkUnknown(Swift.String)

        public static var allCases: [JobRunState] {
            return [
                .failed,
                .running,
                .starting,
                .stopped,
                .stopping,
                .succeeded,
                .timeout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .succeeded: return "SUCCEEDED"
            case .timeout: return "TIMEOUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobRunState(rawValue: rawValue) ?? JobRunState.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.JobUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case command = "Command"
        case connections = "Connections"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case executionProperty = "ExecutionProperty"
        case glueVersion = "GlueVersion"
        case logUri = "LogUri"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case nonOverridableArguments = "NonOverridableArguments"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedCapacity != 0 {
            try encodeContainer.encode(allocatedCapacity, forKey: .allocatedCapacity)
        }
        if let command = command {
            try encodeContainer.encode(command, forKey: .command)
        }
        if let connections = connections {
            try encodeContainer.encode(connections, forKey: .connections)
        }
        if let defaultArguments = defaultArguments {
            var defaultArgumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .defaultArguments)
            for (dictKey0, genericmap0) in defaultArguments {
                try defaultArgumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let executionProperty = executionProperty {
            try encodeContainer.encode(executionProperty, forKey: .executionProperty)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let logUri = logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if maxRetries != 0 {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let nonOverridableArguments = nonOverridableArguments {
            var nonOverridableArgumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .nonOverridableArguments)
            for (dictKey0, genericmap0) in nonOverridableArguments {
                try nonOverridableArgumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let notificationProperty = notificationProperty {
            try encodeContainer.encode(notificationProperty, forKey: .notificationProperty)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let executionPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ExecutionProperty.self, forKey: .executionProperty)
        executionProperty = executionPropertyDecoded
        let commandDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobCommand.self, forKey: .command)
        command = commandDecoded
        let defaultArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .defaultArguments)
        var defaultArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let defaultArgumentsContainer = defaultArgumentsContainer {
            defaultArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in defaultArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    defaultArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        defaultArguments = defaultArgumentsDecoded0
        let nonOverridableArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .nonOverridableArguments)
        var nonOverridableArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let nonOverridableArgumentsContainer = nonOverridableArgumentsContainer {
            nonOverridableArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in nonOverridableArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    nonOverridableArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        nonOverridableArguments = nonOverridableArgumentsDecoded0
        let connectionsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionsList.self, forKey: .connections)
        connections = connectionsDecoded
        let maxRetriesDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let allocatedCapacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedCapacity)
        allocatedCapacity = allocatedCapacityDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
    }
}

extension GlueClientTypes {
    /// Specifies information used to update an existing job definition. The previous job definition is completely overwritten by this information.
    public struct JobUpdate: Swift.Equatable {
        /// This field is deprecated. Use MaxCapacity instead. The number of Glue data processing units (DPUs) to allocate to this job. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/).
        @available(*, deprecated, message: "This property is deprecated, use MaxCapacity instead.")
        public var allocatedCapacity: Swift.Int
        /// The JobCommand that runs this job (required).
        public var command: GlueClientTypes.JobCommand?
        /// The connections used for this job.
        public var connections: GlueClientTypes.ConnectionsList?
        /// The default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling Glue APIs in Python](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that Glue consumes to set up your job, see the [Special Parameters Used by Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) topic in the developer guide.
        public var defaultArguments: [Swift.String:Swift.String]?
        /// Description of the job being defined.
        public var description: Swift.String?
        /// An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
        public var executionProperty: GlueClientTypes.ExecutionProperty?
        /// Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. For more information about the available Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide.
        public var glueVersion: Swift.String?
        /// This field is reserved for future use.
        public var logUri: Swift.String?
        /// For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/). Do not set Max Capacity if using WorkerType and NumberOfWorkers. The value that can be allocated for MaxCapacity depends on whether you are running a Python shell job or an Apache Spark ETL job:
        ///
        /// * When you specify a Python shell job (JobCommand.Name="pythonshell"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.
        ///
        /// * When you specify an Apache Spark ETL job (JobCommand.Name="glueetl") or Apache Spark streaming ETL job (JobCommand.Name="gluestreaming"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.
        ///
        ///
        /// For Glue version 2.0 jobs, you cannot instead specify a Maximum capacity. Instead, you should specify a Worker type and the Number of workers.
        public var maxCapacity: Swift.Double?
        /// The maximum number of times to retry this job if it fails.
        public var maxRetries: Swift.Int
        /// Non-overridable arguments for this job, specified as name-value pairs.
        public var nonOverridableArguments: [Swift.String:Swift.String]?
        /// Specifies the configuration properties of a job notification.
        public var notificationProperty: GlueClientTypes.NotificationProperty?
        /// The number of workers of a defined workerType that are allocated when a job runs. The maximum number of workers you can define are 299 for G.1X, and 149 for G.2X.
        public var numberOfWorkers: Swift.Int?
        /// The name or Amazon Resource Name (ARN) of the IAM role associated with this job (required).
        public var role: Swift.String?
        /// The name of the SecurityConfiguration structure to be used with this job.
        public var securityConfiguration: Swift.String?
        /// The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
        public var timeout: Swift.Int?
        /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.
        ///
        /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
        ///
        /// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
        ///
        /// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.
        public var workerType: GlueClientTypes.WorkerType?

        public init (
            allocatedCapacity: Swift.Int = 0,
            command: GlueClientTypes.JobCommand? = nil,
            connections: GlueClientTypes.ConnectionsList? = nil,
            defaultArguments: [Swift.String:Swift.String]? = nil,
            description: Swift.String? = nil,
            executionProperty: GlueClientTypes.ExecutionProperty? = nil,
            glueVersion: Swift.String? = nil,
            logUri: Swift.String? = nil,
            maxCapacity: Swift.Double? = nil,
            maxRetries: Swift.Int = 0,
            nonOverridableArguments: [Swift.String:Swift.String]? = nil,
            notificationProperty: GlueClientTypes.NotificationProperty? = nil,
            numberOfWorkers: Swift.Int? = nil,
            role: Swift.String? = nil,
            securityConfiguration: Swift.String? = nil,
            timeout: Swift.Int? = nil,
            workerType: GlueClientTypes.WorkerType? = nil
        )
        {
            self.allocatedCapacity = allocatedCapacity
            self.command = command
            self.connections = connections
            self.defaultArguments = defaultArguments
            self.description = description
            self.executionProperty = executionProperty
            self.glueVersion = glueVersion
            self.logUri = logUri
            self.maxCapacity = maxCapacity
            self.maxRetries = maxRetries
            self.nonOverridableArguments = nonOverridableArguments
            self.notificationProperty = notificationProperty
            self.numberOfWorkers = numberOfWorkers
            self.role = role
            self.securityConfiguration = securityConfiguration
            self.timeout = timeout
            self.workerType = workerType
        }
    }

}

extension GlueClientTypes.JsonClassifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case jsonPath = "JsonPath"
        case lastUpdated = "LastUpdated"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let jsonPath = jsonPath {
            try encodeContainer.encode(jsonPath, forKey: .jsonPath)
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let jsonPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jsonPath)
        jsonPath = jsonPathDecoded
    }
}

extension GlueClientTypes {
    /// A classifier for JSON content.
    public struct JsonClassifier: Swift.Equatable {
        /// The time that this classifier was registered.
        public var creationTime: ClientRuntime.Date?
        /// A JsonPath string defining the JSON data for the classifier to classify. Glue supports a subset of JsonPath, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
        /// This member is required.
        public var jsonPath: Swift.String?
        /// The time that this classifier was last updated.
        public var lastUpdated: ClientRuntime.Date?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?
        /// The version of this classifier.
        public var version: Swift.Int

        public init (
            creationTime: ClientRuntime.Date? = nil,
            jsonPath: Swift.String? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            version: Swift.Int = 0
        )
        {
            self.creationTime = creationTime
            self.jsonPath = jsonPath
            self.lastUpdated = lastUpdated
            self.name = name
            self.version = version
        }
    }

}

extension GlueClientTypes.KeySchemaElement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension GlueClientTypes {
    /// A partition key pair consisting of a name and a type.
    public struct KeySchemaElement: Swift.Equatable {
        /// The name of a partition key.
        /// This member is required.
        public var name: Swift.String?
        /// The type of a partition key.
        /// This member is required.
        public var type: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

extension GlueClientTypes.LabelingSetGenerationTaskRunProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputS3Path = "OutputS3Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputS3Path = outputS3Path {
            try encodeContainer.encode(outputS3Path, forKey: .outputS3Path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Path)
        outputS3Path = outputS3PathDecoded
    }
}

extension GlueClientTypes {
    /// Specifies configuration properties for a labeling set generation task run.
    public struct LabelingSetGenerationTaskRunProperties: Swift.Equatable {
        /// The Amazon Simple Storage Service (Amazon S3) path where you will generate the labeling set.
        public var outputS3Path: Swift.String?

        public init (
            outputS3Path: Swift.String? = nil
        )
        {
            self.outputS3Path = outputS3Path
        }
    }

}

extension GlueClientTypes {
    public enum Language: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case python
        case scala
        case sdkUnknown(Swift.String)

        public static var allCases: [Language] {
            return [
                .python,
                .scala,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .python: return "PYTHON"
            case .scala: return "SCALA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Language(rawValue: rawValue) ?? Language.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.LastActiveDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintLocation = "BlueprintLocation"
        case blueprintServiceLocation = "BlueprintServiceLocation"
        case description = "Description"
        case lastModifiedOn = "LastModifiedOn"
        case parameterSpec = "ParameterSpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintLocation = blueprintLocation {
            try encodeContainer.encode(blueprintLocation, forKey: .blueprintLocation)
        }
        if let blueprintServiceLocation = blueprintServiceLocation {
            try encodeContainer.encode(blueprintServiceLocation, forKey: .blueprintServiceLocation)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let parameterSpec = parameterSpec {
            try encodeContainer.encode(parameterSpec, forKey: .parameterSpec)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let parameterSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterSpec)
        parameterSpec = parameterSpecDecoded
        let blueprintLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintLocation)
        blueprintLocation = blueprintLocationDecoded
        let blueprintServiceLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintServiceLocation)
        blueprintServiceLocation = blueprintServiceLocationDecoded
    }
}

extension GlueClientTypes {
    /// When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.
    public struct LastActiveDefinition: Swift.Equatable {
        /// Specifies a path in Amazon S3 where the blueprint is published by the Glue developer.
        public var blueprintLocation: Swift.String?
        /// Specifies a path in Amazon S3 where the blueprint is copied when you create or update the blueprint.
        public var blueprintServiceLocation: Swift.String?
        /// The description of the blueprint.
        public var description: Swift.String?
        /// The date and time the blueprint was last modified.
        public var lastModifiedOn: ClientRuntime.Date?
        /// A JSON string specifying the parameters for the blueprint.
        public var parameterSpec: Swift.String?

        public init (
            blueprintLocation: Swift.String? = nil,
            blueprintServiceLocation: Swift.String? = nil,
            description: Swift.String? = nil,
            lastModifiedOn: ClientRuntime.Date? = nil,
            parameterSpec: Swift.String? = nil
        )
        {
            self.blueprintLocation = blueprintLocation
            self.blueprintServiceLocation = blueprintServiceLocation
            self.description = description
            self.lastModifiedOn = lastModifiedOn
            self.parameterSpec = parameterSpec
        }
    }

}

extension GlueClientTypes.LastCrawlInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case logGroup = "LogGroup"
        case logStream = "LogStream"
        case messagePrefix = "MessagePrefix"
        case startTime = "StartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let logGroup = logGroup {
            try encodeContainer.encode(logGroup, forKey: .logGroup)
        }
        if let logStream = logStream {
            try encodeContainer.encode(logStream, forKey: .logStream)
        }
        if let messagePrefix = messagePrefix {
            try encodeContainer.encode(messagePrefix, forKey: .messagePrefix)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LastCrawlStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let logGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroup)
        logGroup = logGroupDecoded
        let logStreamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStream)
        logStream = logStreamDecoded
        let messagePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messagePrefix)
        messagePrefix = messagePrefixDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
    }
}

extension GlueClientTypes {
    /// Status and error information about the most recent crawl.
    public struct LastCrawlInfo: Swift.Equatable {
        /// If an error occurred, the error information about the last crawl.
        public var errorMessage: Swift.String?
        /// The log group for the last crawl.
        public var logGroup: Swift.String?
        /// The log stream for the last crawl.
        public var logStream: Swift.String?
        /// The prefix for a message about this crawl.
        public var messagePrefix: Swift.String?
        /// The time at which the crawl started.
        public var startTime: ClientRuntime.Date?
        /// Status of the last crawl.
        public var status: GlueClientTypes.LastCrawlStatus?

        public init (
            errorMessage: Swift.String? = nil,
            logGroup: Swift.String? = nil,
            logStream: Swift.String? = nil,
            messagePrefix: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: GlueClientTypes.LastCrawlStatus? = nil
        )
        {
            self.errorMessage = errorMessage
            self.logGroup = logGroup
            self.logStream = logStream
            self.messagePrefix = messagePrefix
            self.startTime = startTime
            self.status = status
        }
    }

}

extension GlueClientTypes {
    public enum LastCrawlStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [LastCrawlStatus] {
            return [
                .cancelled,
                .failed,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LastCrawlStatus(rawValue: rawValue) ?? LastCrawlStatus.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.LineageConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerLineageSettings = "CrawlerLineageSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawlerLineageSettings = crawlerLineageSettings {
            try encodeContainer.encode(crawlerLineageSettings.rawValue, forKey: .crawlerLineageSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerLineageSettingsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlerLineageSettings.self, forKey: .crawlerLineageSettings)
        crawlerLineageSettings = crawlerLineageSettingsDecoded
    }
}

extension GlueClientTypes {
    /// Specifies data lineage configuration settings for the crawler.
    public struct LineageConfiguration: Swift.Equatable {
        /// Specifies whether data lineage is enabled for the crawler. Valid values are:
        ///
        /// * ENABLE: enables data lineage for the crawler
        ///
        /// * DISABLE: disables data lineage for the crawler
        public var crawlerLineageSettings: GlueClientTypes.CrawlerLineageSettings?

        public init (
            crawlerLineageSettings: GlueClientTypes.CrawlerLineageSettings? = nil
        )
        {
            self.crawlerLineageSettings = crawlerLineageSettings
        }
    }

}

extension ListBlueprintsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension ListBlueprintsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListBlueprintsInput: Swift.Equatable {
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?
    /// Filters the list by an Amazon Web Services resource tag.
    public var tags: [Swift.String:Swift.String]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListBlueprintsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let tags: [Swift.String:Swift.String]?
}

extension ListBlueprintsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListBlueprintsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBlueprintsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBlueprintsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBlueprintsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBlueprintsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blueprints = output.blueprints
            self.nextToken = output.nextToken
        } else {
            self.blueprints = nil
            self.nextToken = nil
        }
    }
}

public struct ListBlueprintsOutputResponse: Swift.Equatable {
    /// List of names of blueprints in the account.
    public var blueprints: [Swift.String]?
    /// A continuation token, if not all blueprint names have been returned.
    public var nextToken: Swift.String?

    public init (
        blueprints: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.blueprints = blueprints
        self.nextToken = nextToken
    }
}

struct ListBlueprintsOutputResponseBody: Swift.Equatable {
    let blueprints: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListBlueprintsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprints = "Blueprints"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .blueprints)
        var blueprintsDecoded0:[Swift.String]? = nil
        if let blueprintsContainer = blueprintsContainer {
            blueprintsDecoded0 = [Swift.String]()
            for string0 in blueprintsContainer {
                if let string0 = string0 {
                    blueprintsDecoded0?.append(string0)
                }
            }
        }
        blueprints = blueprintsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCrawlersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension ListCrawlersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListCrawlersInput: Swift.Equatable {
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?
    /// Specifies to return only these tagged resources.
    public var tags: [Swift.String:Swift.String]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListCrawlersInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension ListCrawlersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListCrawlersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCrawlersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCrawlersOutputError: Swift.Error, Swift.Equatable {
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCrawlersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCrawlersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crawlerNames = output.crawlerNames
            self.nextToken = output.nextToken
        } else {
            self.crawlerNames = nil
            self.nextToken = nil
        }
    }
}

public struct ListCrawlersOutputResponse: Swift.Equatable {
    /// The names of all crawlers in the account, or the crawlers with the specified tags.
    public var crawlerNames: [Swift.String]?
    /// A continuation token, if the returned list does not contain the last metric available.
    public var nextToken: Swift.String?

    public init (
        crawlerNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crawlerNames = crawlerNames
        self.nextToken = nextToken
    }
}

struct ListCrawlersOutputResponseBody: Swift.Equatable {
    let crawlerNames: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListCrawlersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerNames = "CrawlerNames"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .crawlerNames)
        var crawlerNamesDecoded0:[Swift.String]? = nil
        if let crawlerNamesContainer = crawlerNamesContainer {
            crawlerNamesDecoded0 = [Swift.String]()
            for string0 in crawlerNamesContainer {
                if let string0 = string0 {
                    crawlerNamesDecoded0?.append(string0)
                }
            }
        }
        crawlerNames = crawlerNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDevEndpointsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension ListDevEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDevEndpointsInput: Swift.Equatable {
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?
    /// Specifies to return only these tagged resources.
    public var tags: [Swift.String:Swift.String]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListDevEndpointsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let tags: [Swift.String:Swift.String]?
}

extension ListDevEndpointsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListDevEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDevEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDevEndpointsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDevEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDevEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.devEndpointNames = output.devEndpointNames
            self.nextToken = output.nextToken
        } else {
            self.devEndpointNames = nil
            self.nextToken = nil
        }
    }
}

public struct ListDevEndpointsOutputResponse: Swift.Equatable {
    /// The names of all the DevEndpoints in the account, or the DevEndpoints with the specified tags.
    public var devEndpointNames: [Swift.String]?
    /// A continuation token, if the returned list does not contain the last metric available.
    public var nextToken: Swift.String?

    public init (
        devEndpointNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.devEndpointNames = devEndpointNames
        self.nextToken = nextToken
    }
}

struct ListDevEndpointsOutputResponseBody: Swift.Equatable {
    let devEndpointNames: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDevEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devEndpointNames = "DevEndpointNames"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let devEndpointNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .devEndpointNames)
        var devEndpointNamesDecoded0:[Swift.String]? = nil
        if let devEndpointNamesContainer = devEndpointNamesContainer {
            devEndpointNamesDecoded0 = [Swift.String]()
            for string0 in devEndpointNamesContainer {
                if let string0 = string0 {
                    devEndpointNamesDecoded0?.append(string0)
                }
            }
        }
        devEndpointNames = devEndpointNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension ListJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListJobsInput: Swift.Equatable {
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?
    /// Specifies to return only these tagged resources.
    public var tags: [Swift.String:Swift.String]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListJobsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let tags: [Swift.String:Swift.String]?
}

extension ListJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListJobsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobNames = output.jobNames
            self.nextToken = output.nextToken
        } else {
            self.jobNames = nil
            self.nextToken = nil
        }
    }
}

public struct ListJobsOutputResponse: Swift.Equatable {
    /// The names of all jobs in the account, or the jobs with the specified tags.
    public var jobNames: [Swift.String]?
    /// A continuation token, if the returned list does not contain the last metric available.
    public var nextToken: Swift.String?

    public init (
        jobNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobNames = jobNames
        self.nextToken = nextToken
    }
}

struct ListJobsOutputResponseBody: Swift.Equatable {
    let jobNames: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobNames = "JobNames"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobNames)
        var jobNamesDecoded0:[Swift.String]? = nil
        if let jobNamesContainer = jobNamesContainer {
            jobNamesDecoded0 = [Swift.String]()
            for string0 in jobNamesContainer {
                if let string0 = string0 {
                    jobNamesDecoded0?.append(string0)
                }
            }
        }
        jobNames = jobNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMLTransformsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sort = "Sort"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sort = sort {
            try encodeContainer.encode(sort, forKey: .sort)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension ListMLTransformsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMLTransformsInput: Swift.Equatable {
    /// A TransformFilterCriteria used to filter the machine learning transforms.
    public var filter: GlueClientTypes.TransformFilterCriteria?
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?
    /// A TransformSortCriteria used to sort the machine learning transforms.
    public var sort: GlueClientTypes.TransformSortCriteria?
    /// Specifies to return only these tagged resources.
    public var tags: [Swift.String:Swift.String]?

    public init (
        filter: GlueClientTypes.TransformFilterCriteria? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sort: GlueClientTypes.TransformSortCriteria? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sort = sort
        self.tags = tags
    }
}

struct ListMLTransformsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filter: GlueClientTypes.TransformFilterCriteria?
    let sort: GlueClientTypes.TransformSortCriteria?
    let tags: [Swift.String:Swift.String]?
}

extension ListMLTransformsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sort = "Sort"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filterDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformFilterCriteria.self, forKey: .filter)
        filter = filterDecoded
        let sortDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformSortCriteria.self, forKey: .sort)
        sort = sortDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListMLTransformsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMLTransformsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMLTransformsOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMLTransformsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMLTransformsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.transformIds = output.transformIds
        } else {
            self.nextToken = nil
            self.transformIds = nil
        }
    }
}

public struct ListMLTransformsOutputResponse: Swift.Equatable {
    /// A continuation token, if the returned list does not contain the last metric available.
    public var nextToken: Swift.String?
    /// The identifiers of all the machine learning transforms in the account, or the machine learning transforms with the specified tags.
    /// This member is required.
    public var transformIds: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        transformIds: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.transformIds = transformIds
    }
}

struct ListMLTransformsOutputResponseBody: Swift.Equatable {
    let transformIds: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListMLTransformsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case transformIds = "TransformIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .transformIds)
        var transformIdsDecoded0:[Swift.String]? = nil
        if let transformIdsContainer = transformIdsContainer {
            transformIdsDecoded0 = [Swift.String]()
            for string0 in transformIdsContainer {
                if let string0 = string0 {
                    transformIdsDecoded0?.append(string0)
                }
            }
        }
        transformIds = transformIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRegistriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListRegistriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRegistriesInput: Swift.Equatable {
    /// Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListRegistriesInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListRegistriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRegistriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRegistriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRegistriesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRegistriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRegistriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.registries = output.registries
        } else {
            self.nextToken = nil
            self.registries = nil
        }
    }
}

public struct ListRegistriesOutputResponse: Swift.Equatable {
    /// A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.
    public var nextToken: Swift.String?
    /// An array of RegistryDetailedListItem objects containing minimal details of each registry.
    public var registries: [GlueClientTypes.RegistryListItem]?

    public init (
        nextToken: Swift.String? = nil,
        registries: [GlueClientTypes.RegistryListItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.registries = registries
    }
}

struct ListRegistriesOutputResponseBody: Swift.Equatable {
    let registries: [GlueClientTypes.RegistryListItem]?
    let nextToken: Swift.String?
}

extension ListRegistriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case registries = "Registries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registriesContainer = try containerValues.decodeIfPresent([GlueClientTypes.RegistryListItem?].self, forKey: .registries)
        var registriesDecoded0:[GlueClientTypes.RegistryListItem]? = nil
        if let registriesContainer = registriesContainer {
            registriesDecoded0 = [GlueClientTypes.RegistryListItem]()
            for structure0 in registriesContainer {
                if let structure0 = structure0 {
                    registriesDecoded0?.append(structure0)
                }
            }
        }
        registries = registriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSchemaVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case schemaId = "SchemaId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
    }
}

extension ListSchemaVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSchemaVersionsInput: Swift.Equatable {
    /// Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?
    /// This is a wrapper structure to contain schema identity fields. The structure contains:
    ///
    /// * SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either SchemaArn or SchemaName and RegistryName has to be provided.
    ///
    /// * SchemaId$SchemaName: The name of the schema. Either SchemaArn or SchemaName and RegistryName has to be provided.
    /// This member is required.
    public var schemaId: GlueClientTypes.SchemaId?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        schemaId: GlueClientTypes.SchemaId? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.schemaId = schemaId
    }
}

struct ListSchemaVersionsInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListSchemaVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case schemaId = "SchemaId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSchemaVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSchemaVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSchemaVersionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSchemaVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSchemaVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.schemas = output.schemas
        } else {
            self.nextToken = nil
            self.schemas = nil
        }
    }
}

public struct ListSchemaVersionsOutputResponse: Swift.Equatable {
    /// A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.
    public var nextToken: Swift.String?
    /// An array of SchemaVersionList objects containing details of each schema version.
    public var schemas: [GlueClientTypes.SchemaVersionListItem]?

    public init (
        nextToken: Swift.String? = nil,
        schemas: [GlueClientTypes.SchemaVersionListItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.schemas = schemas
    }
}

struct ListSchemaVersionsOutputResponseBody: Swift.Equatable {
    let schemas: [GlueClientTypes.SchemaVersionListItem]?
    let nextToken: Swift.String?
}

extension ListSchemaVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case schemas = "Schemas"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemasContainer = try containerValues.decodeIfPresent([GlueClientTypes.SchemaVersionListItem?].self, forKey: .schemas)
        var schemasDecoded0:[GlueClientTypes.SchemaVersionListItem]? = nil
        if let schemasContainer = schemasContainer {
            schemasDecoded0 = [GlueClientTypes.SchemaVersionListItem]()
            for structure0 in schemasContainer {
                if let structure0 = structure0 {
                    schemasDecoded0?.append(structure0)
                }
            }
        }
        schemas = schemasDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSchemasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case registryId = "RegistryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let registryId = registryId {
            try encodeContainer.encode(registryId, forKey: .registryId)
        }
    }
}

extension ListSchemasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSchemasInput: Swift.Equatable {
    /// Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?
    /// A wrapper structure that may contain the registry name and Amazon Resource Name (ARN).
    public var registryId: GlueClientTypes.RegistryId?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        registryId: GlueClientTypes.RegistryId? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.registryId = registryId
    }
}

struct ListSchemasInputBody: Swift.Equatable {
    let registryId: GlueClientTypes.RegistryId?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListSchemasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case registryId = "RegistryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RegistryId.self, forKey: .registryId)
        registryId = registryIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSchemasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSchemasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSchemasOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSchemasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSchemasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.schemas = output.schemas
        } else {
            self.nextToken = nil
            self.schemas = nil
        }
    }
}

public struct ListSchemasOutputResponse: Swift.Equatable {
    /// A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.
    public var nextToken: Swift.String?
    /// An array of SchemaListItem objects containing details of each schema.
    public var schemas: [GlueClientTypes.SchemaListItem]?

    public init (
        nextToken: Swift.String? = nil,
        schemas: [GlueClientTypes.SchemaListItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.schemas = schemas
    }
}

struct ListSchemasOutputResponseBody: Swift.Equatable {
    let schemas: [GlueClientTypes.SchemaListItem]?
    let nextToken: Swift.String?
}

extension ListSchemasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case schemas = "Schemas"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemasContainer = try containerValues.decodeIfPresent([GlueClientTypes.SchemaListItem?].self, forKey: .schemas)
        var schemasDecoded0:[GlueClientTypes.SchemaListItem]? = nil
        if let schemasContainer = schemasContainer {
            schemasDecoded0 = [GlueClientTypes.SchemaListItem]()
            for structure0 in schemasContainer {
                if let structure0 = structure0 {
                    schemasDecoded0?.append(structure0)
                }
            }
        }
        schemas = schemasDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTriggersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dependentJobName = "DependentJobName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dependentJobName = dependentJobName {
            try encodeContainer.encode(dependentJobName, forKey: .dependentJobName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension ListTriggersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTriggersInput: Swift.Equatable {
    /// The name of the job for which to retrieve triggers. The trigger that can start this job is returned. If there is no such trigger, all triggers are returned.
    public var dependentJobName: Swift.String?
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?
    /// Specifies to return only these tagged resources.
    public var tags: [Swift.String:Swift.String]?

    public init (
        dependentJobName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.dependentJobName = dependentJobName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTriggersInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let dependentJobName: Swift.String?
    let maxResults: Swift.Int?
    let tags: [Swift.String:Swift.String]?
}

extension ListTriggersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dependentJobName = "DependentJobName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let dependentJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dependentJobName)
        dependentJobName = dependentJobNameDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListTriggersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTriggersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTriggersOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTriggersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTriggersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.triggerNames = output.triggerNames
        } else {
            self.nextToken = nil
            self.triggerNames = nil
        }
    }
}

public struct ListTriggersOutputResponse: Swift.Equatable {
    /// A continuation token, if the returned list does not contain the last metric available.
    public var nextToken: Swift.String?
    /// The names of all triggers in the account, or the triggers with the specified tags.
    public var triggerNames: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        triggerNames: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.triggerNames = triggerNames
    }
}

struct ListTriggersOutputResponseBody: Swift.Equatable {
    let triggerNames: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListTriggersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case triggerNames = "TriggerNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .triggerNames)
        var triggerNamesDecoded0:[Swift.String]? = nil
        if let triggerNamesContainer = triggerNamesContainer {
            triggerNamesDecoded0 = [Swift.String]()
            for string0 in triggerNamesContainer {
                if let string0 = string0 {
                    triggerNamesDecoded0?.append(string0)
                }
            }
        }
        triggerNames = triggerNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListWorkflowsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListWorkflowsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListWorkflowsInput: Swift.Equatable {
    /// The maximum size of a list to return.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is a continuation request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListWorkflowsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListWorkflowsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListWorkflowsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWorkflowsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListWorkflowsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWorkflowsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListWorkflowsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.workflows = output.workflows
        } else {
            self.nextToken = nil
            self.workflows = nil
        }
    }
}

public struct ListWorkflowsOutputResponse: Swift.Equatable {
    /// A continuation token, if not all workflow names have been returned.
    public var nextToken: Swift.String?
    /// List of names of workflows in the account.
    public var workflows: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        workflows: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.workflows = workflows
    }
}

struct ListWorkflowsOutputResponseBody: Swift.Equatable {
    let workflows: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListWorkflowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case workflows = "Workflows"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .workflows)
        var workflowsDecoded0:[Swift.String]? = nil
        if let workflowsContainer = workflowsContainer {
            workflowsDecoded0 = [Swift.String]()
            for string0 in workflowsContainer {
                if let string0 = string0 {
                    workflowsDecoded0?.append(string0)
                }
            }
        }
        workflows = workflowsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GlueClientTypes.Location: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dynamoDB = "DynamoDB"
        case jdbc = "Jdbc"
        case s3 = "S3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dynamoDB = dynamoDB {
            var dynamoDBContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dynamoDB)
            for codegennodeargs0 in dynamoDB {
                try dynamoDBContainer.encode(codegennodeargs0)
            }
        }
        if let jdbc = jdbc {
            var jdbcContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jdbc)
            for codegennodeargs0 in jdbc {
                try jdbcContainer.encode(codegennodeargs0)
            }
        }
        if let s3 = s3 {
            var s3Container = encodeContainer.nestedUnkeyedContainer(forKey: .s3)
            for codegennodeargs0 in s3 {
                try s3Container.encode(codegennodeargs0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jdbcContainer = try containerValues.decodeIfPresent([GlueClientTypes.CodeGenNodeArg?].self, forKey: .jdbc)
        var jdbcDecoded0:[GlueClientTypes.CodeGenNodeArg]? = nil
        if let jdbcContainer = jdbcContainer {
            jdbcDecoded0 = [GlueClientTypes.CodeGenNodeArg]()
            for structure0 in jdbcContainer {
                if let structure0 = structure0 {
                    jdbcDecoded0?.append(structure0)
                }
            }
        }
        jdbc = jdbcDecoded0
        let s3Container = try containerValues.decodeIfPresent([GlueClientTypes.CodeGenNodeArg?].self, forKey: .s3)
        var s3Decoded0:[GlueClientTypes.CodeGenNodeArg]? = nil
        if let s3Container = s3Container {
            s3Decoded0 = [GlueClientTypes.CodeGenNodeArg]()
            for structure0 in s3Container {
                if let structure0 = structure0 {
                    s3Decoded0?.append(structure0)
                }
            }
        }
        s3 = s3Decoded0
        let dynamoDBContainer = try containerValues.decodeIfPresent([GlueClientTypes.CodeGenNodeArg?].self, forKey: .dynamoDB)
        var dynamoDBDecoded0:[GlueClientTypes.CodeGenNodeArg]? = nil
        if let dynamoDBContainer = dynamoDBContainer {
            dynamoDBDecoded0 = [GlueClientTypes.CodeGenNodeArg]()
            for structure0 in dynamoDBContainer {
                if let structure0 = structure0 {
                    dynamoDBDecoded0?.append(structure0)
                }
            }
        }
        dynamoDB = dynamoDBDecoded0
    }
}

extension GlueClientTypes {
    /// The location of resources.
    public struct Location: Swift.Equatable {
        /// An Amazon DynamoDB table location.
        public var dynamoDB: [GlueClientTypes.CodeGenNodeArg]?
        /// A JDBC location.
        public var jdbc: [GlueClientTypes.CodeGenNodeArg]?
        /// An Amazon Simple Storage Service (Amazon S3) location.
        public var s3: [GlueClientTypes.CodeGenNodeArg]?

        public init (
            dynamoDB: [GlueClientTypes.CodeGenNodeArg]? = nil,
            jdbc: [GlueClientTypes.CodeGenNodeArg]? = nil,
            s3: [GlueClientTypes.CodeGenNodeArg]? = nil
        )
        {
            self.dynamoDB = dynamoDB
            self.jdbc = jdbc
            self.s3 = s3
        }
    }

}

extension GlueClientTypes {
    public enum Logical: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case and
        case any
        case sdkUnknown(Swift.String)

        public static var allCases: [Logical] {
            return [
                .and,
                .any,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .and: return "AND"
            case .any: return "ANY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Logical(rawValue: rawValue) ?? Logical.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes {
    public enum LogicalOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case equals
        case sdkUnknown(Swift.String)

        public static var allCases: [LogicalOperator] {
            return [
                .equals,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .equals: return "EQUALS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogicalOperator(rawValue: rawValue) ?? LogicalOperator.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.LongColumnStatisticsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumValue = "MaximumValue"
        case minimumValue = "MinimumValue"
        case numberOfDistinctValues = "NumberOfDistinctValues"
        case numberOfNulls = "NumberOfNulls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumValue != 0 {
            try encodeContainer.encode(maximumValue, forKey: .maximumValue)
        }
        if minimumValue != 0 {
            try encodeContainer.encode(minimumValue, forKey: .minimumValue)
        }
        if numberOfDistinctValues != 0 {
            try encodeContainer.encode(numberOfDistinctValues, forKey: .numberOfDistinctValues)
        }
        if numberOfNulls != 0 {
            try encodeContainer.encode(numberOfNulls, forKey: .numberOfNulls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumValueDecoded = try containerValues.decode(Swift.Int.self, forKey: .minimumValue)
        minimumValue = minimumValueDecoded
        let maximumValueDecoded = try containerValues.decode(Swift.Int.self, forKey: .maximumValue)
        maximumValue = maximumValueDecoded
        let numberOfNullsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNulls)
        numberOfNulls = numberOfNullsDecoded
        let numberOfDistinctValuesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfDistinctValues)
        numberOfDistinctValues = numberOfDistinctValuesDecoded
    }
}

extension GlueClientTypes {
    /// Defines column statistics supported for integer data columns.
    public struct LongColumnStatisticsData: Swift.Equatable {
        /// The highest value in the column.
        public var maximumValue: Swift.Int
        /// The lowest value in the column.
        public var minimumValue: Swift.Int
        /// The number of distinct values in a column.
        /// This member is required.
        public var numberOfDistinctValues: Swift.Int
        /// The number of null values in the column.
        /// This member is required.
        public var numberOfNulls: Swift.Int

        public init (
            maximumValue: Swift.Int = 0,
            minimumValue: Swift.Int = 0,
            numberOfDistinctValues: Swift.Int = 0,
            numberOfNulls: Swift.Int = 0
        )
        {
            self.maximumValue = maximumValue
            self.minimumValue = minimumValue
            self.numberOfDistinctValues = numberOfDistinctValues
            self.numberOfNulls = numberOfNulls
        }
    }

}

extension GlueClientTypes.MLTransform: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdOn = "CreatedOn"
        case description = "Description"
        case evaluationMetrics = "EvaluationMetrics"
        case glueVersion = "GlueVersion"
        case inputRecordTables = "InputRecordTables"
        case labelCount = "LabelCount"
        case lastModifiedOn = "LastModifiedOn"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case schema = "Schema"
        case status = "Status"
        case timeout = "Timeout"
        case transformEncryption = "TransformEncryption"
        case transformId = "TransformId"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdOn = createdOn {
            try encodeContainer.encode(createdOn.timeIntervalSince1970, forKey: .createdOn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let evaluationMetrics = evaluationMetrics {
            try encodeContainer.encode(evaluationMetrics, forKey: .evaluationMetrics)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let inputRecordTables = inputRecordTables {
            var inputRecordTablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputRecordTables)
            for gluetables0 in inputRecordTables {
                try inputRecordTablesContainer.encode(gluetables0)
            }
        }
        if labelCount != 0 {
            try encodeContainer.encode(labelCount, forKey: .labelCount)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let maxRetries = maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let schema = schema {
            var schemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .schema)
            for transformschema0 in schema {
                try schemaContainer.encode(transformschema0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let transformEncryption = transformEncryption {
            try encodeContainer.encode(transformEncryption, forKey: .transformEncryption)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformStatusType.self, forKey: .status)
        status = statusDecoded
        let createdOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let inputRecordTablesContainer = try containerValues.decodeIfPresent([GlueClientTypes.GlueTable?].self, forKey: .inputRecordTables)
        var inputRecordTablesDecoded0:[GlueClientTypes.GlueTable]? = nil
        if let inputRecordTablesContainer = inputRecordTablesContainer {
            inputRecordTablesDecoded0 = [GlueClientTypes.GlueTable]()
            for structure0 in inputRecordTablesContainer {
                if let structure0 = structure0 {
                    inputRecordTablesDecoded0?.append(structure0)
                }
            }
        }
        inputRecordTables = inputRecordTablesDecoded0
        let parametersDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformParameters.self, forKey: .parameters)
        parameters = parametersDecoded
        let evaluationMetricsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EvaluationMetrics.self, forKey: .evaluationMetrics)
        evaluationMetrics = evaluationMetricsDecoded
        let labelCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .labelCount)
        labelCount = labelCountDecoded
        let schemaContainer = try containerValues.decodeIfPresent([GlueClientTypes.SchemaColumn?].self, forKey: .schema)
        var schemaDecoded0:[GlueClientTypes.SchemaColumn]? = nil
        if let schemaContainer = schemaContainer {
            schemaDecoded0 = [GlueClientTypes.SchemaColumn]()
            for structure0 in schemaContainer {
                if let structure0 = structure0 {
                    schemaDecoded0?.append(structure0)
                }
            }
        }
        schema = schemaDecoded0
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let transformEncryptionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformEncryption.self, forKey: .transformEncryption)
        transformEncryption = transformEncryptionDecoded
    }
}

extension GlueClientTypes {
    /// A structure for a machine learning transform.
    public struct MLTransform: Swift.Equatable {
        /// A timestamp. The time and date that this machine learning transform was created.
        public var createdOn: ClientRuntime.Date?
        /// A user-defined, long-form description text for the machine learning transform. Descriptions are not guaranteed to be unique and can be changed at any time.
        public var description: Swift.String?
        /// An EvaluationMetrics object. Evaluation metrics provide an estimate of the quality of your machine learning transform.
        public var evaluationMetrics: GlueClientTypes.EvaluationMetrics?
        /// This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see [Glue Versions](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions) in the developer guide.
        public var glueVersion: Swift.String?
        /// A list of Glue table definitions used by the transform.
        public var inputRecordTables: [GlueClientTypes.GlueTable]?
        /// A count identifier for the labeling files generated by Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file.
        public var labelCount: Swift.Int
        /// A timestamp. The last point in time when this machine learning transform was modified.
        public var lastModifiedOn: ClientRuntime.Date?
        /// The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](http://aws.amazon.com/glue/pricing/). MaxCapacity is a mutually exclusive option with NumberOfWorkers and WorkerType.
        ///
        /// * If either NumberOfWorkers or WorkerType is set, then MaxCapacity cannot be set.
        ///
        /// * If MaxCapacity is set then neither NumberOfWorkers or WorkerType can be set.
        ///
        /// * If WorkerType is set, then NumberOfWorkers is required (and vice versa).
        ///
        /// * MaxCapacity and NumberOfWorkers must both be at least 1.
        ///
        ///
        /// When the WorkerType field is set to a value other than Standard, the MaxCapacity field is set automatically and becomes read-only.
        public var maxCapacity: Swift.Double?
        /// The maximum number of times to retry after an MLTaskRun of the machine learning transform fails.
        public var maxRetries: Swift.Int?
        /// A user-defined name for the machine learning transform. Names are not guaranteed unique and can be changed at any time.
        public var name: Swift.String?
        /// The number of workers of a defined workerType that are allocated when a task of the transform runs. If WorkerType is set, then NumberOfWorkers is required (and vice versa).
        public var numberOfWorkers: Swift.Int?
        /// A TransformParameters object. You can use parameters to tune (customize) the behavior of the machine learning transform by specifying what data it learns from and your preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).
        public var parameters: GlueClientTypes.TransformParameters?
        /// The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both Glue service role permissions to Glue resources, and Amazon S3 permissions required by the transform.
        ///
        /// * This role needs Glue service role permissions to allow access to resources in Glue. See [Attach a Policy to IAM Users That Access Glue](https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html).
        ///
        /// * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.
        public var role: Swift.String?
        /// A map of key-value pairs representing the columns and data types that this transform can run against. Has an upper bound of 100 columns.
        public var schema: [GlueClientTypes.SchemaColumn]?
        /// The current status of the machine learning transform.
        public var status: GlueClientTypes.TransformStatusType?
        /// The timeout in minutes of the machine learning transform.
        public var timeout: Swift.Int?
        /// The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.
        public var transformEncryption: GlueClientTypes.TransformEncryption?
        /// The unique transform ID that is generated for the machine learning transform. The ID is guaranteed to be unique and does not change.
        public var transformId: Swift.String?
        /// The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.
        ///
        /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
        ///
        /// * For the G.1X worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
        ///
        /// * For the G.2X worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
        ///
        ///
        /// MaxCapacity is a mutually exclusive option with NumberOfWorkers and WorkerType.
        ///
        /// * If either NumberOfWorkers or WorkerType is set, then MaxCapacity cannot be set.
        ///
        /// * If MaxCapacity is set then neither NumberOfWorkers or WorkerType can be set.
        ///
        /// * If WorkerType is set, then NumberOfWorkers is required (and vice versa).
        ///
        /// * MaxCapacity and NumberOfWorkers must both be at least 1.
        public var workerType: GlueClientTypes.WorkerType?

        public init (
            createdOn: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            evaluationMetrics: GlueClientTypes.EvaluationMetrics? = nil,
            glueVersion: Swift.String? = nil,
            inputRecordTables: [GlueClientTypes.GlueTable]? = nil,
            labelCount: Swift.Int = 0,
            lastModifiedOn: ClientRuntime.Date? = nil,
            maxCapacity: Swift.Double? = nil,
            maxRetries: Swift.Int? = nil,
            name: Swift.String? = nil,
            numberOfWorkers: Swift.Int? = nil,
            parameters: GlueClientTypes.TransformParameters? = nil,
            role: Swift.String? = nil,
            schema: [GlueClientTypes.SchemaColumn]? = nil,
            status: GlueClientTypes.TransformStatusType? = nil,
            timeout: Swift.Int? = nil,
            transformEncryption: GlueClientTypes.TransformEncryption? = nil,
            transformId: Swift.String? = nil,
            workerType: GlueClientTypes.WorkerType? = nil
        )
        {
            self.createdOn = createdOn
            self.description = description
            self.evaluationMetrics = evaluationMetrics
            self.glueVersion = glueVersion
            self.inputRecordTables = inputRecordTables
            self.labelCount = labelCount
            self.lastModifiedOn = lastModifiedOn
            self.maxCapacity = maxCapacity
            self.maxRetries = maxRetries
            self.name = name
            self.numberOfWorkers = numberOfWorkers
            self.parameters = parameters
            self.role = role
            self.schema = schema
            self.status = status
            self.timeout = timeout
            self.transformEncryption = transformEncryption
            self.transformId = transformId
            self.workerType = workerType
        }
    }

}

extension MLTransformNotReadyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MLTransformNotReadyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The machine learning transform is not ready to run.
public struct MLTransformNotReadyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MLTransformNotReadyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MLTransformNotReadyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.MLUserDataEncryption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case mlUserDataEncryptionMode = "MlUserDataEncryptionMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let mlUserDataEncryptionMode = mlUserDataEncryptionMode {
            try encodeContainer.encode(mlUserDataEncryptionMode.rawValue, forKey: .mlUserDataEncryptionMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlUserDataEncryptionModeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.MLUserDataEncryptionModeString.self, forKey: .mlUserDataEncryptionMode)
        mlUserDataEncryptionMode = mlUserDataEncryptionModeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension GlueClientTypes {
    /// The encryption-at-rest settings of the transform that apply to accessing user data.
    public struct MLUserDataEncryption: Swift.Equatable {
        /// The ID for the customer-provided KMS key.
        public var kmsKeyId: Swift.String?
        /// The encryption mode applied to user data. Valid values are:
        ///
        /// * DISABLED: encryption is disabled
        ///
        /// * SSEKMS: use of server-side encryption with Key Management Service (SSE-KMS) for user data stored in Amazon S3.
        /// This member is required.
        public var mlUserDataEncryptionMode: GlueClientTypes.MLUserDataEncryptionModeString?

        public init (
            kmsKeyId: Swift.String? = nil,
            mlUserDataEncryptionMode: GlueClientTypes.MLUserDataEncryptionModeString? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.mlUserDataEncryptionMode = mlUserDataEncryptionMode
        }
    }

}

extension GlueClientTypes {
    public enum MLUserDataEncryptionModeString: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case ssekms
        case sdkUnknown(Swift.String)

        public static var allCases: [MLUserDataEncryptionModeString] {
            return [
                .disabled,
                .ssekms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .ssekms: return "SSE-KMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MLUserDataEncryptionModeString(rawValue: rawValue) ?? MLUserDataEncryptionModeString.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.MappingEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourcePath = "SourcePath"
        case sourceTable = "SourceTable"
        case sourceType = "SourceType"
        case targetPath = "TargetPath"
        case targetTable = "TargetTable"
        case targetType = "TargetType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourcePath = sourcePath {
            try encodeContainer.encode(sourcePath, forKey: .sourcePath)
        }
        if let sourceTable = sourceTable {
            try encodeContainer.encode(sourceTable, forKey: .sourceTable)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
        if let targetPath = targetPath {
            try encodeContainer.encode(targetPath, forKey: .targetPath)
        }
        if let targetTable = targetTable {
            try encodeContainer.encode(targetTable, forKey: .targetTable)
        }
        if let targetType = targetType {
            try encodeContainer.encode(targetType, forKey: .targetType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceTableDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceTable)
        sourceTable = sourceTableDecoded
        let sourcePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePath)
        sourcePath = sourcePathDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let targetTableDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetTable)
        targetTable = targetTableDecoded
        let targetPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetPath)
        targetPath = targetPathDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetType)
        targetType = targetTypeDecoded
    }
}

extension GlueClientTypes {
    /// Defines a mapping.
    public struct MappingEntry: Swift.Equatable {
        /// The source path.
        public var sourcePath: Swift.String?
        /// The name of the source table.
        public var sourceTable: Swift.String?
        /// The source type.
        public var sourceType: Swift.String?
        /// The target path.
        public var targetPath: Swift.String?
        /// The target table.
        public var targetTable: Swift.String?
        /// The target type.
        public var targetType: Swift.String?

        public init (
            sourcePath: Swift.String? = nil,
            sourceTable: Swift.String? = nil,
            sourceType: Swift.String? = nil,
            targetPath: Swift.String? = nil,
            targetTable: Swift.String? = nil,
            targetType: Swift.String? = nil
        )
        {
            self.sourcePath = sourcePath
            self.sourceTable = sourceTable
            self.sourceType = sourceType
            self.targetPath = targetPath
            self.targetTable = targetTable
            self.targetType = targetType
        }
    }

}

extension GlueClientTypes.MetadataInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case metadataValue = "MetadataValue"
        case otherMetadataValueList = "OtherMetadataValueList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let metadataValue = metadataValue {
            try encodeContainer.encode(metadataValue, forKey: .metadataValue)
        }
        if let otherMetadataValueList = otherMetadataValueList {
            var otherMetadataValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .otherMetadataValueList)
            for othermetadatavaluelist0 in otherMetadataValueList {
                try otherMetadataValueListContainer.encode(othermetadatavaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataValue)
        metadataValue = metadataValueDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let otherMetadataValueListContainer = try containerValues.decodeIfPresent([GlueClientTypes.OtherMetadataValueListItem?].self, forKey: .otherMetadataValueList)
        var otherMetadataValueListDecoded0:[GlueClientTypes.OtherMetadataValueListItem]? = nil
        if let otherMetadataValueListContainer = otherMetadataValueListContainer {
            otherMetadataValueListDecoded0 = [GlueClientTypes.OtherMetadataValueListItem]()
            for structure0 in otherMetadataValueListContainer {
                if let structure0 = structure0 {
                    otherMetadataValueListDecoded0?.append(structure0)
                }
            }
        }
        otherMetadataValueList = otherMetadataValueListDecoded0
    }
}

extension GlueClientTypes {
    /// A structure containing metadata information for a schema version.
    public struct MetadataInfo: Swift.Equatable {
        /// The time at which the entry was created.
        public var createdTime: Swift.String?
        /// The metadata key’s corresponding value.
        public var metadataValue: Swift.String?
        /// Other metadata belonging to the same metadata key.
        public var otherMetadataValueList: [GlueClientTypes.OtherMetadataValueListItem]?

        public init (
            createdTime: Swift.String? = nil,
            metadataValue: Swift.String? = nil,
            otherMetadataValueList: [GlueClientTypes.OtherMetadataValueListItem]? = nil
        )
        {
            self.createdTime = createdTime
            self.metadataValue = metadataValue
            self.otherMetadataValueList = otherMetadataValueList
        }
    }

}

extension GlueClientTypes.MetadataKeyValuePair: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadataKey = "MetadataKey"
        case metadataValue = "MetadataValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metadataKey = metadataKey {
            try encodeContainer.encode(metadataKey, forKey: .metadataKey)
        }
        if let metadataValue = metadataValue {
            try encodeContainer.encode(metadataValue, forKey: .metadataValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataKey)
        metadataKey = metadataKeyDecoded
        let metadataValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataValue)
        metadataValue = metadataValueDecoded
    }
}

extension GlueClientTypes {
    /// A structure containing a key value pair for metadata.
    public struct MetadataKeyValuePair: Swift.Equatable {
        /// A metadata key.
        public var metadataKey: Swift.String?
        /// A metadata key’s corresponding value.
        public var metadataValue: Swift.String?

        public init (
            metadataKey: Swift.String? = nil,
            metadataValue: Swift.String? = nil
        )
        {
            self.metadataKey = metadataKey
            self.metadataValue = metadataValue
        }
    }

}

extension GlueClientTypes.MongoDBTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionName = "ConnectionName"
        case path = "Path"
        case scanAll = "ScanAll"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let scanAll = scanAll {
            try encodeContainer.encode(scanAll, forKey: .scanAll)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let scanAllDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .scanAll)
        scanAll = scanAllDecoded
    }
}

extension GlueClientTypes {
    /// Specifies an Amazon DocumentDB or MongoDB data store to crawl.
    public struct MongoDBTarget: Swift.Equatable {
        /// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
        public var connectionName: Swift.String?
        /// The path of the Amazon DocumentDB or MongoDB target (database/collection).
        public var path: Swift.String?
        /// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. A value of true means to scan all records, while a value of false means to sample the records. If no value is specified, the value defaults to true.
        public var scanAll: Swift.Bool?

        public init (
            connectionName: Swift.String? = nil,
            path: Swift.String? = nil,
            scanAll: Swift.Bool? = nil
        )
        {
            self.connectionName = connectionName
            self.path = path
            self.scanAll = scanAll
        }
    }

}

extension NoScheduleException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoScheduleExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There is no applicable schedule.
public struct NoScheduleException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoScheduleExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NoScheduleExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.Node: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerDetails = "CrawlerDetails"
        case jobDetails = "JobDetails"
        case name = "Name"
        case triggerDetails = "TriggerDetails"
        case type = "Type"
        case uniqueId = "UniqueId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawlerDetails = crawlerDetails {
            try encodeContainer.encode(crawlerDetails, forKey: .crawlerDetails)
        }
        if let jobDetails = jobDetails {
            try encodeContainer.encode(jobDetails, forKey: .jobDetails)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let triggerDetails = triggerDetails {
            try encodeContainer.encode(triggerDetails, forKey: .triggerDetails)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uniqueId = uniqueId {
            try encodeContainer.encode(uniqueId, forKey: .uniqueId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.NodeType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let uniqueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uniqueId)
        uniqueId = uniqueIdDecoded
        let triggerDetailsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TriggerNodeDetails.self, forKey: .triggerDetails)
        triggerDetails = triggerDetailsDecoded
        let jobDetailsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobNodeDetails.self, forKey: .jobDetails)
        jobDetails = jobDetailsDecoded
        let crawlerDetailsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlerNodeDetails.self, forKey: .crawlerDetails)
        crawlerDetails = crawlerDetailsDecoded
    }
}

extension GlueClientTypes {
    /// A node represents an Glue component (trigger, crawler, or job) on a workflow graph.
    public struct Node: Swift.Equatable {
        /// Details of the crawler when the node represents a crawler.
        public var crawlerDetails: GlueClientTypes.CrawlerNodeDetails?
        /// Details of the Job when the node represents a Job.
        public var jobDetails: GlueClientTypes.JobNodeDetails?
        /// The name of the Glue component represented by the node.
        public var name: Swift.String?
        /// Details of the Trigger when the node represents a Trigger.
        public var triggerDetails: GlueClientTypes.TriggerNodeDetails?
        /// The type of Glue component represented by the node.
        public var type: GlueClientTypes.NodeType?
        /// The unique Id assigned to the node within the workflow.
        public var uniqueId: Swift.String?

        public init (
            crawlerDetails: GlueClientTypes.CrawlerNodeDetails? = nil,
            jobDetails: GlueClientTypes.JobNodeDetails? = nil,
            name: Swift.String? = nil,
            triggerDetails: GlueClientTypes.TriggerNodeDetails? = nil,
            type: GlueClientTypes.NodeType? = nil,
            uniqueId: Swift.String? = nil
        )
        {
            self.crawlerDetails = crawlerDetails
            self.jobDetails = jobDetails
            self.name = name
            self.triggerDetails = triggerDetails
            self.type = type
            self.uniqueId = uniqueId
        }
    }

}

extension GlueClientTypes {
    public enum NodeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case crawler
        case job
        case trigger
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeType] {
            return [
                .crawler,
                .job,
                .trigger,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .crawler: return "CRAWLER"
            case .job: return "JOB"
            case .trigger: return "TRIGGER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NodeType(rawValue: rawValue) ?? NodeType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.NotificationProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notifyDelayAfter = "NotifyDelayAfter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notifyDelayAfter = notifyDelayAfter {
            try encodeContainer.encode(notifyDelayAfter, forKey: .notifyDelayAfter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notifyDelayAfterDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .notifyDelayAfter)
        notifyDelayAfter = notifyDelayAfterDecoded
    }
}

extension GlueClientTypes {
    /// Specifies configuration properties of a notification.
    public struct NotificationProperty: Swift.Equatable {
        /// After a job run starts, the number of minutes to wait before sending a job run delay notification.
        public var notifyDelayAfter: Swift.Int?

        public init (
            notifyDelayAfter: Swift.Int? = nil
        )
        {
            self.notifyDelayAfter = notifyDelayAfter
        }
    }

}

extension OperationTimeoutException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OperationTimeoutExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation timed out.
public struct OperationTimeoutException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationTimeoutExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationTimeoutExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.Order: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case column = "Column"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let column = column {
            try encodeContainer.encode(column, forKey: .column)
        }
        if sortOrder != 0 {
            try encodeContainer.encode(sortOrder, forKey: .sortOrder)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .column)
        column = columnDecoded
        let sortOrderDecoded = try containerValues.decode(Swift.Int.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension GlueClientTypes {
    /// Specifies the sort order of a sorted column.
    public struct Order: Swift.Equatable {
        /// The name of the column.
        /// This member is required.
        public var column: Swift.String?
        /// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
        /// This member is required.
        public var sortOrder: Swift.Int

        public init (
            column: Swift.String? = nil,
            sortOrder: Swift.Int = 0
        )
        {
            self.column = column
            self.sortOrder = sortOrder
        }
    }

}

extension GlueClientTypes.OtherMetadataValueListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case metadataValue = "MetadataValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let metadataValue = metadataValue {
            try encodeContainer.encode(metadataValue, forKey: .metadataValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataValue)
        metadataValue = metadataValueDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
    }
}

extension GlueClientTypes {
    /// A structure containing other metadata for a schema version belonging to the same metadata key.
    public struct OtherMetadataValueListItem: Swift.Equatable {
        /// The time at which the entry was created.
        public var createdTime: Swift.String?
        /// The metadata key’s corresponding value for the other metadata belonging to the same metadata key.
        public var metadataValue: Swift.String?

        public init (
            createdTime: Swift.String? = nil,
            metadataValue: Swift.String? = nil
        )
        {
            self.createdTime = createdTime
            self.metadataValue = metadataValue
        }
    }

}

extension GlueClientTypes.Partition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case creationTime = "CreationTime"
        case databaseName = "DatabaseName"
        case lastAccessTime = "LastAccessTime"
        case lastAnalyzedTime = "LastAnalyzedTime"
        case parameters = "Parameters"
        case storageDescriptor = "StorageDescriptor"
        case tableName = "TableName"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let lastAccessTime = lastAccessTime {
            try encodeContainer.encode(lastAccessTime.timeIntervalSince1970, forKey: .lastAccessTime)
        }
        if let lastAnalyzedTime = lastAnalyzedTime {
            try encodeContainer.encode(lastAnalyzedTime.timeIntervalSince1970, forKey: .lastAnalyzedTime)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let storageDescriptor = storageDescriptor {
            try encodeContainer.encode(storageDescriptor, forKey: .storageDescriptor)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for valuestringlist0 in values {
                try valuesContainer.encode(valuestringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastAccessTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAccessTime)
        lastAccessTime = lastAccessTimeDecoded
        let storageDescriptorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StorageDescriptor.self, forKey: .storageDescriptor)
        storageDescriptor = storageDescriptorDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let lastAnalyzedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAnalyzedTime)
        lastAnalyzedTime = lastAnalyzedTimeDecoded
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
    }
}

extension GlueClientTypes {
    /// Represents a slice of table data.
    public struct Partition: Swift.Equatable {
        /// The ID of the Data Catalog in which the partition resides.
        public var catalogId: Swift.String?
        /// The time at which the partition was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the catalog database in which to create the partition.
        public var databaseName: Swift.String?
        /// The last time at which the partition was accessed.
        public var lastAccessTime: ClientRuntime.Date?
        /// The last time at which column statistics were computed for this partition.
        public var lastAnalyzedTime: ClientRuntime.Date?
        /// These key-value pairs define partition parameters.
        public var parameters: [Swift.String:Swift.String]?
        /// Provides information about the physical location where the partition is stored.
        public var storageDescriptor: GlueClientTypes.StorageDescriptor?
        /// The name of the database table in which to create the partition.
        public var tableName: Swift.String?
        /// The values of the partition.
        public var values: [Swift.String]?

        public init (
            catalogId: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            databaseName: Swift.String? = nil,
            lastAccessTime: ClientRuntime.Date? = nil,
            lastAnalyzedTime: ClientRuntime.Date? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            storageDescriptor: GlueClientTypes.StorageDescriptor? = nil,
            tableName: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.catalogId = catalogId
            self.creationTime = creationTime
            self.databaseName = databaseName
            self.lastAccessTime = lastAccessTime
            self.lastAnalyzedTime = lastAnalyzedTime
            self.parameters = parameters
            self.storageDescriptor = storageDescriptor
            self.tableName = tableName
            self.values = values
        }
    }

}

extension GlueClientTypes.PartitionError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDetail = "ErrorDetail"
        case partitionValues = "PartitionValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorDetail = errorDetail {
            try encodeContainer.encode(errorDetail, forKey: .errorDetail)
        }
        if let partitionValues = partitionValues {
            var partitionValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValues)
            for valuestringlist0 in partitionValues {
                try partitionValuesContainer.encode(valuestringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValues)
        var partitionValuesDecoded0:[Swift.String]? = nil
        if let partitionValuesContainer = partitionValuesContainer {
            partitionValuesDecoded0 = [Swift.String]()
            for string0 in partitionValuesContainer {
                if let string0 = string0 {
                    partitionValuesDecoded0?.append(string0)
                }
            }
        }
        partitionValues = partitionValuesDecoded0
        let errorDetailDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ErrorDetail.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
    }
}

extension GlueClientTypes {
    /// Contains information about a partition error.
    public struct PartitionError: Swift.Equatable {
        /// The details about the partition error.
        public var errorDetail: GlueClientTypes.ErrorDetail?
        /// The values that define the partition.
        public var partitionValues: [Swift.String]?

        public init (
            errorDetail: GlueClientTypes.ErrorDetail? = nil,
            partitionValues: [Swift.String]? = nil
        )
        {
            self.errorDetail = errorDetail
            self.partitionValues = partitionValues
        }
    }

}

extension GlueClientTypes.PartitionIndex: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case keys = "Keys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keys = keys {
            var keysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keys)
            for keylist0 in keys {
                try keysContainer.encode(keylist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .keys)
        var keysDecoded0:[Swift.String]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [Swift.String]()
            for string0 in keysContainer {
                if let string0 = string0 {
                    keysDecoded0?.append(string0)
                }
            }
        }
        keys = keysDecoded0
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
    }
}

extension GlueClientTypes {
    /// A structure for a partition index.
    public struct PartitionIndex: Swift.Equatable {
        /// The name of the partition index.
        /// This member is required.
        public var indexName: Swift.String?
        /// The keys for the partition index.
        /// This member is required.
        public var keys: [Swift.String]?

        public init (
            indexName: Swift.String? = nil,
            keys: [Swift.String]? = nil
        )
        {
            self.indexName = indexName
            self.keys = keys
        }
    }

}

extension GlueClientTypes.PartitionIndexDescriptor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backfillErrors = "BackfillErrors"
        case indexName = "IndexName"
        case indexStatus = "IndexStatus"
        case keys = "Keys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backfillErrors = backfillErrors {
            var backfillErrorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .backfillErrors)
            for backfillerrors0 in backfillErrors {
                try backfillErrorsContainer.encode(backfillerrors0)
            }
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexStatus = indexStatus {
            try encodeContainer.encode(indexStatus.rawValue, forKey: .indexStatus)
        }
        if let keys = keys {
            var keysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keys)
            for keyschemaelementlist0 in keys {
                try keysContainer.encode(keyschemaelementlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keysContainer = try containerValues.decodeIfPresent([GlueClientTypes.KeySchemaElement?].self, forKey: .keys)
        var keysDecoded0:[GlueClientTypes.KeySchemaElement]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [GlueClientTypes.KeySchemaElement]()
            for structure0 in keysContainer {
                if let structure0 = structure0 {
                    keysDecoded0?.append(structure0)
                }
            }
        }
        keys = keysDecoded0
        let indexStatusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PartitionIndexStatus.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let backfillErrorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.BackfillError?].self, forKey: .backfillErrors)
        var backfillErrorsDecoded0:[GlueClientTypes.BackfillError]? = nil
        if let backfillErrorsContainer = backfillErrorsContainer {
            backfillErrorsDecoded0 = [GlueClientTypes.BackfillError]()
            for structure0 in backfillErrorsContainer {
                if let structure0 = structure0 {
                    backfillErrorsDecoded0?.append(structure0)
                }
            }
        }
        backfillErrors = backfillErrorsDecoded0
    }
}

extension GlueClientTypes {
    /// A descriptor for a partition index in a table.
    public struct PartitionIndexDescriptor: Swift.Equatable {
        /// A list of errors that can occur when registering partition indexes for an existing table.
        public var backfillErrors: [GlueClientTypes.BackfillError]?
        /// The name of the partition index.
        /// This member is required.
        public var indexName: Swift.String?
        /// The status of the partition index. The possible statuses are:
        ///
        /// * CREATING: The index is being created. When an index is in a CREATING state, the index or its table cannot be deleted.
        ///
        /// * ACTIVE: The index creation succeeds.
        ///
        /// * FAILED: The index creation fails.
        ///
        /// * DELETING: The index is deleted from the list of indexes.
        /// This member is required.
        public var indexStatus: GlueClientTypes.PartitionIndexStatus?
        /// A list of one or more keys, as KeySchemaElement structures, for the partition index.
        /// This member is required.
        public var keys: [GlueClientTypes.KeySchemaElement]?

        public init (
            backfillErrors: [GlueClientTypes.BackfillError]? = nil,
            indexName: Swift.String? = nil,
            indexStatus: GlueClientTypes.PartitionIndexStatus? = nil,
            keys: [GlueClientTypes.KeySchemaElement]? = nil
        )
        {
            self.backfillErrors = backfillErrors
            self.indexName = indexName
            self.indexStatus = indexStatus
            self.keys = keys
        }
    }

}

extension GlueClientTypes {
    public enum PartitionIndexStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [PartitionIndexStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PartitionIndexStatus(rawValue: rawValue) ?? PartitionIndexStatus.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.PartitionInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastAccessTime = "LastAccessTime"
        case lastAnalyzedTime = "LastAnalyzedTime"
        case parameters = "Parameters"
        case storageDescriptor = "StorageDescriptor"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastAccessTime = lastAccessTime {
            try encodeContainer.encode(lastAccessTime.timeIntervalSince1970, forKey: .lastAccessTime)
        }
        if let lastAnalyzedTime = lastAnalyzedTime {
            try encodeContainer.encode(lastAnalyzedTime.timeIntervalSince1970, forKey: .lastAnalyzedTime)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let storageDescriptor = storageDescriptor {
            try encodeContainer.encode(storageDescriptor, forKey: .storageDescriptor)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for valuestringlist0 in values {
                try valuesContainer.encode(valuestringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
        let lastAccessTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAccessTime)
        lastAccessTime = lastAccessTimeDecoded
        let storageDescriptorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StorageDescriptor.self, forKey: .storageDescriptor)
        storageDescriptor = storageDescriptorDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let lastAnalyzedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAnalyzedTime)
        lastAnalyzedTime = lastAnalyzedTimeDecoded
    }
}

extension GlueClientTypes {
    /// The structure used to create and update a partition.
    public struct PartitionInput: Swift.Equatable {
        /// The last time at which the partition was accessed.
        public var lastAccessTime: ClientRuntime.Date?
        /// The last time at which column statistics were computed for this partition.
        public var lastAnalyzedTime: ClientRuntime.Date?
        /// These key-value pairs define partition parameters.
        public var parameters: [Swift.String:Swift.String]?
        /// Provides information about the physical location where the partition is stored.
        public var storageDescriptor: GlueClientTypes.StorageDescriptor?
        /// The values of the partition. Although this parameter is not required by the SDK, you must specify this parameter for a valid input. The values for the keys for the new partition must be passed as an array of String objects that must be ordered in the same order as the partition keys appearing in the Amazon S3 prefix. Otherwise Glue will add the values to the wrong keys.
        public var values: [Swift.String]?

        public init (
            lastAccessTime: ClientRuntime.Date? = nil,
            lastAnalyzedTime: ClientRuntime.Date? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            storageDescriptor: GlueClientTypes.StorageDescriptor? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.lastAccessTime = lastAccessTime
            self.lastAnalyzedTime = lastAnalyzedTime
            self.parameters = parameters
            self.storageDescriptor = storageDescriptor
            self.values = values
        }
    }

}

extension GlueClientTypes.PartitionValueList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for valuestringlist0 in values {
                try valuesContainer.encode(valuestringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension GlueClientTypes {
    /// Contains a list of values defining partitions.
    public struct PartitionValueList: Swift.Equatable {
        /// The list of values.
        /// This member is required.
        public var values: [Swift.String]?

        public init (
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension GlueClientTypes {
    public enum Permission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case alter
        case createDatabase
        case createTable
        case dataLocationAccess
        case delete
        case drop
        case insert
        case select
        case sdkUnknown(Swift.String)

        public static var allCases: [Permission] {
            return [
                .all,
                .alter,
                .createDatabase,
                .createTable,
                .dataLocationAccess,
                .delete,
                .drop,
                .insert,
                .select,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .alter: return "ALTER"
            case .createDatabase: return "CREATE_DATABASE"
            case .createTable: return "CREATE_TABLE"
            case .dataLocationAccess: return "DATA_LOCATION_ACCESS"
            case .delete: return "DELETE"
            case .drop: return "DROP"
            case .insert: return "INSERT"
            case .select: return "SELECT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Permission(rawValue: rawValue) ?? Permission.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.PhysicalConnectionRequirements: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case securityGroupIdList = "SecurityGroupIdList"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let securityGroupIdList = securityGroupIdList {
            var securityGroupIdListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIdList)
            for securitygroupidlist0 in securityGroupIdList {
                try securityGroupIdListContainer.encode(securitygroupidlist0)
            }
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let securityGroupIdListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIdList)
        var securityGroupIdListDecoded0:[Swift.String]? = nil
        if let securityGroupIdListContainer = securityGroupIdListContainer {
            securityGroupIdListDecoded0 = [Swift.String]()
            for string0 in securityGroupIdListContainer {
                if let string0 = string0 {
                    securityGroupIdListDecoded0?.append(string0)
                }
            }
        }
        securityGroupIdList = securityGroupIdListDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
    }
}

extension GlueClientTypes {
    /// Specifies the physical requirements for a connection.
    public struct PhysicalConnectionRequirements: Swift.Equatable {
        /// The connection's Availability Zone. This field is redundant because the specified subnet implies the Availability Zone to be used. Currently the field must be populated, but it will be deprecated in the future.
        public var availabilityZone: Swift.String?
        /// The security group ID list used by the connection.
        public var securityGroupIdList: [Swift.String]?
        /// The subnet ID used by the connection.
        public var subnetId: Swift.String?

        public init (
            availabilityZone: Swift.String? = nil,
            securityGroupIdList: [Swift.String]? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.securityGroupIdList = securityGroupIdList
            self.subnetId = subnetId
        }
    }

}

extension GlueClientTypes.Predecessor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension GlueClientTypes {
    /// A job run that was used in the predicate of a conditional trigger that triggered this job run.
    public struct Predecessor: Swift.Equatable {
        /// The name of the job definition used by the predecessor job run.
        public var jobName: Swift.String?
        /// The job-run ID of the predecessor job run.
        public var runId: Swift.String?

        public init (
            jobName: Swift.String? = nil,
            runId: Swift.String? = nil
        )
        {
            self.jobName = jobName
            self.runId = runId
        }
    }

}

extension GlueClientTypes.Predicate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditions = "Conditions"
        case logical = "Logical"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditions = conditions {
            var conditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conditions)
            for conditionlist0 in conditions {
                try conditionsContainer.encode(conditionlist0)
            }
        }
        if let logical = logical {
            try encodeContainer.encode(logical.rawValue, forKey: .logical)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logicalDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Logical.self, forKey: .logical)
        logical = logicalDecoded
        let conditionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Condition?].self, forKey: .conditions)
        var conditionsDecoded0:[GlueClientTypes.Condition]? = nil
        if let conditionsContainer = conditionsContainer {
            conditionsDecoded0 = [GlueClientTypes.Condition]()
            for structure0 in conditionsContainer {
                if let structure0 = structure0 {
                    conditionsDecoded0?.append(structure0)
                }
            }
        }
        conditions = conditionsDecoded0
    }
}

extension GlueClientTypes {
    /// Defines the predicate of the trigger, which determines when it fires.
    public struct Predicate: Swift.Equatable {
        /// A list of the conditions that determine when the trigger will fire.
        public var conditions: [GlueClientTypes.Condition]?
        /// An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
        public var logical: GlueClientTypes.Logical?

        public init (
            conditions: [GlueClientTypes.Condition]? = nil,
            logical: GlueClientTypes.Logical? = nil
        )
        {
            self.conditions = conditions
            self.logical = logical
        }
    }

}

extension GlueClientTypes.PrincipalPermissions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case permissions = "Permissions"
        case principal = "Principal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for permissionlist0 in permissions {
                try permissionsContainer.encode(permissionlist0.rawValue)
            }
        }
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataLakePrincipal.self, forKey: .principal)
        principal = principalDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Permission?].self, forKey: .permissions)
        var permissionsDecoded0:[GlueClientTypes.Permission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [GlueClientTypes.Permission]()
            for string0 in permissionsContainer {
                if let string0 = string0 {
                    permissionsDecoded0?.append(string0)
                }
            }
        }
        permissions = permissionsDecoded0
    }
}

extension GlueClientTypes {
    /// Permissions granted to a principal.
    public struct PrincipalPermissions: Swift.Equatable {
        /// The permissions that are granted to the principal.
        public var permissions: [GlueClientTypes.Permission]?
        /// The principal who is granted permissions.
        public var principal: GlueClientTypes.DataLakePrincipal?

        public init (
            permissions: [GlueClientTypes.Permission]? = nil,
            principal: GlueClientTypes.DataLakePrincipal? = nil
        )
        {
            self.permissions = permissions
            self.principal = principal
        }
    }

}

extension GlueClientTypes {
    public enum PrincipalType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case group
        case role
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [PrincipalType] {
            return [
                .group,
                .role,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .role: return "ROLE"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PrincipalType(rawValue: rawValue) ?? PrincipalType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.PropertyPredicate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparator = "Comparator"
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparator = comparator {
            try encodeContainer.encode(comparator.rawValue, forKey: .comparator)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let comparatorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Comparator.self, forKey: .comparator)
        comparator = comparatorDecoded
    }
}

extension GlueClientTypes {
    /// Defines a property predicate.
    public struct PropertyPredicate: Swift.Equatable {
        /// The comparator used to compare this property to others.
        public var comparator: GlueClientTypes.Comparator?
        /// The key of the property.
        public var key: Swift.String?
        /// The value of the property.
        public var value: Swift.String?

        public init (
            comparator: GlueClientTypes.Comparator? = nil,
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.comparator = comparator
            self.key = key
            self.value = value
        }
    }

}

extension PutDataCatalogEncryptionSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case dataCatalogEncryptionSettings = "DataCatalogEncryptionSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let dataCatalogEncryptionSettings = dataCatalogEncryptionSettings {
            try encodeContainer.encode(dataCatalogEncryptionSettings, forKey: .dataCatalogEncryptionSettings)
        }
    }
}

extension PutDataCatalogEncryptionSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDataCatalogEncryptionSettingsInput: Swift.Equatable {
    /// The ID of the Data Catalog to set the security configuration for. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The security configuration to set.
    /// This member is required.
    public var dataCatalogEncryptionSettings: GlueClientTypes.DataCatalogEncryptionSettings?

    public init (
        catalogId: Swift.String? = nil,
        dataCatalogEncryptionSettings: GlueClientTypes.DataCatalogEncryptionSettings? = nil
    )
    {
        self.catalogId = catalogId
        self.dataCatalogEncryptionSettings = dataCatalogEncryptionSettings
    }
}

struct PutDataCatalogEncryptionSettingsInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let dataCatalogEncryptionSettings: GlueClientTypes.DataCatalogEncryptionSettings?
}

extension PutDataCatalogEncryptionSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case dataCatalogEncryptionSettings = "DataCatalogEncryptionSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let dataCatalogEncryptionSettingsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataCatalogEncryptionSettings.self, forKey: .dataCatalogEncryptionSettings)
        dataCatalogEncryptionSettings = dataCatalogEncryptionSettingsDecoded
    }
}

extension PutDataCatalogEncryptionSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDataCatalogEncryptionSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutDataCatalogEncryptionSettingsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDataCatalogEncryptionSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutDataCatalogEncryptionSettingsOutputResponse: Swift.Equatable {

}

extension PutResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableHybrid = "EnableHybrid"
        case policyExistsCondition = "PolicyExistsCondition"
        case policyHashCondition = "PolicyHashCondition"
        case policyInJson = "PolicyInJson"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enableHybrid = enableHybrid {
            try encodeContainer.encode(enableHybrid.rawValue, forKey: .enableHybrid)
        }
        if let policyExistsCondition = policyExistsCondition {
            try encodeContainer.encode(policyExistsCondition.rawValue, forKey: .policyExistsCondition)
        }
        if let policyHashCondition = policyHashCondition {
            try encodeContainer.encode(policyHashCondition, forKey: .policyHashCondition)
        }
        if let policyInJson = policyInJson {
            try encodeContainer.encode(policyInJson, forKey: .policyInJson)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension PutResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// If 'TRUE', indicates that you are using both methods to grant cross-account access to Data Catalog resources:
    ///
    /// * By directly updating the resource policy with PutResourePolicy
    ///
    /// * By using the Grant permissions command on the Amazon Web Services Management Console.
    ///
    ///
    /// Must be set to 'TRUE' if you have already used the Management Console to grant cross-account access, otherwise the call fails. Default is 'FALSE'.
    public var enableHybrid: GlueClientTypes.EnableHybridValues?
    /// A value of MUST_EXIST is used to update a policy. A value of NOT_EXIST is used to create a new policy. If a value of NONE or a null value is used, the call does not depend on the existence of a policy.
    public var policyExistsCondition: GlueClientTypes.ExistCondition?
    /// The hash value returned when the previous policy was set using PutResourcePolicy. Its purpose is to prevent concurrent modifications of a policy. Do not use this parameter if no previous policy has been set.
    public var policyHashCondition: Swift.String?
    /// Contains the policy document to set, in JSON format.
    /// This member is required.
    public var policyInJson: Swift.String?
    /// Do not use. For internal use only.
    public var resourceArn: Swift.String?

    public init (
        enableHybrid: GlueClientTypes.EnableHybridValues? = nil,
        policyExistsCondition: GlueClientTypes.ExistCondition? = nil,
        policyHashCondition: Swift.String? = nil,
        policyInJson: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.enableHybrid = enableHybrid
        self.policyExistsCondition = policyExistsCondition
        self.policyHashCondition = policyHashCondition
        self.policyInJson = policyInJson
        self.resourceArn = resourceArn
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    let policyInJson: Swift.String?
    let resourceArn: Swift.String?
    let policyHashCondition: Swift.String?
    let policyExistsCondition: GlueClientTypes.ExistCondition?
    let enableHybrid: GlueClientTypes.EnableHybridValues?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableHybrid = "EnableHybrid"
        case policyExistsCondition = "PolicyExistsCondition"
        case policyHashCondition = "PolicyHashCondition"
        case policyInJson = "PolicyInJson"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyInJsonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyInJson)
        policyInJson = policyInJsonDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let policyHashConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyHashCondition)
        policyHashCondition = policyHashConditionDecoded
        let policyExistsConditionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ExistCondition.self, forKey: .policyExistsCondition)
        policyExistsCondition = policyExistsConditionDecoded
        let enableHybridDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EnableHybridValues.self, forKey: .enableHybrid)
        enableHybrid = enableHybridDecoded
    }
}

extension PutResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConditionCheckFailureException" : self = .conditionCheckFailureException(try ConditionCheckFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case conditionCheckFailureException(ConditionCheckFailureException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyHash = output.policyHash
        } else {
            self.policyHash = nil
        }
    }
}

public struct PutResourcePolicyOutputResponse: Swift.Equatable {
    /// A hash of the policy that has just been set. This must be included in a subsequent call that overwrites or updates this policy.
    public var policyHash: Swift.String?

    public init (
        policyHash: Swift.String? = nil
    )
    {
        self.policyHash = policyHash
    }
}

struct PutResourcePolicyOutputResponseBody: Swift.Equatable {
    let policyHash: Swift.String?
}

extension PutResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyHash = "PolicyHash"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyHash)
        policyHash = policyHashDecoded
    }
}

extension PutSchemaVersionMetadataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadataKeyValue = "MetadataKeyValue"
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metadataKeyValue = metadataKeyValue {
            try encodeContainer.encode(metadataKeyValue, forKey: .metadataKeyValue)
        }
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let schemaVersionId = schemaVersionId {
            try encodeContainer.encode(schemaVersionId, forKey: .schemaVersionId)
        }
        if let schemaVersionNumber = schemaVersionNumber {
            try encodeContainer.encode(schemaVersionNumber, forKey: .schemaVersionNumber)
        }
    }
}

extension PutSchemaVersionMetadataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutSchemaVersionMetadataInput: Swift.Equatable {
    /// The metadata key's corresponding value.
    /// This member is required.
    public var metadataKeyValue: GlueClientTypes.MetadataKeyValuePair?
    /// The unique ID for the schema.
    public var schemaId: GlueClientTypes.SchemaId?
    /// The unique version ID of the schema version.
    public var schemaVersionId: Swift.String?
    /// The version number of the schema.
    public var schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?

    public init (
        metadataKeyValue: GlueClientTypes.MetadataKeyValuePair? = nil,
        schemaId: GlueClientTypes.SchemaId? = nil,
        schemaVersionId: Swift.String? = nil,
        schemaVersionNumber: GlueClientTypes.SchemaVersionNumber? = nil
    )
    {
        self.metadataKeyValue = metadataKeyValue
        self.schemaId = schemaId
        self.schemaVersionId = schemaVersionId
        self.schemaVersionNumber = schemaVersionNumber
    }
}

struct PutSchemaVersionMetadataInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?
    let schemaVersionId: Swift.String?
    let metadataKeyValue: GlueClientTypes.MetadataKeyValuePair?
}

extension PutSchemaVersionMetadataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadataKeyValue = "MetadataKeyValue"
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaVersionNumberDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionNumber.self, forKey: .schemaVersionNumber)
        schemaVersionNumber = schemaVersionNumberDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let metadataKeyValueDecoded = try containerValues.decodeIfPresent(GlueClientTypes.MetadataKeyValuePair.self, forKey: .metadataKeyValue)
        metadataKeyValue = metadataKeyValueDecoded
    }
}

extension PutSchemaVersionMetadataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutSchemaVersionMetadataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutSchemaVersionMetadataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case alreadyExistsException(AlreadyExistsException)
    case entityNotFoundException(EntityNotFoundException)
    case invalidInputException(InvalidInputException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutSchemaVersionMetadataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutSchemaVersionMetadataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.latestVersion = output.latestVersion
            self.metadataKey = output.metadataKey
            self.metadataValue = output.metadataValue
            self.registryName = output.registryName
            self.schemaArn = output.schemaArn
            self.schemaName = output.schemaName
            self.schemaVersionId = output.schemaVersionId
            self.versionNumber = output.versionNumber
        } else {
            self.latestVersion = false
            self.metadataKey = nil
            self.metadataValue = nil
            self.registryName = nil
            self.schemaArn = nil
            self.schemaName = nil
            self.schemaVersionId = nil
            self.versionNumber = 0
        }
    }
}

public struct PutSchemaVersionMetadataOutputResponse: Swift.Equatable {
    /// The latest version of the schema.
    public var latestVersion: Swift.Bool
    /// The metadata key.
    public var metadataKey: Swift.String?
    /// The value of the metadata key.
    public var metadataValue: Swift.String?
    /// The name for the registry.
    public var registryName: Swift.String?
    /// The Amazon Resource Name (ARN) for the schema.
    public var schemaArn: Swift.String?
    /// The name for the schema.
    public var schemaName: Swift.String?
    /// The unique version ID of the schema version.
    public var schemaVersionId: Swift.String?
    /// The version number of the schema.
    public var versionNumber: Swift.Int

    public init (
        latestVersion: Swift.Bool = false,
        metadataKey: Swift.String? = nil,
        metadataValue: Swift.String? = nil,
        registryName: Swift.String? = nil,
        schemaArn: Swift.String? = nil,
        schemaName: Swift.String? = nil,
        schemaVersionId: Swift.String? = nil,
        versionNumber: Swift.Int = 0
    )
    {
        self.latestVersion = latestVersion
        self.metadataKey = metadataKey
        self.metadataValue = metadataValue
        self.registryName = registryName
        self.schemaArn = schemaArn
        self.schemaName = schemaName
        self.schemaVersionId = schemaVersionId
        self.versionNumber = versionNumber
    }
}

struct PutSchemaVersionMetadataOutputResponseBody: Swift.Equatable {
    let schemaArn: Swift.String?
    let schemaName: Swift.String?
    let registryName: Swift.String?
    let latestVersion: Swift.Bool
    let versionNumber: Swift.Int
    let schemaVersionId: Swift.String?
    let metadataKey: Swift.String?
    let metadataValue: Swift.String?
}

extension PutSchemaVersionMetadataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case latestVersion = "LatestVersion"
        case metadataKey = "MetadataKey"
        case metadataValue = "MetadataValue"
        case registryName = "RegistryName"
        case schemaArn = "SchemaArn"
        case schemaName = "SchemaName"
        case schemaVersionId = "SchemaVersionId"
        case versionNumber = "VersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let latestVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .latestVersion)
        latestVersion = latestVersionDecoded
        let versionNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let metadataKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataKey)
        metadataKey = metadataKeyDecoded
        let metadataValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataValue)
        metadataValue = metadataValueDecoded
    }
}

extension PutWorkflowRunPropertiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case runId = "RunId"
        case runProperties = "RunProperties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let runProperties = runProperties {
            var runPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .runProperties)
            for (dictKey0, workflowrunproperties0) in runProperties {
                try runPropertiesContainer.encode(workflowrunproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension PutWorkflowRunPropertiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutWorkflowRunPropertiesInput: Swift.Equatable {
    /// Name of the workflow which was run.
    /// This member is required.
    public var name: Swift.String?
    /// The ID of the workflow run for which the run properties should be updated.
    /// This member is required.
    public var runId: Swift.String?
    /// The properties to put for the specified run.
    /// This member is required.
    public var runProperties: [Swift.String:Swift.String]?

    public init (
        name: Swift.String? = nil,
        runId: Swift.String? = nil,
        runProperties: [Swift.String:Swift.String]? = nil
    )
    {
        self.name = name
        self.runId = runId
        self.runProperties = runProperties
    }
}

struct PutWorkflowRunPropertiesInputBody: Swift.Equatable {
    let name: Swift.String?
    let runId: Swift.String?
    let runProperties: [Swift.String:Swift.String]?
}

extension PutWorkflowRunPropertiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case runId = "RunId"
        case runProperties = "RunProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let runPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .runProperties)
        var runPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let runPropertiesContainer = runPropertiesContainer {
            runPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in runPropertiesContainer {
                if let genericstring0 = genericstring0 {
                    runPropertiesDecoded0?[key0] = genericstring0
                }
            }
        }
        runProperties = runPropertiesDecoded0
    }
}

extension PutWorkflowRunPropertiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutWorkflowRunPropertiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutWorkflowRunPropertiesOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutWorkflowRunPropertiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutWorkflowRunPropertiesOutputResponse: Swift.Equatable {

}

extension QuerySchemaVersionMetadataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case metadataList = "MetadataList"
        case nextToken = "NextToken"
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let metadataList = metadataList {
            var metadataListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metadataList)
            for metadatalist0 in metadataList {
                try metadataListContainer.encode(metadatalist0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let schemaVersionId = schemaVersionId {
            try encodeContainer.encode(schemaVersionId, forKey: .schemaVersionId)
        }
        if let schemaVersionNumber = schemaVersionNumber {
            try encodeContainer.encode(schemaVersionNumber, forKey: .schemaVersionNumber)
        }
    }
}

extension QuerySchemaVersionMetadataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct QuerySchemaVersionMetadataInput: Swift.Equatable {
    /// Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.
    public var maxResults: Swift.Int
    /// Search key-value pairs for metadata, if they are not provided all the metadata information will be fetched.
    public var metadataList: [GlueClientTypes.MetadataKeyValuePair]?
    /// A continuation token, if this is a continuation call.
    public var nextToken: Swift.String?
    /// A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).
    public var schemaId: GlueClientTypes.SchemaId?
    /// The unique version ID of the schema version.
    public var schemaVersionId: Swift.String?
    /// The version number of the schema.
    public var schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?

    public init (
        maxResults: Swift.Int = 0,
        metadataList: [GlueClientTypes.MetadataKeyValuePair]? = nil,
        nextToken: Swift.String? = nil,
        schemaId: GlueClientTypes.SchemaId? = nil,
        schemaVersionId: Swift.String? = nil,
        schemaVersionNumber: GlueClientTypes.SchemaVersionNumber? = nil
    )
    {
        self.maxResults = maxResults
        self.metadataList = metadataList
        self.nextToken = nextToken
        self.schemaId = schemaId
        self.schemaVersionId = schemaVersionId
        self.schemaVersionNumber = schemaVersionNumber
    }
}

struct QuerySchemaVersionMetadataInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?
    let schemaVersionId: Swift.String?
    let metadataList: [GlueClientTypes.MetadataKeyValuePair]?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension QuerySchemaVersionMetadataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case metadataList = "MetadataList"
        case nextToken = "NextToken"
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaVersionNumberDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionNumber.self, forKey: .schemaVersionNumber)
        schemaVersionNumber = schemaVersionNumberDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let metadataListContainer = try containerValues.decodeIfPresent([GlueClientTypes.MetadataKeyValuePair?].self, forKey: .metadataList)
        var metadataListDecoded0:[GlueClientTypes.MetadataKeyValuePair]? = nil
        if let metadataListContainer = metadataListContainer {
            metadataListDecoded0 = [GlueClientTypes.MetadataKeyValuePair]()
            for structure0 in metadataListContainer {
                if let structure0 = structure0 {
                    metadataListDecoded0?.append(structure0)
                }
            }
        }
        metadataList = metadataListDecoded0
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension QuerySchemaVersionMetadataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension QuerySchemaVersionMetadataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum QuerySchemaVersionMetadataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension QuerySchemaVersionMetadataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: QuerySchemaVersionMetadataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metadataInfoMap = output.metadataInfoMap
            self.nextToken = output.nextToken
            self.schemaVersionId = output.schemaVersionId
        } else {
            self.metadataInfoMap = nil
            self.nextToken = nil
            self.schemaVersionId = nil
        }
    }
}

public struct QuerySchemaVersionMetadataOutputResponse: Swift.Equatable {
    /// A map of a metadata key and associated values.
    public var metadataInfoMap: [Swift.String:GlueClientTypes.MetadataInfo]?
    /// A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.
    public var nextToken: Swift.String?
    /// The unique version ID of the schema version.
    public var schemaVersionId: Swift.String?

    public init (
        metadataInfoMap: [Swift.String:GlueClientTypes.MetadataInfo]? = nil,
        nextToken: Swift.String? = nil,
        schemaVersionId: Swift.String? = nil
    )
    {
        self.metadataInfoMap = metadataInfoMap
        self.nextToken = nextToken
        self.schemaVersionId = schemaVersionId
    }
}

struct QuerySchemaVersionMetadataOutputResponseBody: Swift.Equatable {
    let metadataInfoMap: [Swift.String:GlueClientTypes.MetadataInfo]?
    let schemaVersionId: Swift.String?
    let nextToken: Swift.String?
}

extension QuerySchemaVersionMetadataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadataInfoMap = "MetadataInfoMap"
        case nextToken = "NextToken"
        case schemaVersionId = "SchemaVersionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataInfoMapContainer = try containerValues.decodeIfPresent([Swift.String: GlueClientTypes.MetadataInfo?].self, forKey: .metadataInfoMap)
        var metadataInfoMapDecoded0: [Swift.String:GlueClientTypes.MetadataInfo]? = nil
        if let metadataInfoMapContainer = metadataInfoMapContainer {
            metadataInfoMapDecoded0 = [Swift.String:GlueClientTypes.MetadataInfo]()
            for (key0, metadatainfo0) in metadataInfoMapContainer {
                if let metadatainfo0 = metadatainfo0 {
                    metadataInfoMapDecoded0?[key0] = metadatainfo0
                }
            }
        }
        metadataInfoMap = metadataInfoMapDecoded0
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GlueClientTypes {
    public enum RecrawlBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case crawlEventMode
        case crawlEverything
        case crawlNewFoldersOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [RecrawlBehavior] {
            return [
                .crawlEventMode,
                .crawlEverything,
                .crawlNewFoldersOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .crawlEventMode: return "CRAWL_EVENT_MODE"
            case .crawlEverything: return "CRAWL_EVERYTHING"
            case .crawlNewFoldersOnly: return "CRAWL_NEW_FOLDERS_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecrawlBehavior(rawValue: rawValue) ?? RecrawlBehavior.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.RecrawlPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recrawlBehavior = "RecrawlBehavior"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recrawlBehavior = recrawlBehavior {
            try encodeContainer.encode(recrawlBehavior.rawValue, forKey: .recrawlBehavior)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recrawlBehaviorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RecrawlBehavior.self, forKey: .recrawlBehavior)
        recrawlBehavior = recrawlBehaviorDecoded
    }
}

extension GlueClientTypes {
    /// When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see [Incremental Crawls in Glue](https://docs.aws.amazon.com/glue/latest/dg/incremental-crawls.html) in the developer guide.
    public struct RecrawlPolicy: Swift.Equatable {
        /// Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. A value of CRAWL_EVERYTHING specifies crawling the entire dataset again. A value of CRAWL_NEW_FOLDERS_ONLY specifies crawling only folders that were added since the last crawler run. A value of CRAWL_EVENT_MODE specifies crawling only the changes identified by Amazon S3 events.
        public var recrawlBehavior: GlueClientTypes.RecrawlBehavior?

        public init (
            recrawlBehavior: GlueClientTypes.RecrawlBehavior? = nil
        )
        {
            self.recrawlBehavior = recrawlBehavior
        }
    }

}

extension RegisterSchemaVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaDefinition = "SchemaDefinition"
        case schemaId = "SchemaId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let schemaDefinition = schemaDefinition {
            try encodeContainer.encode(schemaDefinition, forKey: .schemaDefinition)
        }
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
    }
}

extension RegisterSchemaVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterSchemaVersionInput: Swift.Equatable {
    /// The schema definition using the DataFormat setting for the SchemaName.
    /// This member is required.
    public var schemaDefinition: Swift.String?
    /// This is a wrapper structure to contain schema identity fields. The structure contains:
    ///
    /// * SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either SchemaArn or SchemaName and RegistryName has to be provided.
    ///
    /// * SchemaId$SchemaName: The name of the schema. Either SchemaArn or SchemaName and RegistryName has to be provided.
    /// This member is required.
    public var schemaId: GlueClientTypes.SchemaId?

    public init (
        schemaDefinition: Swift.String? = nil,
        schemaId: GlueClientTypes.SchemaId? = nil
    )
    {
        self.schemaDefinition = schemaDefinition
        self.schemaId = schemaId
    }
}

struct RegisterSchemaVersionInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let schemaDefinition: Swift.String?
}

extension RegisterSchemaVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaDefinition = "SchemaDefinition"
        case schemaId = "SchemaId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaDefinition)
        schemaDefinition = schemaDefinitionDecoded
    }
}

extension RegisterSchemaVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterSchemaVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterSchemaVersionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterSchemaVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegisterSchemaVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.schemaVersionId = output.schemaVersionId
            self.status = output.status
            self.versionNumber = output.versionNumber
        } else {
            self.schemaVersionId = nil
            self.status = nil
            self.versionNumber = 0
        }
    }
}

public struct RegisterSchemaVersionOutputResponse: Swift.Equatable {
    /// The unique ID that represents the version of this schema.
    public var schemaVersionId: Swift.String?
    /// The status of the schema version.
    public var status: GlueClientTypes.SchemaVersionStatus?
    /// The version of this schema (for sync flow only, in case this is the first version).
    public var versionNumber: Swift.Int

    public init (
        schemaVersionId: Swift.String? = nil,
        status: GlueClientTypes.SchemaVersionStatus? = nil,
        versionNumber: Swift.Int = 0
    )
    {
        self.schemaVersionId = schemaVersionId
        self.status = status
        self.versionNumber = versionNumber
    }
}

struct RegisterSchemaVersionOutputResponseBody: Swift.Equatable {
    let schemaVersionId: Swift.String?
    let versionNumber: Swift.Int
    let status: GlueClientTypes.SchemaVersionStatus?
}

extension RegisterSchemaVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaVersionId = "SchemaVersionId"
        case status = "Status"
        case versionNumber = "VersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let versionNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension GlueClientTypes.RegistryId: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryArn = "RegistryArn"
        case registryName = "RegistryName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let registryArn = registryArn {
            try encodeContainer.encode(registryArn, forKey: .registryArn)
        }
        if let registryName = registryName {
            try encodeContainer.encode(registryName, forKey: .registryName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let registryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
    }
}

extension GlueClientTypes {
    /// A wrapper structure that may contain the registry name and Amazon Resource Name (ARN).
    public struct RegistryId: Swift.Equatable {
        /// Arn of the registry to be updated. One of RegistryArn or RegistryName has to be provided.
        public var registryArn: Swift.String?
        /// Name of the registry. Used only for lookup. One of RegistryArn or RegistryName has to be provided.
        public var registryName: Swift.String?

        public init (
            registryArn: Swift.String? = nil,
            registryName: Swift.String? = nil
        )
        {
            self.registryArn = registryArn
            self.registryName = registryName
        }
    }

}

extension GlueClientTypes.RegistryListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case description = "Description"
        case registryArn = "RegistryArn"
        case registryName = "RegistryName"
        case status = "Status"
        case updatedTime = "UpdatedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let registryArn = registryArn {
            try encodeContainer.encode(registryArn, forKey: .registryArn)
        }
        if let registryName = registryName {
            try encodeContainer.encode(registryName, forKey: .registryName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedTime = updatedTime {
            try encodeContainer.encode(updatedTime, forKey: .updatedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let registryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RegistryStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let updatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedTime)
        updatedTime = updatedTimeDecoded
    }
}

extension GlueClientTypes {
    /// A structure containing the details for a registry.
    public struct RegistryListItem: Swift.Equatable {
        /// The data the registry was created.
        public var createdTime: Swift.String?
        /// A description of the registry.
        public var description: Swift.String?
        /// The Amazon Resource Name (ARN) of the registry.
        public var registryArn: Swift.String?
        /// The name of the registry.
        public var registryName: Swift.String?
        /// The status of the registry.
        public var status: GlueClientTypes.RegistryStatus?
        /// The date the registry was updated.
        public var updatedTime: Swift.String?

        public init (
            createdTime: Swift.String? = nil,
            description: Swift.String? = nil,
            registryArn: Swift.String? = nil,
            registryName: Swift.String? = nil,
            status: GlueClientTypes.RegistryStatus? = nil,
            updatedTime: Swift.String? = nil
        )
        {
            self.createdTime = createdTime
            self.description = description
            self.registryArn = registryArn
            self.registryName = registryName
            self.status = status
            self.updatedTime = updatedTime
        }
    }

}

extension GlueClientTypes {
    public enum RegistryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistryStatus] {
            return [
                .available,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegistryStatus(rawValue: rawValue) ?? RegistryStatus.sdkUnknown(rawValue)
        }
    }
}

extension RemoveSchemaVersionMetadataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadataKeyValue = "MetadataKeyValue"
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metadataKeyValue = metadataKeyValue {
            try encodeContainer.encode(metadataKeyValue, forKey: .metadataKeyValue)
        }
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let schemaVersionId = schemaVersionId {
            try encodeContainer.encode(schemaVersionId, forKey: .schemaVersionId)
        }
        if let schemaVersionNumber = schemaVersionNumber {
            try encodeContainer.encode(schemaVersionNumber, forKey: .schemaVersionNumber)
        }
    }
}

extension RemoveSchemaVersionMetadataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RemoveSchemaVersionMetadataInput: Swift.Equatable {
    /// The value of the metadata key.
    /// This member is required.
    public var metadataKeyValue: GlueClientTypes.MetadataKeyValuePair?
    /// A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).
    public var schemaId: GlueClientTypes.SchemaId?
    /// The unique version ID of the schema version.
    public var schemaVersionId: Swift.String?
    /// The version number of the schema.
    public var schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?

    public init (
        metadataKeyValue: GlueClientTypes.MetadataKeyValuePair? = nil,
        schemaId: GlueClientTypes.SchemaId? = nil,
        schemaVersionId: Swift.String? = nil,
        schemaVersionNumber: GlueClientTypes.SchemaVersionNumber? = nil
    )
    {
        self.metadataKeyValue = metadataKeyValue
        self.schemaId = schemaId
        self.schemaVersionId = schemaVersionId
        self.schemaVersionNumber = schemaVersionNumber
    }
}

struct RemoveSchemaVersionMetadataInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?
    let schemaVersionId: Swift.String?
    let metadataKeyValue: GlueClientTypes.MetadataKeyValuePair?
}

extension RemoveSchemaVersionMetadataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadataKeyValue = "MetadataKeyValue"
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaVersionNumberDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionNumber.self, forKey: .schemaVersionNumber)
        schemaVersionNumber = schemaVersionNumberDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let metadataKeyValueDecoded = try containerValues.decodeIfPresent(GlueClientTypes.MetadataKeyValuePair.self, forKey: .metadataKeyValue)
        metadataKeyValue = metadataKeyValueDecoded
    }
}

extension RemoveSchemaVersionMetadataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveSchemaVersionMetadataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveSchemaVersionMetadataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveSchemaVersionMetadataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RemoveSchemaVersionMetadataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.latestVersion = output.latestVersion
            self.metadataKey = output.metadataKey
            self.metadataValue = output.metadataValue
            self.registryName = output.registryName
            self.schemaArn = output.schemaArn
            self.schemaName = output.schemaName
            self.schemaVersionId = output.schemaVersionId
            self.versionNumber = output.versionNumber
        } else {
            self.latestVersion = false
            self.metadataKey = nil
            self.metadataValue = nil
            self.registryName = nil
            self.schemaArn = nil
            self.schemaName = nil
            self.schemaVersionId = nil
            self.versionNumber = 0
        }
    }
}

public struct RemoveSchemaVersionMetadataOutputResponse: Swift.Equatable {
    /// The latest version of the schema.
    public var latestVersion: Swift.Bool
    /// The metadata key.
    public var metadataKey: Swift.String?
    /// The value of the metadata key.
    public var metadataValue: Swift.String?
    /// The name of the registry.
    public var registryName: Swift.String?
    /// The Amazon Resource Name (ARN) of the schema.
    public var schemaArn: Swift.String?
    /// The name of the schema.
    public var schemaName: Swift.String?
    /// The version ID for the schema version.
    public var schemaVersionId: Swift.String?
    /// The version number of the schema.
    public var versionNumber: Swift.Int

    public init (
        latestVersion: Swift.Bool = false,
        metadataKey: Swift.String? = nil,
        metadataValue: Swift.String? = nil,
        registryName: Swift.String? = nil,
        schemaArn: Swift.String? = nil,
        schemaName: Swift.String? = nil,
        schemaVersionId: Swift.String? = nil,
        versionNumber: Swift.Int = 0
    )
    {
        self.latestVersion = latestVersion
        self.metadataKey = metadataKey
        self.metadataValue = metadataValue
        self.registryName = registryName
        self.schemaArn = schemaArn
        self.schemaName = schemaName
        self.schemaVersionId = schemaVersionId
        self.versionNumber = versionNumber
    }
}

struct RemoveSchemaVersionMetadataOutputResponseBody: Swift.Equatable {
    let schemaArn: Swift.String?
    let schemaName: Swift.String?
    let registryName: Swift.String?
    let latestVersion: Swift.Bool
    let versionNumber: Swift.Int
    let schemaVersionId: Swift.String?
    let metadataKey: Swift.String?
    let metadataValue: Swift.String?
}

extension RemoveSchemaVersionMetadataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case latestVersion = "LatestVersion"
        case metadataKey = "MetadataKey"
        case metadataValue = "MetadataValue"
        case registryName = "RegistryName"
        case schemaArn = "SchemaArn"
        case schemaName = "SchemaName"
        case schemaVersionId = "SchemaVersionId"
        case versionNumber = "VersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let latestVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .latestVersion)
        latestVersion = latestVersionDecoded
        let versionNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let metadataKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataKey)
        metadataKey = metadataKeyDecoded
        let metadataValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataValue)
        metadataValue = metadataValueDecoded
    }
}

extension ResetJobBookmarkInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }
}

extension ResetJobBookmarkInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ResetJobBookmarkInput: Swift.Equatable {
    /// The name of the job in question.
    /// This member is required.
    public var jobName: Swift.String?
    /// The unique run identifier associated with this job run.
    public var runId: Swift.String?

    public init (
        jobName: Swift.String? = nil,
        runId: Swift.String? = nil
    )
    {
        self.jobName = jobName
        self.runId = runId
    }
}

struct ResetJobBookmarkInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let runId: Swift.String?
}

extension ResetJobBookmarkInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension ResetJobBookmarkOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResetJobBookmarkOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResetJobBookmarkOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResetJobBookmarkOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResetJobBookmarkOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobBookmarkEntry = output.jobBookmarkEntry
        } else {
            self.jobBookmarkEntry = nil
        }
    }
}

public struct ResetJobBookmarkOutputResponse: Swift.Equatable {
    /// The reset bookmark entry.
    public var jobBookmarkEntry: GlueClientTypes.JobBookmarkEntry?

    public init (
        jobBookmarkEntry: GlueClientTypes.JobBookmarkEntry? = nil
    )
    {
        self.jobBookmarkEntry = jobBookmarkEntry
    }
}

struct ResetJobBookmarkOutputResponseBody: Swift.Equatable {
    let jobBookmarkEntry: GlueClientTypes.JobBookmarkEntry?
}

extension ResetJobBookmarkOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobBookmarkEntry = "JobBookmarkEntry"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobBookmarkEntryDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobBookmarkEntry.self, forKey: .jobBookmarkEntry)
        jobBookmarkEntry = jobBookmarkEntryDecoded
    }
}

extension ResourceNotReadyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotReadyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource was not ready for a transaction.
public struct ResourceNotReadyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotReadyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotReadyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNumberLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNumberLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource numerical limit was exceeded.
public struct ResourceNumberLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNumberLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNumberLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes {
    public enum ResourceShareType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case foreign
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceShareType] {
            return [
                .all,
                .foreign,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .foreign: return "FOREIGN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceShareType(rawValue: rawValue) ?? ResourceShareType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archive
        case file
        case jar
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .archive,
                .file,
                .jar,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archive: return "ARCHIVE"
            case .file: return "FILE"
            case .jar: return "JAR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.ResourceUri: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceType = "ResourceType"
        case uri = "Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let uri = uri {
            try encodeContainer.encode(uri, forKey: .uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let uriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uri)
        uri = uriDecoded
    }
}

extension GlueClientTypes {
    /// The URIs for function resources.
    public struct ResourceUri: Swift.Equatable {
        /// The type of the resource.
        public var resourceType: GlueClientTypes.ResourceType?
        /// The URI for accessing the resource.
        public var uri: Swift.String?

        public init (
            resourceType: GlueClientTypes.ResourceType? = nil,
            uri: Swift.String? = nil
        )
        {
            self.resourceType = resourceType
            self.uri = uri
        }
    }

}

extension ResumeWorkflowRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case nodeIds = "NodeIds"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nodeIds = nodeIds {
            var nodeIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nodeIds)
            for nodeidlist0 in nodeIds {
                try nodeIdsContainer.encode(nodeidlist0)
            }
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }
}

extension ResumeWorkflowRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ResumeWorkflowRunInput: Swift.Equatable {
    /// The name of the workflow to resume.
    /// This member is required.
    public var name: Swift.String?
    /// A list of the node IDs for the nodes you want to restart. The nodes that are to be restarted must have a run attempt in the original run.
    /// This member is required.
    public var nodeIds: [Swift.String]?
    /// The ID of the workflow run to resume.
    /// This member is required.
    public var runId: Swift.String?

    public init (
        name: Swift.String? = nil,
        nodeIds: [Swift.String]? = nil,
        runId: Swift.String? = nil
    )
    {
        self.name = name
        self.nodeIds = nodeIds
        self.runId = runId
    }
}

struct ResumeWorkflowRunInputBody: Swift.Equatable {
    let name: Swift.String?
    let runId: Swift.String?
    let nodeIds: [Swift.String]?
}

extension ResumeWorkflowRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case nodeIds = "NodeIds"
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let nodeIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .nodeIds)
        var nodeIdsDecoded0:[Swift.String]? = nil
        if let nodeIdsContainer = nodeIdsContainer {
            nodeIdsDecoded0 = [Swift.String]()
            for string0 in nodeIdsContainer {
                if let string0 = string0 {
                    nodeIdsDecoded0?.append(string0)
                }
            }
        }
        nodeIds = nodeIdsDecoded0
    }
}

extension ResumeWorkflowRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResumeWorkflowRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentRunsExceededException" : self = .concurrentRunsExceededException(try ConcurrentRunsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IllegalWorkflowStateException" : self = .illegalWorkflowStateException(try IllegalWorkflowStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResumeWorkflowRunOutputError: Swift.Error, Swift.Equatable {
    case concurrentRunsExceededException(ConcurrentRunsExceededException)
    case entityNotFoundException(EntityNotFoundException)
    case illegalWorkflowStateException(IllegalWorkflowStateException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResumeWorkflowRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResumeWorkflowRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nodeIds = output.nodeIds
            self.runId = output.runId
        } else {
            self.nodeIds = nil
            self.runId = nil
        }
    }
}

public struct ResumeWorkflowRunOutputResponse: Swift.Equatable {
    /// A list of the node IDs for the nodes that were actually restarted.
    public var nodeIds: [Swift.String]?
    /// The new ID assigned to the resumed workflow run. Each resume of a workflow run will have a new run ID.
    public var runId: Swift.String?

    public init (
        nodeIds: [Swift.String]? = nil,
        runId: Swift.String? = nil
    )
    {
        self.nodeIds = nodeIds
        self.runId = runId
    }
}

struct ResumeWorkflowRunOutputResponseBody: Swift.Equatable {
    let runId: Swift.String?
    let nodeIds: [Swift.String]?
}

extension ResumeWorkflowRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeIds = "NodeIds"
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let nodeIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .nodeIds)
        var nodeIdsDecoded0:[Swift.String]? = nil
        if let nodeIdsContainer = nodeIdsContainer {
            nodeIdsDecoded0 = [Swift.String]()
            for string0 in nodeIdsContainer {
                if let string0 = string0 {
                    nodeIdsDecoded0?.append(string0)
                }
            }
        }
        nodeIds = nodeIdsDecoded0
    }
}

extension GlueClientTypes.S3Encryption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyArn = "KmsKeyArn"
        case s3EncryptionMode = "S3EncryptionMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
        if let s3EncryptionMode = s3EncryptionMode {
            try encodeContainer.encode(s3EncryptionMode.rawValue, forKey: .s3EncryptionMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3EncryptionModeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.S3EncryptionMode.self, forKey: .s3EncryptionMode)
        s3EncryptionMode = s3EncryptionModeDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}

extension GlueClientTypes {
    /// Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.
    public struct S3Encryption: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
        public var kmsKeyArn: Swift.String?
        /// The encryption mode to use for Amazon S3 data.
        public var s3EncryptionMode: GlueClientTypes.S3EncryptionMode?

        public init (
            kmsKeyArn: Swift.String? = nil,
            s3EncryptionMode: GlueClientTypes.S3EncryptionMode? = nil
        )
        {
            self.kmsKeyArn = kmsKeyArn
            self.s3EncryptionMode = s3EncryptionMode
        }
    }

}

extension GlueClientTypes {
    public enum S3EncryptionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case ssekms
        case sses3
        case sdkUnknown(Swift.String)

        public static var allCases: [S3EncryptionMode] {
            return [
                .disabled,
                .ssekms,
                .sses3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .ssekms: return "SSE-KMS"
            case .sses3: return "SSE-S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = S3EncryptionMode(rawValue: rawValue) ?? S3EncryptionMode.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.S3Target: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionName = "ConnectionName"
        case dlqEventQueueArn = "DlqEventQueueArn"
        case eventQueueArn = "EventQueueArn"
        case exclusions = "Exclusions"
        case path = "Path"
        case sampleSize = "SampleSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let dlqEventQueueArn = dlqEventQueueArn {
            try encodeContainer.encode(dlqEventQueueArn, forKey: .dlqEventQueueArn)
        }
        if let eventQueueArn = eventQueueArn {
            try encodeContainer.encode(eventQueueArn, forKey: .eventQueueArn)
        }
        if let exclusions = exclusions {
            var exclusionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusions)
            for pathlist0 in exclusions {
                try exclusionsContainer.encode(pathlist0)
            }
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let sampleSize = sampleSize {
            try encodeContainer.encode(sampleSize, forKey: .sampleSize)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let exclusionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusions)
        var exclusionsDecoded0:[Swift.String]? = nil
        if let exclusionsContainer = exclusionsContainer {
            exclusionsDecoded0 = [Swift.String]()
            for string0 in exclusionsContainer {
                if let string0 = string0 {
                    exclusionsDecoded0?.append(string0)
                }
            }
        }
        exclusions = exclusionsDecoded0
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let sampleSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sampleSize)
        sampleSize = sampleSizeDecoded
        let eventQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventQueueArn)
        eventQueueArn = eventQueueArnDecoded
        let dlqEventQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dlqEventQueueArn)
        dlqEventQueueArn = dlqEventQueueArnDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a data store in Amazon Simple Storage Service (Amazon S3).
    public struct S3Target: Swift.Equatable {
        /// The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC).
        public var connectionName: Swift.String?
        /// A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue.
        public var dlqEventQueueArn: Swift.String?
        /// A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs.
        public var eventQueueArn: Swift.String?
        /// A list of glob patterns used to exclude from the crawl. For more information, see [Catalog Tables with a Crawler](https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html).
        public var exclusions: [Swift.String]?
        /// The path to the Amazon S3 target.
        public var path: Swift.String?
        /// Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
        public var sampleSize: Swift.Int?

        public init (
            connectionName: Swift.String? = nil,
            dlqEventQueueArn: Swift.String? = nil,
            eventQueueArn: Swift.String? = nil,
            exclusions: [Swift.String]? = nil,
            path: Swift.String? = nil,
            sampleSize: Swift.Int? = nil
        )
        {
            self.connectionName = connectionName
            self.dlqEventQueueArn = dlqEventQueueArn
            self.eventQueueArn = eventQueueArn
            self.exclusions = exclusions
            self.path = path
            self.sampleSize = sampleSize
        }
    }

}

extension GlueClientTypes.Schedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleExpression = "ScheduleExpression"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleExpression = scheduleExpression {
            try encodeContainer.encode(scheduleExpression, forKey: .scheduleExpression)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleExpression)
        scheduleExpression = scheduleExpressionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ScheduleState.self, forKey: .state)
        state = stateDecoded
    }
}

extension GlueClientTypes {
    /// A scheduling object using a cron statement to schedule an event.
    public struct Schedule: Swift.Equatable {
        /// A cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public var scheduleExpression: Swift.String?
        /// The state of the schedule.
        public var state: GlueClientTypes.ScheduleState?

        public init (
            scheduleExpression: Swift.String? = nil,
            state: GlueClientTypes.ScheduleState? = nil
        )
        {
            self.scheduleExpression = scheduleExpression
            self.state = state
        }
    }

}

extension GlueClientTypes {
    public enum ScheduleState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notScheduled
        case scheduled
        case transitioning
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleState] {
            return [
                .notScheduled,
                .scheduled,
                .transitioning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notScheduled: return "NOT_SCHEDULED"
            case .scheduled: return "SCHEDULED"
            case .transitioning: return "TRANSITIONING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduleState(rawValue: rawValue) ?? ScheduleState.sdkUnknown(rawValue)
        }
    }
}

extension SchedulerNotRunningException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SchedulerNotRunningExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified scheduler is not running.
public struct SchedulerNotRunningException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SchedulerNotRunningExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension SchedulerNotRunningExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SchedulerRunningException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SchedulerRunningExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified scheduler is already running.
public struct SchedulerRunningException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SchedulerRunningExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension SchedulerRunningExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SchedulerTransitioningException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SchedulerTransitioningExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified scheduler is transitioning.
public struct SchedulerTransitioningException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SchedulerTransitioningExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension SchedulerTransitioningExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes.SchemaChangePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteBehavior = "DeleteBehavior"
        case updateBehavior = "UpdateBehavior"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleteBehavior = deleteBehavior {
            try encodeContainer.encode(deleteBehavior.rawValue, forKey: .deleteBehavior)
        }
        if let updateBehavior = updateBehavior {
            try encodeContainer.encode(updateBehavior.rawValue, forKey: .updateBehavior)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateBehaviorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UpdateBehavior.self, forKey: .updateBehavior)
        updateBehavior = updateBehaviorDecoded
        let deleteBehaviorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DeleteBehavior.self, forKey: .deleteBehavior)
        deleteBehavior = deleteBehaviorDecoded
    }
}

extension GlueClientTypes {
    /// A policy that specifies update and deletion behaviors for the crawler.
    public struct SchemaChangePolicy: Swift.Equatable {
        /// The deletion behavior when the crawler finds a deleted object.
        public var deleteBehavior: GlueClientTypes.DeleteBehavior?
        /// The update behavior when the crawler finds a changed schema.
        public var updateBehavior: GlueClientTypes.UpdateBehavior?

        public init (
            deleteBehavior: GlueClientTypes.DeleteBehavior? = nil,
            updateBehavior: GlueClientTypes.UpdateBehavior? = nil
        )
        {
            self.deleteBehavior = deleteBehavior
            self.updateBehavior = updateBehavior
        }
    }

}

extension GlueClientTypes.SchemaColumn: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataType = "DataType"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataType = dataType {
            try encodeContainer.encode(dataType, forKey: .dataType)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
    }
}

extension GlueClientTypes {
    /// A key-value pair representing a column and data type that this transform can run against. The Schema parameter of the MLTransform may contain up to 100 of these structures.
    public struct SchemaColumn: Swift.Equatable {
        /// The type of data in the column.
        public var dataType: Swift.String?
        /// The name of the column.
        public var name: Swift.String?

        public init (
            dataType: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.dataType = dataType
            self.name = name
        }
    }

}

extension GlueClientTypes {
    public enum SchemaDiffType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case syntaxDiff
        case sdkUnknown(Swift.String)

        public static var allCases: [SchemaDiffType] {
            return [
                .syntaxDiff,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .syntaxDiff: return "SYNTAX_DIFF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SchemaDiffType(rawValue: rawValue) ?? SchemaDiffType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.SchemaId: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryName = "RegistryName"
        case schemaArn = "SchemaArn"
        case schemaName = "SchemaName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let registryName = registryName {
            try encodeContainer.encode(registryName, forKey: .registryName)
        }
        if let schemaArn = schemaArn {
            try encodeContainer.encode(schemaArn, forKey: .schemaArn)
        }
        if let schemaName = schemaName {
            try encodeContainer.encode(schemaName, forKey: .schemaName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
    }
}

extension GlueClientTypes {
    /// The unique ID of the schema in the Glue schema registry.
    public struct SchemaId: Swift.Equatable {
        /// The name of the schema registry that contains the schema.
        public var registryName: Swift.String?
        /// The Amazon Resource Name (ARN) of the schema. One of SchemaArn or SchemaName has to be provided.
        public var schemaArn: Swift.String?
        /// The name of the schema. One of SchemaArn or SchemaName has to be provided.
        public var schemaName: Swift.String?

        public init (
            registryName: Swift.String? = nil,
            schemaArn: Swift.String? = nil,
            schemaName: Swift.String? = nil
        )
        {
            self.registryName = registryName
            self.schemaArn = schemaArn
            self.schemaName = schemaName
        }
    }

}

extension GlueClientTypes.SchemaListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case description = "Description"
        case registryName = "RegistryName"
        case schemaArn = "SchemaArn"
        case schemaName = "SchemaName"
        case schemaStatus = "SchemaStatus"
        case updatedTime = "UpdatedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let registryName = registryName {
            try encodeContainer.encode(registryName, forKey: .registryName)
        }
        if let schemaArn = schemaArn {
            try encodeContainer.encode(schemaArn, forKey: .schemaArn)
        }
        if let schemaName = schemaName {
            try encodeContainer.encode(schemaName, forKey: .schemaName)
        }
        if let schemaStatus = schemaStatus {
            try encodeContainer.encode(schemaStatus.rawValue, forKey: .schemaStatus)
        }
        if let updatedTime = updatedTime {
            try encodeContainer.encode(updatedTime, forKey: .updatedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let schemaStatusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaStatus.self, forKey: .schemaStatus)
        schemaStatus = schemaStatusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let updatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedTime)
        updatedTime = updatedTimeDecoded
    }
}

extension GlueClientTypes {
    /// An object that contains minimal details for a schema.
    public struct SchemaListItem: Swift.Equatable {
        /// The date and time that a schema was created.
        public var createdTime: Swift.String?
        /// A description for the schema.
        public var description: Swift.String?
        /// the name of the registry where the schema resides.
        public var registryName: Swift.String?
        /// The Amazon Resource Name (ARN) for the schema.
        public var schemaArn: Swift.String?
        /// The name of the schema.
        public var schemaName: Swift.String?
        /// The status of the schema.
        public var schemaStatus: GlueClientTypes.SchemaStatus?
        /// The date and time that a schema was updated.
        public var updatedTime: Swift.String?

        public init (
            createdTime: Swift.String? = nil,
            description: Swift.String? = nil,
            registryName: Swift.String? = nil,
            schemaArn: Swift.String? = nil,
            schemaName: Swift.String? = nil,
            schemaStatus: GlueClientTypes.SchemaStatus? = nil,
            updatedTime: Swift.String? = nil
        )
        {
            self.createdTime = createdTime
            self.description = description
            self.registryName = registryName
            self.schemaArn = schemaArn
            self.schemaName = schemaName
            self.schemaStatus = schemaStatus
            self.updatedTime = updatedTime
        }
    }

}

extension GlueClientTypes.SchemaReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaId = "SchemaId"
        case schemaVersionId = "SchemaVersionId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let schemaVersionId = schemaVersionId {
            try encodeContainer.encode(schemaVersionId, forKey: .schemaVersionId)
        }
        if schemaVersionNumber != 0 {
            try encodeContainer.encode(schemaVersionNumber, forKey: .schemaVersionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let schemaVersionNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .schemaVersionNumber)
        schemaVersionNumber = schemaVersionNumberDecoded
    }
}

extension GlueClientTypes {
    /// An object that references a schema stored in the Glue Schema Registry.
    public struct SchemaReference: Swift.Equatable {
        /// A structure that contains schema identity fields. Either this or the SchemaVersionId has to be provided.
        public var schemaId: GlueClientTypes.SchemaId?
        /// The unique ID assigned to a version of the schema. Either this or the SchemaId has to be provided.
        public var schemaVersionId: Swift.String?
        /// The version number of the schema.
        public var schemaVersionNumber: Swift.Int

        public init (
            schemaId: GlueClientTypes.SchemaId? = nil,
            schemaVersionId: Swift.String? = nil,
            schemaVersionNumber: Swift.Int = 0
        )
        {
            self.schemaId = schemaId
            self.schemaVersionId = schemaVersionId
            self.schemaVersionNumber = schemaVersionNumber
        }
    }

}

extension GlueClientTypes {
    public enum SchemaStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case deleting
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [SchemaStatus] {
            return [
                .available,
                .deleting,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .deleting: return "DELETING"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SchemaStatus(rawValue: rawValue) ?? SchemaStatus.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.SchemaVersionErrorItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDetails = "ErrorDetails"
        case versionNumber = "VersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorDetails = errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if versionNumber != 0 {
            try encodeContainer.encode(versionNumber, forKey: .versionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension GlueClientTypes {
    /// An object that contains the error details for an operation on a schema version.
    public struct SchemaVersionErrorItem: Swift.Equatable {
        /// The details of the error for the schema version.
        public var errorDetails: GlueClientTypes.ErrorDetails?
        /// The version number of the schema.
        public var versionNumber: Swift.Int

        public init (
            errorDetails: GlueClientTypes.ErrorDetails? = nil,
            versionNumber: Swift.Int = 0
        )
        {
            self.errorDetails = errorDetails
            self.versionNumber = versionNumber
        }
    }

}

extension GlueClientTypes.SchemaVersionListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case schemaArn = "SchemaArn"
        case schemaVersionId = "SchemaVersionId"
        case status = "Status"
        case versionNumber = "VersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let schemaArn = schemaArn {
            try encodeContainer.encode(schemaArn, forKey: .schemaArn)
        }
        if let schemaVersionId = schemaVersionId {
            try encodeContainer.encode(schemaVersionId, forKey: .schemaVersionId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if versionNumber != 0 {
            try encodeContainer.encode(versionNumber, forKey: .versionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let versionNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
    }
}

extension GlueClientTypes {
    /// An object containing the details about a schema version.
    public struct SchemaVersionListItem: Swift.Equatable {
        /// The date and time the schema version was created.
        public var createdTime: Swift.String?
        /// The Amazon Resource Name (ARN) of the schema.
        public var schemaArn: Swift.String?
        /// The unique identifier of the schema version.
        public var schemaVersionId: Swift.String?
        /// The status of the schema version.
        public var status: GlueClientTypes.SchemaVersionStatus?
        /// The version number of the schema.
        public var versionNumber: Swift.Int

        public init (
            createdTime: Swift.String? = nil,
            schemaArn: Swift.String? = nil,
            schemaVersionId: Swift.String? = nil,
            status: GlueClientTypes.SchemaVersionStatus? = nil,
            versionNumber: Swift.Int = 0
        )
        {
            self.createdTime = createdTime
            self.schemaArn = schemaArn
            self.schemaVersionId = schemaVersionId
            self.status = status
            self.versionNumber = versionNumber
        }
    }

}

extension GlueClientTypes.SchemaVersionNumber: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case latestVersion = "LatestVersion"
        case versionNumber = "VersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if latestVersion != false {
            try encodeContainer.encode(latestVersion, forKey: .latestVersion)
        }
        if versionNumber != 0 {
            try encodeContainer.encode(versionNumber, forKey: .versionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let latestVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .latestVersion)
        latestVersion = latestVersionDecoded
        let versionNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
    }
}

extension GlueClientTypes {
    /// A structure containing the schema version information.
    public struct SchemaVersionNumber: Swift.Equatable {
        /// The latest version available for the schema.
        public var latestVersion: Swift.Bool
        /// The version number of the schema.
        public var versionNumber: Swift.Int

        public init (
            latestVersion: Swift.Bool = false,
            versionNumber: Swift.Int = 0
        )
        {
            self.latestVersion = latestVersion
            self.versionNumber = versionNumber
        }
    }

}

extension GlueClientTypes {
    public enum SchemaVersionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case deleting
        case failure
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [SchemaVersionStatus] {
            return [
                .available,
                .deleting,
                .failure,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .deleting: return "DELETING"
            case .failure: return "FAILURE"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SchemaVersionStatus(rawValue: rawValue) ?? SchemaVersionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SearchTablesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceShareType = "ResourceShareType"
        case searchText = "SearchText"
        case sortCriteria = "SortCriteria"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for searchpropertypredicates0 in filters {
                try filtersContainer.encode(searchpropertypredicates0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceShareType = resourceShareType {
            try encodeContainer.encode(resourceShareType.rawValue, forKey: .resourceShareType)
        }
        if let searchText = searchText {
            try encodeContainer.encode(searchText, forKey: .searchText)
        }
        if let sortCriteria = sortCriteria {
            var sortCriteriaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sortCriteria)
            for sortcriteria0 in sortCriteria {
                try sortCriteriaContainer.encode(sortcriteria0)
            }
        }
    }
}

extension SearchTablesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SearchTablesInput: Swift.Equatable {
    /// A unique identifier, consisting of  account_id .
    public var catalogId: Swift.String?
    /// A list of key-value pairs, and a comparator used to filter the search results. Returns all entities matching the predicate. The Comparator member of the PropertyPredicate struct is used only for time fields, and can be omitted for other field types. Also, when comparing string values, such as when Key=Name, a fuzzy match algorithm is used. The Key field (for example, the value of the Name field) is split on certain punctuation characters, for example, -, :, #, etc. into tokens. Then each token is exact-match compared with the Value member of PropertyPredicate. For example, if Key=Name and Value=link, tables named customer-link and xx-link-yy are returned, but xxlinkyy is not returned.
    public var filters: [GlueClientTypes.PropertyPredicate]?
    /// The maximum number of tables to return in a single response.
    public var maxResults: Swift.Int?
    /// A continuation token, included if this is a continuation call.
    public var nextToken: Swift.String?
    /// Allows you to specify that you want to search the tables shared with your account. The allowable values are FOREIGN or ALL.
    ///
    /// * If set to FOREIGN, will search the tables shared with your account.
    ///
    /// * If set to ALL, will search the tables shared with your account, as well as the tables in yor local account.
    public var resourceShareType: GlueClientTypes.ResourceShareType?
    /// A string used for a text search. Specifying a value in quotes filters based on an exact match to the value.
    public var searchText: Swift.String?
    /// A list of criteria for sorting the results by a field name, in an ascending or descending order.
    public var sortCriteria: [GlueClientTypes.SortCriterion]?

    public init (
        catalogId: Swift.String? = nil,
        filters: [GlueClientTypes.PropertyPredicate]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceShareType: GlueClientTypes.ResourceShareType? = nil,
        searchText: Swift.String? = nil,
        sortCriteria: [GlueClientTypes.SortCriterion]? = nil
    )
    {
        self.catalogId = catalogId
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceShareType = resourceShareType
        self.searchText = searchText
        self.sortCriteria = sortCriteria
    }
}

struct SearchTablesInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let nextToken: Swift.String?
    let filters: [GlueClientTypes.PropertyPredicate]?
    let searchText: Swift.String?
    let sortCriteria: [GlueClientTypes.SortCriterion]?
    let maxResults: Swift.Int?
    let resourceShareType: GlueClientTypes.ResourceShareType?
}

extension SearchTablesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceShareType = "ResourceShareType"
        case searchText = "SearchText"
        case sortCriteria = "SortCriteria"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let filtersContainer = try containerValues.decodeIfPresent([GlueClientTypes.PropertyPredicate?].self, forKey: .filters)
        var filtersDecoded0:[GlueClientTypes.PropertyPredicate]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [GlueClientTypes.PropertyPredicate]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let searchTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .searchText)
        searchText = searchTextDecoded
        let sortCriteriaContainer = try containerValues.decodeIfPresent([GlueClientTypes.SortCriterion?].self, forKey: .sortCriteria)
        var sortCriteriaDecoded0:[GlueClientTypes.SortCriterion]? = nil
        if let sortCriteriaContainer = sortCriteriaContainer {
            sortCriteriaDecoded0 = [GlueClientTypes.SortCriterion]()
            for structure0 in sortCriteriaContainer {
                if let structure0 = structure0 {
                    sortCriteriaDecoded0?.append(structure0)
                }
            }
        }
        sortCriteria = sortCriteriaDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let resourceShareTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ResourceShareType.self, forKey: .resourceShareType)
        resourceShareType = resourceShareTypeDecoded
    }
}

extension SearchTablesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchTablesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SearchTablesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchTablesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SearchTablesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tableList = output.tableList
        } else {
            self.nextToken = nil
            self.tableList = nil
        }
    }
}

public struct SearchTablesOutputResponse: Swift.Equatable {
    /// A continuation token, present if the current list segment is not the last.
    public var nextToken: Swift.String?
    /// A list of the requested Table objects. The SearchTables response returns only the tables that you have access to.
    public var tableList: [GlueClientTypes.Table]?

    public init (
        nextToken: Swift.String? = nil,
        tableList: [GlueClientTypes.Table]? = nil
    )
    {
        self.nextToken = nextToken
        self.tableList = tableList
    }
}

struct SearchTablesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let tableList: [GlueClientTypes.Table]?
}

extension SearchTablesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tableList = "TableList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let tableListContainer = try containerValues.decodeIfPresent([GlueClientTypes.Table?].self, forKey: .tableList)
        var tableListDecoded0:[GlueClientTypes.Table]? = nil
        if let tableListContainer = tableListContainer {
            tableListDecoded0 = [GlueClientTypes.Table]()
            for structure0 in tableListContainer {
                if let structure0 = structure0 {
                    tableListDecoded0?.append(structure0)
                }
            }
        }
        tableList = tableListDecoded0
    }
}

extension GlueClientTypes.SecurityConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimeStamp = "CreatedTimeStamp"
        case encryptionConfiguration = "EncryptionConfiguration"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimeStamp = createdTimeStamp {
            try encodeContainer.encode(createdTimeStamp.timeIntervalSince1970, forKey: .createdTimeStamp)
        }
        if let encryptionConfiguration = encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createdTimeStampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimeStamp)
        createdTimeStamp = createdTimeStampDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a security configuration.
    public struct SecurityConfiguration: Swift.Equatable {
        /// The time at which this security configuration was created.
        public var createdTimeStamp: ClientRuntime.Date?
        /// The encryption configuration associated with this security configuration.
        public var encryptionConfiguration: GlueClientTypes.EncryptionConfiguration?
        /// The name of the security configuration.
        public var name: Swift.String?

        public init (
            createdTimeStamp: ClientRuntime.Date? = nil,
            encryptionConfiguration: GlueClientTypes.EncryptionConfiguration? = nil,
            name: Swift.String? = nil
        )
        {
            self.createdTimeStamp = createdTimeStamp
            self.encryptionConfiguration = encryptionConfiguration
            self.name = name
        }
    }

}

extension GlueClientTypes.Segment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentNumber = "SegmentNumber"
        case totalSegments = "TotalSegments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if segmentNumber != 0 {
            try encodeContainer.encode(segmentNumber, forKey: .segmentNumber)
        }
        if totalSegments != 0 {
            try encodeContainer.encode(totalSegments, forKey: .totalSegments)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .segmentNumber)
        segmentNumber = segmentNumberDecoded
        let totalSegmentsDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalSegments)
        totalSegments = totalSegmentsDecoded
    }
}

extension GlueClientTypes {
    /// Defines a non-overlapping region of a table's partitions, allowing multiple requests to be run in parallel.
    public struct Segment: Swift.Equatable {
        /// The zero-based index number of the segment. For example, if the total number of segments is 4, SegmentNumber values range from 0 through 3.
        /// This member is required.
        public var segmentNumber: Swift.Int
        /// The total number of segments.
        /// This member is required.
        public var totalSegments: Swift.Int

        public init (
            segmentNumber: Swift.Int = 0,
            totalSegments: Swift.Int = 0
        )
        {
            self.segmentNumber = segmentNumber
            self.totalSegments = totalSegments
        }
    }

}

extension GlueClientTypes.SerDeInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case parameters = "Parameters"
        case serializationLibrary = "SerializationLibrary"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let serializationLibrary = serializationLibrary {
            try encodeContainer.encode(serializationLibrary, forKey: .serializationLibrary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let serializationLibraryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serializationLibrary)
        serializationLibrary = serializationLibraryDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension GlueClientTypes {
    /// Information about a serialization/deserialization program (SerDe) that serves as an extractor and loader.
    public struct SerDeInfo: Swift.Equatable {
        /// Name of the SerDe.
        public var name: Swift.String?
        /// These key-value pairs define initialization parameters for the SerDe.
        public var parameters: [Swift.String:Swift.String]?
        /// Usually the class that implements the SerDe. An example is org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
        public var serializationLibrary: Swift.String?

        public init (
            name: Swift.String? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            serializationLibrary: Swift.String? = nil
        )
        {
            self.name = name
            self.parameters = parameters
            self.serializationLibrary = serializationLibrary
        }
    }

}

extension GlueClientTypes.SkewedInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case skewedColumnNames = "SkewedColumnNames"
        case skewedColumnValueLocationMaps = "SkewedColumnValueLocationMaps"
        case skewedColumnValues = "SkewedColumnValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let skewedColumnNames = skewedColumnNames {
            var skewedColumnNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .skewedColumnNames)
            for namestringlist0 in skewedColumnNames {
                try skewedColumnNamesContainer.encode(namestringlist0)
            }
        }
        if let skewedColumnValueLocationMaps = skewedColumnValueLocationMaps {
            var skewedColumnValueLocationMapsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .skewedColumnValueLocationMaps)
            for (dictKey0, locationmap0) in skewedColumnValueLocationMaps {
                try skewedColumnValueLocationMapsContainer.encode(locationmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let skewedColumnValues = skewedColumnValues {
            var skewedColumnValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .skewedColumnValues)
            for columnvaluestringlist0 in skewedColumnValues {
                try skewedColumnValuesContainer.encode(columnvaluestringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let skewedColumnNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .skewedColumnNames)
        var skewedColumnNamesDecoded0:[Swift.String]? = nil
        if let skewedColumnNamesContainer = skewedColumnNamesContainer {
            skewedColumnNamesDecoded0 = [Swift.String]()
            for string0 in skewedColumnNamesContainer {
                if let string0 = string0 {
                    skewedColumnNamesDecoded0?.append(string0)
                }
            }
        }
        skewedColumnNames = skewedColumnNamesDecoded0
        let skewedColumnValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .skewedColumnValues)
        var skewedColumnValuesDecoded0:[Swift.String]? = nil
        if let skewedColumnValuesContainer = skewedColumnValuesContainer {
            skewedColumnValuesDecoded0 = [Swift.String]()
            for string0 in skewedColumnValuesContainer {
                if let string0 = string0 {
                    skewedColumnValuesDecoded0?.append(string0)
                }
            }
        }
        skewedColumnValues = skewedColumnValuesDecoded0
        let skewedColumnValueLocationMapsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .skewedColumnValueLocationMaps)
        var skewedColumnValueLocationMapsDecoded0: [Swift.String:Swift.String]? = nil
        if let skewedColumnValueLocationMapsContainer = skewedColumnValueLocationMapsContainer {
            skewedColumnValueLocationMapsDecoded0 = [Swift.String:Swift.String]()
            for (key0, columnvaluesstring0) in skewedColumnValueLocationMapsContainer {
                if let columnvaluesstring0 = columnvaluesstring0 {
                    skewedColumnValueLocationMapsDecoded0?[key0] = columnvaluesstring0
                }
            }
        }
        skewedColumnValueLocationMaps = skewedColumnValueLocationMapsDecoded0
    }
}

extension GlueClientTypes {
    /// Specifies skewed values in a table. Skewed values are those that occur with very high frequency.
    public struct SkewedInfo: Swift.Equatable {
        /// A list of names of columns that contain skewed values.
        public var skewedColumnNames: [Swift.String]?
        /// A mapping of skewed values to the columns that contain them.
        public var skewedColumnValueLocationMaps: [Swift.String:Swift.String]?
        /// A list of values that appear so frequently as to be considered skewed.
        public var skewedColumnValues: [Swift.String]?

        public init (
            skewedColumnNames: [Swift.String]? = nil,
            skewedColumnValueLocationMaps: [Swift.String:Swift.String]? = nil,
            skewedColumnValues: [Swift.String]? = nil
        )
        {
            self.skewedColumnNames = skewedColumnNames
            self.skewedColumnValueLocationMaps = skewedColumnValueLocationMaps
            self.skewedColumnValues = skewedColumnValues
        }
    }

}

extension GlueClientTypes {
    public enum Sort: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [Sort] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASC"
            case .descending: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Sort(rawValue: rawValue) ?? Sort.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.SortCriterion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldName = "FieldName"
        case sort = "Sort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldName = fieldName {
            try encodeContainer.encode(fieldName, forKey: .fieldName)
        }
        if let sort = sort {
            try encodeContainer.encode(sort.rawValue, forKey: .sort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fieldName)
        fieldName = fieldNameDecoded
        let sortDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Sort.self, forKey: .sort)
        sort = sortDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a field to sort by and a sort order.
    public struct SortCriterion: Swift.Equatable {
        /// The name of the field on which to sort.
        public var fieldName: Swift.String?
        /// An ascending or descending sort.
        public var sort: GlueClientTypes.Sort?

        public init (
            fieldName: Swift.String? = nil,
            sort: GlueClientTypes.Sort? = nil
        )
        {
            self.fieldName = fieldName
            self.sort = sort
        }
    }

}

extension GlueClientTypes {
    public enum SortDirectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortDirectionType] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortDirectionType(rawValue: rawValue) ?? SortDirectionType.sdkUnknown(rawValue)
        }
    }
}

extension StartBlueprintRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintName = "BlueprintName"
        case parameters = "Parameters"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintName = blueprintName {
            try encodeContainer.encode(blueprintName, forKey: .blueprintName)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension StartBlueprintRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartBlueprintRunInput: Swift.Equatable {
    /// The name of the blueprint.
    /// This member is required.
    public var blueprintName: Swift.String?
    /// Specifies the parameters as a BlueprintParameters object.
    public var parameters: Swift.String?
    /// Specifies the IAM role used to create the workflow.
    /// This member is required.
    public var roleArn: Swift.String?

    public init (
        blueprintName: Swift.String? = nil,
        parameters: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.blueprintName = blueprintName
        self.parameters = parameters
        self.roleArn = roleArn
    }
}

struct StartBlueprintRunInputBody: Swift.Equatable {
    let blueprintName: Swift.String?
    let parameters: Swift.String?
    let roleArn: Swift.String?
}

extension StartBlueprintRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintName = "BlueprintName"
        case parameters = "Parameters"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintName)
        blueprintName = blueprintNameDecoded
        let parametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameters)
        parameters = parametersDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension StartBlueprintRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartBlueprintRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IllegalBlueprintStateException" : self = .illegalBlueprintStateException(try IllegalBlueprintStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartBlueprintRunOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case illegalBlueprintStateException(IllegalBlueprintStateException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartBlueprintRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartBlueprintRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.runId = output.runId
        } else {
            self.runId = nil
        }
    }
}

public struct StartBlueprintRunOutputResponse: Swift.Equatable {
    /// The run ID for this blueprint run.
    public var runId: Swift.String?

    public init (
        runId: Swift.String? = nil
    )
    {
        self.runId = runId
    }
}

struct StartBlueprintRunOutputResponseBody: Swift.Equatable {
    let runId: Swift.String?
}

extension StartBlueprintRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension StartCrawlerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension StartCrawlerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartCrawlerInput: Swift.Equatable {
    /// Name of the crawler to start.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StartCrawlerInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension StartCrawlerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension StartCrawlerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartCrawlerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CrawlerRunningException" : self = .crawlerRunningException(try CrawlerRunningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartCrawlerOutputError: Swift.Error, Swift.Equatable {
    case crawlerRunningException(CrawlerRunningException)
    case entityNotFoundException(EntityNotFoundException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartCrawlerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartCrawlerOutputResponse: Swift.Equatable {

}

extension StartCrawlerScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerName = "CrawlerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawlerName = crawlerName {
            try encodeContainer.encode(crawlerName, forKey: .crawlerName)
        }
    }
}

extension StartCrawlerScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartCrawlerScheduleInput: Swift.Equatable {
    /// Name of the crawler to schedule.
    /// This member is required.
    public var crawlerName: Swift.String?

    public init (
        crawlerName: Swift.String? = nil
    )
    {
        self.crawlerName = crawlerName
    }
}

struct StartCrawlerScheduleInputBody: Swift.Equatable {
    let crawlerName: Swift.String?
}

extension StartCrawlerScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerName = "CrawlerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerName)
        crawlerName = crawlerNameDecoded
    }
}

extension StartCrawlerScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartCrawlerScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoScheduleException" : self = .noScheduleException(try NoScheduleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SchedulerRunningException" : self = .schedulerRunningException(try SchedulerRunningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SchedulerTransitioningException" : self = .schedulerTransitioningException(try SchedulerTransitioningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartCrawlerScheduleOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case noScheduleException(NoScheduleException)
    case operationTimeoutException(OperationTimeoutException)
    case schedulerRunningException(SchedulerRunningException)
    case schedulerTransitioningException(SchedulerTransitioningException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartCrawlerScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartCrawlerScheduleOutputResponse: Swift.Equatable {

}

extension StartExportLabelsTaskRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputS3Path = "OutputS3Path"
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputS3Path = outputS3Path {
            try encodeContainer.encode(outputS3Path, forKey: .outputS3Path)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }
}

extension StartExportLabelsTaskRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartExportLabelsTaskRunInput: Swift.Equatable {
    /// The Amazon S3 path where you export the labels.
    /// This member is required.
    public var outputS3Path: Swift.String?
    /// The unique identifier of the machine learning transform.
    /// This member is required.
    public var transformId: Swift.String?

    public init (
        outputS3Path: Swift.String? = nil,
        transformId: Swift.String? = nil
    )
    {
        self.outputS3Path = outputS3Path
        self.transformId = transformId
    }
}

struct StartExportLabelsTaskRunInputBody: Swift.Equatable {
    let transformId: Swift.String?
    let outputS3Path: Swift.String?
}

extension StartExportLabelsTaskRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputS3Path = "OutputS3Path"
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let outputS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Path)
        outputS3Path = outputS3PathDecoded
    }
}

extension StartExportLabelsTaskRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartExportLabelsTaskRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartExportLabelsTaskRunOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartExportLabelsTaskRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartExportLabelsTaskRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskRunId = output.taskRunId
        } else {
            self.taskRunId = nil
        }
    }
}

public struct StartExportLabelsTaskRunOutputResponse: Swift.Equatable {
    /// The unique identifier for the task run.
    public var taskRunId: Swift.String?

    public init (
        taskRunId: Swift.String? = nil
    )
    {
        self.taskRunId = taskRunId
    }
}

struct StartExportLabelsTaskRunOutputResponseBody: Swift.Equatable {
    let taskRunId: Swift.String?
}

extension StartExportLabelsTaskRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskRunId = "TaskRunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
    }
}

extension StartImportLabelsTaskRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputS3Path = "InputS3Path"
        case replaceAllLabels = "ReplaceAllLabels"
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputS3Path = inputS3Path {
            try encodeContainer.encode(inputS3Path, forKey: .inputS3Path)
        }
        if replaceAllLabels != false {
            try encodeContainer.encode(replaceAllLabels, forKey: .replaceAllLabels)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }
}

extension StartImportLabelsTaskRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartImportLabelsTaskRunInput: Swift.Equatable {
    /// The Amazon Simple Storage Service (Amazon S3) path from where you import the labels.
    /// This member is required.
    public var inputS3Path: Swift.String?
    /// Indicates whether to overwrite your existing labels.
    public var replaceAllLabels: Swift.Bool
    /// The unique identifier of the machine learning transform.
    /// This member is required.
    public var transformId: Swift.String?

    public init (
        inputS3Path: Swift.String? = nil,
        replaceAllLabels: Swift.Bool = false,
        transformId: Swift.String? = nil
    )
    {
        self.inputS3Path = inputS3Path
        self.replaceAllLabels = replaceAllLabels
        self.transformId = transformId
    }
}

struct StartImportLabelsTaskRunInputBody: Swift.Equatable {
    let transformId: Swift.String?
    let inputS3Path: Swift.String?
    let replaceAllLabels: Swift.Bool
}

extension StartImportLabelsTaskRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputS3Path = "InputS3Path"
        case replaceAllLabels = "ReplaceAllLabels"
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let inputS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputS3Path)
        inputS3Path = inputS3PathDecoded
        let replaceAllLabelsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .replaceAllLabels)
        replaceAllLabels = replaceAllLabelsDecoded
    }
}

extension StartImportLabelsTaskRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartImportLabelsTaskRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartImportLabelsTaskRunOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartImportLabelsTaskRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartImportLabelsTaskRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskRunId = output.taskRunId
        } else {
            self.taskRunId = nil
        }
    }
}

public struct StartImportLabelsTaskRunOutputResponse: Swift.Equatable {
    /// The unique identifier for the task run.
    public var taskRunId: Swift.String?

    public init (
        taskRunId: Swift.String? = nil
    )
    {
        self.taskRunId = taskRunId
    }
}

struct StartImportLabelsTaskRunOutputResponseBody: Swift.Equatable {
    let taskRunId: Swift.String?
}

extension StartImportLabelsTaskRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskRunId = "TaskRunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
    }
}

extension StartJobRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case arguments = "Arguments"
        case jobName = "JobName"
        case jobRunId = "JobRunId"
        case maxCapacity = "MaxCapacity"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case securityConfiguration = "SecurityConfiguration"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedCapacity != 0 {
            try encodeContainer.encode(allocatedCapacity, forKey: .allocatedCapacity)
        }
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .arguments)
            for (dictKey0, genericmap0) in arguments {
                try argumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobRunId = jobRunId {
            try encodeContainer.encode(jobRunId, forKey: .jobRunId)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let notificationProperty = notificationProperty {
            try encodeContainer.encode(notificationProperty, forKey: .notificationProperty)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}

extension StartJobRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartJobRunInput: Swift.Equatable {
    /// This field is deprecated. Use MaxCapacity instead. The number of Glue data processing units (DPUs) to allocate to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/).
    @available(*, deprecated, message: "This property is deprecated, use MaxCapacity instead.")
    public var allocatedCapacity: Swift.Int
    /// The job arguments specifically for this run. For this job run, they replace the default arguments set in the job definition itself. You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling Glue APIs in Python](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that Glue consumes to set up your job, see the [Special Parameters Used by Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) topic in the developer guide.
    public var arguments: [Swift.String:Swift.String]?
    /// The name of the job definition to use.
    /// This member is required.
    public var jobName: Swift.String?
    /// The ID of a previous JobRun to retry.
    public var jobRunId: Swift.String?
    /// The number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/). Do not set Max Capacity if using WorkerType and NumberOfWorkers. The value that can be allocated for MaxCapacity depends on whether you are running a Python shell job, or an Apache Spark ETL job:
    ///
    /// * When you specify a Python shell job (JobCommand.Name="pythonshell"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.
    ///
    /// * When you specify an Apache Spark ETL job (JobCommand.Name="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.
    public var maxCapacity: Swift.Double?
    /// Specifies configuration properties of a job run notification.
    public var notificationProperty: GlueClientTypes.NotificationProperty?
    /// The number of workers of a defined workerType that are allocated when a job runs. The maximum number of workers you can define are 299 for G.1X, and 149 for G.2X.
    public var numberOfWorkers: Swift.Int?
    /// The name of the SecurityConfiguration structure to be used with this job run.
    public var securityConfiguration: Swift.String?
    /// The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
    public var timeout: Swift.Int?
    /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.
    ///
    /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
    ///
    /// * For the G.1X worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
    ///
    /// * For the G.2X worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
    public var workerType: GlueClientTypes.WorkerType?

    public init (
        allocatedCapacity: Swift.Int = 0,
        arguments: [Swift.String:Swift.String]? = nil,
        jobName: Swift.String? = nil,
        jobRunId: Swift.String? = nil,
        maxCapacity: Swift.Double? = nil,
        notificationProperty: GlueClientTypes.NotificationProperty? = nil,
        numberOfWorkers: Swift.Int? = nil,
        securityConfiguration: Swift.String? = nil,
        timeout: Swift.Int? = nil,
        workerType: GlueClientTypes.WorkerType? = nil
    )
    {
        self.allocatedCapacity = allocatedCapacity
        self.arguments = arguments
        self.jobName = jobName
        self.jobRunId = jobRunId
        self.maxCapacity = maxCapacity
        self.notificationProperty = notificationProperty
        self.numberOfWorkers = numberOfWorkers
        self.securityConfiguration = securityConfiguration
        self.timeout = timeout
        self.workerType = workerType
    }
}

struct StartJobRunInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let jobRunId: Swift.String?
    let arguments: [Swift.String:Swift.String]?
    let allocatedCapacity: Swift.Int
    let timeout: Swift.Int?
    let maxCapacity: Swift.Double?
    let securityConfiguration: Swift.String?
    let notificationProperty: GlueClientTypes.NotificationProperty?
    let workerType: GlueClientTypes.WorkerType?
    let numberOfWorkers: Swift.Int?
}

extension StartJobRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case arguments = "Arguments"
        case jobName = "JobName"
        case jobRunId = "JobRunId"
        case maxCapacity = "MaxCapacity"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case securityConfiguration = "SecurityConfiguration"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRunId)
        jobRunId = jobRunIdDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .arguments)
        var argumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in argumentsContainer {
                if let genericstring0 = genericstring0 {
                    argumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        arguments = argumentsDecoded0
        let allocatedCapacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedCapacity)
        allocatedCapacity = allocatedCapacityDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
    }
}

extension StartJobRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartJobRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentRunsExceededException" : self = .concurrentRunsExceededException(try ConcurrentRunsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartJobRunOutputError: Swift.Error, Swift.Equatable {
    case concurrentRunsExceededException(ConcurrentRunsExceededException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartJobRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartJobRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobRunId = output.jobRunId
        } else {
            self.jobRunId = nil
        }
    }
}

public struct StartJobRunOutputResponse: Swift.Equatable {
    /// The ID assigned to this job run.
    public var jobRunId: Swift.String?

    public init (
        jobRunId: Swift.String? = nil
    )
    {
        self.jobRunId = jobRunId
    }
}

struct StartJobRunOutputResponseBody: Swift.Equatable {
    let jobRunId: Swift.String?
}

extension StartJobRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobRunId = "JobRunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRunId)
        jobRunId = jobRunIdDecoded
    }
}

extension StartMLEvaluationTaskRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }
}

extension StartMLEvaluationTaskRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartMLEvaluationTaskRunInput: Swift.Equatable {
    /// The unique identifier of the machine learning transform.
    /// This member is required.
    public var transformId: Swift.String?

    public init (
        transformId: Swift.String? = nil
    )
    {
        self.transformId = transformId
    }
}

struct StartMLEvaluationTaskRunInputBody: Swift.Equatable {
    let transformId: Swift.String?
}

extension StartMLEvaluationTaskRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
    }
}

extension StartMLEvaluationTaskRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMLEvaluationTaskRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentRunsExceededException" : self = .concurrentRunsExceededException(try ConcurrentRunsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MLTransformNotReadyException" : self = .mLTransformNotReadyException(try MLTransformNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMLEvaluationTaskRunOutputError: Swift.Error, Swift.Equatable {
    case concurrentRunsExceededException(ConcurrentRunsExceededException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case mLTransformNotReadyException(MLTransformNotReadyException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMLEvaluationTaskRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartMLEvaluationTaskRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskRunId = output.taskRunId
        } else {
            self.taskRunId = nil
        }
    }
}

public struct StartMLEvaluationTaskRunOutputResponse: Swift.Equatable {
    /// The unique identifier associated with this run.
    public var taskRunId: Swift.String?

    public init (
        taskRunId: Swift.String? = nil
    )
    {
        self.taskRunId = taskRunId
    }
}

struct StartMLEvaluationTaskRunOutputResponseBody: Swift.Equatable {
    let taskRunId: Swift.String?
}

extension StartMLEvaluationTaskRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskRunId = "TaskRunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
    }
}

extension StartMLLabelingSetGenerationTaskRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputS3Path = "OutputS3Path"
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputS3Path = outputS3Path {
            try encodeContainer.encode(outputS3Path, forKey: .outputS3Path)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }
}

extension StartMLLabelingSetGenerationTaskRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartMLLabelingSetGenerationTaskRunInput: Swift.Equatable {
    /// The Amazon Simple Storage Service (Amazon S3) path where you generate the labeling set.
    /// This member is required.
    public var outputS3Path: Swift.String?
    /// The unique identifier of the machine learning transform.
    /// This member is required.
    public var transformId: Swift.String?

    public init (
        outputS3Path: Swift.String? = nil,
        transformId: Swift.String? = nil
    )
    {
        self.outputS3Path = outputS3Path
        self.transformId = transformId
    }
}

struct StartMLLabelingSetGenerationTaskRunInputBody: Swift.Equatable {
    let transformId: Swift.String?
    let outputS3Path: Swift.String?
}

extension StartMLLabelingSetGenerationTaskRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputS3Path = "OutputS3Path"
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let outputS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Path)
        outputS3Path = outputS3PathDecoded
    }
}

extension StartMLLabelingSetGenerationTaskRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMLLabelingSetGenerationTaskRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentRunsExceededException" : self = .concurrentRunsExceededException(try ConcurrentRunsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMLLabelingSetGenerationTaskRunOutputError: Swift.Error, Swift.Equatable {
    case concurrentRunsExceededException(ConcurrentRunsExceededException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMLLabelingSetGenerationTaskRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartMLLabelingSetGenerationTaskRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskRunId = output.taskRunId
        } else {
            self.taskRunId = nil
        }
    }
}

public struct StartMLLabelingSetGenerationTaskRunOutputResponse: Swift.Equatable {
    /// The unique run identifier that is associated with this task run.
    public var taskRunId: Swift.String?

    public init (
        taskRunId: Swift.String? = nil
    )
    {
        self.taskRunId = taskRunId
    }
}

struct StartMLLabelingSetGenerationTaskRunOutputResponseBody: Swift.Equatable {
    let taskRunId: Swift.String?
}

extension StartMLLabelingSetGenerationTaskRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskRunId = "TaskRunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
    }
}

extension StartTriggerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension StartTriggerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartTriggerInput: Swift.Equatable {
    /// The name of the trigger to start.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StartTriggerInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension StartTriggerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension StartTriggerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartTriggerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentRunsExceededException" : self = .concurrentRunsExceededException(try ConcurrentRunsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartTriggerOutputError: Swift.Error, Swift.Equatable {
    case concurrentRunsExceededException(ConcurrentRunsExceededException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartTriggerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartTriggerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct StartTriggerOutputResponse: Swift.Equatable {
    /// The name of the trigger that was started.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StartTriggerOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension StartTriggerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension StartWorkflowRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension StartWorkflowRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartWorkflowRunInput: Swift.Equatable {
    /// The name of the workflow to start.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StartWorkflowRunInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension StartWorkflowRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension StartWorkflowRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartWorkflowRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentRunsExceededException" : self = .concurrentRunsExceededException(try ConcurrentRunsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartWorkflowRunOutputError: Swift.Error, Swift.Equatable {
    case concurrentRunsExceededException(ConcurrentRunsExceededException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartWorkflowRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartWorkflowRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.runId = output.runId
        } else {
            self.runId = nil
        }
    }
}

public struct StartWorkflowRunOutputResponse: Swift.Equatable {
    /// An Id for the new run.
    public var runId: Swift.String?

    public init (
        runId: Swift.String? = nil
    )
    {
        self.runId = runId
    }
}

struct StartWorkflowRunOutputResponseBody: Swift.Equatable {
    let runId: Swift.String?
}

extension StartWorkflowRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension GlueClientTypes.StartingEventBatchCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case batchWindow = "BatchWindow"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let batchWindow = batchWindow {
            try encodeContainer.encode(batchWindow, forKey: .batchWindow)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let batchWindowDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchWindow)
        batchWindow = batchWindowDecoded
    }
}

extension GlueClientTypes {
    /// The batch condition that started the workflow run. Either the number of events in the batch size arrived, in which case the BatchSize member is non-zero, or the batch window expired, in which case the BatchWindow member is non-zero.
    public struct StartingEventBatchCondition: Swift.Equatable {
        /// Number of events in the batch.
        public var batchSize: Swift.Int?
        /// Duration of the batch window in seconds.
        public var batchWindow: Swift.Int?

        public init (
            batchSize: Swift.Int? = nil,
            batchWindow: Swift.Int? = nil
        )
        {
            self.batchSize = batchSize
            self.batchWindow = batchWindow
        }
    }

}

extension StopCrawlerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension StopCrawlerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopCrawlerInput: Swift.Equatable {
    /// Name of the crawler to stop.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StopCrawlerInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension StopCrawlerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension StopCrawlerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopCrawlerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CrawlerNotRunningException" : self = .crawlerNotRunningException(try CrawlerNotRunningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CrawlerStoppingException" : self = .crawlerStoppingException(try CrawlerStoppingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopCrawlerOutputError: Swift.Error, Swift.Equatable {
    case crawlerNotRunningException(CrawlerNotRunningException)
    case crawlerStoppingException(CrawlerStoppingException)
    case entityNotFoundException(EntityNotFoundException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopCrawlerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopCrawlerOutputResponse: Swift.Equatable {

}

extension StopCrawlerScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerName = "CrawlerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawlerName = crawlerName {
            try encodeContainer.encode(crawlerName, forKey: .crawlerName)
        }
    }
}

extension StopCrawlerScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopCrawlerScheduleInput: Swift.Equatable {
    /// Name of the crawler whose schedule state to set.
    /// This member is required.
    public var crawlerName: Swift.String?

    public init (
        crawlerName: Swift.String? = nil
    )
    {
        self.crawlerName = crawlerName
    }
}

struct StopCrawlerScheduleInputBody: Swift.Equatable {
    let crawlerName: Swift.String?
}

extension StopCrawlerScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerName = "CrawlerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerName)
        crawlerName = crawlerNameDecoded
    }
}

extension StopCrawlerScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopCrawlerScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SchedulerNotRunningException" : self = .schedulerNotRunningException(try SchedulerNotRunningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SchedulerTransitioningException" : self = .schedulerTransitioningException(try SchedulerTransitioningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopCrawlerScheduleOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case operationTimeoutException(OperationTimeoutException)
    case schedulerNotRunningException(SchedulerNotRunningException)
    case schedulerTransitioningException(SchedulerTransitioningException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopCrawlerScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopCrawlerScheduleOutputResponse: Swift.Equatable {

}

extension StopTriggerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension StopTriggerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopTriggerInput: Swift.Equatable {
    /// The name of the trigger to stop.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StopTriggerInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension StopTriggerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension StopTriggerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopTriggerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopTriggerOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopTriggerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StopTriggerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct StopTriggerOutputResponse: Swift.Equatable {
    /// The name of the trigger that was stopped.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct StopTriggerOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension StopTriggerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension StopWorkflowRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case runId = "RunId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
    }
}

extension StopWorkflowRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopWorkflowRunInput: Swift.Equatable {
    /// The name of the workflow to stop.
    /// This member is required.
    public var name: Swift.String?
    /// The ID of the workflow run to stop.
    /// This member is required.
    public var runId: Swift.String?

    public init (
        name: Swift.String? = nil,
        runId: Swift.String? = nil
    )
    {
        self.name = name
        self.runId = runId
    }
}

struct StopWorkflowRunInputBody: Swift.Equatable {
    let name: Swift.String?
    let runId: Swift.String?
}

extension StopWorkflowRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case runId = "RunId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension StopWorkflowRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopWorkflowRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IllegalWorkflowStateException" : self = .illegalWorkflowStateException(try IllegalWorkflowStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopWorkflowRunOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case illegalWorkflowStateException(IllegalWorkflowStateException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopWorkflowRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopWorkflowRunOutputResponse: Swift.Equatable {

}

extension GlueClientTypes.StorageDescriptor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketColumns = "BucketColumns"
        case columns = "Columns"
        case compressed = "Compressed"
        case inputFormat = "InputFormat"
        case location = "Location"
        case numberOfBuckets = "NumberOfBuckets"
        case outputFormat = "OutputFormat"
        case parameters = "Parameters"
        case schemaReference = "SchemaReference"
        case serdeInfo = "SerdeInfo"
        case skewedInfo = "SkewedInfo"
        case sortColumns = "SortColumns"
        case storedAsSubDirectories = "StoredAsSubDirectories"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketColumns = bucketColumns {
            var bucketColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bucketColumns)
            for namestringlist0 in bucketColumns {
                try bucketColumnsContainer.encode(namestringlist0)
            }
        }
        if let columns = columns {
            var columnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columns)
            for columnlist0 in columns {
                try columnsContainer.encode(columnlist0)
            }
        }
        if compressed != false {
            try encodeContainer.encode(compressed, forKey: .compressed)
        }
        if let inputFormat = inputFormat {
            try encodeContainer.encode(inputFormat, forKey: .inputFormat)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if numberOfBuckets != 0 {
            try encodeContainer.encode(numberOfBuckets, forKey: .numberOfBuckets)
        }
        if let outputFormat = outputFormat {
            try encodeContainer.encode(outputFormat, forKey: .outputFormat)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let schemaReference = schemaReference {
            try encodeContainer.encode(schemaReference, forKey: .schemaReference)
        }
        if let serdeInfo = serdeInfo {
            try encodeContainer.encode(serdeInfo, forKey: .serdeInfo)
        }
        if let skewedInfo = skewedInfo {
            try encodeContainer.encode(skewedInfo, forKey: .skewedInfo)
        }
        if let sortColumns = sortColumns {
            var sortColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sortColumns)
            for orderlist0 in sortColumns {
                try sortColumnsContainer.encode(orderlist0)
            }
        }
        if storedAsSubDirectories != false {
            try encodeContainer.encode(storedAsSubDirectories, forKey: .storedAsSubDirectories)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Column?].self, forKey: .columns)
        var columnsDecoded0:[GlueClientTypes.Column]? = nil
        if let columnsContainer = columnsContainer {
            columnsDecoded0 = [GlueClientTypes.Column]()
            for structure0 in columnsContainer {
                if let structure0 = structure0 {
                    columnsDecoded0?.append(structure0)
                }
            }
        }
        columns = columnsDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let inputFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputFormat)
        inputFormat = inputFormatDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let compressedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .compressed)
        compressed = compressedDecoded
        let numberOfBucketsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfBuckets)
        numberOfBuckets = numberOfBucketsDecoded
        let serdeInfoDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SerDeInfo.self, forKey: .serdeInfo)
        serdeInfo = serdeInfoDecoded
        let bucketColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bucketColumns)
        var bucketColumnsDecoded0:[Swift.String]? = nil
        if let bucketColumnsContainer = bucketColumnsContainer {
            bucketColumnsDecoded0 = [Swift.String]()
            for string0 in bucketColumnsContainer {
                if let string0 = string0 {
                    bucketColumnsDecoded0?.append(string0)
                }
            }
        }
        bucketColumns = bucketColumnsDecoded0
        let sortColumnsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Order?].self, forKey: .sortColumns)
        var sortColumnsDecoded0:[GlueClientTypes.Order]? = nil
        if let sortColumnsContainer = sortColumnsContainer {
            sortColumnsDecoded0 = [GlueClientTypes.Order]()
            for structure0 in sortColumnsContainer {
                if let structure0 = structure0 {
                    sortColumnsDecoded0?.append(structure0)
                }
            }
        }
        sortColumns = sortColumnsDecoded0
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let skewedInfoDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SkewedInfo.self, forKey: .skewedInfo)
        skewedInfo = skewedInfoDecoded
        let storedAsSubDirectoriesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .storedAsSubDirectories)
        storedAsSubDirectories = storedAsSubDirectoriesDecoded
        let schemaReferenceDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaReference.self, forKey: .schemaReference)
        schemaReference = schemaReferenceDecoded
    }
}

extension GlueClientTypes {
    /// Describes the physical storage of table data.
    public struct StorageDescriptor: Swift.Equatable {
        /// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
        public var bucketColumns: [Swift.String]?
        /// A list of the Columns in the table.
        public var columns: [GlueClientTypes.Column]?
        /// True if the data in the table is compressed, or False if not.
        public var compressed: Swift.Bool
        /// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
        public var inputFormat: Swift.String?
        /// The physical location of the table. By default, this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
        public var location: Swift.String?
        /// Must be specified if the table contains any dimension columns.
        public var numberOfBuckets: Swift.Int
        /// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
        public var outputFormat: Swift.String?
        /// The user-supplied properties in key-value form.
        public var parameters: [Swift.String:Swift.String]?
        /// An object that references a schema stored in the Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference.
        public var schemaReference: GlueClientTypes.SchemaReference?
        /// The serialization/deserialization (SerDe) information.
        public var serdeInfo: GlueClientTypes.SerDeInfo?
        /// The information about values that appear frequently in a column (skewed values).
        public var skewedInfo: GlueClientTypes.SkewedInfo?
        /// A list specifying the sort order of each bucket in the table.
        public var sortColumns: [GlueClientTypes.Order]?
        /// True if the table data is stored in subdirectories, or False if not.
        public var storedAsSubDirectories: Swift.Bool

        public init (
            bucketColumns: [Swift.String]? = nil,
            columns: [GlueClientTypes.Column]? = nil,
            compressed: Swift.Bool = false,
            inputFormat: Swift.String? = nil,
            location: Swift.String? = nil,
            numberOfBuckets: Swift.Int = 0,
            outputFormat: Swift.String? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            schemaReference: GlueClientTypes.SchemaReference? = nil,
            serdeInfo: GlueClientTypes.SerDeInfo? = nil,
            skewedInfo: GlueClientTypes.SkewedInfo? = nil,
            sortColumns: [GlueClientTypes.Order]? = nil,
            storedAsSubDirectories: Swift.Bool = false
        )
        {
            self.bucketColumns = bucketColumns
            self.columns = columns
            self.compressed = compressed
            self.inputFormat = inputFormat
            self.location = location
            self.numberOfBuckets = numberOfBuckets
            self.outputFormat = outputFormat
            self.parameters = parameters
            self.schemaReference = schemaReference
            self.serdeInfo = serdeInfo
            self.skewedInfo = skewedInfo
            self.sortColumns = sortColumns
            self.storedAsSubDirectories = storedAsSubDirectories
        }
    }

}

extension GlueClientTypes.StringColumnStatisticsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case averageLength = "AverageLength"
        case maximumLength = "MaximumLength"
        case numberOfDistinctValues = "NumberOfDistinctValues"
        case numberOfNulls = "NumberOfNulls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if averageLength != 0.0 {
            try encodeContainer.encode(averageLength, forKey: .averageLength)
        }
        if maximumLength != 0 {
            try encodeContainer.encode(maximumLength, forKey: .maximumLength)
        }
        if numberOfDistinctValues != 0 {
            try encodeContainer.encode(numberOfDistinctValues, forKey: .numberOfDistinctValues)
        }
        if numberOfNulls != 0 {
            try encodeContainer.encode(numberOfNulls, forKey: .numberOfNulls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumLengthDecoded = try containerValues.decode(Swift.Int.self, forKey: .maximumLength)
        maximumLength = maximumLengthDecoded
        let averageLengthDecoded = try containerValues.decode(Swift.Double.self, forKey: .averageLength)
        averageLength = averageLengthDecoded
        let numberOfNullsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNulls)
        numberOfNulls = numberOfNullsDecoded
        let numberOfDistinctValuesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfDistinctValues)
        numberOfDistinctValues = numberOfDistinctValuesDecoded
    }
}

extension GlueClientTypes {
    /// Defines column statistics supported for character sequence data values.
    public struct StringColumnStatisticsData: Swift.Equatable {
        /// The average string length in the column.
        /// This member is required.
        public var averageLength: Swift.Double
        /// The size of the longest string in the column.
        /// This member is required.
        public var maximumLength: Swift.Int
        /// The number of distinct values in a column.
        /// This member is required.
        public var numberOfDistinctValues: Swift.Int
        /// The number of null values in the column.
        /// This member is required.
        public var numberOfNulls: Swift.Int

        public init (
            averageLength: Swift.Double = 0.0,
            maximumLength: Swift.Int = 0,
            numberOfDistinctValues: Swift.Int = 0,
            numberOfNulls: Swift.Int = 0
        )
        {
            self.averageLength = averageLength
            self.maximumLength = maximumLength
            self.numberOfDistinctValues = numberOfDistinctValues
            self.numberOfNulls = numberOfNulls
        }
    }

}

extension GlueClientTypes.Table: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case createTime = "CreateTime"
        case createdBy = "CreatedBy"
        case databaseName = "DatabaseName"
        case description = "Description"
        case isRegisteredWithLakeFormation = "IsRegisteredWithLakeFormation"
        case lastAccessTime = "LastAccessTime"
        case lastAnalyzedTime = "LastAnalyzedTime"
        case name = "Name"
        case owner = "Owner"
        case parameters = "Parameters"
        case partitionKeys = "PartitionKeys"
        case retention = "Retention"
        case storageDescriptor = "StorageDescriptor"
        case tableType = "TableType"
        case targetTable = "TargetTable"
        case updateTime = "UpdateTime"
        case viewExpandedText = "ViewExpandedText"
        case viewOriginalText = "ViewOriginalText"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if isRegisteredWithLakeFormation != false {
            try encodeContainer.encode(isRegisteredWithLakeFormation, forKey: .isRegisteredWithLakeFormation)
        }
        if let lastAccessTime = lastAccessTime {
            try encodeContainer.encode(lastAccessTime.timeIntervalSince1970, forKey: .lastAccessTime)
        }
        if let lastAnalyzedTime = lastAnalyzedTime {
            try encodeContainer.encode(lastAnalyzedTime.timeIntervalSince1970, forKey: .lastAnalyzedTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let partitionKeys = partitionKeys {
            var partitionKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionKeys)
            for columnlist0 in partitionKeys {
                try partitionKeysContainer.encode(columnlist0)
            }
        }
        if retention != 0 {
            try encodeContainer.encode(retention, forKey: .retention)
        }
        if let storageDescriptor = storageDescriptor {
            try encodeContainer.encode(storageDescriptor, forKey: .storageDescriptor)
        }
        if let tableType = tableType {
            try encodeContainer.encode(tableType, forKey: .tableType)
        }
        if let targetTable = targetTable {
            try encodeContainer.encode(targetTable, forKey: .targetTable)
        }
        if let updateTime = updateTime {
            try encodeContainer.encode(updateTime.timeIntervalSince1970, forKey: .updateTime)
        }
        if let viewExpandedText = viewExpandedText {
            try encodeContainer.encode(viewExpandedText, forKey: .viewExpandedText)
        }
        if let viewOriginalText = viewOriginalText {
            try encodeContainer.encode(viewOriginalText, forKey: .viewOriginalText)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let lastAccessTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAccessTime)
        lastAccessTime = lastAccessTimeDecoded
        let lastAnalyzedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAnalyzedTime)
        lastAnalyzedTime = lastAnalyzedTimeDecoded
        let retentionDecoded = try containerValues.decode(Swift.Int.self, forKey: .retention)
        retention = retentionDecoded
        let storageDescriptorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StorageDescriptor.self, forKey: .storageDescriptor)
        storageDescriptor = storageDescriptorDecoded
        let partitionKeysContainer = try containerValues.decodeIfPresent([GlueClientTypes.Column?].self, forKey: .partitionKeys)
        var partitionKeysDecoded0:[GlueClientTypes.Column]? = nil
        if let partitionKeysContainer = partitionKeysContainer {
            partitionKeysDecoded0 = [GlueClientTypes.Column]()
            for structure0 in partitionKeysContainer {
                if let structure0 = structure0 {
                    partitionKeysDecoded0?.append(structure0)
                }
            }
        }
        partitionKeys = partitionKeysDecoded0
        let viewOriginalTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .viewOriginalText)
        viewOriginalText = viewOriginalTextDecoded
        let viewExpandedTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .viewExpandedText)
        viewExpandedText = viewExpandedTextDecoded
        let tableTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableType)
        tableType = tableTypeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let isRegisteredWithLakeFormationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isRegisteredWithLakeFormation)
        isRegisteredWithLakeFormation = isRegisteredWithLakeFormationDecoded
        let targetTableDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TableIdentifier.self, forKey: .targetTable)
        targetTable = targetTableDecoded
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
    }
}

extension GlueClientTypes {
    /// Represents a collection of related data organized in columns and rows.
    public struct Table: Swift.Equatable {
        /// The ID of the Data Catalog in which the table resides.
        public var catalogId: Swift.String?
        /// The time when the table definition was created in the Data Catalog.
        public var createTime: ClientRuntime.Date?
        /// The person or entity who created the table.
        public var createdBy: Swift.String?
        /// The name of the database where the table metadata resides. For Hive compatibility, this must be all lowercase.
        public var databaseName: Swift.String?
        /// A description of the table.
        public var description: Swift.String?
        /// Indicates whether the table has been registered with Lake Formation.
        public var isRegisteredWithLakeFormation: Swift.Bool
        /// The last time that the table was accessed. This is usually taken from HDFS, and might not be reliable.
        public var lastAccessTime: ClientRuntime.Date?
        /// The last time that column statistics were computed for this table.
        public var lastAnalyzedTime: ClientRuntime.Date?
        /// The table name. For Hive compatibility, this must be entirely lowercase.
        /// This member is required.
        public var name: Swift.String?
        /// The owner of the table.
        public var owner: Swift.String?
        /// These key-value pairs define properties associated with the table.
        public var parameters: [Swift.String:Swift.String]?
        /// A list of columns by which the table is partitioned. Only primitive types are supported as partition keys. When you create a table used by Amazon Athena, and you do not specify any partitionKeys, you must at least set the value of partitionKeys to an empty list. For example: "PartitionKeys": []
        public var partitionKeys: [GlueClientTypes.Column]?
        /// The retention time for this table.
        public var retention: Swift.Int
        /// A storage descriptor containing information about the physical storage of this table.
        public var storageDescriptor: GlueClientTypes.StorageDescriptor?
        /// The type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.).
        public var tableType: Swift.String?
        /// A TableIdentifier structure that describes a target table for resource linking.
        public var targetTable: GlueClientTypes.TableIdentifier?
        /// The last time that the table was updated.
        public var updateTime: ClientRuntime.Date?
        /// If the table is a view, the expanded text of the view; otherwise null.
        public var viewExpandedText: Swift.String?
        /// If the table is a view, the original text of the view; otherwise null.
        public var viewOriginalText: Swift.String?

        public init (
            catalogId: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            createdBy: Swift.String? = nil,
            databaseName: Swift.String? = nil,
            description: Swift.String? = nil,
            isRegisteredWithLakeFormation: Swift.Bool = false,
            lastAccessTime: ClientRuntime.Date? = nil,
            lastAnalyzedTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            owner: Swift.String? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            partitionKeys: [GlueClientTypes.Column]? = nil,
            retention: Swift.Int = 0,
            storageDescriptor: GlueClientTypes.StorageDescriptor? = nil,
            tableType: Swift.String? = nil,
            targetTable: GlueClientTypes.TableIdentifier? = nil,
            updateTime: ClientRuntime.Date? = nil,
            viewExpandedText: Swift.String? = nil,
            viewOriginalText: Swift.String? = nil
        )
        {
            self.catalogId = catalogId
            self.createTime = createTime
            self.createdBy = createdBy
            self.databaseName = databaseName
            self.description = description
            self.isRegisteredWithLakeFormation = isRegisteredWithLakeFormation
            self.lastAccessTime = lastAccessTime
            self.lastAnalyzedTime = lastAnalyzedTime
            self.name = name
            self.owner = owner
            self.parameters = parameters
            self.partitionKeys = partitionKeys
            self.retention = retention
            self.storageDescriptor = storageDescriptor
            self.tableType = tableType
            self.targetTable = targetTable
            self.updateTime = updateTime
            self.viewExpandedText = viewExpandedText
            self.viewOriginalText = viewOriginalText
        }
    }

}

extension GlueClientTypes.TableError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDetail = "ErrorDetail"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorDetail = errorDetail {
            try encodeContainer.encode(errorDetail, forKey: .errorDetail)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ErrorDetail.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
    }
}

extension GlueClientTypes {
    /// An error record for table operations.
    public struct TableError: Swift.Equatable {
        /// The details about the error.
        public var errorDetail: GlueClientTypes.ErrorDetail?
        /// The name of the table. For Hive compatibility, this must be entirely lowercase.
        public var tableName: Swift.String?

        public init (
            errorDetail: GlueClientTypes.ErrorDetail? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.errorDetail = errorDetail
            self.tableName = tableName
        }
    }

}

extension GlueClientTypes.TableIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GlueClientTypes {
    /// A structure that describes a target table for resource linking.
    public struct TableIdentifier: Swift.Equatable {
        /// The ID of the Data Catalog in which the table resides.
        public var catalogId: Swift.String?
        /// The name of the catalog database that contains the target table.
        public var databaseName: Swift.String?
        /// The name of the target table.
        public var name: Swift.String?

        public init (
            catalogId: Swift.String? = nil,
            databaseName: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.catalogId = catalogId
            self.databaseName = databaseName
            self.name = name
        }
    }

}

extension GlueClientTypes.TableInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case lastAccessTime = "LastAccessTime"
        case lastAnalyzedTime = "LastAnalyzedTime"
        case name = "Name"
        case owner = "Owner"
        case parameters = "Parameters"
        case partitionKeys = "PartitionKeys"
        case retention = "Retention"
        case storageDescriptor = "StorageDescriptor"
        case tableType = "TableType"
        case targetTable = "TargetTable"
        case viewExpandedText = "ViewExpandedText"
        case viewOriginalText = "ViewOriginalText"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastAccessTime = lastAccessTime {
            try encodeContainer.encode(lastAccessTime.timeIntervalSince1970, forKey: .lastAccessTime)
        }
        if let lastAnalyzedTime = lastAnalyzedTime {
            try encodeContainer.encode(lastAnalyzedTime.timeIntervalSince1970, forKey: .lastAnalyzedTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let partitionKeys = partitionKeys {
            var partitionKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionKeys)
            for columnlist0 in partitionKeys {
                try partitionKeysContainer.encode(columnlist0)
            }
        }
        if retention != 0 {
            try encodeContainer.encode(retention, forKey: .retention)
        }
        if let storageDescriptor = storageDescriptor {
            try encodeContainer.encode(storageDescriptor, forKey: .storageDescriptor)
        }
        if let tableType = tableType {
            try encodeContainer.encode(tableType, forKey: .tableType)
        }
        if let targetTable = targetTable {
            try encodeContainer.encode(targetTable, forKey: .targetTable)
        }
        if let viewExpandedText = viewExpandedText {
            try encodeContainer.encode(viewExpandedText, forKey: .viewExpandedText)
        }
        if let viewOriginalText = viewOriginalText {
            try encodeContainer.encode(viewOriginalText, forKey: .viewOriginalText)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let lastAccessTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAccessTime)
        lastAccessTime = lastAccessTimeDecoded
        let lastAnalyzedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAnalyzedTime)
        lastAnalyzedTime = lastAnalyzedTimeDecoded
        let retentionDecoded = try containerValues.decode(Swift.Int.self, forKey: .retention)
        retention = retentionDecoded
        let storageDescriptorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StorageDescriptor.self, forKey: .storageDescriptor)
        storageDescriptor = storageDescriptorDecoded
        let partitionKeysContainer = try containerValues.decodeIfPresent([GlueClientTypes.Column?].self, forKey: .partitionKeys)
        var partitionKeysDecoded0:[GlueClientTypes.Column]? = nil
        if let partitionKeysContainer = partitionKeysContainer {
            partitionKeysDecoded0 = [GlueClientTypes.Column]()
            for structure0 in partitionKeysContainer {
                if let structure0 = structure0 {
                    partitionKeysDecoded0?.append(structure0)
                }
            }
        }
        partitionKeys = partitionKeysDecoded0
        let viewOriginalTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .viewOriginalText)
        viewOriginalText = viewOriginalTextDecoded
        let viewExpandedTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .viewExpandedText)
        viewExpandedText = viewExpandedTextDecoded
        let tableTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableType)
        tableType = tableTypeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let targetTableDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TableIdentifier.self, forKey: .targetTable)
        targetTable = targetTableDecoded
    }
}

extension GlueClientTypes {
    /// A structure used to define a table.
    public struct TableInput: Swift.Equatable {
        /// A description of the table.
        public var description: Swift.String?
        /// The last time that the table was accessed.
        public var lastAccessTime: ClientRuntime.Date?
        /// The last time that column statistics were computed for this table.
        public var lastAnalyzedTime: ClientRuntime.Date?
        /// The table name. For Hive compatibility, this is folded to lowercase when it is stored.
        /// This member is required.
        public var name: Swift.String?
        /// The table owner.
        public var owner: Swift.String?
        /// These key-value pairs define properties associated with the table.
        public var parameters: [Swift.String:Swift.String]?
        /// A list of columns by which the table is partitioned. Only primitive types are supported as partition keys. When you create a table used by Amazon Athena, and you do not specify any partitionKeys, you must at least set the value of partitionKeys to an empty list. For example: "PartitionKeys": []
        public var partitionKeys: [GlueClientTypes.Column]?
        /// The retention time for this table.
        public var retention: Swift.Int
        /// A storage descriptor containing information about the physical storage of this table.
        public var storageDescriptor: GlueClientTypes.StorageDescriptor?
        /// The type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.).
        public var tableType: Swift.String?
        /// A TableIdentifier structure that describes a target table for resource linking.
        public var targetTable: GlueClientTypes.TableIdentifier?
        /// If the table is a view, the expanded text of the view; otherwise null.
        public var viewExpandedText: Swift.String?
        /// If the table is a view, the original text of the view; otherwise null.
        public var viewOriginalText: Swift.String?

        public init (
            description: Swift.String? = nil,
            lastAccessTime: ClientRuntime.Date? = nil,
            lastAnalyzedTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            owner: Swift.String? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            partitionKeys: [GlueClientTypes.Column]? = nil,
            retention: Swift.Int = 0,
            storageDescriptor: GlueClientTypes.StorageDescriptor? = nil,
            tableType: Swift.String? = nil,
            targetTable: GlueClientTypes.TableIdentifier? = nil,
            viewExpandedText: Swift.String? = nil,
            viewOriginalText: Swift.String? = nil
        )
        {
            self.description = description
            self.lastAccessTime = lastAccessTime
            self.lastAnalyzedTime = lastAnalyzedTime
            self.name = name
            self.owner = owner
            self.parameters = parameters
            self.partitionKeys = partitionKeys
            self.retention = retention
            self.storageDescriptor = storageDescriptor
            self.tableType = tableType
            self.targetTable = targetTable
            self.viewExpandedText = viewExpandedText
            self.viewOriginalText = viewOriginalText
        }
    }

}

extension GlueClientTypes.TableVersion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case table = "Table"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let table = table {
            try encodeContainer.encode(table, forKey: .table)
        }
        if let versionId = versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Table.self, forKey: .table)
        table = tableDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a version of a table.
    public struct TableVersion: Swift.Equatable {
        /// The table in question.
        public var table: GlueClientTypes.Table?
        /// The ID value that identifies this table version. A VersionId is a string representation of an integer. Each version is incremented by 1.
        public var versionId: Swift.String?

        public init (
            table: GlueClientTypes.Table? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.table = table
            self.versionId = versionId
        }
    }

}

extension GlueClientTypes.TableVersionError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDetail = "ErrorDetail"
        case tableName = "TableName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorDetail = errorDetail {
            try encodeContainer.encode(errorDetail, forKey: .errorDetail)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let versionId = versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ErrorDetail.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
    }
}

extension GlueClientTypes {
    /// An error record for table-version operations.
    public struct TableVersionError: Swift.Equatable {
        /// The details about the error.
        public var errorDetail: GlueClientTypes.ErrorDetail?
        /// The name of the table in question.
        public var tableName: Swift.String?
        /// The ID value of the version in question. A VersionID is a string representation of an integer. Each version is incremented by 1.
        public var versionId: Swift.String?

        public init (
            errorDetail: GlueClientTypes.ErrorDetail? = nil,
            tableName: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.errorDetail = errorDetail
            self.tableName = tableName
            self.versionId = versionId
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagsToAdd = "TagsToAdd"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagsToAdd = tagsToAdd {
            var tagsToAddContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tagsToAdd)
            for (dictKey0, tagsmap0) in tagsToAdd {
                try tagsToAddContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The ARN of the Glue resource to which to add the tags. For more information about Glue resource ARNs, see the [Glue ARN string pattern](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html#aws-glue-api-regex-aws-glue-arn-id).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Tags to add to this resource.
    /// This member is required.
    public var tagsToAdd: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagsToAdd: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagsToAdd = tagsToAdd
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagsToAdd: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagsToAdd = "TagsToAdd"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsToAddContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tagsToAdd)
        var tagsToAddDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsToAddContainer = tagsToAddContainer {
            tagsToAddDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsToAddContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsToAddDecoded0?[key0] = tagvalue0
                }
            }
        }
        tagsToAdd = tagsToAddDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

}

extension GlueClientTypes.TaskRun: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completedOn = "CompletedOn"
        case errorString = "ErrorString"
        case executionTime = "ExecutionTime"
        case lastModifiedOn = "LastModifiedOn"
        case logGroupName = "LogGroupName"
        case properties = "Properties"
        case startedOn = "StartedOn"
        case status = "Status"
        case taskRunId = "TaskRunId"
        case transformId = "TransformId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completedOn = completedOn {
            try encodeContainer.encode(completedOn.timeIntervalSince1970, forKey: .completedOn)
        }
        if let errorString = errorString {
            try encodeContainer.encode(errorString, forKey: .errorString)
        }
        if executionTime != 0 {
            try encodeContainer.encode(executionTime, forKey: .executionTime)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let properties = properties {
            try encodeContainer.encode(properties, forKey: .properties)
        }
        if let startedOn = startedOn {
            try encodeContainer.encode(startedOn.timeIntervalSince1970, forKey: .startedOn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskRunId = taskRunId {
            try encodeContainer.encode(taskRunId, forKey: .taskRunId)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let taskRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunId)
        taskRunId = taskRunIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskStatusType.self, forKey: .status)
        status = statusDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let propertiesDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskRunProperties.self, forKey: .properties)
        properties = propertiesDecoded
        let errorStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorString)
        errorString = errorStringDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let executionTimeDecoded = try containerValues.decode(Swift.Int.self, forKey: .executionTime)
        executionTime = executionTimeDecoded
    }
}

extension GlueClientTypes {
    /// The sampling parameters that are associated with the machine learning transform.
    public struct TaskRun: Swift.Equatable {
        /// The last point in time that the requested task run was completed.
        public var completedOn: ClientRuntime.Date?
        /// The list of error strings associated with this task run.
        public var errorString: Swift.String?
        /// The amount of time (in seconds) that the task run consumed resources.
        public var executionTime: Swift.Int
        /// The last point in time that the requested task run was updated.
        public var lastModifiedOn: ClientRuntime.Date?
        /// The names of the log group for secure logging, associated with this task run.
        public var logGroupName: Swift.String?
        /// Specifies configuration properties associated with this task run.
        public var properties: GlueClientTypes.TaskRunProperties?
        /// The date and time that this task run started.
        public var startedOn: ClientRuntime.Date?
        /// The current status of the requested task run.
        public var status: GlueClientTypes.TaskStatusType?
        /// The unique identifier for this task run.
        public var taskRunId: Swift.String?
        /// The unique identifier for the transform.
        public var transformId: Swift.String?

        public init (
            completedOn: ClientRuntime.Date? = nil,
            errorString: Swift.String? = nil,
            executionTime: Swift.Int = 0,
            lastModifiedOn: ClientRuntime.Date? = nil,
            logGroupName: Swift.String? = nil,
            properties: GlueClientTypes.TaskRunProperties? = nil,
            startedOn: ClientRuntime.Date? = nil,
            status: GlueClientTypes.TaskStatusType? = nil,
            taskRunId: Swift.String? = nil,
            transformId: Swift.String? = nil
        )
        {
            self.completedOn = completedOn
            self.errorString = errorString
            self.executionTime = executionTime
            self.lastModifiedOn = lastModifiedOn
            self.logGroupName = logGroupName
            self.properties = properties
            self.startedOn = startedOn
            self.status = status
            self.taskRunId = taskRunId
            self.transformId = transformId
        }
    }

}

extension GlueClientTypes.TaskRunFilterCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startedAfter = "StartedAfter"
        case startedBefore = "StartedBefore"
        case status = "Status"
        case taskRunType = "TaskRunType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startedAfter = startedAfter {
            try encodeContainer.encode(startedAfter.timeIntervalSince1970, forKey: .startedAfter)
        }
        if let startedBefore = startedBefore {
            try encodeContainer.encode(startedBefore.timeIntervalSince1970, forKey: .startedBefore)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskRunType = taskRunType {
            try encodeContainer.encode(taskRunType.rawValue, forKey: .taskRunType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskRunTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskType.self, forKey: .taskRunType)
        taskRunType = taskRunTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskStatusType.self, forKey: .status)
        status = statusDecoded
        let startedBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedBefore)
        startedBefore = startedBeforeDecoded
        let startedAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAfter)
        startedAfter = startedAfterDecoded
    }
}

extension GlueClientTypes {
    /// The criteria that are used to filter the task runs for the machine learning transform.
    public struct TaskRunFilterCriteria: Swift.Equatable {
        /// Filter on task runs started after this date.
        public var startedAfter: ClientRuntime.Date?
        /// Filter on task runs started before this date.
        public var startedBefore: ClientRuntime.Date?
        /// The current status of the task run.
        public var status: GlueClientTypes.TaskStatusType?
        /// The type of task run.
        public var taskRunType: GlueClientTypes.TaskType?

        public init (
            startedAfter: ClientRuntime.Date? = nil,
            startedBefore: ClientRuntime.Date? = nil,
            status: GlueClientTypes.TaskStatusType? = nil,
            taskRunType: GlueClientTypes.TaskType? = nil
        )
        {
            self.startedAfter = startedAfter
            self.startedBefore = startedBefore
            self.status = status
            self.taskRunType = taskRunType
        }
    }

}

extension GlueClientTypes.TaskRunProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportLabelsTaskRunProperties = "ExportLabelsTaskRunProperties"
        case findMatchesTaskRunProperties = "FindMatchesTaskRunProperties"
        case importLabelsTaskRunProperties = "ImportLabelsTaskRunProperties"
        case labelingSetGenerationTaskRunProperties = "LabelingSetGenerationTaskRunProperties"
        case taskType = "TaskType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportLabelsTaskRunProperties = exportLabelsTaskRunProperties {
            try encodeContainer.encode(exportLabelsTaskRunProperties, forKey: .exportLabelsTaskRunProperties)
        }
        if let findMatchesTaskRunProperties = findMatchesTaskRunProperties {
            try encodeContainer.encode(findMatchesTaskRunProperties, forKey: .findMatchesTaskRunProperties)
        }
        if let importLabelsTaskRunProperties = importLabelsTaskRunProperties {
            try encodeContainer.encode(importLabelsTaskRunProperties, forKey: .importLabelsTaskRunProperties)
        }
        if let labelingSetGenerationTaskRunProperties = labelingSetGenerationTaskRunProperties {
            try encodeContainer.encode(labelingSetGenerationTaskRunProperties, forKey: .labelingSetGenerationTaskRunProperties)
        }
        if let taskType = taskType {
            try encodeContainer.encode(taskType.rawValue, forKey: .taskType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskType.self, forKey: .taskType)
        taskType = taskTypeDecoded
        let importLabelsTaskRunPropertiesDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ImportLabelsTaskRunProperties.self, forKey: .importLabelsTaskRunProperties)
        importLabelsTaskRunProperties = importLabelsTaskRunPropertiesDecoded
        let exportLabelsTaskRunPropertiesDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ExportLabelsTaskRunProperties.self, forKey: .exportLabelsTaskRunProperties)
        exportLabelsTaskRunProperties = exportLabelsTaskRunPropertiesDecoded
        let labelingSetGenerationTaskRunPropertiesDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LabelingSetGenerationTaskRunProperties.self, forKey: .labelingSetGenerationTaskRunProperties)
        labelingSetGenerationTaskRunProperties = labelingSetGenerationTaskRunPropertiesDecoded
        let findMatchesTaskRunPropertiesDecoded = try containerValues.decodeIfPresent(GlueClientTypes.FindMatchesTaskRunProperties.self, forKey: .findMatchesTaskRunProperties)
        findMatchesTaskRunProperties = findMatchesTaskRunPropertiesDecoded
    }
}

extension GlueClientTypes {
    /// The configuration properties for the task run.
    public struct TaskRunProperties: Swift.Equatable {
        /// The configuration properties for an exporting labels task run.
        public var exportLabelsTaskRunProperties: GlueClientTypes.ExportLabelsTaskRunProperties?
        /// The configuration properties for a find matches task run.
        public var findMatchesTaskRunProperties: GlueClientTypes.FindMatchesTaskRunProperties?
        /// The configuration properties for an importing labels task run.
        public var importLabelsTaskRunProperties: GlueClientTypes.ImportLabelsTaskRunProperties?
        /// The configuration properties for a labeling set generation task run.
        public var labelingSetGenerationTaskRunProperties: GlueClientTypes.LabelingSetGenerationTaskRunProperties?
        /// The type of task run.
        public var taskType: GlueClientTypes.TaskType?

        public init (
            exportLabelsTaskRunProperties: GlueClientTypes.ExportLabelsTaskRunProperties? = nil,
            findMatchesTaskRunProperties: GlueClientTypes.FindMatchesTaskRunProperties? = nil,
            importLabelsTaskRunProperties: GlueClientTypes.ImportLabelsTaskRunProperties? = nil,
            labelingSetGenerationTaskRunProperties: GlueClientTypes.LabelingSetGenerationTaskRunProperties? = nil,
            taskType: GlueClientTypes.TaskType? = nil
        )
        {
            self.exportLabelsTaskRunProperties = exportLabelsTaskRunProperties
            self.findMatchesTaskRunProperties = findMatchesTaskRunProperties
            self.importLabelsTaskRunProperties = importLabelsTaskRunProperties
            self.labelingSetGenerationTaskRunProperties = labelingSetGenerationTaskRunProperties
            self.taskType = taskType
        }
    }

}

extension GlueClientTypes {
    public enum TaskRunSortColumnType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case started
        case status
        case taskRunType
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskRunSortColumnType] {
            return [
                .started,
                .status,
                .taskRunType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .started: return "STARTED"
            case .status: return "STATUS"
            case .taskRunType: return "TASK_RUN_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskRunSortColumnType(rawValue: rawValue) ?? TaskRunSortColumnType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.TaskRunSortCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case column = "Column"
        case sortDirection = "SortDirection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let column = column {
            try encodeContainer.encode(column.rawValue, forKey: .column)
        }
        if let sortDirection = sortDirection {
            try encodeContainer.encode(sortDirection.rawValue, forKey: .sortDirection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TaskRunSortColumnType.self, forKey: .column)
        column = columnDecoded
        let sortDirectionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SortDirectionType.self, forKey: .sortDirection)
        sortDirection = sortDirectionDecoded
    }
}

extension GlueClientTypes {
    /// The sorting criteria that are used to sort the list of task runs for the machine learning transform.
    public struct TaskRunSortCriteria: Swift.Equatable {
        /// The column to be used to sort the list of task runs for the machine learning transform.
        /// This member is required.
        public var column: GlueClientTypes.TaskRunSortColumnType?
        /// The sort direction to be used to sort the list of task runs for the machine learning transform.
        /// This member is required.
        public var sortDirection: GlueClientTypes.SortDirectionType?

        public init (
            column: GlueClientTypes.TaskRunSortColumnType? = nil,
            sortDirection: GlueClientTypes.SortDirectionType? = nil
        )
        {
            self.column = column
            self.sortDirection = sortDirection
        }
    }

}

extension GlueClientTypes {
    public enum TaskStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case running
        case starting
        case stopped
        case stopping
        case succeeded
        case timeout
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskStatusType] {
            return [
                .failed,
                .running,
                .starting,
                .stopped,
                .stopping,
                .succeeded,
                .timeout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .succeeded: return "SUCCEEDED"
            case .timeout: return "TIMEOUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskStatusType(rawValue: rawValue) ?? TaskStatusType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes {
    public enum TaskType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case evaluation
        case exportLabels
        case findMatches
        case importLabels
        case labelingSetGeneration
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskType] {
            return [
                .evaluation,
                .exportLabels,
                .findMatches,
                .importLabels,
                .labelingSetGeneration,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .evaluation: return "EVALUATION"
            case .exportLabels: return "EXPORT_LABELS"
            case .findMatches: return "FIND_MATCHES"
            case .importLabels: return "IMPORT_LABELS"
            case .labelingSetGeneration: return "LABELING_SET_GENERATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskType(rawValue: rawValue) ?? TaskType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.TransformEncryption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlUserDataEncryption = "MlUserDataEncryption"
        case taskRunSecurityConfigurationName = "TaskRunSecurityConfigurationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mlUserDataEncryption = mlUserDataEncryption {
            try encodeContainer.encode(mlUserDataEncryption, forKey: .mlUserDataEncryption)
        }
        if let taskRunSecurityConfigurationName = taskRunSecurityConfigurationName {
            try encodeContainer.encode(taskRunSecurityConfigurationName, forKey: .taskRunSecurityConfigurationName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlUserDataEncryptionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.MLUserDataEncryption.self, forKey: .mlUserDataEncryption)
        mlUserDataEncryption = mlUserDataEncryptionDecoded
        let taskRunSecurityConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRunSecurityConfigurationName)
        taskRunSecurityConfigurationName = taskRunSecurityConfigurationNameDecoded
    }
}

extension GlueClientTypes {
    /// The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS. Additionally, imported labels and trained transforms can now be encrypted using a customer provided KMS key.
    public struct TransformEncryption: Swift.Equatable {
        /// An MLUserDataEncryption object containing the encryption mode and customer-provided KMS key ID.
        public var mlUserDataEncryption: GlueClientTypes.MLUserDataEncryption?
        /// The name of the security configuration.
        public var taskRunSecurityConfigurationName: Swift.String?

        public init (
            mlUserDataEncryption: GlueClientTypes.MLUserDataEncryption? = nil,
            taskRunSecurityConfigurationName: Swift.String? = nil
        )
        {
            self.mlUserDataEncryption = mlUserDataEncryption
            self.taskRunSecurityConfigurationName = taskRunSecurityConfigurationName
        }
    }

}

extension GlueClientTypes.TransformFilterCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case glueVersion = "GlueVersion"
        case lastModifiedAfter = "LastModifiedAfter"
        case lastModifiedBefore = "LastModifiedBefore"
        case name = "Name"
        case schema = "Schema"
        case status = "Status"
        case transformType = "TransformType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let lastModifiedAfter = lastModifiedAfter {
            try encodeContainer.encode(lastModifiedAfter.timeIntervalSince1970, forKey: .lastModifiedAfter)
        }
        if let lastModifiedBefore = lastModifiedBefore {
            try encodeContainer.encode(lastModifiedBefore.timeIntervalSince1970, forKey: .lastModifiedBefore)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let schema = schema {
            var schemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .schema)
            for transformschema0 in schema {
                try schemaContainer.encode(transformschema0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let transformType = transformType {
            try encodeContainer.encode(transformType.rawValue, forKey: .transformType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let transformTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformType.self, forKey: .transformType)
        transformType = transformTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformStatusType.self, forKey: .status)
        status = statusDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let lastModifiedBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedBefore)
        lastModifiedBefore = lastModifiedBeforeDecoded
        let lastModifiedAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedAfter)
        lastModifiedAfter = lastModifiedAfterDecoded
        let schemaContainer = try containerValues.decodeIfPresent([GlueClientTypes.SchemaColumn?].self, forKey: .schema)
        var schemaDecoded0:[GlueClientTypes.SchemaColumn]? = nil
        if let schemaContainer = schemaContainer {
            schemaDecoded0 = [GlueClientTypes.SchemaColumn]()
            for structure0 in schemaContainer {
                if let structure0 = structure0 {
                    schemaDecoded0?.append(structure0)
                }
            }
        }
        schema = schemaDecoded0
    }
}

extension GlueClientTypes {
    /// The criteria used to filter the machine learning transforms.
    public struct TransformFilterCriteria: Swift.Equatable {
        /// The time and date after which the transforms were created.
        public var createdAfter: ClientRuntime.Date?
        /// The time and date before which the transforms were created.
        public var createdBefore: ClientRuntime.Date?
        /// This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see [Glue Versions](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions) in the developer guide.
        public var glueVersion: Swift.String?
        /// Filter on transforms last modified after this date.
        public var lastModifiedAfter: ClientRuntime.Date?
        /// Filter on transforms last modified before this date.
        public var lastModifiedBefore: ClientRuntime.Date?
        /// A unique transform name that is used to filter the machine learning transforms.
        public var name: Swift.String?
        /// Filters on datasets with a specific schema. The Map object is an array of key-value pairs representing the schema this transform accepts, where Column is the name of a column, and Type is the type of the data such as an integer or string. Has an upper bound of 100 columns.
        public var schema: [GlueClientTypes.SchemaColumn]?
        /// Filters the list of machine learning transforms by the last known status of the transforms (to indicate whether a transform can be used or not). One of "NOT_READY", "READY", or "DELETING".
        public var status: GlueClientTypes.TransformStatusType?
        /// The type of machine learning transform that is used to filter the machine learning transforms.
        public var transformType: GlueClientTypes.TransformType?

        public init (
            createdAfter: ClientRuntime.Date? = nil,
            createdBefore: ClientRuntime.Date? = nil,
            glueVersion: Swift.String? = nil,
            lastModifiedAfter: ClientRuntime.Date? = nil,
            lastModifiedBefore: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            schema: [GlueClientTypes.SchemaColumn]? = nil,
            status: GlueClientTypes.TransformStatusType? = nil,
            transformType: GlueClientTypes.TransformType? = nil
        )
        {
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.glueVersion = glueVersion
            self.lastModifiedAfter = lastModifiedAfter
            self.lastModifiedBefore = lastModifiedBefore
            self.name = name
            self.schema = schema
            self.status = status
            self.transformType = transformType
        }
    }

}

extension GlueClientTypes.TransformParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findMatchesParameters = "FindMatchesParameters"
        case transformType = "TransformType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let findMatchesParameters = findMatchesParameters {
            try encodeContainer.encode(findMatchesParameters, forKey: .findMatchesParameters)
        }
        if let transformType = transformType {
            try encodeContainer.encode(transformType.rawValue, forKey: .transformType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformType.self, forKey: .transformType)
        transformType = transformTypeDecoded
        let findMatchesParametersDecoded = try containerValues.decodeIfPresent(GlueClientTypes.FindMatchesParameters.self, forKey: .findMatchesParameters)
        findMatchesParameters = findMatchesParametersDecoded
    }
}

extension GlueClientTypes {
    /// The algorithm-specific parameters that are associated with the machine learning transform.
    public struct TransformParameters: Swift.Equatable {
        /// The parameters for the find matches algorithm.
        public var findMatchesParameters: GlueClientTypes.FindMatchesParameters?
        /// The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
        /// This member is required.
        public var transformType: GlueClientTypes.TransformType?

        public init (
            findMatchesParameters: GlueClientTypes.FindMatchesParameters? = nil,
            transformType: GlueClientTypes.TransformType? = nil
        )
        {
            self.findMatchesParameters = findMatchesParameters
            self.transformType = transformType
        }
    }

}

extension GlueClientTypes {
    public enum TransformSortColumnType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case lastModified
        case name
        case status
        case transformType
        case sdkUnknown(Swift.String)

        public static var allCases: [TransformSortColumnType] {
            return [
                .created,
                .lastModified,
                .name,
                .status,
                .transformType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .lastModified: return "LAST_MODIFIED"
            case .name: return "NAME"
            case .status: return "STATUS"
            case .transformType: return "TRANSFORM_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransformSortColumnType(rawValue: rawValue) ?? TransformSortColumnType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.TransformSortCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case column = "Column"
        case sortDirection = "SortDirection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let column = column {
            try encodeContainer.encode(column.rawValue, forKey: .column)
        }
        if let sortDirection = sortDirection {
            try encodeContainer.encode(sortDirection.rawValue, forKey: .sortDirection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformSortColumnType.self, forKey: .column)
        column = columnDecoded
        let sortDirectionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SortDirectionType.self, forKey: .sortDirection)
        sortDirection = sortDirectionDecoded
    }
}

extension GlueClientTypes {
    /// The sorting criteria that are associated with the machine learning transform.
    public struct TransformSortCriteria: Swift.Equatable {
        /// The column to be used in the sorting criteria that are associated with the machine learning transform.
        /// This member is required.
        public var column: GlueClientTypes.TransformSortColumnType?
        /// The sort direction to be used in the sorting criteria that are associated with the machine learning transform.
        /// This member is required.
        public var sortDirection: GlueClientTypes.SortDirectionType?

        public init (
            column: GlueClientTypes.TransformSortColumnType? = nil,
            sortDirection: GlueClientTypes.SortDirectionType? = nil
        )
        {
            self.column = column
            self.sortDirection = sortDirection
        }
    }

}

extension GlueClientTypes {
    public enum TransformStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleting
        case notReady
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [TransformStatusType] {
            return [
                .deleting,
                .notReady,
                .ready,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .notReady: return "NOT_READY"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransformStatusType(rawValue: rawValue) ?? TransformStatusType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes {
    public enum TransformType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case findMatches
        case sdkUnknown(Swift.String)

        public static var allCases: [TransformType] {
            return [
                .findMatches,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .findMatches: return "FIND_MATCHES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransformType(rawValue: rawValue) ?? TransformType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.Trigger: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case description = "Description"
        case eventBatchingCondition = "EventBatchingCondition"
        case id = "Id"
        case name = "Name"
        case predicate = "Predicate"
        case schedule = "Schedule"
        case state = "State"
        case type = "Type"
        case workflowName = "WorkflowName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventBatchingCondition = eventBatchingCondition {
            try encodeContainer.encode(eventBatchingCondition, forKey: .eventBatchingCondition)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predicate = predicate {
            try encodeContainer.encode(predicate, forKey: .predicate)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let workflowName = workflowName {
            try encodeContainer.encode(workflowName, forKey: .workflowName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let workflowNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowName)
        workflowName = workflowNameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TriggerType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TriggerState.self, forKey: .state)
        state = stateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let actionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[GlueClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [GlueClientTypes.Action]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let predicateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Predicate.self, forKey: .predicate)
        predicate = predicateDecoded
        let eventBatchingConditionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EventBatchingCondition.self, forKey: .eventBatchingCondition)
        eventBatchingCondition = eventBatchingConditionDecoded
    }
}

extension GlueClientTypes {
    /// Information about a specific trigger.
    public struct Trigger: Swift.Equatable {
        /// The actions initiated by this trigger.
        public var actions: [GlueClientTypes.Action]?
        /// A description of this trigger.
        public var description: Swift.String?
        /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
        public var eventBatchingCondition: GlueClientTypes.EventBatchingCondition?
        /// Reserved for future use.
        public var id: Swift.String?
        /// The name of the trigger.
        public var name: Swift.String?
        /// The predicate of this trigger, which defines when it will fire.
        public var predicate: GlueClientTypes.Predicate?
        /// A cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public var schedule: Swift.String?
        /// The current state of the trigger.
        public var state: GlueClientTypes.TriggerState?
        /// The type of trigger that this is.
        public var type: GlueClientTypes.TriggerType?
        /// The name of the workflow associated with the trigger.
        public var workflowName: Swift.String?

        public init (
            actions: [GlueClientTypes.Action]? = nil,
            description: Swift.String? = nil,
            eventBatchingCondition: GlueClientTypes.EventBatchingCondition? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            predicate: GlueClientTypes.Predicate? = nil,
            schedule: Swift.String? = nil,
            state: GlueClientTypes.TriggerState? = nil,
            type: GlueClientTypes.TriggerType? = nil,
            workflowName: Swift.String? = nil
        )
        {
            self.actions = actions
            self.description = description
            self.eventBatchingCondition = eventBatchingCondition
            self.id = id
            self.name = name
            self.predicate = predicate
            self.schedule = schedule
            self.state = state
            self.type = type
            self.workflowName = workflowName
        }
    }

}

extension GlueClientTypes.TriggerNodeDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trigger = "Trigger"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trigger = trigger {
            try encodeContainer.encode(trigger, forKey: .trigger)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Trigger.self, forKey: .trigger)
        trigger = triggerDecoded
    }
}

extension GlueClientTypes {
    /// The details of a Trigger node present in the workflow.
    public struct TriggerNodeDetails: Swift.Equatable {
        /// The information of the trigger represented by the trigger node.
        public var trigger: GlueClientTypes.Trigger?

        public init (
            trigger: GlueClientTypes.Trigger? = nil
        )
        {
            self.trigger = trigger
        }
    }

}

extension GlueClientTypes {
    public enum TriggerState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activated
        case activating
        case created
        case creating
        case deactivated
        case deactivating
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [TriggerState] {
            return [
                .activated,
                .activating,
                .created,
                .creating,
                .deactivated,
                .deactivating,
                .deleting,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activated: return "ACTIVATED"
            case .activating: return "ACTIVATING"
            case .created: return "CREATED"
            case .creating: return "CREATING"
            case .deactivated: return "DEACTIVATED"
            case .deactivating: return "DEACTIVATING"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TriggerState(rawValue: rawValue) ?? TriggerState.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes {
    public enum TriggerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case conditional
        case event
        case onDemand
        case scheduled
        case sdkUnknown(Swift.String)

        public static var allCases: [TriggerType] {
            return [
                .conditional,
                .event,
                .onDemand,
                .scheduled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .conditional: return "CONDITIONAL"
            case .event: return "EVENT"
            case .onDemand: return "ON_DEMAND"
            case .scheduled: return "SCHEDULED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TriggerType(rawValue: rawValue) ?? TriggerType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.TriggerUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case description = "Description"
        case eventBatchingCondition = "EventBatchingCondition"
        case name = "Name"
        case predicate = "Predicate"
        case schedule = "Schedule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventBatchingCondition = eventBatchingCondition {
            try encodeContainer.encode(eventBatchingCondition, forKey: .eventBatchingCondition)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predicate = predicate {
            try encodeContainer.encode(predicate, forKey: .predicate)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let actionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[GlueClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [GlueClientTypes.Action]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let predicateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Predicate.self, forKey: .predicate)
        predicate = predicateDecoded
        let eventBatchingConditionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EventBatchingCondition.self, forKey: .eventBatchingCondition)
        eventBatchingCondition = eventBatchingConditionDecoded
    }
}

extension GlueClientTypes {
    /// A structure used to provide information used to update a trigger. This object updates the previous trigger definition by overwriting it completely.
    public struct TriggerUpdate: Swift.Equatable {
        /// The actions initiated by this trigger.
        public var actions: [GlueClientTypes.Action]?
        /// A description of this trigger.
        public var description: Swift.String?
        /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
        public var eventBatchingCondition: GlueClientTypes.EventBatchingCondition?
        /// Reserved for future use.
        public var name: Swift.String?
        /// The predicate of this trigger, which defines when it will fire.
        public var predicate: GlueClientTypes.Predicate?
        /// A cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public var schedule: Swift.String?

        public init (
            actions: [GlueClientTypes.Action]? = nil,
            description: Swift.String? = nil,
            eventBatchingCondition: GlueClientTypes.EventBatchingCondition? = nil,
            name: Swift.String? = nil,
            predicate: GlueClientTypes.Predicate? = nil,
            schedule: Swift.String? = nil
        )
        {
            self.actions = actions
            self.description = description
            self.eventBatchingCondition = eventBatchingCondition
            self.name = name
            self.predicate = predicate
            self.schedule = schedule
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagsToRemove = "TagsToRemove"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagsToRemove = tagsToRemove {
            var tagsToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagsToRemove)
            for tagkeyslist0 in tagsToRemove {
                try tagsToRemoveContainer.encode(tagkeyslist0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource from which to remove the tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Tags to remove from this resource.
    /// This member is required.
    public var tagsToRemove: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagsToRemove: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagsToRemove = tagsToRemove
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagsToRemove: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagsToRemove = "TagsToRemove"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagsToRemove)
        var tagsToRemoveDecoded0:[Swift.String]? = nil
        if let tagsToRemoveContainer = tagsToRemoveContainer {
            tagsToRemoveDecoded0 = [Swift.String]()
            for string0 in tagsToRemoveContainer {
                if let string0 = string0 {
                    tagsToRemoveDecoded0?.append(string0)
                }
            }
        }
        tagsToRemove = tagsToRemoveDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

}

extension GlueClientTypes {
    public enum UpdateBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case log
        case updateInDatabase
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateBehavior] {
            return [
                .log,
                .updateInDatabase,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .log: return "LOG"
            case .updateInDatabase: return "UPDATE_IN_DATABASE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpdateBehavior(rawValue: rawValue) ?? UpdateBehavior.sdkUnknown(rawValue)
        }
    }
}

extension UpdateBlueprintInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintLocation = "BlueprintLocation"
        case description = "Description"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintLocation = blueprintLocation {
            try encodeContainer.encode(blueprintLocation, forKey: .blueprintLocation)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension UpdateBlueprintInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateBlueprintInput: Swift.Equatable {
    /// Specifies a path in Amazon S3 where the blueprint is published.
    /// This member is required.
    public var blueprintLocation: Swift.String?
    /// A description of the blueprint.
    public var description: Swift.String?
    /// The name of the blueprint.
    /// This member is required.
    public var name: Swift.String?

    public init (
        blueprintLocation: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.blueprintLocation = blueprintLocation
        self.description = description
        self.name = name
    }
}

struct UpdateBlueprintInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let blueprintLocation: Swift.String?
}

extension UpdateBlueprintInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintLocation = "BlueprintLocation"
        case description = "Description"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let blueprintLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintLocation)
        blueprintLocation = blueprintLocationDecoded
    }
}

extension UpdateBlueprintOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateBlueprintOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IllegalBlueprintStateException" : self = .illegalBlueprintStateException(try IllegalBlueprintStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateBlueprintOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case illegalBlueprintStateException(IllegalBlueprintStateException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateBlueprintOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateBlueprintOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct UpdateBlueprintOutputResponse: Swift.Equatable {
    /// Returns the name of the blueprint that was updated.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct UpdateBlueprintOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension UpdateBlueprintOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UpdateClassifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csvClassifier = "CsvClassifier"
        case grokClassifier = "GrokClassifier"
        case jsonClassifier = "JsonClassifier"
        case xMLClassifier = "XMLClassifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let csvClassifier = csvClassifier {
            try encodeContainer.encode(csvClassifier, forKey: .csvClassifier)
        }
        if let grokClassifier = grokClassifier {
            try encodeContainer.encode(grokClassifier, forKey: .grokClassifier)
        }
        if let jsonClassifier = jsonClassifier {
            try encodeContainer.encode(jsonClassifier, forKey: .jsonClassifier)
        }
        if let xMLClassifier = xMLClassifier {
            try encodeContainer.encode(xMLClassifier, forKey: .xMLClassifier)
        }
    }
}

extension UpdateClassifierInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateClassifierInput: Swift.Equatable {
    /// A CsvClassifier object with updated fields.
    public var csvClassifier: GlueClientTypes.UpdateCsvClassifierRequest?
    /// A GrokClassifier object with updated fields.
    public var grokClassifier: GlueClientTypes.UpdateGrokClassifierRequest?
    /// A JsonClassifier object with updated fields.
    public var jsonClassifier: GlueClientTypes.UpdateJsonClassifierRequest?
    /// An XMLClassifier object with updated fields.
    public var xMLClassifier: GlueClientTypes.UpdateXMLClassifierRequest?

    public init (
        csvClassifier: GlueClientTypes.UpdateCsvClassifierRequest? = nil,
        grokClassifier: GlueClientTypes.UpdateGrokClassifierRequest? = nil,
        jsonClassifier: GlueClientTypes.UpdateJsonClassifierRequest? = nil,
        xMLClassifier: GlueClientTypes.UpdateXMLClassifierRequest? = nil
    )
    {
        self.csvClassifier = csvClassifier
        self.grokClassifier = grokClassifier
        self.jsonClassifier = jsonClassifier
        self.xMLClassifier = xMLClassifier
    }
}

struct UpdateClassifierInputBody: Swift.Equatable {
    let grokClassifier: GlueClientTypes.UpdateGrokClassifierRequest?
    let xMLClassifier: GlueClientTypes.UpdateXMLClassifierRequest?
    let jsonClassifier: GlueClientTypes.UpdateJsonClassifierRequest?
    let csvClassifier: GlueClientTypes.UpdateCsvClassifierRequest?
}

extension UpdateClassifierInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csvClassifier = "CsvClassifier"
        case grokClassifier = "GrokClassifier"
        case jsonClassifier = "JsonClassifier"
        case xMLClassifier = "XMLClassifier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grokClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UpdateGrokClassifierRequest.self, forKey: .grokClassifier)
        grokClassifier = grokClassifierDecoded
        let xMLClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UpdateXMLClassifierRequest.self, forKey: .xMLClassifier)
        xMLClassifier = xMLClassifierDecoded
        let jsonClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UpdateJsonClassifierRequest.self, forKey: .jsonClassifier)
        jsonClassifier = jsonClassifierDecoded
        let csvClassifierDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UpdateCsvClassifierRequest.self, forKey: .csvClassifier)
        csvClassifier = csvClassifierDecoded
    }
}

extension UpdateClassifierOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateClassifierOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionMismatchException" : self = .versionMismatchException(try VersionMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateClassifierOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case versionMismatchException(VersionMismatchException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateClassifierOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateClassifierOutputResponse: Swift.Equatable {

}

extension UpdateColumnStatisticsForPartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnStatisticsList = "ColumnStatisticsList"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let columnStatisticsList = columnStatisticsList {
            var columnStatisticsListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnStatisticsList)
            for updatecolumnstatisticslist0 in columnStatisticsList {
                try columnStatisticsListContainer.encode(updatecolumnstatisticslist0)
            }
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionValues = partitionValues {
            var partitionValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValues)
            for valuestringlist0 in partitionValues {
                try partitionValuesContainer.encode(valuestringlist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension UpdateColumnStatisticsForPartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateColumnStatisticsForPartitionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// A list of the column statistics.
    /// This member is required.
    public var columnStatisticsList: [GlueClientTypes.ColumnStatistics]?
    /// The name of the catalog database where the partitions reside.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A list of partition values identifying the partition.
    /// This member is required.
    public var partitionValues: [Swift.String]?
    /// The name of the partitions' table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        columnStatisticsList: [GlueClientTypes.ColumnStatistics]? = nil,
        databaseName: Swift.String? = nil,
        partitionValues: [Swift.String]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.columnStatisticsList = columnStatisticsList
        self.databaseName = databaseName
        self.partitionValues = partitionValues
        self.tableName = tableName
    }
}

struct UpdateColumnStatisticsForPartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionValues: [Swift.String]?
    let columnStatisticsList: [GlueClientTypes.ColumnStatistics]?
}

extension UpdateColumnStatisticsForPartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnStatisticsList = "ColumnStatisticsList"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValues)
        var partitionValuesDecoded0:[Swift.String]? = nil
        if let partitionValuesContainer = partitionValuesContainer {
            partitionValuesDecoded0 = [Swift.String]()
            for string0 in partitionValuesContainer {
                if let string0 = string0 {
                    partitionValuesDecoded0?.append(string0)
                }
            }
        }
        partitionValues = partitionValuesDecoded0
        let columnStatisticsListContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnStatistics?].self, forKey: .columnStatisticsList)
        var columnStatisticsListDecoded0:[GlueClientTypes.ColumnStatistics]? = nil
        if let columnStatisticsListContainer = columnStatisticsListContainer {
            columnStatisticsListDecoded0 = [GlueClientTypes.ColumnStatistics]()
            for structure0 in columnStatisticsListContainer {
                if let structure0 = structure0 {
                    columnStatisticsListDecoded0?.append(structure0)
                }
            }
        }
        columnStatisticsList = columnStatisticsListDecoded0
    }
}

extension UpdateColumnStatisticsForPartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateColumnStatisticsForPartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateColumnStatisticsForPartitionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateColumnStatisticsForPartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateColumnStatisticsForPartitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
        } else {
            self.errors = nil
        }
    }
}

public struct UpdateColumnStatisticsForPartitionOutputResponse: Swift.Equatable {
    /// Error occurred during updating column statistics data.
    public var errors: [GlueClientTypes.ColumnStatisticsError]?

    public init (
        errors: [GlueClientTypes.ColumnStatisticsError]? = nil
    )
    {
        self.errors = errors
    }
}

struct UpdateColumnStatisticsForPartitionOutputResponseBody: Swift.Equatable {
    let errors: [GlueClientTypes.ColumnStatisticsError]?
}

extension UpdateColumnStatisticsForPartitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnStatisticsError?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.ColumnStatisticsError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.ColumnStatisticsError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension UpdateColumnStatisticsForTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnStatisticsList = "ColumnStatisticsList"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let columnStatisticsList = columnStatisticsList {
            var columnStatisticsListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnStatisticsList)
            for updatecolumnstatisticslist0 in columnStatisticsList {
                try columnStatisticsListContainer.encode(updatecolumnstatisticslist0)
            }
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension UpdateColumnStatisticsForTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateColumnStatisticsForTableInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// A list of the column statistics.
    /// This member is required.
    public var columnStatisticsList: [GlueClientTypes.ColumnStatistics]?
    /// The name of the catalog database where the partitions reside.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partitions' table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        columnStatisticsList: [GlueClientTypes.ColumnStatistics]? = nil,
        databaseName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.columnStatisticsList = columnStatisticsList
        self.databaseName = databaseName
        self.tableName = tableName
    }
}

struct UpdateColumnStatisticsForTableInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let columnStatisticsList: [GlueClientTypes.ColumnStatistics]?
}

extension UpdateColumnStatisticsForTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case columnStatisticsList = "ColumnStatisticsList"
        case databaseName = "DatabaseName"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let columnStatisticsListContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnStatistics?].self, forKey: .columnStatisticsList)
        var columnStatisticsListDecoded0:[GlueClientTypes.ColumnStatistics]? = nil
        if let columnStatisticsListContainer = columnStatisticsListContainer {
            columnStatisticsListDecoded0 = [GlueClientTypes.ColumnStatistics]()
            for structure0 in columnStatisticsListContainer {
                if let structure0 = structure0 {
                    columnStatisticsListDecoded0?.append(structure0)
                }
            }
        }
        columnStatisticsList = columnStatisticsListDecoded0
    }
}

extension UpdateColumnStatisticsForTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateColumnStatisticsForTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateColumnStatisticsForTableOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateColumnStatisticsForTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateColumnStatisticsForTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
        } else {
            self.errors = nil
        }
    }
}

public struct UpdateColumnStatisticsForTableOutputResponse: Swift.Equatable {
    /// List of ColumnStatisticsErrors.
    public var errors: [GlueClientTypes.ColumnStatisticsError]?

    public init (
        errors: [GlueClientTypes.ColumnStatisticsError]? = nil
    )
    {
        self.errors = errors
    }
}

struct UpdateColumnStatisticsForTableOutputResponseBody: Swift.Equatable {
    let errors: [GlueClientTypes.ColumnStatisticsError]?
}

extension UpdateColumnStatisticsForTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnStatisticsError?].self, forKey: .errors)
        var errorsDecoded0:[GlueClientTypes.ColumnStatisticsError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [GlueClientTypes.ColumnStatisticsError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension UpdateConnectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case connectionInput = "ConnectionInput"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let connectionInput = connectionInput {
            try encodeContainer.encode(connectionInput, forKey: .connectionInput)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension UpdateConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateConnectionInput: Swift.Equatable {
    /// The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// A ConnectionInput object that redefines the connection in question.
    /// This member is required.
    public var connectionInput: GlueClientTypes.ConnectionInput?
    /// The name of the connection definition to update.
    /// This member is required.
    public var name: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        connectionInput: GlueClientTypes.ConnectionInput? = nil,
        name: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.connectionInput = connectionInput
        self.name = name
    }
}

struct UpdateConnectionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let name: Swift.String?
    let connectionInput: GlueClientTypes.ConnectionInput?
}

extension UpdateConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case connectionInput = "ConnectionInput"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let connectionInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionInput.self, forKey: .connectionInput)
        connectionInput = connectionInputDecoded
    }
}

extension UpdateConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateConnectionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateConnectionOutputResponse: Swift.Equatable {

}

extension UpdateCrawlerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifiers = "Classifiers"
        case configuration = "Configuration"
        case crawlerSecurityConfiguration = "CrawlerSecurityConfiguration"
        case databaseName = "DatabaseName"
        case description = "Description"
        case lineageConfiguration = "LineageConfiguration"
        case name = "Name"
        case recrawlPolicy = "RecrawlPolicy"
        case role = "Role"
        case schedule = "Schedule"
        case schemaChangePolicy = "SchemaChangePolicy"
        case tablePrefix = "TablePrefix"
        case targets = "Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classifiers = classifiers {
            var classifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .classifiers)
            for classifiernamelist0 in classifiers {
                try classifiersContainer.encode(classifiernamelist0)
            }
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let crawlerSecurityConfiguration = crawlerSecurityConfiguration {
            try encodeContainer.encode(crawlerSecurityConfiguration, forKey: .crawlerSecurityConfiguration)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lineageConfiguration = lineageConfiguration {
            try encodeContainer.encode(lineageConfiguration, forKey: .lineageConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recrawlPolicy = recrawlPolicy {
            try encodeContainer.encode(recrawlPolicy, forKey: .recrawlPolicy)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let schemaChangePolicy = schemaChangePolicy {
            try encodeContainer.encode(schemaChangePolicy, forKey: .schemaChangePolicy)
        }
        if let tablePrefix = tablePrefix {
            try encodeContainer.encode(tablePrefix, forKey: .tablePrefix)
        }
        if let targets = targets {
            try encodeContainer.encode(targets, forKey: .targets)
        }
    }
}

extension UpdateCrawlerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateCrawlerInput: Swift.Equatable {
    /// A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
    public var classifiers: [Swift.String]?
    /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Configuring a Crawler](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
    public var configuration: Swift.String?
    /// The name of the SecurityConfiguration structure to be used by this crawler.
    public var crawlerSecurityConfiguration: Swift.String?
    /// The Glue database where results are stored, such as: arn:aws:daylight:us-east-1::database/sometable/*.
    public var databaseName: Swift.String?
    /// A description of the new crawler.
    public var description: Swift.String?
    /// Specifies data lineage configuration settings for the crawler.
    public var lineageConfiguration: GlueClientTypes.LineageConfiguration?
    /// Name of the new crawler.
    /// This member is required.
    public var name: Swift.String?
    /// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
    public var recrawlPolicy: GlueClientTypes.RecrawlPolicy?
    /// The IAM role or Amazon Resource Name (ARN) of an IAM role that is used by the new crawler to access customer resources.
    public var role: Swift.String?
    /// A cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
    public var schedule: Swift.String?
    /// The policy for the crawler's update and deletion behavior.
    public var schemaChangePolicy: GlueClientTypes.SchemaChangePolicy?
    /// The table prefix used for catalog tables that are created.
    public var tablePrefix: Swift.String?
    /// A list of targets to crawl.
    public var targets: GlueClientTypes.CrawlerTargets?

    public init (
        classifiers: [Swift.String]? = nil,
        configuration: Swift.String? = nil,
        crawlerSecurityConfiguration: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        description: Swift.String? = nil,
        lineageConfiguration: GlueClientTypes.LineageConfiguration? = nil,
        name: Swift.String? = nil,
        recrawlPolicy: GlueClientTypes.RecrawlPolicy? = nil,
        role: Swift.String? = nil,
        schedule: Swift.String? = nil,
        schemaChangePolicy: GlueClientTypes.SchemaChangePolicy? = nil,
        tablePrefix: Swift.String? = nil,
        targets: GlueClientTypes.CrawlerTargets? = nil
    )
    {
        self.classifiers = classifiers
        self.configuration = configuration
        self.crawlerSecurityConfiguration = crawlerSecurityConfiguration
        self.databaseName = databaseName
        self.description = description
        self.lineageConfiguration = lineageConfiguration
        self.name = name
        self.recrawlPolicy = recrawlPolicy
        self.role = role
        self.schedule = schedule
        self.schemaChangePolicy = schemaChangePolicy
        self.tablePrefix = tablePrefix
        self.targets = targets
    }
}

struct UpdateCrawlerInputBody: Swift.Equatable {
    let name: Swift.String?
    let role: Swift.String?
    let databaseName: Swift.String?
    let description: Swift.String?
    let targets: GlueClientTypes.CrawlerTargets?
    let schedule: Swift.String?
    let classifiers: [Swift.String]?
    let tablePrefix: Swift.String?
    let schemaChangePolicy: GlueClientTypes.SchemaChangePolicy?
    let recrawlPolicy: GlueClientTypes.RecrawlPolicy?
    let lineageConfiguration: GlueClientTypes.LineageConfiguration?
    let configuration: Swift.String?
    let crawlerSecurityConfiguration: Swift.String?
}

extension UpdateCrawlerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifiers = "Classifiers"
        case configuration = "Configuration"
        case crawlerSecurityConfiguration = "CrawlerSecurityConfiguration"
        case databaseName = "DatabaseName"
        case description = "Description"
        case lineageConfiguration = "LineageConfiguration"
        case name = "Name"
        case recrawlPolicy = "RecrawlPolicy"
        case role = "Role"
        case schedule = "Schedule"
        case schemaChangePolicy = "SchemaChangePolicy"
        case tablePrefix = "TablePrefix"
        case targets = "Targets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let targetsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlerTargets.self, forKey: .targets)
        targets = targetsDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let classifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .classifiers)
        var classifiersDecoded0:[Swift.String]? = nil
        if let classifiersContainer = classifiersContainer {
            classifiersDecoded0 = [Swift.String]()
            for string0 in classifiersContainer {
                if let string0 = string0 {
                    classifiersDecoded0?.append(string0)
                }
            }
        }
        classifiers = classifiersDecoded0
        let tablePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tablePrefix)
        tablePrefix = tablePrefixDecoded
        let schemaChangePolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaChangePolicy.self, forKey: .schemaChangePolicy)
        schemaChangePolicy = schemaChangePolicyDecoded
        let recrawlPolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RecrawlPolicy.self, forKey: .recrawlPolicy)
        recrawlPolicy = recrawlPolicyDecoded
        let lineageConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LineageConfiguration.self, forKey: .lineageConfiguration)
        lineageConfiguration = lineageConfigurationDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let crawlerSecurityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerSecurityConfiguration)
        crawlerSecurityConfiguration = crawlerSecurityConfigurationDecoded
    }
}

extension UpdateCrawlerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCrawlerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CrawlerRunningException" : self = .crawlerRunningException(try CrawlerRunningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionMismatchException" : self = .versionMismatchException(try VersionMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCrawlerOutputError: Swift.Error, Swift.Equatable {
    case crawlerRunningException(CrawlerRunningException)
    case entityNotFoundException(EntityNotFoundException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case versionMismatchException(VersionMismatchException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCrawlerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateCrawlerOutputResponse: Swift.Equatable {

}

extension UpdateCrawlerScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerName = "CrawlerName"
        case schedule = "Schedule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let crawlerName = crawlerName {
            try encodeContainer.encode(crawlerName, forKey: .crawlerName)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
    }
}

extension UpdateCrawlerScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateCrawlerScheduleInput: Swift.Equatable {
    /// The name of the crawler whose schedule to update.
    /// This member is required.
    public var crawlerName: Swift.String?
    /// The updated cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
    public var schedule: Swift.String?

    public init (
        crawlerName: Swift.String? = nil,
        schedule: Swift.String? = nil
    )
    {
        self.crawlerName = crawlerName
        self.schedule = schedule
    }
}

struct UpdateCrawlerScheduleInputBody: Swift.Equatable {
    let crawlerName: Swift.String?
    let schedule: Swift.String?
}

extension UpdateCrawlerScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlerName = "CrawlerName"
        case schedule = "Schedule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerName)
        crawlerName = crawlerNameDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
    }
}

extension UpdateCrawlerScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCrawlerScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SchedulerTransitioningException" : self = .schedulerTransitioningException(try SchedulerTransitioningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionMismatchException" : self = .versionMismatchException(try VersionMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCrawlerScheduleOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case schedulerTransitioningException(SchedulerTransitioningException)
    case versionMismatchException(VersionMismatchException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCrawlerScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateCrawlerScheduleOutputResponse: Swift.Equatable {

}

extension GlueClientTypes.UpdateCsvClassifierRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowSingleColumn = "AllowSingleColumn"
        case containsHeader = "ContainsHeader"
        case delimiter = "Delimiter"
        case disableValueTrimming = "DisableValueTrimming"
        case header = "Header"
        case name = "Name"
        case quoteSymbol = "QuoteSymbol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowSingleColumn = allowSingleColumn {
            try encodeContainer.encode(allowSingleColumn, forKey: .allowSingleColumn)
        }
        if let containsHeader = containsHeader {
            try encodeContainer.encode(containsHeader.rawValue, forKey: .containsHeader)
        }
        if let delimiter = delimiter {
            try encodeContainer.encode(delimiter, forKey: .delimiter)
        }
        if let disableValueTrimming = disableValueTrimming {
            try encodeContainer.encode(disableValueTrimming, forKey: .disableValueTrimming)
        }
        if let header = header {
            var headerContainer = encodeContainer.nestedUnkeyedContainer(forKey: .header)
            for csvheader0 in header {
                try headerContainer.encode(csvheader0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let quoteSymbol = quoteSymbol {
            try encodeContainer.encode(quoteSymbol, forKey: .quoteSymbol)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let quoteSymbolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteSymbol)
        quoteSymbol = quoteSymbolDecoded
        let containsHeaderDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CsvHeaderOption.self, forKey: .containsHeader)
        containsHeader = containsHeaderDecoded
        let headerContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .header)
        var headerDecoded0:[Swift.String]? = nil
        if let headerContainer = headerContainer {
            headerDecoded0 = [Swift.String]()
            for string0 in headerContainer {
                if let string0 = string0 {
                    headerDecoded0?.append(string0)
                }
            }
        }
        header = headerDecoded0
        let disableValueTrimmingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableValueTrimming)
        disableValueTrimming = disableValueTrimmingDecoded
        let allowSingleColumnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowSingleColumn)
        allowSingleColumn = allowSingleColumnDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a custom CSV classifier to be updated.
    public struct UpdateCsvClassifierRequest: Swift.Equatable {
        /// Enables the processing of files that contain only one column.
        public var allowSingleColumn: Swift.Bool?
        /// Indicates whether the CSV file contains a header.
        public var containsHeader: GlueClientTypes.CsvHeaderOption?
        /// A custom symbol to denote what separates each column entry in the row.
        public var delimiter: Swift.String?
        /// Specifies not to trim values before identifying the type of column values. The default value is true.
        public var disableValueTrimming: Swift.Bool?
        /// A list of strings representing column names.
        public var header: [Swift.String]?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?
        /// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
        public var quoteSymbol: Swift.String?

        public init (
            allowSingleColumn: Swift.Bool? = nil,
            containsHeader: GlueClientTypes.CsvHeaderOption? = nil,
            delimiter: Swift.String? = nil,
            disableValueTrimming: Swift.Bool? = nil,
            header: [Swift.String]? = nil,
            name: Swift.String? = nil,
            quoteSymbol: Swift.String? = nil
        )
        {
            self.allowSingleColumn = allowSingleColumn
            self.containsHeader = containsHeader
            self.delimiter = delimiter
            self.disableValueTrimming = disableValueTrimming
            self.header = header
            self.name = name
            self.quoteSymbol = quoteSymbol
        }
    }

}

extension UpdateDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseInput = "DatabaseInput"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseInput = databaseInput {
            try encodeContainer.encode(databaseInput, forKey: .databaseInput)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension UpdateDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDatabaseInput: Swift.Equatable {
    /// The ID of the Data Catalog in which the metadata database resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// A DatabaseInput object specifying the new definition of the metadata database in the catalog.
    /// This member is required.
    public var databaseInput: GlueClientTypes.DatabaseInput?
    /// The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.
    /// This member is required.
    public var name: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseInput: GlueClientTypes.DatabaseInput? = nil,
        name: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseInput = databaseInput
        self.name = name
    }
}

struct UpdateDatabaseInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let name: Swift.String?
    let databaseInput: GlueClientTypes.DatabaseInput?
}

extension UpdateDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseInput = "DatabaseInput"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let databaseInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DatabaseInput.self, forKey: .databaseInput)
        databaseInput = databaseInputDecoded
    }
}

extension UpdateDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDatabaseOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateDatabaseOutputResponse: Swift.Equatable {

}

extension UpdateDevEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addArguments = "AddArguments"
        case addPublicKeys = "AddPublicKeys"
        case customLibraries = "CustomLibraries"
        case deleteArguments = "DeleteArguments"
        case deletePublicKeys = "DeletePublicKeys"
        case endpointName = "EndpointName"
        case publicKey = "PublicKey"
        case updateEtlLibraries = "UpdateEtlLibraries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addArguments = addArguments {
            var addArgumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .addArguments)
            for (dictKey0, mapvalue0) in addArguments {
                try addArgumentsContainer.encode(mapvalue0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let addPublicKeys = addPublicKeys {
            var addPublicKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addPublicKeys)
            for publickeyslist0 in addPublicKeys {
                try addPublicKeysContainer.encode(publickeyslist0)
            }
        }
        if let customLibraries = customLibraries {
            try encodeContainer.encode(customLibraries, forKey: .customLibraries)
        }
        if let deleteArguments = deleteArguments {
            var deleteArgumentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deleteArguments)
            for stringlist0 in deleteArguments {
                try deleteArgumentsContainer.encode(stringlist0)
            }
        }
        if let deletePublicKeys = deletePublicKeys {
            var deletePublicKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deletePublicKeys)
            for publickeyslist0 in deletePublicKeys {
                try deletePublicKeysContainer.encode(publickeyslist0)
            }
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let publicKey = publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
        if updateEtlLibraries != false {
            try encodeContainer.encode(updateEtlLibraries, forKey: .updateEtlLibraries)
        }
    }
}

extension UpdateDevEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDevEndpointInput: Swift.Equatable {
    /// The map of arguments to add the map of arguments used to configure the DevEndpoint. Valid arguments are:
    ///
    /// * "--enable-glue-datacatalog": ""
    ///
    ///
    /// You can specify a version of Python support for development endpoints by using the Arguments parameter in the CreateDevEndpoint or UpdateDevEndpoint APIs. If no arguments are provided, the version defaults to Python 2.
    public var addArguments: [Swift.String:Swift.String]?
    /// The list of public keys for the DevEndpoint to use.
    public var addPublicKeys: [Swift.String]?
    /// Custom Python or Java libraries to be loaded in the DevEndpoint.
    public var customLibraries: GlueClientTypes.DevEndpointCustomLibraries?
    /// The list of argument keys to be deleted from the map of arguments used to configure the DevEndpoint.
    public var deleteArguments: [Swift.String]?
    /// The list of public keys to be deleted from the DevEndpoint.
    public var deletePublicKeys: [Swift.String]?
    /// The name of the DevEndpoint to be updated.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The public key for the DevEndpoint to use.
    public var publicKey: Swift.String?
    /// True if the list of custom libraries to be loaded in the development endpoint needs to be updated, or False if otherwise.
    public var updateEtlLibraries: Swift.Bool

    public init (
        addArguments: [Swift.String:Swift.String]? = nil,
        addPublicKeys: [Swift.String]? = nil,
        customLibraries: GlueClientTypes.DevEndpointCustomLibraries? = nil,
        deleteArguments: [Swift.String]? = nil,
        deletePublicKeys: [Swift.String]? = nil,
        endpointName: Swift.String? = nil,
        publicKey: Swift.String? = nil,
        updateEtlLibraries: Swift.Bool = false
    )
    {
        self.addArguments = addArguments
        self.addPublicKeys = addPublicKeys
        self.customLibraries = customLibraries
        self.deleteArguments = deleteArguments
        self.deletePublicKeys = deletePublicKeys
        self.endpointName = endpointName
        self.publicKey = publicKey
        self.updateEtlLibraries = updateEtlLibraries
    }
}

struct UpdateDevEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let publicKey: Swift.String?
    let addPublicKeys: [Swift.String]?
    let deletePublicKeys: [Swift.String]?
    let customLibraries: GlueClientTypes.DevEndpointCustomLibraries?
    let updateEtlLibraries: Swift.Bool
    let deleteArguments: [Swift.String]?
    let addArguments: [Swift.String:Swift.String]?
}

extension UpdateDevEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addArguments = "AddArguments"
        case addPublicKeys = "AddPublicKeys"
        case customLibraries = "CustomLibraries"
        case deleteArguments = "DeleteArguments"
        case deletePublicKeys = "DeletePublicKeys"
        case endpointName = "EndpointName"
        case publicKey = "PublicKey"
        case updateEtlLibraries = "UpdateEtlLibraries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let addPublicKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addPublicKeys)
        var addPublicKeysDecoded0:[Swift.String]? = nil
        if let addPublicKeysContainer = addPublicKeysContainer {
            addPublicKeysDecoded0 = [Swift.String]()
            for string0 in addPublicKeysContainer {
                if let string0 = string0 {
                    addPublicKeysDecoded0?.append(string0)
                }
            }
        }
        addPublicKeys = addPublicKeysDecoded0
        let deletePublicKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deletePublicKeys)
        var deletePublicKeysDecoded0:[Swift.String]? = nil
        if let deletePublicKeysContainer = deletePublicKeysContainer {
            deletePublicKeysDecoded0 = [Swift.String]()
            for string0 in deletePublicKeysContainer {
                if let string0 = string0 {
                    deletePublicKeysDecoded0?.append(string0)
                }
            }
        }
        deletePublicKeys = deletePublicKeysDecoded0
        let customLibrariesDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DevEndpointCustomLibraries.self, forKey: .customLibraries)
        customLibraries = customLibrariesDecoded
        let updateEtlLibrariesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .updateEtlLibraries)
        updateEtlLibraries = updateEtlLibrariesDecoded
        let deleteArgumentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deleteArguments)
        var deleteArgumentsDecoded0:[Swift.String]? = nil
        if let deleteArgumentsContainer = deleteArgumentsContainer {
            deleteArgumentsDecoded0 = [Swift.String]()
            for string0 in deleteArgumentsContainer {
                if let string0 = string0 {
                    deleteArgumentsDecoded0?.append(string0)
                }
            }
        }
        deleteArguments = deleteArgumentsDecoded0
        let addArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .addArguments)
        var addArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let addArgumentsContainer = addArgumentsContainer {
            addArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in addArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    addArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        addArguments = addArgumentsDecoded0
    }
}

extension UpdateDevEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDevEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDevEndpointOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDevEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateDevEndpointOutputResponse: Swift.Equatable {

}

extension GlueClientTypes.UpdateGrokClassifierRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classification = "Classification"
        case customPatterns = "CustomPatterns"
        case grokPattern = "GrokPattern"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classification = classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let customPatterns = customPatterns {
            try encodeContainer.encode(customPatterns, forKey: .customPatterns)
        }
        if let grokPattern = grokPattern {
            try encodeContainer.encode(grokPattern, forKey: .grokPattern)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let grokPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grokPattern)
        grokPattern = grokPatternDecoded
        let customPatternsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customPatterns)
        customPatterns = customPatternsDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a grok classifier to update when passed to UpdateClassifier.
    public struct UpdateGrokClassifierRequest: Swift.Equatable {
        /// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
        public var classification: Swift.String?
        /// Optional custom grok patterns used by this classifier.
        public var customPatterns: Swift.String?
        /// The grok pattern used by this classifier.
        public var grokPattern: Swift.String?
        /// The name of the GrokClassifier.
        /// This member is required.
        public var name: Swift.String?

        public init (
            classification: Swift.String? = nil,
            customPatterns: Swift.String? = nil,
            grokPattern: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.classification = classification
            self.customPatterns = customPatterns
            self.grokPattern = grokPattern
            self.name = name
        }
    }

}

extension UpdateJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobUpdate = "JobUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobUpdate = jobUpdate {
            try encodeContainer.encode(jobUpdate, forKey: .jobUpdate)
        }
    }
}

extension UpdateJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateJobInput: Swift.Equatable {
    /// The name of the job definition to update.
    /// This member is required.
    public var jobName: Swift.String?
    /// Specifies the values with which to update the job definition.
    /// This member is required.
    public var jobUpdate: GlueClientTypes.JobUpdate?

    public init (
        jobName: Swift.String? = nil,
        jobUpdate: GlueClientTypes.JobUpdate? = nil
    )
    {
        self.jobName = jobName
        self.jobUpdate = jobUpdate
    }
}

struct UpdateJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let jobUpdate: GlueClientTypes.JobUpdate?
}

extension UpdateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobUpdate = "JobUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobUpdateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobUpdate.self, forKey: .jobUpdate)
        jobUpdate = jobUpdateDecoded
    }
}

extension UpdateJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateJobOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobName = output.jobName
        } else {
            self.jobName = nil
        }
    }
}

public struct UpdateJobOutputResponse: Swift.Equatable {
    /// Returns the name of the updated job definition.
    public var jobName: Swift.String?

    public init (
        jobName: Swift.String? = nil
    )
    {
        self.jobName = jobName
    }
}

struct UpdateJobOutputResponseBody: Swift.Equatable {
    let jobName: Swift.String?
}

extension UpdateJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
    }
}

extension GlueClientTypes.UpdateJsonClassifierRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jsonPath = "JsonPath"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jsonPath = jsonPath {
            try encodeContainer.encode(jsonPath, forKey: .jsonPath)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let jsonPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jsonPath)
        jsonPath = jsonPathDecoded
    }
}

extension GlueClientTypes {
    /// Specifies a JSON classifier to be updated.
    public struct UpdateJsonClassifierRequest: Swift.Equatable {
        /// A JsonPath string defining the JSON data for the classifier to classify. Glue supports a subset of JsonPath, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
        public var jsonPath: Swift.String?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?

        public init (
            jsonPath: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.jsonPath = jsonPath
            self.name = name
        }
    }

}

extension UpdateMLTransformInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case glueVersion = "GlueVersion"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case timeout = "Timeout"
        case transformId = "TransformId"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let maxRetries = maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}

extension UpdateMLTransformInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateMLTransformInput: Swift.Equatable {
    /// A description of the transform. The default is an empty string.
    public var description: Swift.String?
    /// This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see [Glue Versions](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions) in the developer guide.
    public var glueVersion: Swift.String?
    /// The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](https://aws.amazon.com/glue/pricing/). When the WorkerType field is set to a value other than Standard, the MaxCapacity field is set automatically and becomes read-only.
    public var maxCapacity: Swift.Double?
    /// The maximum number of times to retry a task for this transform after a task run fails.
    public var maxRetries: Swift.Int?
    /// The unique name that you gave the transform when you created it.
    public var name: Swift.String?
    /// The number of workers of a defined workerType that are allocated when this task runs.
    public var numberOfWorkers: Swift.Int?
    /// The configuration parameters that are specific to the transform type (algorithm) used. Conditionally dependent on the transform type.
    public var parameters: GlueClientTypes.TransformParameters?
    /// The name or Amazon Resource Name (ARN) of the IAM role with the required permissions.
    public var role: Swift.String?
    /// The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
    public var timeout: Swift.Int?
    /// A unique identifier that was generated when the transform was created.
    /// This member is required.
    public var transformId: Swift.String?
    /// The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.
    ///
    /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
    ///
    /// * For the G.1X worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
    ///
    /// * For the G.2X worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
    public var workerType: GlueClientTypes.WorkerType?

    public init (
        description: Swift.String? = nil,
        glueVersion: Swift.String? = nil,
        maxCapacity: Swift.Double? = nil,
        maxRetries: Swift.Int? = nil,
        name: Swift.String? = nil,
        numberOfWorkers: Swift.Int? = nil,
        parameters: GlueClientTypes.TransformParameters? = nil,
        role: Swift.String? = nil,
        timeout: Swift.Int? = nil,
        transformId: Swift.String? = nil,
        workerType: GlueClientTypes.WorkerType? = nil
    )
    {
        self.description = description
        self.glueVersion = glueVersion
        self.maxCapacity = maxCapacity
        self.maxRetries = maxRetries
        self.name = name
        self.numberOfWorkers = numberOfWorkers
        self.parameters = parameters
        self.role = role
        self.timeout = timeout
        self.transformId = transformId
        self.workerType = workerType
    }
}

struct UpdateMLTransformInputBody: Swift.Equatable {
    let transformId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let parameters: GlueClientTypes.TransformParameters?
    let role: Swift.String?
    let glueVersion: Swift.String?
    let maxCapacity: Swift.Double?
    let workerType: GlueClientTypes.WorkerType?
    let numberOfWorkers: Swift.Int?
    let timeout: Swift.Int?
    let maxRetries: Swift.Int?
}

extension UpdateMLTransformInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case glueVersion = "GlueVersion"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case timeout = "Timeout"
        case transformId = "TransformId"
        case workerType = "WorkerType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let parametersDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformParameters.self, forKey: .parameters)
        parameters = parametersDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
    }
}

extension UpdateMLTransformOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMLTransformOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMLTransformOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMLTransformOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateMLTransformOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.transformId = output.transformId
        } else {
            self.transformId = nil
        }
    }
}

public struct UpdateMLTransformOutputResponse: Swift.Equatable {
    /// The unique identifier for the transform that was updated.
    public var transformId: Swift.String?

    public init (
        transformId: Swift.String? = nil
    )
    {
        self.transformId = transformId
    }
}

struct UpdateMLTransformOutputResponseBody: Swift.Equatable {
    let transformId: Swift.String?
}

extension UpdateMLTransformOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformId = "TransformId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
    }
}

extension UpdatePartitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionInput = "PartitionInput"
        case partitionValueList = "PartitionValueList"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let partitionInput = partitionInput {
            try encodeContainer.encode(partitionInput, forKey: .partitionInput)
        }
        if let partitionValueList = partitionValueList {
            var partitionValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValueList)
            for boundedpartitionvaluelist0 in partitionValueList {
                try partitionValueListContainer.encode(boundedpartitionvaluelist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension UpdatePartitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdatePartitionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partition to be updated resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database in which the table in question resides.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The new partition object to update the partition to. The Values property can't be changed. If you want to change the partition key values for a partition, delete and recreate the partition.
    /// This member is required.
    public var partitionInput: GlueClientTypes.PartitionInput?
    /// List of partition key values that define the partition to update.
    /// This member is required.
    public var partitionValueList: [Swift.String]?
    /// The name of the table in which the partition to be updated is located.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partitionInput: GlueClientTypes.PartitionInput? = nil,
        partitionValueList: [Swift.String]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.partitionInput = partitionInput
        self.partitionValueList = partitionValueList
        self.tableName = tableName
    }
}

struct UpdatePartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionValueList: [Swift.String]?
    let partitionInput: GlueClientTypes.PartitionInput?
}

extension UpdatePartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionInput = "PartitionInput"
        case partitionValueList = "PartitionValueList"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionValueListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValueList)
        var partitionValueListDecoded0:[Swift.String]? = nil
        if let partitionValueListContainer = partitionValueListContainer {
            partitionValueListDecoded0 = [Swift.String]()
            for string0 in partitionValueListContainer {
                if let string0 = string0 {
                    partitionValueListDecoded0?.append(string0)
                }
            }
        }
        partitionValueList = partitionValueListDecoded0
        let partitionInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PartitionInput.self, forKey: .partitionInput)
        partitionInput = partitionInputDecoded
    }
}

extension UpdatePartitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePartitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdatePartitionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePartitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdatePartitionOutputResponse: Swift.Equatable {

}

extension UpdateRegistryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case registryId = "RegistryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let registryId = registryId {
            try encodeContainer.encode(registryId, forKey: .registryId)
        }
    }
}

extension UpdateRegistryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRegistryInput: Swift.Equatable {
    /// A description of the registry. If description is not provided, this field will not be updated.
    /// This member is required.
    public var description: Swift.String?
    /// This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).
    /// This member is required.
    public var registryId: GlueClientTypes.RegistryId?

    public init (
        description: Swift.String? = nil,
        registryId: GlueClientTypes.RegistryId? = nil
    )
    {
        self.description = description
        self.registryId = registryId
    }
}

struct UpdateRegistryInputBody: Swift.Equatable {
    let registryId: GlueClientTypes.RegistryId?
    let description: Swift.String?
}

extension UpdateRegistryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case registryId = "RegistryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RegistryId.self, forKey: .registryId)
        registryId = registryIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateRegistryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRegistryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRegistryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRegistryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateRegistryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.registryArn = output.registryArn
            self.registryName = output.registryName
        } else {
            self.registryArn = nil
            self.registryName = nil
        }
    }
}

public struct UpdateRegistryOutputResponse: Swift.Equatable {
    /// The Amazon Resource name (ARN) of the updated registry.
    public var registryArn: Swift.String?
    /// The name of the updated registry.
    public var registryName: Swift.String?

    public init (
        registryArn: Swift.String? = nil,
        registryName: Swift.String? = nil
    )
    {
        self.registryArn = registryArn
        self.registryName = registryName
    }
}

struct UpdateRegistryOutputResponseBody: Swift.Equatable {
    let registryName: Swift.String?
    let registryArn: Swift.String?
}

extension UpdateRegistryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryArn = "RegistryArn"
        case registryName = "RegistryName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
        let registryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
    }
}

extension UpdateSchemaInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibility = "Compatibility"
        case description = "Description"
        case schemaId = "SchemaId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compatibility = compatibility {
            try encodeContainer.encode(compatibility.rawValue, forKey: .compatibility)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let schemaId = schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let schemaVersionNumber = schemaVersionNumber {
            try encodeContainer.encode(schemaVersionNumber, forKey: .schemaVersionNumber)
        }
    }
}

extension UpdateSchemaInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateSchemaInput: Swift.Equatable {
    /// The new compatibility setting for the schema.
    public var compatibility: GlueClientTypes.Compatibility?
    /// The new description for the schema.
    public var description: Swift.String?
    /// This is a wrapper structure to contain schema identity fields. The structure contains:
    ///
    /// * SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of SchemaArn or SchemaName has to be provided.
    ///
    /// * SchemaId$SchemaName: The name of the schema. One of SchemaArn or SchemaName has to be provided.
    /// This member is required.
    public var schemaId: GlueClientTypes.SchemaId?
    /// Version number required for check pointing. One of VersionNumber or Compatibility has to be provided.
    public var schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?

    public init (
        compatibility: GlueClientTypes.Compatibility? = nil,
        description: Swift.String? = nil,
        schemaId: GlueClientTypes.SchemaId? = nil,
        schemaVersionNumber: GlueClientTypes.SchemaVersionNumber? = nil
    )
    {
        self.compatibility = compatibility
        self.description = description
        self.schemaId = schemaId
        self.schemaVersionNumber = schemaVersionNumber
    }
}

struct UpdateSchemaInputBody: Swift.Equatable {
    let schemaId: GlueClientTypes.SchemaId?
    let schemaVersionNumber: GlueClientTypes.SchemaVersionNumber?
    let compatibility: GlueClientTypes.Compatibility?
    let description: Swift.String?
}

extension UpdateSchemaInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibility = "Compatibility"
        case description = "Description"
        case schemaId = "SchemaId"
        case schemaVersionNumber = "SchemaVersionNumber"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaId.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaVersionNumberDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaVersionNumber.self, forKey: .schemaVersionNumber)
        schemaVersionNumber = schemaVersionNumberDecoded
        let compatibilityDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Compatibility.self, forKey: .compatibility)
        compatibility = compatibilityDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateSchemaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSchemaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateSchemaOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSchemaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateSchemaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.registryName = output.registryName
            self.schemaArn = output.schemaArn
            self.schemaName = output.schemaName
        } else {
            self.registryName = nil
            self.schemaArn = nil
            self.schemaName = nil
        }
    }
}

public struct UpdateSchemaOutputResponse: Swift.Equatable {
    /// The name of the registry that contains the schema.
    public var registryName: Swift.String?
    /// The Amazon Resource Name (ARN) of the schema.
    public var schemaArn: Swift.String?
    /// The name of the schema.
    public var schemaName: Swift.String?

    public init (
        registryName: Swift.String? = nil,
        schemaArn: Swift.String? = nil,
        schemaName: Swift.String? = nil
    )
    {
        self.registryName = registryName
        self.schemaArn = schemaArn
        self.schemaName = schemaName
    }
}

struct UpdateSchemaOutputResponseBody: Swift.Equatable {
    let schemaArn: Swift.String?
    let schemaName: Swift.String?
    let registryName: Swift.String?
}

extension UpdateSchemaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryName = "RegistryName"
        case schemaArn = "SchemaArn"
        case schemaName = "SchemaName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let registryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryName)
        registryName = registryNameDecoded
    }
}

extension UpdateTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case skipArchive = "SkipArchive"
        case tableInput = "TableInput"
        case transactionId = "TransactionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let skipArchive = skipArchive {
            try encodeContainer.encode(skipArchive, forKey: .skipArchive)
        }
        if let tableInput = tableInput {
            try encodeContainer.encode(tableInput, forKey: .tableInput)
        }
        if let transactionId = transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }
}

extension UpdateTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTableInput: Swift.Equatable {
    /// The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.
    /// This member is required.
    public var databaseName: Swift.String?
    /// By default, UpdateTable always creates an archived version of the table before updating it. However, if skipArchive is set to true, UpdateTable does not create the archived version.
    public var skipArchive: Swift.Bool?
    /// An updated TableInput object to define the metadata table in the catalog.
    /// This member is required.
    public var tableInput: GlueClientTypes.TableInput?
    /// The transaction ID at which to update the table contents.
    public var transactionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        skipArchive: Swift.Bool? = nil,
        tableInput: GlueClientTypes.TableInput? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.skipArchive = skipArchive
        self.tableInput = tableInput
        self.transactionId = transactionId
    }
}

struct UpdateTableInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableInput: GlueClientTypes.TableInput?
    let skipArchive: Swift.Bool?
    let transactionId: Swift.String?
}

extension UpdateTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case skipArchive = "SkipArchive"
        case tableInput = "TableInput"
        case transactionId = "TransactionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TableInput.self, forKey: .tableInput)
        tableInput = tableInputDecoded
        let skipArchiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipArchive)
        skipArchive = skipArchiveDecoded
        let transactionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transactionId)
        transactionId = transactionIdDecoded
    }
}

extension UpdateTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNumberLimitExceededException" : self = .resourceNumberLimitExceededException(try ResourceNumberLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTableOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case resourceNotReadyException(ResourceNotReadyException)
    case resourceNumberLimitExceededException(ResourceNumberLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateTableOutputResponse: Swift.Equatable {

}

extension UpdateTriggerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case triggerUpdate = "TriggerUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let triggerUpdate = triggerUpdate {
            try encodeContainer.encode(triggerUpdate, forKey: .triggerUpdate)
        }
    }
}

extension UpdateTriggerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTriggerInput: Swift.Equatable {
    /// The name of the trigger to update.
    /// This member is required.
    public var name: Swift.String?
    /// The new values with which to update the trigger.
    /// This member is required.
    public var triggerUpdate: GlueClientTypes.TriggerUpdate?

    public init (
        name: Swift.String? = nil,
        triggerUpdate: GlueClientTypes.TriggerUpdate? = nil
    )
    {
        self.name = name
        self.triggerUpdate = triggerUpdate
    }
}

struct UpdateTriggerInputBody: Swift.Equatable {
    let name: Swift.String?
    let triggerUpdate: GlueClientTypes.TriggerUpdate?
}

extension UpdateTriggerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case triggerUpdate = "TriggerUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let triggerUpdateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TriggerUpdate.self, forKey: .triggerUpdate)
        triggerUpdate = triggerUpdateDecoded
    }
}

extension UpdateTriggerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTriggerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTriggerOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTriggerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateTriggerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trigger = output.trigger
        } else {
            self.trigger = nil
        }
    }
}

public struct UpdateTriggerOutputResponse: Swift.Equatable {
    /// The resulting trigger definition.
    public var trigger: GlueClientTypes.Trigger?

    public init (
        trigger: GlueClientTypes.Trigger? = nil
    )
    {
        self.trigger = trigger
    }
}

struct UpdateTriggerOutputResponseBody: Swift.Equatable {
    let trigger: GlueClientTypes.Trigger?
}

extension UpdateTriggerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trigger = "Trigger"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Trigger.self, forKey: .trigger)
        trigger = triggerDecoded
    }
}

extension UpdateUserDefinedFunctionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case functionInput = "FunctionInput"
        case functionName = "FunctionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let functionInput = functionInput {
            try encodeContainer.encode(functionInput, forKey: .functionInput)
        }
        if let functionName = functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
    }
}

extension UpdateUserDefinedFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateUserDefinedFunctionInput: Swift.Equatable {
    /// The ID of the Data Catalog where the function to be updated is located. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database where the function to be updated is located.
    /// This member is required.
    public var databaseName: Swift.String?
    /// A FunctionInput object that redefines the function in the Data Catalog.
    /// This member is required.
    public var functionInput: GlueClientTypes.UserDefinedFunctionInput?
    /// The name of the function.
    /// This member is required.
    public var functionName: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        functionInput: GlueClientTypes.UserDefinedFunctionInput? = nil,
        functionName: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.functionInput = functionInput
        self.functionName = functionName
    }
}

struct UpdateUserDefinedFunctionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let functionName: Swift.String?
    let functionInput: GlueClientTypes.UserDefinedFunctionInput?
}

extension UpdateUserDefinedFunctionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case functionInput = "FunctionInput"
        case functionName = "FunctionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let functionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let functionInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UserDefinedFunctionInput.self, forKey: .functionInput)
        functionInput = functionInputDecoded
    }
}

extension UpdateUserDefinedFunctionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserDefinedFunctionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlueEncryptionException" : self = .glueEncryptionException(try GlueEncryptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserDefinedFunctionOutputError: Swift.Error, Swift.Equatable {
    case entityNotFoundException(EntityNotFoundException)
    case glueEncryptionException(GlueEncryptionException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserDefinedFunctionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateUserDefinedFunctionOutputResponse: Swift.Equatable {

}

extension UpdateWorkflowInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultRunProperties = "DefaultRunProperties"
        case description = "Description"
        case maxConcurrentRuns = "MaxConcurrentRuns"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultRunProperties = defaultRunProperties {
            var defaultRunPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .defaultRunProperties)
            for (dictKey0, workflowrunproperties0) in defaultRunProperties {
                try defaultRunPropertiesContainer.encode(workflowrunproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let maxConcurrentRuns = maxConcurrentRuns {
            try encodeContainer.encode(maxConcurrentRuns, forKey: .maxConcurrentRuns)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension UpdateWorkflowInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateWorkflowInput: Swift.Equatable {
    /// A collection of properties to be used as part of each execution of the workflow.
    public var defaultRunProperties: [Swift.String:Swift.String]?
    /// The description of the workflow.
    public var description: Swift.String?
    /// You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
    public var maxConcurrentRuns: Swift.Int?
    /// Name of the workflow to be updated.
    /// This member is required.
    public var name: Swift.String?

    public init (
        defaultRunProperties: [Swift.String:Swift.String]? = nil,
        description: Swift.String? = nil,
        maxConcurrentRuns: Swift.Int? = nil,
        name: Swift.String? = nil
    )
    {
        self.defaultRunProperties = defaultRunProperties
        self.description = description
        self.maxConcurrentRuns = maxConcurrentRuns
        self.name = name
    }
}

struct UpdateWorkflowInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let defaultRunProperties: [Swift.String:Swift.String]?
    let maxConcurrentRuns: Swift.Int?
}

extension UpdateWorkflowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultRunProperties = "DefaultRunProperties"
        case description = "Description"
        case maxConcurrentRuns = "MaxConcurrentRuns"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultRunPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .defaultRunProperties)
        var defaultRunPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let defaultRunPropertiesContainer = defaultRunPropertiesContainer {
            defaultRunPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in defaultRunPropertiesContainer {
                if let genericstring0 = genericstring0 {
                    defaultRunPropertiesDecoded0?[key0] = genericstring0
                }
            }
        }
        defaultRunProperties = defaultRunPropertiesDecoded0
        let maxConcurrentRunsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentRuns)
        maxConcurrentRuns = maxConcurrentRunsDecoded
    }
}

extension UpdateWorkflowOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateWorkflowOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityNotFoundException" : self = .entityNotFoundException(try EntityNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationTimeoutException" : self = .operationTimeoutException(try OperationTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateWorkflowOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case entityNotFoundException(EntityNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidInputException(InvalidInputException)
    case operationTimeoutException(OperationTimeoutException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateWorkflowOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateWorkflowOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct UpdateWorkflowOutputResponse: Swift.Equatable {
    /// The name of the workflow which was specified in input.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct UpdateWorkflowOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension UpdateWorkflowOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GlueClientTypes.UpdateXMLClassifierRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classification = "Classification"
        case name = "Name"
        case rowTag = "RowTag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classification = classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rowTag = rowTag {
            try encodeContainer.encode(rowTag, forKey: .rowTag)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let rowTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rowTag)
        rowTag = rowTagDecoded
    }
}

extension GlueClientTypes {
    /// Specifies an XML classifier to be updated.
    public struct UpdateXMLClassifierRequest: Swift.Equatable {
        /// An identifier of the data format that the classifier matches.
        public var classification: Swift.String?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?
        /// The XML tag designating the element that contains each record in an XML document being parsed. This cannot identify a self-closing element (closed by />). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example,  is okay, but  is not).
        public var rowTag: Swift.String?

        public init (
            classification: Swift.String? = nil,
            name: Swift.String? = nil,
            rowTag: Swift.String? = nil
        )
        {
            self.classification = classification
            self.name = name
            self.rowTag = rowTag
        }
    }

}

extension GlueClientTypes.UserDefinedFunction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case className = "ClassName"
        case createTime = "CreateTime"
        case databaseName = "DatabaseName"
        case functionName = "FunctionName"
        case ownerName = "OwnerName"
        case ownerType = "OwnerType"
        case resourceUris = "ResourceUris"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let className = className {
            try encodeContainer.encode(className, forKey: .className)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let functionName = functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
        if let ownerName = ownerName {
            try encodeContainer.encode(ownerName, forKey: .ownerName)
        }
        if let ownerType = ownerType {
            try encodeContainer.encode(ownerType.rawValue, forKey: .ownerType)
        }
        if let resourceUris = resourceUris {
            var resourceUrisContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceUris)
            for resourceurilist0 in resourceUris {
                try resourceUrisContainer.encode(resourceurilist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let classNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .className)
        className = classNameDecoded
        let ownerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerName)
        ownerName = ownerNameDecoded
        let ownerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PrincipalType.self, forKey: .ownerType)
        ownerType = ownerTypeDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let resourceUrisContainer = try containerValues.decodeIfPresent([GlueClientTypes.ResourceUri?].self, forKey: .resourceUris)
        var resourceUrisDecoded0:[GlueClientTypes.ResourceUri]? = nil
        if let resourceUrisContainer = resourceUrisContainer {
            resourceUrisDecoded0 = [GlueClientTypes.ResourceUri]()
            for structure0 in resourceUrisContainer {
                if let structure0 = structure0 {
                    resourceUrisDecoded0?.append(structure0)
                }
            }
        }
        resourceUris = resourceUrisDecoded0
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
    }
}

extension GlueClientTypes {
    /// Represents the equivalent of a Hive user-defined function (UDF) definition.
    public struct UserDefinedFunction: Swift.Equatable {
        /// The ID of the Data Catalog in which the function resides.
        public var catalogId: Swift.String?
        /// The Java class that contains the function code.
        public var className: Swift.String?
        /// The time at which the function was created.
        public var createTime: ClientRuntime.Date?
        /// The name of the catalog database that contains the function.
        public var databaseName: Swift.String?
        /// The name of the function.
        public var functionName: Swift.String?
        /// The owner of the function.
        public var ownerName: Swift.String?
        /// The owner type.
        public var ownerType: GlueClientTypes.PrincipalType?
        /// The resource URIs for the function.
        public var resourceUris: [GlueClientTypes.ResourceUri]?

        public init (
            catalogId: Swift.String? = nil,
            className: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            databaseName: Swift.String? = nil,
            functionName: Swift.String? = nil,
            ownerName: Swift.String? = nil,
            ownerType: GlueClientTypes.PrincipalType? = nil,
            resourceUris: [GlueClientTypes.ResourceUri]? = nil
        )
        {
            self.catalogId = catalogId
            self.className = className
            self.createTime = createTime
            self.databaseName = databaseName
            self.functionName = functionName
            self.ownerName = ownerName
            self.ownerType = ownerType
            self.resourceUris = resourceUris
        }
    }

}

extension GlueClientTypes.UserDefinedFunctionInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case className = "ClassName"
        case functionName = "FunctionName"
        case ownerName = "OwnerName"
        case ownerType = "OwnerType"
        case resourceUris = "ResourceUris"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let className = className {
            try encodeContainer.encode(className, forKey: .className)
        }
        if let functionName = functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
        if let ownerName = ownerName {
            try encodeContainer.encode(ownerName, forKey: .ownerName)
        }
        if let ownerType = ownerType {
            try encodeContainer.encode(ownerType.rawValue, forKey: .ownerType)
        }
        if let resourceUris = resourceUris {
            var resourceUrisContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceUris)
            for resourceurilist0 in resourceUris {
                try resourceUrisContainer.encode(resourceurilist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let classNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .className)
        className = classNameDecoded
        let ownerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerName)
        ownerName = ownerNameDecoded
        let ownerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PrincipalType.self, forKey: .ownerType)
        ownerType = ownerTypeDecoded
        let resourceUrisContainer = try containerValues.decodeIfPresent([GlueClientTypes.ResourceUri?].self, forKey: .resourceUris)
        var resourceUrisDecoded0:[GlueClientTypes.ResourceUri]? = nil
        if let resourceUrisContainer = resourceUrisContainer {
            resourceUrisDecoded0 = [GlueClientTypes.ResourceUri]()
            for structure0 in resourceUrisContainer {
                if let structure0 = structure0 {
                    resourceUrisDecoded0?.append(structure0)
                }
            }
        }
        resourceUris = resourceUrisDecoded0
    }
}

extension GlueClientTypes {
    /// A structure used to create or update a user-defined function.
    public struct UserDefinedFunctionInput: Swift.Equatable {
        /// The Java class that contains the function code.
        public var className: Swift.String?
        /// The name of the function.
        public var functionName: Swift.String?
        /// The owner of the function.
        public var ownerName: Swift.String?
        /// The owner type.
        public var ownerType: GlueClientTypes.PrincipalType?
        /// The resource URIs for the function.
        public var resourceUris: [GlueClientTypes.ResourceUri]?

        public init (
            className: Swift.String? = nil,
            functionName: Swift.String? = nil,
            ownerName: Swift.String? = nil,
            ownerType: GlueClientTypes.PrincipalType? = nil,
            resourceUris: [GlueClientTypes.ResourceUri]? = nil
        )
        {
            self.className = className
            self.functionName = functionName
            self.ownerName = ownerName
            self.ownerType = ownerType
            self.resourceUris = resourceUris
        }
    }

}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A value could not be validated.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension VersionMismatchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: VersionMismatchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There was a version conflict.
public struct VersionMismatchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A message describing the problem.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct VersionMismatchExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension VersionMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlueClientTypes {
    public enum WorkerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case g1x
        case g2x
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [WorkerType] {
            return [
                .g1x,
                .g2x,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .g1x: return "G.1X"
            case .g2x: return "G.2X"
            case .standard: return "Standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WorkerType(rawValue: rawValue) ?? WorkerType.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.Workflow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintDetails = "BlueprintDetails"
        case createdOn = "CreatedOn"
        case defaultRunProperties = "DefaultRunProperties"
        case description = "Description"
        case graph = "Graph"
        case lastModifiedOn = "LastModifiedOn"
        case lastRun = "LastRun"
        case maxConcurrentRuns = "MaxConcurrentRuns"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintDetails = blueprintDetails {
            try encodeContainer.encode(blueprintDetails, forKey: .blueprintDetails)
        }
        if let createdOn = createdOn {
            try encodeContainer.encode(createdOn.timeIntervalSince1970, forKey: .createdOn)
        }
        if let defaultRunProperties = defaultRunProperties {
            var defaultRunPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .defaultRunProperties)
            for (dictKey0, workflowrunproperties0) in defaultRunProperties {
                try defaultRunPropertiesContainer.encode(workflowrunproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let graph = graph {
            try encodeContainer.encode(graph, forKey: .graph)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let lastRun = lastRun {
            try encodeContainer.encode(lastRun, forKey: .lastRun)
        }
        if let maxConcurrentRuns = maxConcurrentRuns {
            try encodeContainer.encode(maxConcurrentRuns, forKey: .maxConcurrentRuns)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultRunPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .defaultRunProperties)
        var defaultRunPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let defaultRunPropertiesContainer = defaultRunPropertiesContainer {
            defaultRunPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in defaultRunPropertiesContainer {
                if let genericstring0 = genericstring0 {
                    defaultRunPropertiesDecoded0?[key0] = genericstring0
                }
            }
        }
        defaultRunProperties = defaultRunPropertiesDecoded0
        let createdOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let lastRunDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkflowRun.self, forKey: .lastRun)
        lastRun = lastRunDecoded
        let graphDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkflowGraph.self, forKey: .graph)
        graph = graphDecoded
        let maxConcurrentRunsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentRuns)
        maxConcurrentRuns = maxConcurrentRunsDecoded
        let blueprintDetailsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.BlueprintDetails.self, forKey: .blueprintDetails)
        blueprintDetails = blueprintDetailsDecoded
    }
}

extension GlueClientTypes {
    /// A workflow is a collection of multiple dependent Glue jobs and crawlers that are run to complete a complex ETL task. A workflow manages the execution and monitoring of all its jobs and crawlers.
    public struct Workflow: Swift.Equatable {
        /// This structure indicates the details of the blueprint that this particular workflow is created from.
        public var blueprintDetails: GlueClientTypes.BlueprintDetails?
        /// The date and time when the workflow was created.
        public var createdOn: ClientRuntime.Date?
        /// A collection of properties to be used as part of each execution of the workflow. The run properties are made available to each job in the workflow. A job can modify the properties for the next jobs in the flow.
        public var defaultRunProperties: [Swift.String:Swift.String]?
        /// A description of the workflow.
        public var description: Swift.String?
        /// The graph representing all the Glue components that belong to the workflow as nodes and directed connections between them as edges.
        public var graph: GlueClientTypes.WorkflowGraph?
        /// The date and time when the workflow was last modified.
        public var lastModifiedOn: ClientRuntime.Date?
        /// The information about the last execution of the workflow.
        public var lastRun: GlueClientTypes.WorkflowRun?
        /// You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
        public var maxConcurrentRuns: Swift.Int?
        /// The name of the workflow.
        public var name: Swift.String?

        public init (
            blueprintDetails: GlueClientTypes.BlueprintDetails? = nil,
            createdOn: ClientRuntime.Date? = nil,
            defaultRunProperties: [Swift.String:Swift.String]? = nil,
            description: Swift.String? = nil,
            graph: GlueClientTypes.WorkflowGraph? = nil,
            lastModifiedOn: ClientRuntime.Date? = nil,
            lastRun: GlueClientTypes.WorkflowRun? = nil,
            maxConcurrentRuns: Swift.Int? = nil,
            name: Swift.String? = nil
        )
        {
            self.blueprintDetails = blueprintDetails
            self.createdOn = createdOn
            self.defaultRunProperties = defaultRunProperties
            self.description = description
            self.graph = graph
            self.lastModifiedOn = lastModifiedOn
            self.lastRun = lastRun
            self.maxConcurrentRuns = maxConcurrentRuns
            self.name = name
        }
    }

}

extension GlueClientTypes.WorkflowGraph: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edges = "Edges"
        case nodes = "Nodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let edges = edges {
            var edgesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .edges)
            for edgelist0 in edges {
                try edgesContainer.encode(edgelist0)
            }
        }
        if let nodes = nodes {
            var nodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nodes)
            for nodelist0 in nodes {
                try nodesContainer.encode(nodelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodesContainer = try containerValues.decodeIfPresent([GlueClientTypes.Node?].self, forKey: .nodes)
        var nodesDecoded0:[GlueClientTypes.Node]? = nil
        if let nodesContainer = nodesContainer {
            nodesDecoded0 = [GlueClientTypes.Node]()
            for structure0 in nodesContainer {
                if let structure0 = structure0 {
                    nodesDecoded0?.append(structure0)
                }
            }
        }
        nodes = nodesDecoded0
        let edgesContainer = try containerValues.decodeIfPresent([GlueClientTypes.Edge?].self, forKey: .edges)
        var edgesDecoded0:[GlueClientTypes.Edge]? = nil
        if let edgesContainer = edgesContainer {
            edgesDecoded0 = [GlueClientTypes.Edge]()
            for structure0 in edgesContainer {
                if let structure0 = structure0 {
                    edgesDecoded0?.append(structure0)
                }
            }
        }
        edges = edgesDecoded0
    }
}

extension GlueClientTypes {
    /// A workflow graph represents the complete workflow containing all the Glue components present in the workflow and all the directed connections between them.
    public struct WorkflowGraph: Swift.Equatable {
        /// A list of all the directed connections between the nodes belonging to the workflow.
        public var edges: [GlueClientTypes.Edge]?
        /// A list of the the Glue components belong to the workflow represented as nodes.
        public var nodes: [GlueClientTypes.Node]?

        public init (
            edges: [GlueClientTypes.Edge]? = nil,
            nodes: [GlueClientTypes.Node]? = nil
        )
        {
            self.edges = edges
            self.nodes = nodes
        }
    }

}

extension GlueClientTypes.WorkflowRun: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completedOn = "CompletedOn"
        case errorMessage = "ErrorMessage"
        case graph = "Graph"
        case name = "Name"
        case previousRunId = "PreviousRunId"
        case startedOn = "StartedOn"
        case startingEventBatchCondition = "StartingEventBatchCondition"
        case statistics = "Statistics"
        case status = "Status"
        case workflowRunId = "WorkflowRunId"
        case workflowRunProperties = "WorkflowRunProperties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completedOn = completedOn {
            try encodeContainer.encode(completedOn.timeIntervalSince1970, forKey: .completedOn)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let graph = graph {
            try encodeContainer.encode(graph, forKey: .graph)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let previousRunId = previousRunId {
            try encodeContainer.encode(previousRunId, forKey: .previousRunId)
        }
        if let startedOn = startedOn {
            try encodeContainer.encode(startedOn.timeIntervalSince1970, forKey: .startedOn)
        }
        if let startingEventBatchCondition = startingEventBatchCondition {
            try encodeContainer.encode(startingEventBatchCondition, forKey: .startingEventBatchCondition)
        }
        if let statistics = statistics {
            try encodeContainer.encode(statistics, forKey: .statistics)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let workflowRunId = workflowRunId {
            try encodeContainer.encode(workflowRunId, forKey: .workflowRunId)
        }
        if let workflowRunProperties = workflowRunProperties {
            var workflowRunPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .workflowRunProperties)
            for (dictKey0, workflowrunproperties0) in workflowRunProperties {
                try workflowRunPropertiesContainer.encode(workflowrunproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let workflowRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowRunId)
        workflowRunId = workflowRunIdDecoded
        let previousRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousRunId)
        previousRunId = previousRunIdDecoded
        let workflowRunPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .workflowRunProperties)
        var workflowRunPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let workflowRunPropertiesContainer = workflowRunPropertiesContainer {
            workflowRunPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in workflowRunPropertiesContainer {
                if let genericstring0 = genericstring0 {
                    workflowRunPropertiesDecoded0?[key0] = genericstring0
                }
            }
        }
        workflowRunProperties = workflowRunPropertiesDecoded0
        let startedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkflowRunStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let statisticsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkflowRunStatistics.self, forKey: .statistics)
        statistics = statisticsDecoded
        let graphDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkflowGraph.self, forKey: .graph)
        graph = graphDecoded
        let startingEventBatchConditionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StartingEventBatchCondition.self, forKey: .startingEventBatchCondition)
        startingEventBatchCondition = startingEventBatchConditionDecoded
    }
}

extension GlueClientTypes {
    /// A workflow run is an execution of a workflow providing all the runtime information.
    public struct WorkflowRun: Swift.Equatable {
        /// The date and time when the workflow run completed.
        public var completedOn: ClientRuntime.Date?
        /// This error message describes any error that may have occurred in starting the workflow run. Currently the only error message is "Concurrent runs exceeded for workflow: foo."
        public var errorMessage: Swift.String?
        /// The graph representing all the Glue components that belong to the workflow as nodes and directed connections between them as edges.
        public var graph: GlueClientTypes.WorkflowGraph?
        /// Name of the workflow that was run.
        public var name: Swift.String?
        /// The ID of the previous workflow run.
        public var previousRunId: Swift.String?
        /// The date and time when the workflow run was started.
        public var startedOn: ClientRuntime.Date?
        /// The batch condition that started the workflow run.
        public var startingEventBatchCondition: GlueClientTypes.StartingEventBatchCondition?
        /// The statistics of the run.
        public var statistics: GlueClientTypes.WorkflowRunStatistics?
        /// The status of the workflow run.
        public var status: GlueClientTypes.WorkflowRunStatus?
        /// The ID of this workflow run.
        public var workflowRunId: Swift.String?
        /// The workflow run properties which were set during the run.
        public var workflowRunProperties: [Swift.String:Swift.String]?

        public init (
            completedOn: ClientRuntime.Date? = nil,
            errorMessage: Swift.String? = nil,
            graph: GlueClientTypes.WorkflowGraph? = nil,
            name: Swift.String? = nil,
            previousRunId: Swift.String? = nil,
            startedOn: ClientRuntime.Date? = nil,
            startingEventBatchCondition: GlueClientTypes.StartingEventBatchCondition? = nil,
            statistics: GlueClientTypes.WorkflowRunStatistics? = nil,
            status: GlueClientTypes.WorkflowRunStatus? = nil,
            workflowRunId: Swift.String? = nil,
            workflowRunProperties: [Swift.String:Swift.String]? = nil
        )
        {
            self.completedOn = completedOn
            self.errorMessage = errorMessage
            self.graph = graph
            self.name = name
            self.previousRunId = previousRunId
            self.startedOn = startedOn
            self.startingEventBatchCondition = startingEventBatchCondition
            self.statistics = statistics
            self.status = status
            self.workflowRunId = workflowRunId
            self.workflowRunProperties = workflowRunProperties
        }
    }

}

extension GlueClientTypes.WorkflowRunStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedActions = "FailedActions"
        case runningActions = "RunningActions"
        case stoppedActions = "StoppedActions"
        case succeededActions = "SucceededActions"
        case timeoutActions = "TimeoutActions"
        case totalActions = "TotalActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if failedActions != 0 {
            try encodeContainer.encode(failedActions, forKey: .failedActions)
        }
        if runningActions != 0 {
            try encodeContainer.encode(runningActions, forKey: .runningActions)
        }
        if stoppedActions != 0 {
            try encodeContainer.encode(stoppedActions, forKey: .stoppedActions)
        }
        if succeededActions != 0 {
            try encodeContainer.encode(succeededActions, forKey: .succeededActions)
        }
        if timeoutActions != 0 {
            try encodeContainer.encode(timeoutActions, forKey: .timeoutActions)
        }
        if totalActions != 0 {
            try encodeContainer.encode(totalActions, forKey: .totalActions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalActionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalActions)
        totalActions = totalActionsDecoded
        let timeoutActionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .timeoutActions)
        timeoutActions = timeoutActionsDecoded
        let failedActionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .failedActions)
        failedActions = failedActionsDecoded
        let stoppedActionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .stoppedActions)
        stoppedActions = stoppedActionsDecoded
        let succeededActionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .succeededActions)
        succeededActions = succeededActionsDecoded
        let runningActionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .runningActions)
        runningActions = runningActionsDecoded
    }
}

extension GlueClientTypes {
    /// Workflow run statistics provides statistics about the workflow run.
    public struct WorkflowRunStatistics: Swift.Equatable {
        /// Total number of Actions that have failed.
        public var failedActions: Swift.Int
        /// Total number Actions in running state.
        public var runningActions: Swift.Int
        /// Total number of Actions that have stopped.
        public var stoppedActions: Swift.Int
        /// Total number of Actions that have succeeded.
        public var succeededActions: Swift.Int
        /// Total number of Actions that timed out.
        public var timeoutActions: Swift.Int
        /// Total number of Actions in the workflow run.
        public var totalActions: Swift.Int

        public init (
            failedActions: Swift.Int = 0,
            runningActions: Swift.Int = 0,
            stoppedActions: Swift.Int = 0,
            succeededActions: Swift.Int = 0,
            timeoutActions: Swift.Int = 0,
            totalActions: Swift.Int = 0
        )
        {
            self.failedActions = failedActions
            self.runningActions = runningActions
            self.stoppedActions = stoppedActions
            self.succeededActions = succeededActions
            self.timeoutActions = timeoutActions
            self.totalActions = totalActions
        }
    }

}

extension GlueClientTypes {
    public enum WorkflowRunStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case error
        case running
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [WorkflowRunStatus] {
            return [
                .completed,
                .error,
                .running,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .error: return "ERROR"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WorkflowRunStatus(rawValue: rawValue) ?? WorkflowRunStatus.sdkUnknown(rawValue)
        }
    }
}

extension GlueClientTypes.XMLClassifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classification = "Classification"
        case creationTime = "CreationTime"
        case lastUpdated = "LastUpdated"
        case name = "Name"
        case rowTag = "RowTag"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classification = classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rowTag = rowTag {
            try encodeContainer.encode(rowTag, forKey: .rowTag)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let rowTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rowTag)
        rowTag = rowTagDecoded
    }
}

extension GlueClientTypes {
    /// A classifier for XML content.
    public struct XMLClassifier: Swift.Equatable {
        /// An identifier of the data format that the classifier matches.
        /// This member is required.
        public var classification: Swift.String?
        /// The time that this classifier was registered.
        public var creationTime: ClientRuntime.Date?
        /// The time that this classifier was last updated.
        public var lastUpdated: ClientRuntime.Date?
        /// The name of the classifier.
        /// This member is required.
        public var name: Swift.String?
        /// The XML tag designating the element that contains each record in an XML document being parsed. This can't identify a self-closing element (closed by />). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example,  is okay, but  is not).
        public var rowTag: Swift.String?
        /// The version of this classifier.
        public var version: Swift.Int

        public init (
            classification: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            rowTag: Swift.String? = nil,
            version: Swift.Int = 0
        )
        {
            self.classification = classification
            self.creationTime = creationTime
            self.lastUpdated = lastUpdated
            self.name = name
            self.rowTag = rowTag
            self.version = version
        }
    }

}
