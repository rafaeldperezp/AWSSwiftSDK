// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Amazon GuardDuty is a continuous security monitoring service that analyzes and processes the following data sources: VPC Flow Logs, AWS CloudTrail event logs, and DNS logs. It uses threat intelligence feeds (such as lists of malicious IPs and domains) and machine learning to identify unexpected, potentially unauthorized, and malicious activity within your AWS environment. This can include issues like escalations of privileges, uses of exposed credentials, or communication with malicious IPs, URLs, or domains. For example, GuardDuty can detect compromised EC2 instances that serve malware or mine bitcoin. GuardDuty also monitors AWS account access behavior for signs of compromise. Some examples of this are unauthorized infrastructure deployments such as EC2 instances deployed in a Region that has never been used, or unusual API calls like a password policy change to reduce password strength. GuardDuty informs you of the status of your AWS environment by producing security findings that you can view in the GuardDuty console or through Amazon CloudWatch events. For more information, see the [Amazon GuardDuty User Guide](https://docs.aws.amazon.com/guardduty/latest/ug/what-is-guardduty.html) .
public protocol GuardDutyClientProtocol {
    /// Accepts the invitation to be monitored by a GuardDuty administrator account.
    func acceptInvitation(input: AcceptInvitationInput) async throws -> AcceptInvitationOutputResponse
    /// Archives GuardDuty findings that are specified by the list of finding IDs. Only the administrator account can archive findings. Member accounts don't have permission to archive findings from their accounts.
    func archiveFindings(input: ArchiveFindingsInput) async throws -> ArchiveFindingsOutputResponse
    /// Creates a single Amazon GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each Region where you enable the service. You can have only one detector per account per Region. All data sources are enabled in a new detector by default.
    func createDetector(input: CreateDetectorInput) async throws -> CreateDetectorOutputResponse
    /// Creates a filter using the specified finding criteria.
    func createFilter(input: CreateFilterInput) async throws -> CreateFilterOutputResponse
    /// Creates a new IPSet, which is called a trusted IP list in the console user interface. An IPSet is a list of IP addresses that are trusted for secure communication with AWS infrastructure and applications. GuardDuty doesn't generate findings for IP addresses that are included in IPSets. Only users from the administrator account can use this operation.
    func createIPSet(input: CreateIPSetInput) async throws -> CreateIPSetOutputResponse
    /// Creates member accounts of the current AWS account by specifying a list of AWS account IDs. This step is a prerequisite for managing the associated member accounts either by invitation or through an organization. When using Create Members as an organizations delegated administrator this action will enable GuardDuty in the added member accounts, with the exception of the organization delegated administrator account, which must enable GuardDuty prior to being added as a member. If you are adding accounts by invitation use this action after GuardDuty has been enabled in potential member accounts and before using [Invite Members](https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html).
    func createMembers(input: CreateMembersInput) async throws -> CreateMembersOutputResponse
    /// Creates a publishing destination to export findings to. The resource to export findings to must exist before you use this operation.
    func createPublishingDestination(input: CreatePublishingDestinationInput) async throws -> CreatePublishingDestinationOutputResponse
    /// Generates example findings of types specified by the list of finding types. If 'NULL' is specified for findingTypes, the API generates example findings of all supported finding types.
    func createSampleFindings(input: CreateSampleFindingsInput) async throws -> CreateSampleFindingsOutputResponse
    /// Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the administrator account can use this operation.
    func createThreatIntelSet(input: CreateThreatIntelSetInput) async throws -> CreateThreatIntelSetOutputResponse
    /// Declines invitations sent to the current member account by AWS accounts specified by their account IDs.
    func declineInvitations(input: DeclineInvitationsInput) async throws -> DeclineInvitationsOutputResponse
    /// Deletes an Amazon GuardDuty detector that is specified by the detector ID.
    func deleteDetector(input: DeleteDetectorInput) async throws -> DeleteDetectorOutputResponse
    /// Deletes the filter specified by the filter name.
    func deleteFilter(input: DeleteFilterInput) async throws -> DeleteFilterOutputResponse
    /// Deletes invitations sent to the current member account by AWS accounts specified by their account IDs.
    func deleteInvitations(input: DeleteInvitationsInput) async throws -> DeleteInvitationsOutputResponse
    /// Deletes the IPSet specified by the ipSetId. IPSets are called trusted IP lists in the console user interface.
    func deleteIPSet(input: DeleteIPSetInput) async throws -> DeleteIPSetOutputResponse
    /// Deletes GuardDuty member accounts (to the current GuardDuty administrator account) specified by the account IDs.
    func deleteMembers(input: DeleteMembersInput) async throws -> DeleteMembersOutputResponse
    /// Deletes the publishing definition with the specified destinationId.
    func deletePublishingDestination(input: DeletePublishingDestinationInput) async throws -> DeletePublishingDestinationOutputResponse
    /// Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.
    func deleteThreatIntelSet(input: DeleteThreatIntelSetInput) async throws -> DeleteThreatIntelSetOutputResponse
    /// Returns information about the account selected as the delegated administrator for GuardDuty.
    func describeOrganizationConfiguration(input: DescribeOrganizationConfigurationInput) async throws -> DescribeOrganizationConfigurationOutputResponse
    /// Returns information about the publishing destination specified by the provided destinationId.
    func describePublishingDestination(input: DescribePublishingDestinationInput) async throws -> DescribePublishingDestinationOutputResponse
    /// Disables an AWS account within the Organization as the GuardDuty delegated administrator.
    func disableOrganizationAdminAccount(input: DisableOrganizationAdminAccountInput) async throws -> DisableOrganizationAdminAccountOutputResponse
    /// Disassociates the current GuardDuty member account from its administrator account.
    func disassociateFromMasterAccount(input: DisassociateFromMasterAccountInput) async throws -> DisassociateFromMasterAccountOutputResponse
    /// Disassociates GuardDuty member accounts (to the current GuardDuty administrator account) specified by the account IDs.
    func disassociateMembers(input: DisassociateMembersInput) async throws -> DisassociateMembersOutputResponse
    /// Enables an AWS account within the organization as the GuardDuty delegated administrator.
    func enableOrganizationAdminAccount(input: EnableOrganizationAdminAccountInput) async throws -> EnableOrganizationAdminAccountOutputResponse
    /// Retrieves an Amazon GuardDuty detector specified by the detectorId.
    func getDetector(input: GetDetectorInput) async throws -> GetDetectorOutputResponse
    /// Returns the details of the filter specified by the filter name.
    func getFilter(input: GetFilterInput) async throws -> GetFilterOutputResponse
    /// Describes Amazon GuardDuty findings specified by finding IDs.
    func getFindings(input: GetFindingsInput) async throws -> GetFindingsOutputResponse
    /// Lists Amazon GuardDuty findings statistics for the specified detector ID.
    func getFindingsStatistics(input: GetFindingsStatisticsInput) async throws -> GetFindingsStatisticsOutputResponse
    /// Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.
    func getInvitationsCount(input: GetInvitationsCountInput) async throws -> GetInvitationsCountOutputResponse
    /// Retrieves the IPSet specified by the ipSetId.
    func getIPSet(input: GetIPSetInput) async throws -> GetIPSetOutputResponse
    /// Provides the details for the GuardDuty administrator account associated with the current GuardDuty member account.
    func getMasterAccount(input: GetMasterAccountInput) async throws -> GetMasterAccountOutputResponse
    /// Describes which data sources are enabled for the member account's detector.
    func getMemberDetectors(input: GetMemberDetectorsInput) async throws -> GetMemberDetectorsOutputResponse
    /// Retrieves GuardDuty member accounts (of the current GuardDuty administrator account) specified by the account IDs.
    func getMembers(input: GetMembersInput) async throws -> GetMembersOutputResponse
    /// Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.
    func getThreatIntelSet(input: GetThreatIntelSetInput) async throws -> GetThreatIntelSetOutputResponse
    /// Lists Amazon GuardDuty usage statistics over the last 30 days for the specified detector ID. For newly enabled detectors or data sources the cost returned will include only the usage so far under 30 days, this may differ from the cost metrics in the console, which projects usage over 30 days to provide a monthly cost estimate. For more information see [Understanding How Usage Costs are Calculated](https://docs.aws.amazon.com/guardduty/latest/ug/monitoring_costs.html#usage-calculations).
    func getUsageStatistics(input: GetUsageStatisticsInput) async throws -> GetUsageStatisticsOutputResponse
    /// Invites other AWS accounts (created as members of the current AWS account by CreateMembers) to enable GuardDuty, and allow the current AWS account to view and manage these accounts' findings on their behalf as the GuardDuty administrator account.
    func inviteMembers(input: InviteMembersInput) async throws -> InviteMembersOutputResponse
    /// Lists detectorIds of all the existing Amazon GuardDuty detector resources.
    func listDetectors(input: ListDetectorsInput) async throws -> ListDetectorsOutputResponse
    /// Returns a paginated list of the current filters.
    func listFilters(input: ListFiltersInput) async throws -> ListFiltersOutputResponse
    /// Lists Amazon GuardDuty findings for the specified detector ID.
    func listFindings(input: ListFindingsInput) async throws -> ListFindingsOutputResponse
    /// Lists all GuardDuty membership invitations that were sent to the current AWS account.
    func listInvitations(input: ListInvitationsInput) async throws -> ListInvitationsOutputResponse
    /// Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated administrator account.
    func listIPSets(input: ListIPSetsInput) async throws -> ListIPSetsOutputResponse
    /// Lists details about all member accounts for the current GuardDuty administrator account.
    func listMembers(input: ListMembersInput) async throws -> ListMembersOutputResponse
    /// Lists the accounts configured as GuardDuty delegated administrators.
    func listOrganizationAdminAccounts(input: ListOrganizationAdminAccountsInput) async throws -> ListOrganizationAdminAccountsOutputResponse
    /// Returns a list of publishing destinations associated with the specified dectectorId.
    func listPublishingDestinations(input: ListPublishingDestinationsInput) async throws -> ListPublishingDestinationsOutputResponse
    /// Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, and threat intel sets, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the administrator account are returned.
    func listThreatIntelSets(input: ListThreatIntelSetsInput) async throws -> ListThreatIntelSetsOutputResponse
    /// Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the StopMonitoringMembers operation.
    func startMonitoringMembers(input: StartMonitoringMembersInput) async throws -> StartMonitoringMembersOutputResponse
    /// Stops GuardDuty monitoring for the specified member accounts. Use the StartMonitoringMembers operation to restart monitoring for those accounts.
    func stopMonitoringMembers(input: StopMonitoringMembersInput) async throws -> StopMonitoringMembersOutputResponse
    /// Adds tags to a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Unarchives GuardDuty findings specified by the findingIds.
    func unarchiveFindings(input: UnarchiveFindingsInput) async throws -> UnarchiveFindingsOutputResponse
    /// Removes tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates the Amazon GuardDuty detector specified by the detectorId.
    func updateDetector(input: UpdateDetectorInput) async throws -> UpdateDetectorOutputResponse
    /// Updates the filter specified by the filter name.
    func updateFilter(input: UpdateFilterInput) async throws -> UpdateFilterOutputResponse
    /// Marks the specified GuardDuty findings as useful or not useful.
    func updateFindingsFeedback(input: UpdateFindingsFeedbackInput) async throws -> UpdateFindingsFeedbackOutputResponse
    /// Updates the IPSet specified by the IPSet ID.
    func updateIPSet(input: UpdateIPSetInput) async throws -> UpdateIPSetOutputResponse
    /// Contains information on member accounts to be updated.
    func updateMemberDetectors(input: UpdateMemberDetectorsInput) async throws -> UpdateMemberDetectorsOutputResponse
    /// Updates the delegated administrator account with the values provided.
    func updateOrganizationConfiguration(input: UpdateOrganizationConfigurationInput) async throws -> UpdateOrganizationConfigurationOutputResponse
    /// Updates information about the publishing destination specified by the destinationId.
    func updatePublishingDestination(input: UpdatePublishingDestinationInput) async throws -> UpdatePublishingDestinationOutputResponse
    /// Updates the ThreatIntelSet specified by the ThreatIntelSet ID.
    func updateThreatIntelSet(input: UpdateThreatIntelSetInput) async throws -> UpdateThreatIntelSetOutputResponse
}

public enum GuardDutyClientTypes {}
