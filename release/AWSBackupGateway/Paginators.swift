// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListVirtualMachinesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListVirtualMachinesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListVirtualMachinesOutputResponse`
extension BackupGatewayClient {
    public func listVirtualMachinesPaginated(input: ListVirtualMachinesInput) -> ClientRuntime.PaginatorSequence<ListVirtualMachinesInput, ListVirtualMachinesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListVirtualMachinesInput, ListVirtualMachinesOutputResponse>(input: input, inputKey: \ListVirtualMachinesInput.nextToken, outputKey: \ListVirtualMachinesOutputResponse.nextToken, paginationFunction: self.listVirtualMachines(input:))
    }
}

extension ListVirtualMachinesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVirtualMachinesInput {
        return ListVirtualMachinesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listVirtualMachinesPaginated`
/// to access the nested member `[BackupGatewayClientTypes.VirtualMachine]`
/// - Returns: `[BackupGatewayClientTypes.VirtualMachine]`
extension PaginatorSequence where Input == ListVirtualMachinesInput, Output == ListVirtualMachinesOutputResponse {
    func virtualMachines() async throws -> [BackupGatewayClientTypes.VirtualMachine] {
        return try await self.asyncCompactMap { item in item.virtualMachines }
    }
}
