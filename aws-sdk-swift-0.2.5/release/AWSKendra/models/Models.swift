// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension KendraClientTypes.AccessControlListConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPath = "KeyPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyPath = keyPath {
            try encodeContainer.encode(keyPath, forKey: .keyPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPath)
        keyPath = keyPathDecoded
    }
}

extension KendraClientTypes {
    /// Access Control List files for the documents in a data source. For the format of the file, see [Access control for S3 data sources](https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html).
    public struct AccessControlListConfiguration: Swift.Equatable {
        /// Path to the Amazon Web Services S3 bucket that contains the ACL files.
        public var keyPath: Swift.String?

        public init (
            keyPath: Swift.String? = nil
        )
        {
            self.keyPath = keyPath
        }
    }

}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KendraClientTypes.AclConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedGroupsColumnName = "AllowedGroupsColumnName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedGroupsColumnName = allowedGroupsColumnName {
            try encodeContainer.encode(allowedGroupsColumnName, forKey: .allowedGroupsColumnName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedGroupsColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedGroupsColumnName)
        allowedGroupsColumnName = allowedGroupsColumnNameDecoded
    }
}

extension KendraClientTypes {
    /// Provides information about the column that should be used for filtering the query response by groups.
    public struct AclConfiguration: Swift.Equatable {
        /// A list of groups, separated by semi-colons, that filters a query response based on user context. The document is only returned to users that are in one of the groups specified in the UserContext field of the Query operation.
        /// This member is required.
        public var allowedGroupsColumnName: Swift.String?

        public init (
            allowedGroupsColumnName: Swift.String? = nil
        )
        {
            self.allowedGroupsColumnName = allowedGroupsColumnName
        }
    }

}

extension KendraClientTypes.AdditionalResultAttribute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
        case valueType = "ValueType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
        if let valueType = valueType {
            try encodeContainer.encode(valueType.rawValue, forKey: .valueType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.AdditionalResultAttributeValueType.self, forKey: .valueType)
        valueType = valueTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(KendraClientTypes.AdditionalResultAttributeValue.self, forKey: .value)
        value = valueDecoded
    }
}

extension KendraClientTypes {
    /// An attribute returned from an index query.
    public struct AdditionalResultAttribute: Swift.Equatable {
        /// The key that identifies the attribute.
        /// This member is required.
        public var key: Swift.String?
        /// An object that contains the attribute value.
        /// This member is required.
        public var value: KendraClientTypes.AdditionalResultAttributeValue?
        /// The data type of the Value property.
        /// This member is required.
        public var valueType: KendraClientTypes.AdditionalResultAttributeValueType?

        public init (
            key: Swift.String? = nil,
            value: KendraClientTypes.AdditionalResultAttributeValue? = nil,
            valueType: KendraClientTypes.AdditionalResultAttributeValueType? = nil
        )
        {
            self.key = key
            self.value = value
            self.valueType = valueType
        }
    }

}

extension KendraClientTypes.AdditionalResultAttributeValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case textWithHighlightsValue = "TextWithHighlightsValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let textWithHighlightsValue = textWithHighlightsValue {
            try encodeContainer.encode(textWithHighlightsValue, forKey: .textWithHighlightsValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textWithHighlightsValueDecoded = try containerValues.decodeIfPresent(KendraClientTypes.TextWithHighlights.self, forKey: .textWithHighlightsValue)
        textWithHighlightsValue = textWithHighlightsValueDecoded
    }
}

extension KendraClientTypes {
    /// An attribute returned with a document from a search.
    public struct AdditionalResultAttributeValue: Swift.Equatable {
        /// The text associated with the attribute and information about the highlight to apply to the text.
        public var textWithHighlightsValue: KendraClientTypes.TextWithHighlights?

        public init (
            textWithHighlightsValue: KendraClientTypes.TextWithHighlights? = nil
        )
        {
            self.textWithHighlightsValue = textWithHighlightsValue
        }
    }

}

extension KendraClientTypes {
    public enum AdditionalResultAttributeValueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case textWithHighlightsValue
        case sdkUnknown(Swift.String)

        public static var allCases: [AdditionalResultAttributeValueType] {
            return [
                .textWithHighlightsValue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .textWithHighlightsValue: return "TEXT_WITH_HIGHLIGHTS_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AdditionalResultAttributeValueType(rawValue: rawValue) ?? AdditionalResultAttributeValueType.sdkUnknown(rawValue)
        }
    }
}

extension AssociateEntitiesToExperienceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityList = "EntityList"
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityList = entityList {
            var entityListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityList)
            for associateentitylist0 in entityList {
                try entityListContainer.encode(associateentitylist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension AssociateEntitiesToExperienceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateEntitiesToExperienceInput: Swift.Equatable {
    /// Lists users or groups in your Amazon Web Services SSO identity source.
    /// This member is required.
    public var entityList: [KendraClientTypes.EntityConfiguration]?
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        entityList: [KendraClientTypes.EntityConfiguration]? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.entityList = entityList
        self.id = id
        self.indexId = indexId
    }
}

struct AssociateEntitiesToExperienceInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let entityList: [KendraClientTypes.EntityConfiguration]?
}

extension AssociateEntitiesToExperienceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityList = "EntityList"
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let entityListContainer = try containerValues.decodeIfPresent([KendraClientTypes.EntityConfiguration?].self, forKey: .entityList)
        var entityListDecoded0:[KendraClientTypes.EntityConfiguration]? = nil
        if let entityListContainer = entityListContainer {
            entityListDecoded0 = [KendraClientTypes.EntityConfiguration]()
            for structure0 in entityListContainer {
                if let structure0 = structure0 {
                    entityListDecoded0?.append(structure0)
                }
            }
        }
        entityList = entityListDecoded0
    }
}

extension AssociateEntitiesToExperienceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateEntitiesToExperienceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistException" : self = .resourceAlreadyExistException(try ResourceAlreadyExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateEntitiesToExperienceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceAlreadyExistException(ResourceAlreadyExistException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateEntitiesToExperienceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateEntitiesToExperienceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedEntityList = output.failedEntityList
        } else {
            self.failedEntityList = nil
        }
    }
}

public struct AssociateEntitiesToExperienceOutputResponse: Swift.Equatable {
    /// Lists the users or groups in your Amazon Web Services SSO identity source that failed to properly configure with your Amazon Kendra experience.
    public var failedEntityList: [KendraClientTypes.FailedEntity]?

    public init (
        failedEntityList: [KendraClientTypes.FailedEntity]? = nil
    )
    {
        self.failedEntityList = failedEntityList
    }
}

struct AssociateEntitiesToExperienceOutputResponseBody: Swift.Equatable {
    let failedEntityList: [KendraClientTypes.FailedEntity]?
}

extension AssociateEntitiesToExperienceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedEntityList = "FailedEntityList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedEntityListContainer = try containerValues.decodeIfPresent([KendraClientTypes.FailedEntity?].self, forKey: .failedEntityList)
        var failedEntityListDecoded0:[KendraClientTypes.FailedEntity]? = nil
        if let failedEntityListContainer = failedEntityListContainer {
            failedEntityListDecoded0 = [KendraClientTypes.FailedEntity]()
            for structure0 in failedEntityListContainer {
                if let structure0 = structure0 {
                    failedEntityListDecoded0?.append(structure0)
                }
            }
        }
        failedEntityList = failedEntityListDecoded0
    }
}

extension AssociatePersonasToEntitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
        case personas = "Personas"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let personas = personas {
            var personasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .personas)
            for entitypersonaconfigurationlist0 in personas {
                try personasContainer.encode(entitypersonaconfigurationlist0)
            }
        }
    }
}

extension AssociatePersonasToEntitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociatePersonasToEntitiesInput: Swift.Equatable {
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// The personas that define the specific permissions of users or groups in your Amazon Web Services SSO identity source. The available personas or access roles are Owner and Viewer. For more information on these personas, see [Providing access to your search page](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience).
    /// This member is required.
    public var personas: [KendraClientTypes.EntityPersonaConfiguration]?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        personas: [KendraClientTypes.EntityPersonaConfiguration]? = nil
    )
    {
        self.id = id
        self.indexId = indexId
        self.personas = personas
    }
}

struct AssociatePersonasToEntitiesInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let personas: [KendraClientTypes.EntityPersonaConfiguration]?
}

extension AssociatePersonasToEntitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
        case personas = "Personas"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let personasContainer = try containerValues.decodeIfPresent([KendraClientTypes.EntityPersonaConfiguration?].self, forKey: .personas)
        var personasDecoded0:[KendraClientTypes.EntityPersonaConfiguration]? = nil
        if let personasContainer = personasContainer {
            personasDecoded0 = [KendraClientTypes.EntityPersonaConfiguration]()
            for structure0 in personasContainer {
                if let structure0 = structure0 {
                    personasDecoded0?.append(structure0)
                }
            }
        }
        personas = personasDecoded0
    }
}

extension AssociatePersonasToEntitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociatePersonasToEntitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistException" : self = .resourceAlreadyExistException(try ResourceAlreadyExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociatePersonasToEntitiesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceAlreadyExistException(ResourceAlreadyExistException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociatePersonasToEntitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociatePersonasToEntitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedEntityList = output.failedEntityList
        } else {
            self.failedEntityList = nil
        }
    }
}

public struct AssociatePersonasToEntitiesOutputResponse: Swift.Equatable {
    /// Lists the users or groups in your Amazon Web Services SSO identity source that failed to properly configure with your Amazon Kendra experience.
    public var failedEntityList: [KendraClientTypes.FailedEntity]?

    public init (
        failedEntityList: [KendraClientTypes.FailedEntity]? = nil
    )
    {
        self.failedEntityList = failedEntityList
    }
}

struct AssociatePersonasToEntitiesOutputResponseBody: Swift.Equatable {
    let failedEntityList: [KendraClientTypes.FailedEntity]?
}

extension AssociatePersonasToEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedEntityList = "FailedEntityList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedEntityListContainer = try containerValues.decodeIfPresent([KendraClientTypes.FailedEntity?].self, forKey: .failedEntityList)
        var failedEntityListDecoded0:[KendraClientTypes.FailedEntity]? = nil
        if let failedEntityListContainer = failedEntityListContainer {
            failedEntityListDecoded0 = [KendraClientTypes.FailedEntity]()
            for structure0 in failedEntityListContainer {
                if let structure0 = structure0 {
                    failedEntityListDecoded0?.append(structure0)
                }
            }
        }
        failedEntityList = failedEntityListDecoded0
    }
}

extension KendraClientTypes.AttributeFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case andAllFilters = "AndAllFilters"
        case containsAll = "ContainsAll"
        case containsAny = "ContainsAny"
        case equalsTo = "EqualsTo"
        case greaterThan = "GreaterThan"
        case greaterThanOrEquals = "GreaterThanOrEquals"
        case lessThan = "LessThan"
        case lessThanOrEquals = "LessThanOrEquals"
        case notFilter = "NotFilter"
        case orAllFilters = "OrAllFilters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let andAllFilters = andAllFilters {
            var andAllFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .andAllFilters)
            for attributefilterlist0 in andAllFilters {
                try andAllFiltersContainer.encode(attributefilterlist0)
            }
        }
        if let containsAll = containsAll {
            try encodeContainer.encode(containsAll, forKey: .containsAll)
        }
        if let containsAny = containsAny {
            try encodeContainer.encode(containsAny, forKey: .containsAny)
        }
        if let equalsTo = equalsTo {
            try encodeContainer.encode(equalsTo, forKey: .equalsTo)
        }
        if let greaterThan = greaterThan {
            try encodeContainer.encode(greaterThan, forKey: .greaterThan)
        }
        if let greaterThanOrEquals = greaterThanOrEquals {
            try encodeContainer.encode(greaterThanOrEquals, forKey: .greaterThanOrEquals)
        }
        if let lessThan = lessThan {
            try encodeContainer.encode(lessThan, forKey: .lessThan)
        }
        if let lessThanOrEquals = lessThanOrEquals {
            try encodeContainer.encode(lessThanOrEquals, forKey: .lessThanOrEquals)
        }
        if let notFilter = notFilter {
            try encodeContainer.encode(notFilter.value, forKey: .notFilter)
        }
        if let orAllFilters = orAllFilters {
            var orAllFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .orAllFilters)
            for attributefilterlist0 in orAllFilters {
                try orAllFiltersContainer.encode(attributefilterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let andAllFiltersContainer = try containerValues.decodeIfPresent([KendraClientTypes.AttributeFilter?].self, forKey: .andAllFilters)
        var andAllFiltersDecoded0:[KendraClientTypes.AttributeFilter]? = nil
        if let andAllFiltersContainer = andAllFiltersContainer {
            andAllFiltersDecoded0 = [KendraClientTypes.AttributeFilter]()
            for structure0 in andAllFiltersContainer {
                if let structure0 = structure0 {
                    andAllFiltersDecoded0?.append(structure0)
                }
            }
        }
        andAllFilters = andAllFiltersDecoded0
        let orAllFiltersContainer = try containerValues.decodeIfPresent([KendraClientTypes.AttributeFilter?].self, forKey: .orAllFilters)
        var orAllFiltersDecoded0:[KendraClientTypes.AttributeFilter]? = nil
        if let orAllFiltersContainer = orAllFiltersContainer {
            orAllFiltersDecoded0 = [KendraClientTypes.AttributeFilter]()
            for structure0 in orAllFiltersContainer {
                if let structure0 = structure0 {
                    orAllFiltersDecoded0?.append(structure0)
                }
            }
        }
        orAllFilters = orAllFiltersDecoded0
        let notFilterDecoded = try containerValues.decodeIfPresent(Box<KendraClientTypes.AttributeFilter>.self, forKey: .notFilter)
        notFilter = notFilterDecoded
        let equalsToDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttribute.self, forKey: .equalsTo)
        equalsTo = equalsToDecoded
        let containsAllDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttribute.self, forKey: .containsAll)
        containsAll = containsAllDecoded
        let containsAnyDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttribute.self, forKey: .containsAny)
        containsAny = containsAnyDecoded
        let greaterThanDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttribute.self, forKey: .greaterThan)
        greaterThan = greaterThanDecoded
        let greaterThanOrEqualsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttribute.self, forKey: .greaterThanOrEquals)
        greaterThanOrEquals = greaterThanOrEqualsDecoded
        let lessThanDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttribute.self, forKey: .lessThan)
        lessThan = lessThanDecoded
        let lessThanOrEqualsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttribute.self, forKey: .lessThanOrEquals)
        lessThanOrEquals = lessThanOrEqualsDecoded
    }
}

extension KendraClientTypes {
    /// Provides filtering the query results based on document attributes. When you use the AndAllFilters or OrAllFilters, filters you can use 2 layers under the first attribute filter. For example, you can use:
    ///
    ///
    ///
    ///
    /// If you use more than 2 layers, you receive a ValidationException exception with the message "AttributeFilter cannot have a depth of more than 2." If you use more than 10 attribute filters in a given list for AndAllFilters or OrAllFilters, you receive a ValidationException with the message "AttributeFilter cannot have a length of more than 10".
    public struct AttributeFilter: Swift.Equatable {
        /// Performs a logical AND operation on all supplied filters.
        public var andAllFilters: [KendraClientTypes.AttributeFilter]?
        /// Returns true when a document contains all of the specified document attributes. This filter is only applicable to StringListValue metadata.
        public var containsAll: KendraClientTypes.DocumentAttribute?
        /// Returns true when a document contains any of the specified document attributes. This filter is only applicable to StringListValue metadata.
        public var containsAny: KendraClientTypes.DocumentAttribute?
        /// Performs an equals operation on two document attributes.
        public var equalsTo: KendraClientTypes.DocumentAttribute?
        /// Performs a greater than operation on two document attributes. Use with a document attribute of type Date or Long.
        public var greaterThan: KendraClientTypes.DocumentAttribute?
        /// Performs a greater or equals than operation on two document attributes. Use with a document attribute of type Date or Long.
        public var greaterThanOrEquals: KendraClientTypes.DocumentAttribute?
        /// Performs a less than operation on two document attributes. Use with a document attribute of type Date or Long.
        public var lessThan: KendraClientTypes.DocumentAttribute?
        /// Performs a less than or equals operation on two document attributes. Use with a document attribute of type Date or Long.
        public var lessThanOrEquals: KendraClientTypes.DocumentAttribute?
        /// Performs a logical NOT operation on all supplied filters.
        public var notFilter: Box<KendraClientTypes.AttributeFilter>?
        /// Performs a logical OR operation on all supplied filters.
        public var orAllFilters: [KendraClientTypes.AttributeFilter]?

        public init (
            andAllFilters: [KendraClientTypes.AttributeFilter]? = nil,
            containsAll: KendraClientTypes.DocumentAttribute? = nil,
            containsAny: KendraClientTypes.DocumentAttribute? = nil,
            equalsTo: KendraClientTypes.DocumentAttribute? = nil,
            greaterThan: KendraClientTypes.DocumentAttribute? = nil,
            greaterThanOrEquals: KendraClientTypes.DocumentAttribute? = nil,
            lessThan: KendraClientTypes.DocumentAttribute? = nil,
            lessThanOrEquals: KendraClientTypes.DocumentAttribute? = nil,
            notFilter: Box<KendraClientTypes.AttributeFilter>? = nil,
            orAllFilters: [KendraClientTypes.AttributeFilter]? = nil
        )
        {
            self.andAllFilters = andAllFilters
            self.containsAll = containsAll
            self.containsAny = containsAny
            self.equalsTo = equalsTo
            self.greaterThan = greaterThan
            self.greaterThanOrEquals = greaterThanOrEquals
            self.lessThan = lessThan
            self.lessThanOrEquals = lessThanOrEquals
            self.notFilter = notFilter
            self.orAllFilters = orAllFilters
        }
    }

}

extension KendraClientTypes.AuthenticationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case basicAuthentication = "BasicAuthentication"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let basicAuthentication = basicAuthentication {
            var basicAuthenticationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .basicAuthentication)
            for basicauthenticationconfigurationlist0 in basicAuthentication {
                try basicAuthenticationContainer.encode(basicauthenticationconfigurationlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let basicAuthenticationContainer = try containerValues.decodeIfPresent([KendraClientTypes.BasicAuthenticationConfiguration?].self, forKey: .basicAuthentication)
        var basicAuthenticationDecoded0:[KendraClientTypes.BasicAuthenticationConfiguration]? = nil
        if let basicAuthenticationContainer = basicAuthenticationContainer {
            basicAuthenticationDecoded0 = [KendraClientTypes.BasicAuthenticationConfiguration]()
            for structure0 in basicAuthenticationContainer {
                if let structure0 = structure0 {
                    basicAuthenticationDecoded0?.append(structure0)
                }
            }
        }
        basicAuthentication = basicAuthenticationDecoded0
    }
}

extension KendraClientTypes {
    /// Provides the configuration information to connect to websites that require user authentication.
    public struct AuthenticationConfiguration: Swift.Equatable {
        /// The list of configuration information that's required to connect to and crawl a website host using basic authentication credentials. The list includes the name and port number of the website host.
        public var basicAuthentication: [KendraClientTypes.BasicAuthenticationConfiguration]?

        public init (
            basicAuthentication: [KendraClientTypes.BasicAuthenticationConfiguration]? = nil
        )
        {
            self.basicAuthentication = basicAuthentication
        }
    }

}

extension KendraClientTypes.BasicAuthenticationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentials = "Credentials"
        case host = "Host"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credentials = credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let host = host {
            try encodeContainer.encode(host, forKey: .host)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .host)
        host = hostDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information to connect to websites that require basic user authentication.
    public struct BasicAuthenticationConfiguration: Swift.Equatable {
        /// Your secret ARN, which you can create in [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) You use a secret if basic authentication credentials are required to connect to a website. The secret stores your credentials of user name and password.
        /// This member is required.
        public var credentials: Swift.String?
        /// The name of the website host you want to connect to using authentication credentials. For example, the host name of https://a.example.com/page1.html is "a.example.com".
        /// This member is required.
        public var host: Swift.String?
        /// The port number of the website host you want to connect to using authentication credentials. For example, the port for https://a.example.com/page1.html is 443, the standard port for HTTPS.
        /// This member is required.
        public var port: Swift.Int?

        public init (
            credentials: Swift.String? = nil,
            host: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.credentials = credentials
            self.host = host
            self.port = port
        }
    }

}

extension BatchDeleteDocumentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceSyncJobMetricTarget = "DataSourceSyncJobMetricTarget"
        case documentIdList = "DocumentIdList"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceSyncJobMetricTarget = dataSourceSyncJobMetricTarget {
            try encodeContainer.encode(dataSourceSyncJobMetricTarget, forKey: .dataSourceSyncJobMetricTarget)
        }
        if let documentIdList = documentIdList {
            var documentIdListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentIdList)
            for documentidlist0 in documentIdList {
                try documentIdListContainer.encode(documentidlist0)
            }
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension BatchDeleteDocumentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDeleteDocumentInput: Swift.Equatable {
    /// Maps a particular data source sync job to a particular data source.
    public var dataSourceSyncJobMetricTarget: KendraClientTypes.DataSourceSyncJobMetricTarget?
    /// One or more identifiers for documents to delete from the index.
    /// This member is required.
    public var documentIdList: [Swift.String]?
    /// The identifier of the index that contains the documents to delete.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        dataSourceSyncJobMetricTarget: KendraClientTypes.DataSourceSyncJobMetricTarget? = nil,
        documentIdList: [Swift.String]? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.dataSourceSyncJobMetricTarget = dataSourceSyncJobMetricTarget
        self.documentIdList = documentIdList
        self.indexId = indexId
    }
}

struct BatchDeleteDocumentInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let documentIdList: [Swift.String]?
    let dataSourceSyncJobMetricTarget: KendraClientTypes.DataSourceSyncJobMetricTarget?
}

extension BatchDeleteDocumentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceSyncJobMetricTarget = "DataSourceSyncJobMetricTarget"
        case documentIdList = "DocumentIdList"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let documentIdListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .documentIdList)
        var documentIdListDecoded0:[Swift.String]? = nil
        if let documentIdListContainer = documentIdListContainer {
            documentIdListDecoded0 = [Swift.String]()
            for string0 in documentIdListContainer {
                if let string0 = string0 {
                    documentIdListDecoded0?.append(string0)
                }
            }
        }
        documentIdList = documentIdListDecoded0
        let dataSourceSyncJobMetricTargetDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceSyncJobMetricTarget.self, forKey: .dataSourceSyncJobMetricTarget)
        dataSourceSyncJobMetricTarget = dataSourceSyncJobMetricTargetDecoded
    }
}

extension BatchDeleteDocumentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeleteDocumentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeleteDocumentOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteDocumentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDeleteDocumentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedDocuments = output.failedDocuments
        } else {
            self.failedDocuments = nil
        }
    }
}

public struct BatchDeleteDocumentOutputResponse: Swift.Equatable {
    /// A list of documents that could not be removed from the index. Each entry contains an error message that indicates why the document couldn't be removed from the index.
    public var failedDocuments: [KendraClientTypes.BatchDeleteDocumentResponseFailedDocument]?

    public init (
        failedDocuments: [KendraClientTypes.BatchDeleteDocumentResponseFailedDocument]? = nil
    )
    {
        self.failedDocuments = failedDocuments
    }
}

struct BatchDeleteDocumentOutputResponseBody: Swift.Equatable {
    let failedDocuments: [KendraClientTypes.BatchDeleteDocumentResponseFailedDocument]?
}

extension BatchDeleteDocumentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedDocuments = "FailedDocuments"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedDocumentsContainer = try containerValues.decodeIfPresent([KendraClientTypes.BatchDeleteDocumentResponseFailedDocument?].self, forKey: .failedDocuments)
        var failedDocumentsDecoded0:[KendraClientTypes.BatchDeleteDocumentResponseFailedDocument]? = nil
        if let failedDocumentsContainer = failedDocumentsContainer {
            failedDocumentsDecoded0 = [KendraClientTypes.BatchDeleteDocumentResponseFailedDocument]()
            for structure0 in failedDocumentsContainer {
                if let structure0 = structure0 {
                    failedDocumentsDecoded0?.append(structure0)
                }
            }
        }
        failedDocuments = failedDocumentsDecoded0
    }
}

extension KendraClientTypes.BatchDeleteDocumentResponseFailedDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension KendraClientTypes {
    /// Provides information about documents that could not be removed from an index by the BatchDeleteDocument operation.
    public struct BatchDeleteDocumentResponseFailedDocument: Swift.Equatable {
        /// The error code for why the document couldn't be removed from the index.
        public var errorCode: KendraClientTypes.ErrorCode?
        /// An explanation for why the document couldn't be removed from the index.
        public var errorMessage: Swift.String?
        /// The identifier of the document that couldn't be removed from the index.
        public var id: Swift.String?

        public init (
            errorCode: KendraClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.id = id
        }
    }

}

extension BatchGetDocumentStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentInfoList = "DocumentInfoList"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentInfoList = documentInfoList {
            var documentInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentInfoList)
            for documentinfolist0 in documentInfoList {
                try documentInfoListContainer.encode(documentinfolist0)
            }
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension BatchGetDocumentStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchGetDocumentStatusInput: Swift.Equatable {
    /// A list of DocumentInfo objects that identify the documents for which to get the status. You identify the documents by their document ID and optional attributes.
    /// This member is required.
    public var documentInfoList: [KendraClientTypes.DocumentInfo]?
    /// The identifier of the index to add documents to. The index ID is returned by the [ CreateIndex ](https://docs.aws.amazon.com/kendra/latest/dg/API_CreateIndex.html) operation.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        documentInfoList: [KendraClientTypes.DocumentInfo]? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.documentInfoList = documentInfoList
        self.indexId = indexId
    }
}

struct BatchGetDocumentStatusInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let documentInfoList: [KendraClientTypes.DocumentInfo]?
}

extension BatchGetDocumentStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentInfoList = "DocumentInfoList"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let documentInfoListContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentInfo?].self, forKey: .documentInfoList)
        var documentInfoListDecoded0:[KendraClientTypes.DocumentInfo]? = nil
        if let documentInfoListContainer = documentInfoListContainer {
            documentInfoListDecoded0 = [KendraClientTypes.DocumentInfo]()
            for structure0 in documentInfoListContainer {
                if let structure0 = structure0 {
                    documentInfoListDecoded0?.append(structure0)
                }
            }
        }
        documentInfoList = documentInfoListDecoded0
    }
}

extension BatchGetDocumentStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDocumentStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetDocumentStatusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDocumentStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetDocumentStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.documentStatusList = output.documentStatusList
            self.errors = output.errors
        } else {
            self.documentStatusList = nil
            self.errors = nil
        }
    }
}

public struct BatchGetDocumentStatusOutputResponse: Swift.Equatable {
    /// The status of documents. The status indicates if the document is waiting to be indexed, is in the process of indexing, has completed indexing, or failed indexing. If a document failed indexing, the status provides the reason why.
    public var documentStatusList: [KendraClientTypes.Status]?
    /// A list of documents that Amazon Kendra couldn't get the status for. The list includes the ID of the document and the reason that the status couldn't be found.
    public var errors: [KendraClientTypes.BatchGetDocumentStatusResponseError]?

    public init (
        documentStatusList: [KendraClientTypes.Status]? = nil,
        errors: [KendraClientTypes.BatchGetDocumentStatusResponseError]? = nil
    )
    {
        self.documentStatusList = documentStatusList
        self.errors = errors
    }
}

struct BatchGetDocumentStatusOutputResponseBody: Swift.Equatable {
    let errors: [KendraClientTypes.BatchGetDocumentStatusResponseError]?
    let documentStatusList: [KendraClientTypes.Status]?
}

extension BatchGetDocumentStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentStatusList = "DocumentStatusList"
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([KendraClientTypes.BatchGetDocumentStatusResponseError?].self, forKey: .errors)
        var errorsDecoded0:[KendraClientTypes.BatchGetDocumentStatusResponseError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [KendraClientTypes.BatchGetDocumentStatusResponseError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
        let documentStatusListContainer = try containerValues.decodeIfPresent([KendraClientTypes.Status?].self, forKey: .documentStatusList)
        var documentStatusListDecoded0:[KendraClientTypes.Status]? = nil
        if let documentStatusListContainer = documentStatusListContainer {
            documentStatusListDecoded0 = [KendraClientTypes.Status]()
            for structure0 in documentStatusListContainer {
                if let structure0 = structure0 {
                    documentStatusListDecoded0?.append(structure0)
                }
            }
        }
        documentStatusList = documentStatusListDecoded0
    }
}

extension KendraClientTypes.BatchGetDocumentStatusResponseError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentId = "DocumentId"
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentId = documentId {
            try encodeContainer.encode(documentId, forKey: .documentId)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentId)
        documentId = documentIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension KendraClientTypes {
    /// Provides a response when the status of a document could not be retrieved.
    public struct BatchGetDocumentStatusResponseError: Swift.Equatable {
        /// The unique identifier of the document whose status could not be retrieved.
        public var documentId: Swift.String?
        /// Indicates the source of the error.
        public var errorCode: KendraClientTypes.ErrorCode?
        /// States that the API could not get the status of a document. This could be because the request is not valid or there is a system error.
        public var errorMessage: Swift.String?

        public init (
            documentId: Swift.String? = nil,
            errorCode: KendraClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.documentId = documentId
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }

}

extension BatchPutDocumentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDocumentEnrichmentConfiguration = "CustomDocumentEnrichmentConfiguration"
        case documents = "Documents"
        case indexId = "IndexId"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration {
            try encodeContainer.encode(customDocumentEnrichmentConfiguration, forKey: .customDocumentEnrichmentConfiguration)
        }
        if let documents = documents {
            var documentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documents)
            for documentlist0 in documents {
                try documentsContainer.encode(documentlist0)
            }
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension BatchPutDocumentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchPutDocumentInput: Swift.Equatable {
    /// Configuration information for altering your document metadata and content during the document ingestion process when you use the BatchPutDocument operation. For more information on how to create, modify and delete document metadata, or make other content alterations when you ingest documents into Amazon Kendra, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public var customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
    /// One or more documents to add to the index. Documents can include custom attributes. For example, 'DataSourceId' and 'DataSourceSyncJobId' are custom attributes that provide information on the synchronization of documents running on a data source. Note, 'DataSourceSyncJobId' could be an optional custom attribute as Amazon Kendra will use the ID of a running sync job. Documents have the following file size limits.
    ///
    /// * 5 MB total size for inline documents
    ///
    /// * 50 MB total size for files from an S3 bucket
    ///
    /// * 5 MB extracted text for any file
    ///
    ///
    /// For more information about file size and transaction per second quotas, see [Quotas](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    /// This member is required.
    public var documents: [KendraClientTypes.Document]?
    /// The identifier of the index to add the documents to. You need to create the index first using the CreateIndex operation.
    /// This member is required.
    public var indexId: Swift.String?
    /// The Amazon Resource Name (ARN) of a role that is allowed to run the BatchPutDocument operation. For more information, see [IAM Roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    public var roleArn: Swift.String?

    public init (
        customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration? = nil,
        documents: [KendraClientTypes.Document]? = nil,
        indexId: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration
        self.documents = documents
        self.indexId = indexId
        self.roleArn = roleArn
    }
}

struct BatchPutDocumentInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let roleArn: Swift.String?
    let documents: [KendraClientTypes.Document]?
    let customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
}

extension BatchPutDocumentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDocumentEnrichmentConfiguration = "CustomDocumentEnrichmentConfiguration"
        case documents = "Documents"
        case indexId = "IndexId"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let documentsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Document?].self, forKey: .documents)
        var documentsDecoded0:[KendraClientTypes.Document]? = nil
        if let documentsContainer = documentsContainer {
            documentsDecoded0 = [KendraClientTypes.Document]()
            for structure0 in documentsContainer {
                if let structure0 = structure0 {
                    documentsDecoded0?.append(structure0)
                }
            }
        }
        documents = documentsDecoded0
        let customDocumentEnrichmentConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.CustomDocumentEnrichmentConfiguration.self, forKey: .customDocumentEnrichmentConfiguration)
        customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfigurationDecoded
    }
}

extension BatchPutDocumentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchPutDocumentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchPutDocumentOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchPutDocumentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchPutDocumentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedDocuments = output.failedDocuments
        } else {
            self.failedDocuments = nil
        }
    }
}

public struct BatchPutDocumentOutputResponse: Swift.Equatable {
    /// A list of documents that were not added to the index because the document failed a validation check. Each document contains an error message that indicates why the document couldn't be added to the index. If there was an error adding a document to an index the error is reported in your Amazon Web Services CloudWatch log. For more information, see [Monitoring Amazon Kendra with Amazon CloudWatch Logs](https://docs.aws.amazon.com/kendra/latest/dg/cloudwatch-logs.html)
    public var failedDocuments: [KendraClientTypes.BatchPutDocumentResponseFailedDocument]?

    public init (
        failedDocuments: [KendraClientTypes.BatchPutDocumentResponseFailedDocument]? = nil
    )
    {
        self.failedDocuments = failedDocuments
    }
}

struct BatchPutDocumentOutputResponseBody: Swift.Equatable {
    let failedDocuments: [KendraClientTypes.BatchPutDocumentResponseFailedDocument]?
}

extension BatchPutDocumentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedDocuments = "FailedDocuments"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedDocumentsContainer = try containerValues.decodeIfPresent([KendraClientTypes.BatchPutDocumentResponseFailedDocument?].self, forKey: .failedDocuments)
        var failedDocumentsDecoded0:[KendraClientTypes.BatchPutDocumentResponseFailedDocument]? = nil
        if let failedDocumentsContainer = failedDocumentsContainer {
            failedDocumentsDecoded0 = [KendraClientTypes.BatchPutDocumentResponseFailedDocument]()
            for structure0 in failedDocumentsContainer {
                if let structure0 = structure0 {
                    failedDocumentsDecoded0?.append(structure0)
                }
            }
        }
        failedDocuments = failedDocumentsDecoded0
    }
}

extension KendraClientTypes.BatchPutDocumentResponseFailedDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension KendraClientTypes {
    /// Provides information about a document that could not be indexed.
    public struct BatchPutDocumentResponseFailedDocument: Swift.Equatable {
        /// The type of error that caused the document to fail to be indexed.
        public var errorCode: KendraClientTypes.ErrorCode?
        /// A description of the reason why the document could not be indexed.
        public var errorMessage: Swift.String?
        /// The unique identifier of the document.
        public var id: Swift.String?

        public init (
            errorCode: KendraClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.id = id
        }
    }

}

extension KendraClientTypes.CapacityUnitsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryCapacityUnits = "QueryCapacityUnits"
        case storageCapacityUnits = "StorageCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryCapacityUnits = queryCapacityUnits {
            try encodeContainer.encode(queryCapacityUnits, forKey: .queryCapacityUnits)
        }
        if let storageCapacityUnits = storageCapacityUnits {
            try encodeContainer.encode(storageCapacityUnits, forKey: .storageCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityUnits)
        storageCapacityUnits = storageCapacityUnitsDecoded
        let queryCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queryCapacityUnits)
        queryCapacityUnits = queryCapacityUnitsDecoded
    }
}

extension KendraClientTypes {
    /// Specifies capacity units configured for your enterprise edition index. You can add and remove capacity units to tune an index to your requirements.
    public struct CapacityUnitsConfiguration: Swift.Equatable {
        /// The amount of extra query capacity for an index and [GetQuerySuggestions](https://docs.aws.amazon.com/kendra/latest/dg/API_GetQuerySuggestions.html) capacity. A single extra capacity unit for an index provides 0.1 queries per second or approximately 8,000 queries per day. GetQuerySuggestions capacity is five times the provisioned query capacity for an index, or the base capacity of 2.5 calls per second, whichever is higher. For example, the base capacity for an index is 0.1 queries per second, and GetQuerySuggestions capacity has a base of 2.5 calls per second. If you add another 0.1 queries per second to total 0.2 queries per second for an index, the GetQuerySuggestions capacity is 2.5 calls per second (higher than five times 0.2 queries per second).
        /// This member is required.
        public var queryCapacityUnits: Swift.Int?
        /// The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first.
        /// This member is required.
        public var storageCapacityUnits: Swift.Int?

        public init (
            queryCapacityUnits: Swift.Int? = nil,
            storageCapacityUnits: Swift.Int? = nil
        )
        {
            self.queryCapacityUnits = queryCapacityUnits
            self.storageCapacityUnits = storageCapacityUnits
        }
    }

}

extension ClearQuerySuggestionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension ClearQuerySuggestionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ClearQuerySuggestionsInput: Swift.Equatable {
    /// The identifier of the index you want to clear query suggestions from.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        indexId: Swift.String? = nil
    )
    {
        self.indexId = indexId
    }
}

struct ClearQuerySuggestionsInputBody: Swift.Equatable {
    let indexId: Swift.String?
}

extension ClearQuerySuggestionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension ClearQuerySuggestionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ClearQuerySuggestionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ClearQuerySuggestionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ClearQuerySuggestionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ClearQuerySuggestionsOutputResponse: Swift.Equatable {

}

extension KendraClientTypes.ClickFeedback: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clickTime = "ClickTime"
        case resultId = "ResultId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clickTime = clickTime {
            try encodeContainer.encode(clickTime.timeIntervalSince1970, forKey: .clickTime)
        }
        if let resultId = resultId {
            try encodeContainer.encode(resultId, forKey: .resultId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resultId)
        resultId = resultIdDecoded
        let clickTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .clickTime)
        clickTime = clickTimeDecoded
    }
}

extension KendraClientTypes {
    /// Gathers information about when a particular result was clicked by a user. Your application uses the SubmitFeedback operation to provide click information.
    public struct ClickFeedback: Swift.Equatable {
        /// The Unix timestamp of the date and time that the result was clicked.
        /// This member is required.
        public var clickTime: ClientRuntime.Date?
        /// The unique identifier of the search result that was clicked.
        /// This member is required.
        public var resultId: Swift.String?

        public init (
            clickTime: ClientRuntime.Date? = nil,
            resultId: Swift.String? = nil
        )
        {
            self.clickTime = clickTime
            self.resultId = resultId
        }
    }

}

extension KendraClientTypes.ColumnConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeDetectingColumns = "ChangeDetectingColumns"
        case documentDataColumnName = "DocumentDataColumnName"
        case documentIdColumnName = "DocumentIdColumnName"
        case documentTitleColumnName = "DocumentTitleColumnName"
        case fieldMappings = "FieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeDetectingColumns = changeDetectingColumns {
            var changeDetectingColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .changeDetectingColumns)
            for changedetectingcolumns0 in changeDetectingColumns {
                try changeDetectingColumnsContainer.encode(changedetectingcolumns0)
            }
        }
        if let documentDataColumnName = documentDataColumnName {
            try encodeContainer.encode(documentDataColumnName, forKey: .documentDataColumnName)
        }
        if let documentIdColumnName = documentIdColumnName {
            try encodeContainer.encode(documentIdColumnName, forKey: .documentIdColumnName)
        }
        if let documentTitleColumnName = documentTitleColumnName {
            try encodeContainer.encode(documentTitleColumnName, forKey: .documentTitleColumnName)
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentIdColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentIdColumnName)
        documentIdColumnName = documentIdColumnNameDecoded
        let documentDataColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentDataColumnName)
        documentDataColumnName = documentDataColumnNameDecoded
        let documentTitleColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleColumnName)
        documentTitleColumnName = documentTitleColumnNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
        let changeDetectingColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .changeDetectingColumns)
        var changeDetectingColumnsDecoded0:[Swift.String]? = nil
        if let changeDetectingColumnsContainer = changeDetectingColumnsContainer {
            changeDetectingColumnsDecoded0 = [Swift.String]()
            for string0 in changeDetectingColumnsContainer {
                if let string0 = string0 {
                    changeDetectingColumnsDecoded0?.append(string0)
                }
            }
        }
        changeDetectingColumns = changeDetectingColumnsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides information about how Amazon Kendra should use the columns of a database in an index.
    public struct ColumnConfiguration: Swift.Equatable {
        /// One to five columns that indicate when a document in the database has changed.
        /// This member is required.
        public var changeDetectingColumns: [Swift.String]?
        /// The column that contains the contents of the document.
        /// This member is required.
        public var documentDataColumnName: Swift.String?
        /// The column that provides the document's unique identifier.
        /// This member is required.
        public var documentIdColumnName: Swift.String?
        /// The column that contains the title of the document.
        public var documentTitleColumnName: Swift.String?
        /// An array of objects that map database column names to the corresponding fields in an index. You must first create the fields in the index using the UpdateIndex operation.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?

        public init (
            changeDetectingColumns: [Swift.String]? = nil,
            documentDataColumnName: Swift.String? = nil,
            documentIdColumnName: Swift.String? = nil,
            documentTitleColumnName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        )
        {
            self.changeDetectingColumns = changeDetectingColumns
            self.documentDataColumnName = documentDataColumnName
            self.documentIdColumnName = documentIdColumnName
            self.documentTitleColumnName = documentTitleColumnName
            self.fieldMappings = fieldMappings
        }
    }

}

extension KendraClientTypes {
    public enum ConditionOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case beginswith
        case contains
        case equals
        case exists
        case greaterthan
        case greaterthanorequals
        case lessthan
        case lessthanorequals
        case notcontains
        case notequals
        case notexists
        case sdkUnknown(Swift.String)

        public static var allCases: [ConditionOperator] {
            return [
                .beginswith,
                .contains,
                .equals,
                .exists,
                .greaterthan,
                .greaterthanorequals,
                .lessthan,
                .lessthanorequals,
                .notcontains,
                .notequals,
                .notexists,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .beginswith: return "BeginsWith"
            case .contains: return "Contains"
            case .equals: return "Equals"
            case .exists: return "Exists"
            case .greaterthan: return "GreaterThan"
            case .greaterthanorequals: return "GreaterThanOrEquals"
            case .lessthan: return "LessThan"
            case .lessthanorequals: return "LessThanOrEquals"
            case .notcontains: return "NotContains"
            case .notequals: return "NotEquals"
            case .notexists: return "NotExists"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConditionOperator(rawValue: rawValue) ?? ConditionOperator.sdkUnknown(rawValue)
        }
    }
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KendraClientTypes.ConfluenceAttachmentConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentFieldMappings = "AttachmentFieldMappings"
        case crawlAttachments = "CrawlAttachments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentFieldMappings = attachmentFieldMappings {
            var attachmentFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachmentFieldMappings)
            for confluenceattachmentfieldmappingslist0 in attachmentFieldMappings {
                try attachmentFieldMappingsContainer.encode(confluenceattachmentfieldmappingslist0)
            }
        }
        if crawlAttachments != false {
            try encodeContainer.encode(crawlAttachments, forKey: .crawlAttachments)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlAttachmentsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .crawlAttachments)
        crawlAttachments = crawlAttachmentsDecoded
        let attachmentFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping?].self, forKey: .attachmentFieldMappings)
        var attachmentFieldMappingsDecoded0:[KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping]? = nil
        if let attachmentFieldMappingsContainer = attachmentFieldMappingsContainer {
            attachmentFieldMappingsDecoded0 = [KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping]()
            for structure0 in attachmentFieldMappingsContainer {
                if let structure0 = structure0 {
                    attachmentFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        attachmentFieldMappings = attachmentFieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Specifies the attachment settings for the Confluence data source. Attachment settings are optional, if you don't specify settings attachments, Amazon Kendra won't index them.
    public struct ConfluenceAttachmentConfiguration: Swift.Equatable {
        /// Defines how attachment metadata fields should be mapped to index fields. Before you can map a field, you must first create an index field with a matching type using the console or the UpdateIndex operation. If you specify the AttachentFieldMappings parameter, you must specify at least one field mapping.
        public var attachmentFieldMappings: [KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping]?
        /// Indicates whether Amazon Kendra indexes attachments to the pages and blogs in the Confluence data source.
        public var crawlAttachments: Swift.Bool

        public init (
            attachmentFieldMappings: [KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping]? = nil,
            crawlAttachments: Swift.Bool = false
        )
        {
            self.attachmentFieldMappings = attachmentFieldMappings
            self.crawlAttachments = crawlAttachments
        }
    }

}

extension KendraClientTypes {
    public enum ConfluenceAttachmentFieldName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case author
        case contentType
        case createdDate
        case displayUrl
        case fileSize
        case itemType
        case parentId
        case spaceKey
        case spaceName
        case url
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluenceAttachmentFieldName] {
            return [
                .author,
                .contentType,
                .createdDate,
                .displayUrl,
                .fileSize,
                .itemType,
                .parentId,
                .spaceKey,
                .spaceName,
                .url,
                .version,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .author: return "AUTHOR"
            case .contentType: return "CONTENT_TYPE"
            case .createdDate: return "CREATED_DATE"
            case .displayUrl: return "DISPLAY_URL"
            case .fileSize: return "FILE_SIZE"
            case .itemType: return "ITEM_TYPE"
            case .parentId: return "PARENT_ID"
            case .spaceKey: return "SPACE_KEY"
            case .spaceName: return "SPACE_NAME"
            case .url: return "URL"
            case .version: return "VERSION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfluenceAttachmentFieldName(rawValue: rawValue) ?? ConfluenceAttachmentFieldName.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceFieldName = "DataSourceFieldName"
        case dateFieldFormat = "DateFieldFormat"
        case indexFieldName = "IndexFieldName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceFieldName = dataSourceFieldName {
            try encodeContainer.encode(dataSourceFieldName.rawValue, forKey: .dataSourceFieldName)
        }
        if let dateFieldFormat = dateFieldFormat {
            try encodeContainer.encode(dateFieldFormat, forKey: .dateFieldFormat)
        }
        if let indexFieldName = indexFieldName {
            try encodeContainer.encode(indexFieldName, forKey: .indexFieldName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceFieldNameDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluenceAttachmentFieldName.self, forKey: .dataSourceFieldName)
        dataSourceFieldName = dataSourceFieldNameDecoded
        let dateFieldFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dateFieldFormat)
        dateFieldFormat = dateFieldFormatDecoded
        let indexFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexFieldName)
        indexFieldName = indexFieldNameDecoded
    }
}

extension KendraClientTypes {
    /// Defines the mapping between a field in the Confluence data source to a Amazon Kendra index field. You must first create the index field using the UpdateIndex operation.
    public struct ConfluenceAttachmentToIndexFieldMapping: Swift.Equatable {
        /// The name of the field in the data source. You must first create the index field using the UpdateIndex operation.
        public var dataSourceFieldName: KendraClientTypes.ConfluenceAttachmentFieldName?
        /// The format for date fields in the data source. If the field specified in DataSourceFieldName is a date field you must specify the date format. If the field is not a date field, an exception is thrown.
        public var dateFieldFormat: Swift.String?
        /// The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.
        public var indexFieldName: Swift.String?

        public init (
            dataSourceFieldName: KendraClientTypes.ConfluenceAttachmentFieldName? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }

}

extension KendraClientTypes.ConfluenceBlogConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blogFieldMappings = "BlogFieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blogFieldMappings = blogFieldMappings {
            var blogFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blogFieldMappings)
            for confluenceblogfieldmappingslist0 in blogFieldMappings {
                try blogFieldMappingsContainer.encode(confluenceblogfieldmappingslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blogFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ConfluenceBlogToIndexFieldMapping?].self, forKey: .blogFieldMappings)
        var blogFieldMappingsDecoded0:[KendraClientTypes.ConfluenceBlogToIndexFieldMapping]? = nil
        if let blogFieldMappingsContainer = blogFieldMappingsContainer {
            blogFieldMappingsDecoded0 = [KendraClientTypes.ConfluenceBlogToIndexFieldMapping]()
            for structure0 in blogFieldMappingsContainer {
                if let structure0 = structure0 {
                    blogFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        blogFieldMappings = blogFieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Specifies the blog settings for the Confluence data source. Blogs are always indexed unless filtered from the index by the ExclusionPatterns or InclusionPatterns fields in the ConfluenceConfiguration type.
    public struct ConfluenceBlogConfiguration: Swift.Equatable {
        /// Defines how blog metadata fields should be mapped to index fields. Before you can map a field, you must first create an index field with a matching type using the console or the UpdateIndex operation. If you specify the BlogFieldMappings parameter, you must specify at least one field mapping.
        public var blogFieldMappings: [KendraClientTypes.ConfluenceBlogToIndexFieldMapping]?

        public init (
            blogFieldMappings: [KendraClientTypes.ConfluenceBlogToIndexFieldMapping]? = nil
        )
        {
            self.blogFieldMappings = blogFieldMappings
        }
    }

}

extension KendraClientTypes {
    public enum ConfluenceBlogFieldName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case author
        case displayUrl
        case itemType
        case labels
        case publishDate
        case spaceKey
        case spaceName
        case url
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluenceBlogFieldName] {
            return [
                .author,
                .displayUrl,
                .itemType,
                .labels,
                .publishDate,
                .spaceKey,
                .spaceName,
                .url,
                .version,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .author: return "AUTHOR"
            case .displayUrl: return "DISPLAY_URL"
            case .itemType: return "ITEM_TYPE"
            case .labels: return "LABELS"
            case .publishDate: return "PUBLISH_DATE"
            case .spaceKey: return "SPACE_KEY"
            case .spaceName: return "SPACE_NAME"
            case .url: return "URL"
            case .version: return "VERSION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfluenceBlogFieldName(rawValue: rawValue) ?? ConfluenceBlogFieldName.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ConfluenceBlogToIndexFieldMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceFieldName = "DataSourceFieldName"
        case dateFieldFormat = "DateFieldFormat"
        case indexFieldName = "IndexFieldName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceFieldName = dataSourceFieldName {
            try encodeContainer.encode(dataSourceFieldName.rawValue, forKey: .dataSourceFieldName)
        }
        if let dateFieldFormat = dateFieldFormat {
            try encodeContainer.encode(dateFieldFormat, forKey: .dateFieldFormat)
        }
        if let indexFieldName = indexFieldName {
            try encodeContainer.encode(indexFieldName, forKey: .indexFieldName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceFieldNameDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluenceBlogFieldName.self, forKey: .dataSourceFieldName)
        dataSourceFieldName = dataSourceFieldNameDecoded
        let dateFieldFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dateFieldFormat)
        dateFieldFormat = dateFieldFormatDecoded
        let indexFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexFieldName)
        indexFieldName = indexFieldNameDecoded
    }
}

extension KendraClientTypes {
    /// Defines the mapping between a blog field in the Confluence data source to a Amazon Kendra index field. You must first create the index field using the UpdateIndex operation.
    public struct ConfluenceBlogToIndexFieldMapping: Swift.Equatable {
        /// The name of the field in the data source.
        public var dataSourceFieldName: KendraClientTypes.ConfluenceBlogFieldName?
        /// The format for date fields in the data source. If the field specified in DataSourceFieldName is a date field you must specify the date format. If the field is not a date field, an exception is thrown.
        public var dateFieldFormat: Swift.String?
        /// The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.
        public var indexFieldName: Swift.String?

        public init (
            dataSourceFieldName: KendraClientTypes.ConfluenceBlogFieldName? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }

}

extension KendraClientTypes.ConfluenceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentConfiguration = "AttachmentConfiguration"
        case blogConfiguration = "BlogConfiguration"
        case exclusionPatterns = "ExclusionPatterns"
        case inclusionPatterns = "InclusionPatterns"
        case pageConfiguration = "PageConfiguration"
        case secretArn = "SecretArn"
        case serverUrl = "ServerUrl"
        case spaceConfiguration = "SpaceConfiguration"
        case version = "Version"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentConfiguration = attachmentConfiguration {
            try encodeContainer.encode(attachmentConfiguration, forKey: .attachmentConfiguration)
        }
        if let blogConfiguration = blogConfiguration {
            try encodeContainer.encode(blogConfiguration, forKey: .blogConfiguration)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let pageConfiguration = pageConfiguration {
            try encodeContainer.encode(pageConfiguration, forKey: .pageConfiguration)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let serverUrl = serverUrl {
            try encodeContainer.encode(serverUrl, forKey: .serverUrl)
        }
        if let spaceConfiguration = spaceConfiguration {
            try encodeContainer.encode(spaceConfiguration, forKey: .spaceConfiguration)
        }
        if let version = version {
            try encodeContainer.encode(version.rawValue, forKey: .version)
        }
        if let vpcConfiguration = vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverUrl)
        serverUrl = serverUrlDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluenceVersion.self, forKey: .version)
        version = versionDecoded
        let spaceConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluenceSpaceConfiguration.self, forKey: .spaceConfiguration)
        spaceConfiguration = spaceConfigurationDecoded
        let pageConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluencePageConfiguration.self, forKey: .pageConfiguration)
        pageConfiguration = pageConfigurationDecoded
        let blogConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluenceBlogConfiguration.self, forKey: .blogConfiguration)
        blogConfiguration = blogConfigurationDecoded
        let attachmentConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluenceAttachmentConfiguration.self, forKey: .attachmentConfiguration)
        attachmentConfiguration = attachmentConfigurationDecoded
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides configuration information for data sources that connect to Confluence.
    public struct ConfluenceConfiguration: Swift.Equatable {
        /// Specifies configuration information for indexing attachments to Confluence blogs and pages.
        public var attachmentConfiguration: KendraClientTypes.ConfluenceAttachmentConfiguration?
        /// Specifies configuration information for indexing Confluence blogs.
        public var blogConfiguration: KendraClientTypes.ConfluenceBlogConfiguration?
        /// A list of regular expression patterns that apply to a URL on the Confluence server. An exclusion pattern can apply to a blog post, a page, a space, or an attachment. Items that match the pattern are excluded from the index. Items that don't match the pattern are included in the index. If a item matches both an exclusion pattern and an inclusion pattern, the item isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// A list of regular expression patterns that apply to a URL on the Confluence server. An inclusion pattern can apply to a blog post, a page, a space, or an attachment. Items that match the patterns are included in the index. Items that don't match the pattern are excluded from the index. If an item matches both an inclusion pattern and an exclusion pattern, the item isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// Specifies configuration information for indexing Confluence pages.
        public var pageConfiguration: KendraClientTypes.ConfluencePageConfiguration?
        /// The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key/value pairs required to connect to your Confluence server. The secret must contain a JSON structure with the following keys:
        ///
        /// * username - The user name or email address of a user with administrative privileges for the Confluence server.
        ///
        /// * password - The password associated with the user logging in to the Confluence server.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The URL of your Confluence instance. Use the full URL of the server. For example, https://server.example.com:port/. You can also use an IP address, for example, https://192.168.1.113/.
        /// This member is required.
        public var serverUrl: Swift.String?
        /// Specifies configuration information for indexing Confluence spaces.
        public var spaceConfiguration: KendraClientTypes.ConfluenceSpaceConfiguration?
        /// Specifies the version of the Confluence installation that you are connecting to.
        /// This member is required.
        public var version: KendraClientTypes.ConfluenceVersion?
        /// Specifies the information for connecting to an Amazon VPC.
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init (
            attachmentConfiguration: KendraClientTypes.ConfluenceAttachmentConfiguration? = nil,
            blogConfiguration: KendraClientTypes.ConfluenceBlogConfiguration? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            pageConfiguration: KendraClientTypes.ConfluencePageConfiguration? = nil,
            secretArn: Swift.String? = nil,
            serverUrl: Swift.String? = nil,
            spaceConfiguration: KendraClientTypes.ConfluenceSpaceConfiguration? = nil,
            version: KendraClientTypes.ConfluenceVersion? = nil,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.attachmentConfiguration = attachmentConfiguration
            self.blogConfiguration = blogConfiguration
            self.exclusionPatterns = exclusionPatterns
            self.inclusionPatterns = inclusionPatterns
            self.pageConfiguration = pageConfiguration
            self.secretArn = secretArn
            self.serverUrl = serverUrl
            self.spaceConfiguration = spaceConfiguration
            self.version = version
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension KendraClientTypes.ConfluencePageConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageFieldMappings = "PageFieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageFieldMappings = pageFieldMappings {
            var pageFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pageFieldMappings)
            for confluencepagefieldmappingslist0 in pageFieldMappings {
                try pageFieldMappingsContainer.encode(confluencepagefieldmappingslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ConfluencePageToIndexFieldMapping?].self, forKey: .pageFieldMappings)
        var pageFieldMappingsDecoded0:[KendraClientTypes.ConfluencePageToIndexFieldMapping]? = nil
        if let pageFieldMappingsContainer = pageFieldMappingsContainer {
            pageFieldMappingsDecoded0 = [KendraClientTypes.ConfluencePageToIndexFieldMapping]()
            for structure0 in pageFieldMappingsContainer {
                if let structure0 = structure0 {
                    pageFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        pageFieldMappings = pageFieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Specifies the page settings for the Confluence data source.
    public struct ConfluencePageConfiguration: Swift.Equatable {
        /// Defines how page metadata fields should be mapped to index fields. Before you can map a field, you must first create an index field with a matching type using the console or the UpdateIndex operation. If you specify the PageFieldMappings parameter, you must specify at least one field mapping.
        public var pageFieldMappings: [KendraClientTypes.ConfluencePageToIndexFieldMapping]?

        public init (
            pageFieldMappings: [KendraClientTypes.ConfluencePageToIndexFieldMapping]? = nil
        )
        {
            self.pageFieldMappings = pageFieldMappings
        }
    }

}

extension KendraClientTypes {
    public enum ConfluencePageFieldName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case author
        case contentStatus
        case createdDate
        case displayUrl
        case itemType
        case labels
        case modifiedDate
        case parentId
        case spaceKey
        case spaceName
        case url
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluencePageFieldName] {
            return [
                .author,
                .contentStatus,
                .createdDate,
                .displayUrl,
                .itemType,
                .labels,
                .modifiedDate,
                .parentId,
                .spaceKey,
                .spaceName,
                .url,
                .version,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .author: return "AUTHOR"
            case .contentStatus: return "CONTENT_STATUS"
            case .createdDate: return "CREATED_DATE"
            case .displayUrl: return "DISPLAY_URL"
            case .itemType: return "ITEM_TYPE"
            case .labels: return "LABELS"
            case .modifiedDate: return "MODIFIED_DATE"
            case .parentId: return "PARENT_ID"
            case .spaceKey: return "SPACE_KEY"
            case .spaceName: return "SPACE_NAME"
            case .url: return "URL"
            case .version: return "VERSION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfluencePageFieldName(rawValue: rawValue) ?? ConfluencePageFieldName.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ConfluencePageToIndexFieldMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceFieldName = "DataSourceFieldName"
        case dateFieldFormat = "DateFieldFormat"
        case indexFieldName = "IndexFieldName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceFieldName = dataSourceFieldName {
            try encodeContainer.encode(dataSourceFieldName.rawValue, forKey: .dataSourceFieldName)
        }
        if let dateFieldFormat = dateFieldFormat {
            try encodeContainer.encode(dateFieldFormat, forKey: .dateFieldFormat)
        }
        if let indexFieldName = indexFieldName {
            try encodeContainer.encode(indexFieldName, forKey: .indexFieldName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceFieldNameDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluencePageFieldName.self, forKey: .dataSourceFieldName)
        dataSourceFieldName = dataSourceFieldNameDecoded
        let dateFieldFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dateFieldFormat)
        dateFieldFormat = dateFieldFormatDecoded
        let indexFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexFieldName)
        indexFieldName = indexFieldNameDecoded
    }
}

extension KendraClientTypes {
    /// Defines the mapping between a field in the Confluence data source to a Amazon Kendra index field. You must first create the index field using the UpdateIndex operation.
    public struct ConfluencePageToIndexFieldMapping: Swift.Equatable {
        /// The name of the field in the data source.
        public var dataSourceFieldName: KendraClientTypes.ConfluencePageFieldName?
        /// The format for date fields in the data source. If the field specified in DataSourceFieldName is a date field you must specify the date format. If the field is not a date field, an exception is thrown.
        public var dateFieldFormat: Swift.String?
        /// The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.
        public var indexFieldName: Swift.String?

        public init (
            dataSourceFieldName: KendraClientTypes.ConfluencePageFieldName? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }

}

extension KendraClientTypes.ConfluenceSpaceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlArchivedSpaces = "CrawlArchivedSpaces"
        case crawlPersonalSpaces = "CrawlPersonalSpaces"
        case excludeSpaces = "ExcludeSpaces"
        case includeSpaces = "IncludeSpaces"
        case spaceFieldMappings = "SpaceFieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if crawlArchivedSpaces != false {
            try encodeContainer.encode(crawlArchivedSpaces, forKey: .crawlArchivedSpaces)
        }
        if crawlPersonalSpaces != false {
            try encodeContainer.encode(crawlPersonalSpaces, forKey: .crawlPersonalSpaces)
        }
        if let excludeSpaces = excludeSpaces {
            var excludeSpacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeSpaces)
            for confluencespacelist0 in excludeSpaces {
                try excludeSpacesContainer.encode(confluencespacelist0)
            }
        }
        if let includeSpaces = includeSpaces {
            var includeSpacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includeSpaces)
            for confluencespacelist0 in includeSpaces {
                try includeSpacesContainer.encode(confluencespacelist0)
            }
        }
        if let spaceFieldMappings = spaceFieldMappings {
            var spaceFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .spaceFieldMappings)
            for confluencespacefieldmappingslist0 in spaceFieldMappings {
                try spaceFieldMappingsContainer.encode(confluencespacefieldmappingslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlPersonalSpacesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .crawlPersonalSpaces)
        crawlPersonalSpaces = crawlPersonalSpacesDecoded
        let crawlArchivedSpacesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .crawlArchivedSpaces)
        crawlArchivedSpaces = crawlArchivedSpacesDecoded
        let includeSpacesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includeSpaces)
        var includeSpacesDecoded0:[Swift.String]? = nil
        if let includeSpacesContainer = includeSpacesContainer {
            includeSpacesDecoded0 = [Swift.String]()
            for string0 in includeSpacesContainer {
                if let string0 = string0 {
                    includeSpacesDecoded0?.append(string0)
                }
            }
        }
        includeSpaces = includeSpacesDecoded0
        let excludeSpacesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludeSpaces)
        var excludeSpacesDecoded0:[Swift.String]? = nil
        if let excludeSpacesContainer = excludeSpacesContainer {
            excludeSpacesDecoded0 = [Swift.String]()
            for string0 in excludeSpacesContainer {
                if let string0 = string0 {
                    excludeSpacesDecoded0?.append(string0)
                }
            }
        }
        excludeSpaces = excludeSpacesDecoded0
        let spaceFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ConfluenceSpaceToIndexFieldMapping?].self, forKey: .spaceFieldMappings)
        var spaceFieldMappingsDecoded0:[KendraClientTypes.ConfluenceSpaceToIndexFieldMapping]? = nil
        if let spaceFieldMappingsContainer = spaceFieldMappingsContainer {
            spaceFieldMappingsDecoded0 = [KendraClientTypes.ConfluenceSpaceToIndexFieldMapping]()
            for structure0 in spaceFieldMappingsContainer {
                if let structure0 = structure0 {
                    spaceFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        spaceFieldMappings = spaceFieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Specifies the configuration for indexing Confluence spaces.
    public struct ConfluenceSpaceConfiguration: Swift.Equatable {
        /// Specifies whether Amazon Kendra should index archived spaces.
        public var crawlArchivedSpaces: Swift.Bool
        /// Specifies whether Amazon Kendra should index personal spaces. Users can add restrictions to items in personal spaces. If personal spaces are indexed, queries without user context information may return restricted items from a personal space in their results. For more information, see [Filtering on user context](https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html).
        public var crawlPersonalSpaces: Swift.Bool
        /// A list of space keys of Confluence spaces. If you include a key, the blogs, documents, and attachments in the space are not indexed. If a space is in both the ExcludeSpaces and the IncludeSpaces list, the space is excluded.
        public var excludeSpaces: [Swift.String]?
        /// A list of space keys for Confluence spaces. If you include a key, the blogs, documents, and attachments in the space are indexed. Spaces that aren't in the list aren't indexed. A space in the list must exist. Otherwise, Amazon Kendra logs an error when the data source is synchronized. If a space is in both the IncludeSpaces and the ExcludeSpaces list, the space is excluded.
        public var includeSpaces: [Swift.String]?
        /// Defines how space metadata fields should be mapped to index fields. Before you can map a field, you must first create an index field with a matching type using the console or the UpdateIndex operation. If you specify the SpaceFieldMappings parameter, you must specify at least one field mapping.
        public var spaceFieldMappings: [KendraClientTypes.ConfluenceSpaceToIndexFieldMapping]?

        public init (
            crawlArchivedSpaces: Swift.Bool = false,
            crawlPersonalSpaces: Swift.Bool = false,
            excludeSpaces: [Swift.String]? = nil,
            includeSpaces: [Swift.String]? = nil,
            spaceFieldMappings: [KendraClientTypes.ConfluenceSpaceToIndexFieldMapping]? = nil
        )
        {
            self.crawlArchivedSpaces = crawlArchivedSpaces
            self.crawlPersonalSpaces = crawlPersonalSpaces
            self.excludeSpaces = excludeSpaces
            self.includeSpaces = includeSpaces
            self.spaceFieldMappings = spaceFieldMappings
        }
    }

}

extension KendraClientTypes {
    public enum ConfluenceSpaceFieldName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case displayUrl
        case itemType
        case spaceKey
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluenceSpaceFieldName] {
            return [
                .displayUrl,
                .itemType,
                .spaceKey,
                .url,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .displayUrl: return "DISPLAY_URL"
            case .itemType: return "ITEM_TYPE"
            case .spaceKey: return "SPACE_KEY"
            case .url: return "URL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfluenceSpaceFieldName(rawValue: rawValue) ?? ConfluenceSpaceFieldName.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ConfluenceSpaceToIndexFieldMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceFieldName = "DataSourceFieldName"
        case dateFieldFormat = "DateFieldFormat"
        case indexFieldName = "IndexFieldName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceFieldName = dataSourceFieldName {
            try encodeContainer.encode(dataSourceFieldName.rawValue, forKey: .dataSourceFieldName)
        }
        if let dateFieldFormat = dateFieldFormat {
            try encodeContainer.encode(dateFieldFormat, forKey: .dateFieldFormat)
        }
        if let indexFieldName = indexFieldName {
            try encodeContainer.encode(indexFieldName, forKey: .indexFieldName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceFieldNameDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluenceSpaceFieldName.self, forKey: .dataSourceFieldName)
        dataSourceFieldName = dataSourceFieldNameDecoded
        let dateFieldFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dateFieldFormat)
        dateFieldFormat = dateFieldFormatDecoded
        let indexFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexFieldName)
        indexFieldName = indexFieldNameDecoded
    }
}

extension KendraClientTypes {
    /// Defines the mapping between a field in the Confluence data source to a Amazon Kendra index field. You must first create the index field using the UpdateIndex operation.
    public struct ConfluenceSpaceToIndexFieldMapping: Swift.Equatable {
        /// The name of the field in the data source.
        public var dataSourceFieldName: KendraClientTypes.ConfluenceSpaceFieldName?
        /// The format for date fields in the data source. If the field specified in DataSourceFieldName is a date field you must specify the date format. If the field is not a date field, an exception is thrown.
        public var dateFieldFormat: Swift.String?
        /// The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.
        public var indexFieldName: Swift.String?

        public init (
            dataSourceFieldName: KendraClientTypes.ConfluenceSpaceFieldName? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }

}

extension KendraClientTypes {
    public enum ConfluenceVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloud
        case server
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluenceVersion] {
            return [
                .cloud,
                .server,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloud: return "CLOUD"
            case .server: return "SERVER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfluenceVersion(rawValue: rawValue) ?? ConfluenceVersion.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ConnectionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseHost = "DatabaseHost"
        case databaseName = "DatabaseName"
        case databasePort = "DatabasePort"
        case secretArn = "SecretArn"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseHost = databaseHost {
            try encodeContainer.encode(databaseHost, forKey: .databaseHost)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let databasePort = databasePort {
            try encodeContainer.encode(databasePort, forKey: .databasePort)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseHostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseHost)
        databaseHost = databaseHostDecoded
        let databasePortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .databasePort)
        databasePort = databasePortDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
    }
}

extension KendraClientTypes {
    /// Provides the information necessary to connect to a database.
    public struct ConnectionConfiguration: Swift.Equatable {
        /// The name of the host for the database. Can be either a string (host.subdomain.domain.tld) or an IPv4 or IPv6 address.
        /// This member is required.
        public var databaseHost: Swift.String?
        /// The name of the database containing the document data.
        /// This member is required.
        public var databaseName: Swift.String?
        /// The port that the database uses for connections.
        /// This member is required.
        public var databasePort: Swift.Int?
        /// The Amazon Resource Name (ARN) of credentials stored in Secrets Manager. The credentials should be a user/password pair. For more information, see [Using a Database Data Source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-database.html). For more information about Secrets Manager, see [ What Is Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) in the Secrets Manager user guide.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The name of the table that contains the document data.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            databaseHost: Swift.String? = nil,
            databaseName: Swift.String? = nil,
            databasePort: Swift.Int? = nil,
            secretArn: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.databaseHost = databaseHost
            self.databaseName = databaseName
            self.databasePort = databasePort
            self.secretArn = secretArn
            self.tableName = tableName
        }
    }

}

extension KendraClientTypes.ContentSourceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceIds = "DataSourceIds"
        case directPutContent = "DirectPutContent"
        case faqIds = "FaqIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceIds = dataSourceIds {
            var dataSourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSourceIds)
            for datasourceidlist0 in dataSourceIds {
                try dataSourceIdsContainer.encode(datasourceidlist0)
            }
        }
        if directPutContent != false {
            try encodeContainer.encode(directPutContent, forKey: .directPutContent)
        }
        if let faqIds = faqIds {
            var faqIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .faqIds)
            for faqidslist0 in faqIds {
                try faqIdsContainer.encode(faqidslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dataSourceIds)
        var dataSourceIdsDecoded0:[Swift.String]? = nil
        if let dataSourceIdsContainer = dataSourceIdsContainer {
            dataSourceIdsDecoded0 = [Swift.String]()
            for string0 in dataSourceIdsContainer {
                if let string0 = string0 {
                    dataSourceIdsDecoded0?.append(string0)
                }
            }
        }
        dataSourceIds = dataSourceIdsDecoded0
        let faqIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .faqIds)
        var faqIdsDecoded0:[Swift.String]? = nil
        if let faqIdsContainer = faqIdsContainer {
            faqIdsDecoded0 = [Swift.String]()
            for string0 in faqIdsContainer {
                if let string0 = string0 {
                    faqIdsDecoded0?.append(string0)
                }
            }
        }
        faqIds = faqIdsDecoded0
        let directPutContentDecoded = try containerValues.decode(Swift.Bool.self, forKey: .directPutContent)
        directPutContent = directPutContentDecoded
    }
}

extension KendraClientTypes {
    /// Configuration information for your content sources, such as data sources, FAQs, and content indexed directly via [BatchPutDocument](https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html).
    public struct ContentSourceConfiguration: Swift.Equatable {
        /// The identifier of the data sources you want to use for your Amazon Kendra experience.
        public var dataSourceIds: [Swift.String]?
        /// TRUE to use documents you indexed directly using the BatchPutDocument operation.
        public var directPutContent: Swift.Bool
        /// The identifier of the FAQs that you want to use for your Amazon Kendra experience.
        public var faqIds: [Swift.String]?

        public init (
            dataSourceIds: [Swift.String]? = nil,
            directPutContent: Swift.Bool = false,
            faqIds: [Swift.String]? = nil
        )
        {
            self.dataSourceIds = dataSourceIds
            self.directPutContent = directPutContent
            self.faqIds = faqIds
        }
    }

}

extension KendraClientTypes {
    public enum ContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case html
        case msWord
        case pdf
        case plainText
        case ppt
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentType] {
            return [
                .html,
                .msWord,
                .pdf,
                .plainText,
                .ppt,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .html: return "HTML"
            case .msWord: return "MS_WORD"
            case .pdf: return "PDF"
            case .plainText: return "PLAIN_TEXT"
            case .ppt: return "PPT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContentType(rawValue: rawValue) ?? ContentType.sdkUnknown(rawValue)
        }
    }
}

extension CreateDataSourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case configuration = "Configuration"
        case customDocumentEnrichmentConfiguration = "CustomDocumentEnrichmentConfiguration"
        case description = "Description"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case schedule = "Schedule"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration {
            try encodeContainer.encode(customDocumentEnrichmentConfiguration, forKey: .customDocumentEnrichmentConfiguration)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension CreateDataSourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDataSourceInput: Swift.Equatable {
    /// A token that you provide to identify the request to create a data source. Multiple calls to the CreateDataSource operation with the same client token will create only one data source.
    public var clientToken: Swift.String?
    /// The connector configuration information that is required to access the repository. You can't specify the Configuration parameter when the Type parameter is set to CUSTOM. If you do, you receive a ValidationException exception. The Configuration parameter is required for all other data sources.
    public var configuration: KendraClientTypes.DataSourceConfiguration?
    /// Configuration information for altering document metadata and content during the document ingestion process when you create a data source. For more information on how to create, modify and delete document metadata, or make other content alterations when you ingest documents into Amazon Kendra, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public var customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
    /// A description for the data source.
    public var description: Swift.String?
    /// The identifier of the index that should be associated with this data source.
    /// This member is required.
    public var indexId: Swift.String?
    /// The code for a language. This allows you to support a language for all documents when creating the data source. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// A unique name for the data source. A data source name can't be changed without deleting and recreating the data source.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source. For more information, see [IAM Roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html). You can't specify the RoleArn parameter when the Type parameter is set to CUSTOM. If you do, you receive a ValidationException exception. The RoleArn parameter is required for all other data sources.
    public var roleArn: Swift.String?
    /// Sets the frequency that Amazon Kendra will check the documents in your repository and update the index. If you don't set a schedule Amazon Kendra will not periodically update the index. You can call the StartDataSourceSyncJob operation to update the index. You can't specify the Schedule parameter when the Type parameter is set to CUSTOM. If you do, you receive a ValidationException exception.
    public var schedule: Swift.String?
    /// A list of key-value pairs that identify the data source. You can use the tags to identify and organize your resources and to control access to resources.
    public var tags: [KendraClientTypes.Tag]?
    /// The type of repository that contains the data source.
    /// This member is required.
    public var type: KendraClientTypes.DataSourceType?

    public init (
        clientToken: Swift.String? = nil,
        configuration: KendraClientTypes.DataSourceConfiguration? = nil,
        customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration? = nil,
        description: Swift.String? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schedule: Swift.String? = nil,
        tags: [KendraClientTypes.Tag]? = nil,
        type: KendraClientTypes.DataSourceType? = nil
    )
    {
        self.clientToken = clientToken
        self.configuration = configuration
        self.customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration
        self.description = description
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.schedule = schedule
        self.tags = tags
        self.type = type
    }
}

struct CreateDataSourceInputBody: Swift.Equatable {
    let name: Swift.String?
    let indexId: Swift.String?
    let type: KendraClientTypes.DataSourceType?
    let configuration: KendraClientTypes.DataSourceConfiguration?
    let description: Swift.String?
    let schedule: Swift.String?
    let roleArn: Swift.String?
    let tags: [KendraClientTypes.Tag]?
    let clientToken: Swift.String?
    let languageCode: Swift.String?
    let customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
}

extension CreateDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case configuration = "Configuration"
        case customDocumentEnrichmentConfiguration = "CustomDocumentEnrichmentConfiguration"
        case description = "Description"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case schedule = "Schedule"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceType.self, forKey: .type)
        type = typeDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KendraClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KendraClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let customDocumentEnrichmentConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.CustomDocumentEnrichmentConfiguration.self, forKey: .customDocumentEnrichmentConfiguration)
        customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfigurationDecoded
    }
}

extension CreateDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistException" : self = .resourceAlreadyExistException(try ResourceAlreadyExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDataSourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceAlreadyExistException(ResourceAlreadyExistException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDataSourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
        } else {
            self.id = nil
        }
    }
}

public struct CreateDataSourceOutputResponse: Swift.Equatable {
    /// A unique identifier for the data source.
    /// This member is required.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct CreateDataSourceOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
}

extension CreateDataSourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension CreateExperienceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case configuration = "Configuration"
        case description = "Description"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension CreateExperienceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateExperienceInput: Swift.Equatable {
    /// A token that you provide to identify the request to create your Amazon Kendra experience. Multiple calls to the CreateExperience operation with the same client token creates only one Amazon Kendra experience.
    public var clientToken: Swift.String?
    /// Provides the configuration information for your Amazon Kendra experience. This includes ContentSourceConfiguration, which specifies the data source IDs and/or FAQ IDs, and UserIdentityConfiguration, which specifies the user or group information to grant access to your Amazon Kendra experience.
    public var configuration: KendraClientTypes.ExperienceConfiguration?
    /// A description for your Amazon Kendra experience.
    public var description: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// A name for your Amazon Kendra experience.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access Query operations, QuerySuggestions operations, SubmitFeedback operations, and Amazon Web Services SSO that stores your user and group information. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    public var roleArn: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        configuration: KendraClientTypes.ExperienceConfiguration? = nil,
        description: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.configuration = configuration
        self.description = description
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
    }
}

struct CreateExperienceInputBody: Swift.Equatable {
    let name: Swift.String?
    let indexId: Swift.String?
    let roleArn: Swift.String?
    let configuration: KendraClientTypes.ExperienceConfiguration?
    let description: Swift.String?
    let clientToken: Swift.String?
}

extension CreateExperienceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case configuration = "Configuration"
        case description = "Description"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ExperienceConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateExperienceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateExperienceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateExperienceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateExperienceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateExperienceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
        } else {
            self.id = nil
        }
    }
}

public struct CreateExperienceOutputResponse: Swift.Equatable {
    /// The identifier for your created Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct CreateExperienceOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
}

extension CreateExperienceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension CreateFaqInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case fileFormat = "FileFormat"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case s3Path = "S3Path"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fileFormat = fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let s3Path = s3Path {
            try encodeContainer.encode(s3Path, forKey: .s3Path)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateFaqInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateFaqInput: Swift.Equatable {
    /// A token that you provide to identify the request to create a FAQ. Multiple calls to the CreateFaqRequest operation with the same client token will create only one FAQ.
    public var clientToken: Swift.String?
    /// A description of the FAQ.
    public var description: Swift.String?
    /// The format of the input file. You can choose between a basic CSV format, a CSV format that includes customs attributes in a header, and a JSON format that includes custom attributes. The format must match the format of the file stored in the S3 bucket identified in the S3Path parameter. For more information, see [Adding questions and answers](https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html).
    public var fileFormat: KendraClientTypes.FaqFileFormat?
    /// The identifier of the index that contains the FAQ.
    /// This member is required.
    public var indexId: Swift.String?
    /// The code for a language. This allows you to support a language for the FAQ document. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// The name that should be associated with the FAQ.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the S3 bucket that contains the FAQs. For more information, see [IAM Roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    /// This member is required.
    public var roleArn: Swift.String?
    /// The S3 location of the FAQ input data.
    /// This member is required.
    public var s3Path: KendraClientTypes.S3Path?
    /// A list of key-value pairs that identify the FAQ. You can use the tags to identify and organize your resources and to control access to resources.
    public var tags: [KendraClientTypes.Tag]?

    public init (
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        fileFormat: KendraClientTypes.FaqFileFormat? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        s3Path: KendraClientTypes.S3Path? = nil,
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.fileFormat = fileFormat
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.s3Path = s3Path
        self.tags = tags
    }
}

struct CreateFaqInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let s3Path: KendraClientTypes.S3Path?
    let roleArn: Swift.String?
    let tags: [KendraClientTypes.Tag]?
    let fileFormat: KendraClientTypes.FaqFileFormat?
    let clientToken: Swift.String?
    let languageCode: Swift.String?
}

extension CreateFaqInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case fileFormat = "FileFormat"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case s3Path = "S3Path"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let s3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .s3Path)
        s3Path = s3PathDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KendraClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KendraClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fileFormatDecoded = try containerValues.decodeIfPresent(KendraClientTypes.FaqFileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension CreateFaqOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFaqOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateFaqOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFaqOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateFaqOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
        } else {
            self.id = nil
        }
    }
}

public struct CreateFaqOutputResponse: Swift.Equatable {
    /// The unique identifier of the FAQ.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct CreateFaqOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
}

extension CreateFaqOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension CreateIndexInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case edition = "Edition"
        case name = "Name"
        case roleArn = "RoleArn"
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        case tags = "Tags"
        case userContextPolicy = "UserContextPolicy"
        case userGroupResolutionConfiguration = "UserGroupResolutionConfiguration"
        case userTokenConfigurations = "UserTokenConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let edition = edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideEncryptionConfiguration = serverSideEncryptionConfiguration {
            try encodeContainer.encode(serverSideEncryptionConfiguration, forKey: .serverSideEncryptionConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let userContextPolicy = userContextPolicy {
            try encodeContainer.encode(userContextPolicy.rawValue, forKey: .userContextPolicy)
        }
        if let userGroupResolutionConfiguration = userGroupResolutionConfiguration {
            try encodeContainer.encode(userGroupResolutionConfiguration, forKey: .userGroupResolutionConfiguration)
        }
        if let userTokenConfigurations = userTokenConfigurations {
            var userTokenConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userTokenConfigurations)
            for usertokenconfigurationlist0 in userTokenConfigurations {
                try userTokenConfigurationsContainer.encode(usertokenconfigurationlist0)
            }
        }
    }
}

extension CreateIndexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateIndexInput: Swift.Equatable {
    /// A token that you provide to identify the request to create an index. Multiple calls to the CreateIndex operation with the same client token will create only one index.
    public var clientToken: Swift.String?
    /// A description for the index.
    public var description: Swift.String?
    /// The Amazon Kendra edition to use for the index. Choose DEVELOPER_EDITION for indexes intended for development, testing, or proof of concept. Use ENTERPRISE_EDITION for your production databases. Once you set the edition for an index, it can't be changed. The Edition parameter is optional. If you don't supply a value, the default is ENTERPRISE_EDITION. For more information on quota limits for enterprise and developer editions, see [Quotas](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    public var edition: KendraClientTypes.IndexEdition?
    /// The name for the new index.
    /// This member is required.
    public var name: Swift.String?
    /// An Identity and Access Management(IAM) role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role used when you use the BatchPutDocument operation to index documents from an Amazon S3 bucket.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The identifier of the KMScustomer managed key (CMK) to use to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.
    public var serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration?
    /// A list of key-value pairs that identify the index. You can use the tags to identify and organize your resources and to control access to resources.
    public var tags: [KendraClientTypes.Tag]?
    /// The user context policy. ATTRIBUTE_FILTER All indexed content is searchable and displayable for all users. If you want to filter search results on user context, you can use the attribute filters of _user_id and _group_ids or you can provide user and group information in UserContext. USER_TOKEN Enables token-based user access control to filter search results on user context. All documents with no access control and all documents accessible to the user will be searchable and displayable.
    public var userContextPolicy: KendraClientTypes.UserContextPolicy?
    /// Enables fetching access levels of groups and users from an Amazon Web Services Single Sign On identity source. To configure this, see [UserGroupResolutionConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_UserGroupResolutionConfiguration.html).
    public var userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
    /// The user token configuration.
    public var userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?

    public init (
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        edition: KendraClientTypes.IndexEdition? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration? = nil,
        tags: [KendraClientTypes.Tag]? = nil,
        userContextPolicy: KendraClientTypes.UserContextPolicy? = nil,
        userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration? = nil,
        userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.edition = edition
        self.name = name
        self.roleArn = roleArn
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        self.tags = tags
        self.userContextPolicy = userContextPolicy
        self.userGroupResolutionConfiguration = userGroupResolutionConfiguration
        self.userTokenConfigurations = userTokenConfigurations
    }
}

struct CreateIndexInputBody: Swift.Equatable {
    let name: Swift.String?
    let edition: KendraClientTypes.IndexEdition?
    let roleArn: Swift.String?
    let serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration?
    let description: Swift.String?
    let clientToken: Swift.String?
    let tags: [KendraClientTypes.Tag]?
    let userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?
    let userContextPolicy: KendraClientTypes.UserContextPolicy?
    let userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
}

extension CreateIndexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case edition = "Edition"
        case name = "Name"
        case roleArn = "RoleArn"
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        case tags = "Tags"
        case userContextPolicy = "UserContextPolicy"
        case userGroupResolutionConfiguration = "UserGroupResolutionConfiguration"
        case userTokenConfigurations = "UserTokenConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let editionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.IndexEdition.self, forKey: .edition)
        edition = editionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KendraClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KendraClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let userTokenConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.UserTokenConfiguration?].self, forKey: .userTokenConfigurations)
        var userTokenConfigurationsDecoded0:[KendraClientTypes.UserTokenConfiguration]? = nil
        if let userTokenConfigurationsContainer = userTokenConfigurationsContainer {
            userTokenConfigurationsDecoded0 = [KendraClientTypes.UserTokenConfiguration]()
            for structure0 in userTokenConfigurationsContainer {
                if let structure0 = structure0 {
                    userTokenConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        userTokenConfigurations = userTokenConfigurationsDecoded0
        let userContextPolicyDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserContextPolicy.self, forKey: .userContextPolicy)
        userContextPolicy = userContextPolicyDecoded
        let userGroupResolutionConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserGroupResolutionConfiguration.self, forKey: .userGroupResolutionConfiguration)
        userGroupResolutionConfiguration = userGroupResolutionConfigurationDecoded
    }
}

extension CreateIndexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateIndexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistException" : self = .resourceAlreadyExistException(try ResourceAlreadyExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateIndexOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceAlreadyExistException(ResourceAlreadyExistException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateIndexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateIndexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
        } else {
            self.id = nil
        }
    }
}

public struct CreateIndexOutputResponse: Swift.Equatable {
    /// The unique identifier of the index. Use this identifier when you query an index, set up a data source, or index a document.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct CreateIndexOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
}

extension CreateIndexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension CreateQuerySuggestionsBlockListInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sourceS3Path = sourceS3Path {
            try encodeContainer.encode(sourceS3Path, forKey: .sourceS3Path)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateQuerySuggestionsBlockListInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateQuerySuggestionsBlockListInput: Swift.Equatable {
    /// A token that you provide to identify the request to create a query suggestions block list.
    public var clientToken: Swift.String?
    /// A user-friendly description for the block list. For example, the description "List of all offensive words that can appear in user queries and need to be blocked from suggestions."
    public var description: Swift.String?
    /// The identifier of the index you want to create a query suggestions block list for.
    /// This member is required.
    public var indexId: Swift.String?
    /// A user friendly name for the block list. For example, the block list named 'offensive-words' includes all offensive words that could appear in user queries and need to be blocked from suggestions.
    /// This member is required.
    public var name: Swift.String?
    /// The IAM (Identity and Access Management) role used by Amazon Kendra to access the block list text file in your S3 bucket. You need permissions to the role ARN (Amazon Resource Name). The role needs S3 read permissions to your file in S3 and needs to give STS (Security Token Service) assume role permissions to Amazon Kendra.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The S3 path to your block list text file in your S3 bucket. Each block word or phrase should be on a separate line in a text file. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    /// This member is required.
    public var sourceS3Path: KendraClientTypes.S3Path?
    /// A tag that you can assign to a block list that categorizes the block list.
    public var tags: [KendraClientTypes.Tag]?

    public init (
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil,
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
        self.tags = tags
    }
}

struct CreateQuerySuggestionsBlockListInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let sourceS3Path: KendraClientTypes.S3Path?
    let clientToken: Swift.String?
    let roleArn: Swift.String?
    let tags: [KendraClientTypes.Tag]?
}

extension CreateQuerySuggestionsBlockListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .sourceS3Path)
        sourceS3Path = sourceS3PathDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KendraClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KendraClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateQuerySuggestionsBlockListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateQuerySuggestionsBlockListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateQuerySuggestionsBlockListOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateQuerySuggestionsBlockListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateQuerySuggestionsBlockListOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
        } else {
            self.id = nil
        }
    }
}

public struct CreateQuerySuggestionsBlockListOutputResponse: Swift.Equatable {
    /// The unique identifier of the created block list.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct CreateQuerySuggestionsBlockListOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
}

extension CreateQuerySuggestionsBlockListOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension CreateThesaurusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sourceS3Path = sourceS3Path {
            try encodeContainer.encode(sourceS3Path, forKey: .sourceS3Path)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateThesaurusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateThesaurusInput: Swift.Equatable {
    /// A token that you provide to identify the request to create a thesaurus. Multiple calls to the CreateThesaurus operation with the same client token will create only one thesaurus.
    public var clientToken: Swift.String?
    /// The description for the new thesaurus.
    public var description: Swift.String?
    /// The unique identifier of the index for the new thesaurus.
    /// This member is required.
    public var indexId: Swift.String?
    /// The name for the new thesaurus.
    /// This member is required.
    public var name: Swift.String?
    /// An IAM role that gives Amazon Kendra permissions to access thesaurus file specified in SourceS3Path.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The thesaurus file Amazon S3 source path.
    /// This member is required.
    public var sourceS3Path: KendraClientTypes.S3Path?
    /// A list of key-value pairs that identify the thesaurus. You can use the tags to identify and organize your resources and to control access to resources.
    public var tags: [KendraClientTypes.Tag]?

    public init (
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil,
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
        self.tags = tags
    }
}

struct CreateThesaurusInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let roleArn: Swift.String?
    let tags: [KendraClientTypes.Tag]?
    let sourceS3Path: KendraClientTypes.S3Path?
    let clientToken: Swift.String?
}

extension CreateThesaurusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KendraClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KendraClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let sourceS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .sourceS3Path)
        sourceS3Path = sourceS3PathDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateThesaurusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateThesaurusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateThesaurusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateThesaurusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateThesaurusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
        } else {
            self.id = nil
        }
    }
}

public struct CreateThesaurusOutputResponse: Swift.Equatable {
    /// The unique identifier of the thesaurus.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct CreateThesaurusOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
}

extension CreateThesaurusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension KendraClientTypes.CustomDocumentEnrichmentConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inlineConfigurations = "InlineConfigurations"
        case postExtractionHookConfiguration = "PostExtractionHookConfiguration"
        case preExtractionHookConfiguration = "PreExtractionHookConfiguration"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inlineConfigurations = inlineConfigurations {
            var inlineConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inlineConfigurations)
            for inlinecustomdocumentenrichmentconfigurationlist0 in inlineConfigurations {
                try inlineConfigurationsContainer.encode(inlinecustomdocumentenrichmentconfigurationlist0)
            }
        }
        if let postExtractionHookConfiguration = postExtractionHookConfiguration {
            try encodeContainer.encode(postExtractionHookConfiguration, forKey: .postExtractionHookConfiguration)
        }
        if let preExtractionHookConfiguration = preExtractionHookConfiguration {
            try encodeContainer.encode(preExtractionHookConfiguration, forKey: .preExtractionHookConfiguration)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inlineConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration?].self, forKey: .inlineConfigurations)
        var inlineConfigurationsDecoded0:[KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration]? = nil
        if let inlineConfigurationsContainer = inlineConfigurationsContainer {
            inlineConfigurationsDecoded0 = [KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration]()
            for structure0 in inlineConfigurationsContainer {
                if let structure0 = structure0 {
                    inlineConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        inlineConfigurations = inlineConfigurationsDecoded0
        let preExtractionHookConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.HookConfiguration.self, forKey: .preExtractionHookConfiguration)
        preExtractionHookConfiguration = preExtractionHookConfigurationDecoded
        let postExtractionHookConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.HookConfiguration.self, forKey: .postExtractionHookConfiguration)
        postExtractionHookConfiguration = postExtractionHookConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information for altering document metadata and content during the document ingestion process. For more information, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public struct CustomDocumentEnrichmentConfiguration: Swift.Equatable {
        /// Configuration information to alter document attributes or metadata fields and content when ingesting documents into Amazon Kendra.
        public var inlineConfigurations: [KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration]?
        /// Configuration information for invoking a Lambda function in Lambda on the structured documents with their metadata and text extracted. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see [Advanced data manipulation](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation).
        public var postExtractionHookConfiguration: KendraClientTypes.HookConfiguration?
        /// Configuration information for invoking a Lambda function in Lambda on the original or raw documents before extracting their metadata and text. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see [Advanced data manipulation](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation).
        public var preExtractionHookConfiguration: KendraClientTypes.HookConfiguration?
        /// The Amazon Resource Name (ARN) of a role with permission to run PreExtractionHookConfiguration and PostExtractionHookConfiguration for altering document metadata and content during the document ingestion process. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
        public var roleArn: Swift.String?

        public init (
            inlineConfigurations: [KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration]? = nil,
            postExtractionHookConfiguration: KendraClientTypes.HookConfiguration? = nil,
            preExtractionHookConfiguration: KendraClientTypes.HookConfiguration? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.inlineConfigurations = inlineConfigurations
            self.postExtractionHookConfiguration = postExtractionHookConfiguration
            self.preExtractionHookConfiguration = preExtractionHookConfiguration
            self.roleArn = roleArn
        }
    }

}

extension KendraClientTypes.DataSourceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confluenceConfiguration = "ConfluenceConfiguration"
        case databaseConfiguration = "DatabaseConfiguration"
        case googleDriveConfiguration = "GoogleDriveConfiguration"
        case oneDriveConfiguration = "OneDriveConfiguration"
        case s3Configuration = "S3Configuration"
        case salesforceConfiguration = "SalesforceConfiguration"
        case serviceNowConfiguration = "ServiceNowConfiguration"
        case sharePointConfiguration = "SharePointConfiguration"
        case webCrawlerConfiguration = "WebCrawlerConfiguration"
        case workDocsConfiguration = "WorkDocsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confluenceConfiguration = confluenceConfiguration {
            try encodeContainer.encode(confluenceConfiguration, forKey: .confluenceConfiguration)
        }
        if let databaseConfiguration = databaseConfiguration {
            try encodeContainer.encode(databaseConfiguration, forKey: .databaseConfiguration)
        }
        if let googleDriveConfiguration = googleDriveConfiguration {
            try encodeContainer.encode(googleDriveConfiguration, forKey: .googleDriveConfiguration)
        }
        if let oneDriveConfiguration = oneDriveConfiguration {
            try encodeContainer.encode(oneDriveConfiguration, forKey: .oneDriveConfiguration)
        }
        if let s3Configuration = s3Configuration {
            try encodeContainer.encode(s3Configuration, forKey: .s3Configuration)
        }
        if let salesforceConfiguration = salesforceConfiguration {
            try encodeContainer.encode(salesforceConfiguration, forKey: .salesforceConfiguration)
        }
        if let serviceNowConfiguration = serviceNowConfiguration {
            try encodeContainer.encode(serviceNowConfiguration, forKey: .serviceNowConfiguration)
        }
        if let sharePointConfiguration = sharePointConfiguration {
            try encodeContainer.encode(sharePointConfiguration, forKey: .sharePointConfiguration)
        }
        if let webCrawlerConfiguration = webCrawlerConfiguration {
            try encodeContainer.encode(webCrawlerConfiguration, forKey: .webCrawlerConfiguration)
        }
        if let workDocsConfiguration = workDocsConfiguration {
            try encodeContainer.encode(workDocsConfiguration, forKey: .workDocsConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3DataSourceConfiguration.self, forKey: .s3Configuration)
        s3Configuration = s3ConfigurationDecoded
        let sharePointConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SharePointConfiguration.self, forKey: .sharePointConfiguration)
        sharePointConfiguration = sharePointConfigurationDecoded
        let databaseConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DatabaseConfiguration.self, forKey: .databaseConfiguration)
        databaseConfiguration = databaseConfigurationDecoded
        let salesforceConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SalesforceConfiguration.self, forKey: .salesforceConfiguration)
        salesforceConfiguration = salesforceConfigurationDecoded
        let oneDriveConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.OneDriveConfiguration.self, forKey: .oneDriveConfiguration)
        oneDriveConfiguration = oneDriveConfigurationDecoded
        let serviceNowConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ServiceNowConfiguration.self, forKey: .serviceNowConfiguration)
        serviceNowConfiguration = serviceNowConfigurationDecoded
        let confluenceConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluenceConfiguration.self, forKey: .confluenceConfiguration)
        confluenceConfiguration = confluenceConfigurationDecoded
        let googleDriveConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.GoogleDriveConfiguration.self, forKey: .googleDriveConfiguration)
        googleDriveConfiguration = googleDriveConfigurationDecoded
        let webCrawlerConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.WebCrawlerConfiguration.self, forKey: .webCrawlerConfiguration)
        webCrawlerConfiguration = webCrawlerConfigurationDecoded
        let workDocsConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.WorkDocsConfiguration.self, forKey: .workDocsConfiguration)
        workDocsConfiguration = workDocsConfigurationDecoded
    }
}

extension KendraClientTypes {
    /// Configuration information for an Amazon Kendra data source.
    public struct DataSourceConfiguration: Swift.Equatable {
        /// Provides configuration information for connecting to a Confluence data source.
        public var confluenceConfiguration: KendraClientTypes.ConfluenceConfiguration?
        /// Provides information necessary to create a data source connector for a database.
        public var databaseConfiguration: KendraClientTypes.DatabaseConfiguration?
        /// Provides configuration for data sources that connect to Google Drive.
        public var googleDriveConfiguration: KendraClientTypes.GoogleDriveConfiguration?
        /// Provides configuration for data sources that connect to Microsoft OneDrive.
        public var oneDriveConfiguration: KendraClientTypes.OneDriveConfiguration?
        /// Provides information to create a data source connector for a document repository in an Amazon S3 bucket.
        public var s3Configuration: KendraClientTypes.S3DataSourceConfiguration?
        /// Provides configuration information for data sources that connect to a Salesforce site.
        public var salesforceConfiguration: KendraClientTypes.SalesforceConfiguration?
        /// Provides configuration for data sources that connect to ServiceNow instances.
        public var serviceNowConfiguration: KendraClientTypes.ServiceNowConfiguration?
        /// Provides information necessary to create a data source connector for a Microsoft SharePoint site.
        public var sharePointConfiguration: KendraClientTypes.SharePointConfiguration?
        /// Provides the configuration information required for Amazon Kendra Web Crawler.
        public var webCrawlerConfiguration: KendraClientTypes.WebCrawlerConfiguration?
        /// Provides the configuration information to connect to WorkDocs as your data source.
        public var workDocsConfiguration: KendraClientTypes.WorkDocsConfiguration?

        public init (
            confluenceConfiguration: KendraClientTypes.ConfluenceConfiguration? = nil,
            databaseConfiguration: KendraClientTypes.DatabaseConfiguration? = nil,
            googleDriveConfiguration: KendraClientTypes.GoogleDriveConfiguration? = nil,
            oneDriveConfiguration: KendraClientTypes.OneDriveConfiguration? = nil,
            s3Configuration: KendraClientTypes.S3DataSourceConfiguration? = nil,
            salesforceConfiguration: KendraClientTypes.SalesforceConfiguration? = nil,
            serviceNowConfiguration: KendraClientTypes.ServiceNowConfiguration? = nil,
            sharePointConfiguration: KendraClientTypes.SharePointConfiguration? = nil,
            webCrawlerConfiguration: KendraClientTypes.WebCrawlerConfiguration? = nil,
            workDocsConfiguration: KendraClientTypes.WorkDocsConfiguration? = nil
        )
        {
            self.confluenceConfiguration = confluenceConfiguration
            self.databaseConfiguration = databaseConfiguration
            self.googleDriveConfiguration = googleDriveConfiguration
            self.oneDriveConfiguration = oneDriveConfiguration
            self.s3Configuration = s3Configuration
            self.salesforceConfiguration = salesforceConfiguration
            self.serviceNowConfiguration = serviceNowConfiguration
            self.sharePointConfiguration = sharePointConfiguration
            self.webCrawlerConfiguration = webCrawlerConfiguration
            self.workDocsConfiguration = workDocsConfiguration
        }
    }

}

extension KendraClientTypes.DataSourceGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case groupId = "GroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension KendraClientTypes {
    /// Data source information for user context filtering.
    public struct DataSourceGroup: Swift.Equatable {
        /// The identifier of the data source group you want to add to your list of data source groups. This is for filtering search results based on the groups' access to documents in that data source.
        /// This member is required.
        public var dataSourceId: Swift.String?
        /// The identifier of the group you want to add to your list of groups. This is for filtering search results based on the groups' access to documents.
        /// This member is required.
        public var groupId: Swift.String?

        public init (
            dataSourceId: Swift.String? = nil,
            groupId: Swift.String? = nil
        )
        {
            self.dataSourceId = dataSourceId
            self.groupId = groupId
        }
    }

}

extension KendraClientTypes {
    public enum DataSourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataSourceStatus(rawValue: rawValue) ?? DataSourceStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.DataSourceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case id = "Id"
        case languageCode = "LanguageCode"
        case name = "Name"
        case status = "Status"
        case type = "Type"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceType.self, forKey: .type)
        type = typeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceStatus.self, forKey: .status)
        status = statusDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension KendraClientTypes {
    /// Summary information for a Amazon Kendra data source. Returned in a call to the DescribeDataSource operation.
    public struct DataSourceSummary: Swift.Equatable {
        /// The UNIX datetime that the data source was created.
        public var createdAt: ClientRuntime.Date?
        /// The unique identifier for the data source.
        public var id: Swift.String?
        /// The code for a language. This shows a supported language for all documents in the data source. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
        public var languageCode: Swift.String?
        /// The name of the data source.
        public var name: Swift.String?
        /// The status of the data source. When the status is ACTIVE the data source is ready to use.
        public var status: KendraClientTypes.DataSourceStatus?
        /// The type of the data source.
        public var type: KendraClientTypes.DataSourceType?
        /// The UNIX datetime that the data source was lasted updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            languageCode: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.DataSourceStatus? = nil,
            type: KendraClientTypes.DataSourceType? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.id = id
            self.languageCode = languageCode
            self.name = name
            self.status = status
            self.type = type
            self.updatedAt = updatedAt
        }
    }

}

extension KendraClientTypes.DataSourceSyncJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceErrorCode = "DataSourceErrorCode"
        case endTime = "EndTime"
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case executionId = "ExecutionId"
        case metrics = "Metrics"
        case startTime = "StartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceErrorCode = dataSourceErrorCode {
            try encodeContainer.encode(dataSourceErrorCode, forKey: .dataSourceErrorCode)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let executionId = executionId {
            try encodeContainer.encode(executionId, forKey: .executionId)
        }
        if let metrics = metrics {
            try encodeContainer.encode(metrics, forKey: .metrics)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceSyncJobStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let dataSourceErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceErrorCode)
        dataSourceErrorCode = dataSourceErrorCodeDecoded
        let metricsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceSyncJobMetrics.self, forKey: .metrics)
        metrics = metricsDecoded
    }
}

extension KendraClientTypes {
    /// Provides information about a synchronization job.
    public struct DataSourceSyncJob: Swift.Equatable {
        /// If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.
        public var dataSourceErrorCode: Swift.String?
        /// The UNIX datetime that the synchronization job was completed.
        public var endTime: ClientRuntime.Date?
        /// If the Status field is set to FAILED, the ErrorCode field contains a the reason that the synchronization failed.
        public var errorCode: KendraClientTypes.ErrorCode?
        /// If the Status field is set to ERROR, the ErrorMessage field contains a description of the error that caused the synchronization to fail.
        public var errorMessage: Swift.String?
        /// A unique identifier for the synchronization job.
        public var executionId: Swift.String?
        /// Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.
        public var metrics: KendraClientTypes.DataSourceSyncJobMetrics?
        /// The UNIX datetime that the synchronization job was started.
        public var startTime: ClientRuntime.Date?
        /// The execution status of the synchronization job. When the Status field is set to SUCCEEDED, the synchronization job is done. If the status code is set to FAILED, the ErrorCode and ErrorMessage fields give you the reason for the failure.
        public var status: KendraClientTypes.DataSourceSyncJobStatus?

        public init (
            dataSourceErrorCode: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            errorCode: KendraClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            executionId: Swift.String? = nil,
            metrics: KendraClientTypes.DataSourceSyncJobMetrics? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: KendraClientTypes.DataSourceSyncJobStatus? = nil
        )
        {
            self.dataSourceErrorCode = dataSourceErrorCode
            self.endTime = endTime
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.executionId = executionId
            self.metrics = metrics
            self.startTime = startTime
            self.status = status
        }
    }

}

extension KendraClientTypes.DataSourceSyncJobMetricTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case dataSourceSyncJobId = "DataSourceSyncJobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceSyncJobId = dataSourceSyncJobId {
            try encodeContainer.encode(dataSourceSyncJobId, forKey: .dataSourceSyncJobId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceSyncJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceSyncJobId)
        dataSourceSyncJobId = dataSourceSyncJobIdDecoded
    }
}

extension KendraClientTypes {
    /// Maps a particular data source sync job to a particular data source.
    public struct DataSourceSyncJobMetricTarget: Swift.Equatable {
        /// The ID of the data source that is running the sync job.
        /// This member is required.
        public var dataSourceId: Swift.String?
        /// The ID of the sync job that is running on the data source. If the ID of a sync job is not provided and there is a sync job running, then the ID of this sync job is used and metrics are generated for this sync job. If the ID of a sync job is not provided and there is no sync job running, then no metrics are generated and documents are indexed/deleted at the index level without sync job metrics included.
        public var dataSourceSyncJobId: Swift.String?

        public init (
            dataSourceId: Swift.String? = nil,
            dataSourceSyncJobId: Swift.String? = nil
        )
        {
            self.dataSourceId = dataSourceId
            self.dataSourceSyncJobId = dataSourceSyncJobId
        }
    }

}

extension KendraClientTypes.DataSourceSyncJobMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentsAdded = "DocumentsAdded"
        case documentsDeleted = "DocumentsDeleted"
        case documentsFailed = "DocumentsFailed"
        case documentsModified = "DocumentsModified"
        case documentsScanned = "DocumentsScanned"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentsAdded = documentsAdded {
            try encodeContainer.encode(documentsAdded, forKey: .documentsAdded)
        }
        if let documentsDeleted = documentsDeleted {
            try encodeContainer.encode(documentsDeleted, forKey: .documentsDeleted)
        }
        if let documentsFailed = documentsFailed {
            try encodeContainer.encode(documentsFailed, forKey: .documentsFailed)
        }
        if let documentsModified = documentsModified {
            try encodeContainer.encode(documentsModified, forKey: .documentsModified)
        }
        if let documentsScanned = documentsScanned {
            try encodeContainer.encode(documentsScanned, forKey: .documentsScanned)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentsAddedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentsAdded)
        documentsAdded = documentsAddedDecoded
        let documentsModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentsModified)
        documentsModified = documentsModifiedDecoded
        let documentsDeletedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentsDeleted)
        documentsDeleted = documentsDeletedDecoded
        let documentsFailedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentsFailed)
        documentsFailed = documentsFailedDecoded
        let documentsScannedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentsScanned)
        documentsScanned = documentsScannedDecoded
    }
}

extension KendraClientTypes {
    /// Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.
    public struct DataSourceSyncJobMetrics: Swift.Equatable {
        /// The number of documents added from the data source up to now in the data source sync.
        public var documentsAdded: Swift.String?
        /// The number of documents deleted from the data source up to now in the data source sync run.
        public var documentsDeleted: Swift.String?
        /// The number of documents that failed to sync from the data source up to now in the data source sync run.
        public var documentsFailed: Swift.String?
        /// The number of documents modified in the data source up to now in the data source sync run.
        public var documentsModified: Swift.String?
        /// The current number of documents crawled by the current sync job in the data source.
        public var documentsScanned: Swift.String?

        public init (
            documentsAdded: Swift.String? = nil,
            documentsDeleted: Swift.String? = nil,
            documentsFailed: Swift.String? = nil,
            documentsModified: Swift.String? = nil,
            documentsScanned: Swift.String? = nil
        )
        {
            self.documentsAdded = documentsAdded
            self.documentsDeleted = documentsDeleted
            self.documentsFailed = documentsFailed
            self.documentsModified = documentsModified
            self.documentsScanned = documentsScanned
        }
    }

}

extension KendraClientTypes {
    public enum DataSourceSyncJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aborted
        case failed
        case incomplete
        case stopping
        case succeeded
        case syncing
        case syncingIndexing
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceSyncJobStatus] {
            return [
                .aborted,
                .failed,
                .incomplete,
                .stopping,
                .succeeded,
                .syncing,
                .syncingIndexing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aborted: return "ABORTED"
            case .failed: return "FAILED"
            case .incomplete: return "INCOMPLETE"
            case .stopping: return "STOPPING"
            case .succeeded: return "SUCCEEDED"
            case .syncing: return "SYNCING"
            case .syncingIndexing: return "SYNCING_INDEXING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataSourceSyncJobStatus(rawValue: rawValue) ?? DataSourceSyncJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.DataSourceToIndexFieldMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceFieldName = "DataSourceFieldName"
        case dateFieldFormat = "DateFieldFormat"
        case indexFieldName = "IndexFieldName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceFieldName = dataSourceFieldName {
            try encodeContainer.encode(dataSourceFieldName, forKey: .dataSourceFieldName)
        }
        if let dateFieldFormat = dateFieldFormat {
            try encodeContainer.encode(dateFieldFormat, forKey: .dateFieldFormat)
        }
        if let indexFieldName = indexFieldName {
            try encodeContainer.encode(indexFieldName, forKey: .indexFieldName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceFieldName)
        dataSourceFieldName = dataSourceFieldNameDecoded
        let dateFieldFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dateFieldFormat)
        dateFieldFormat = dateFieldFormatDecoded
        let indexFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexFieldName)
        indexFieldName = indexFieldNameDecoded
    }
}

extension KendraClientTypes {
    /// Maps a column or attribute in the data source to an index field. You must first create the fields in the index using the UpdateIndex operation.
    public struct DataSourceToIndexFieldMapping: Swift.Equatable {
        /// The name of the column or attribute in the data source.
        /// This member is required.
        public var dataSourceFieldName: Swift.String?
        /// The type of data stored in the column or attribute.
        public var dateFieldFormat: Swift.String?
        /// The name of the field in the index.
        /// This member is required.
        public var indexFieldName: Swift.String?

        public init (
            dataSourceFieldName: Swift.String? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }

}

extension KendraClientTypes {
    public enum DataSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case confluence
        case custom
        case database
        case googledrive
        case onedrive
        case s3
        case salesforce
        case servicenow
        case sharepoint
        case webcrawler
        case workdocs
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceType] {
            return [
                .confluence,
                .custom,
                .database,
                .googledrive,
                .onedrive,
                .s3,
                .salesforce,
                .servicenow,
                .sharepoint,
                .webcrawler,
                .workdocs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .confluence: return "CONFLUENCE"
            case .custom: return "CUSTOM"
            case .database: return "DATABASE"
            case .googledrive: return "GOOGLEDRIVE"
            case .onedrive: return "ONEDRIVE"
            case .s3: return "S3"
            case .salesforce: return "SALESFORCE"
            case .servicenow: return "SERVICENOW"
            case .sharepoint: return "SHAREPOINT"
            case .webcrawler: return "WEBCRAWLER"
            case .workdocs: return "WORKDOCS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataSourceType(rawValue: rawValue) ?? DataSourceType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.DataSourceVpcConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupidlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupidlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides information for connecting to an Amazon VPC.
    public struct DataSourceVpcConfiguration: Swift.Equatable {
        /// A list of identifiers of security groups within your Amazon VPC. The security groups should enable Amazon Kendra to connect to the data source.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// A list of identifiers for subnets within your Amazon VPC. The subnets should be able to connect to each other in the VPC, and they should have outgoing access to the Internet through a NAT device.
        /// This member is required.
        public var subnetIds: [Swift.String]?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension KendraClientTypes.DatabaseConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aclConfiguration = "AclConfiguration"
        case columnConfiguration = "ColumnConfiguration"
        case connectionConfiguration = "ConnectionConfiguration"
        case databaseEngineType = "DatabaseEngineType"
        case sqlConfiguration = "SqlConfiguration"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aclConfiguration = aclConfiguration {
            try encodeContainer.encode(aclConfiguration, forKey: .aclConfiguration)
        }
        if let columnConfiguration = columnConfiguration {
            try encodeContainer.encode(columnConfiguration, forKey: .columnConfiguration)
        }
        if let connectionConfiguration = connectionConfiguration {
            try encodeContainer.encode(connectionConfiguration, forKey: .connectionConfiguration)
        }
        if let databaseEngineType = databaseEngineType {
            try encodeContainer.encode(databaseEngineType.rawValue, forKey: .databaseEngineType)
        }
        if let sqlConfiguration = sqlConfiguration {
            try encodeContainer.encode(sqlConfiguration, forKey: .sqlConfiguration)
        }
        if let vpcConfiguration = vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseEngineTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DatabaseEngineType.self, forKey: .databaseEngineType)
        databaseEngineType = databaseEngineTypeDecoded
        let connectionConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConnectionConfiguration.self, forKey: .connectionConfiguration)
        connectionConfiguration = connectionConfigurationDecoded
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
        let columnConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ColumnConfiguration.self, forKey: .columnConfiguration)
        columnConfiguration = columnConfigurationDecoded
        let aclConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.AclConfiguration.self, forKey: .aclConfiguration)
        aclConfiguration = aclConfigurationDecoded
        let sqlConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SqlConfiguration.self, forKey: .sqlConfiguration)
        sqlConfiguration = sqlConfigurationDecoded
    }
}

extension KendraClientTypes {
    /// Provides the information necessary to connect a database to an index.
    public struct DatabaseConfiguration: Swift.Equatable {
        /// Information about the database column that provides information for user context filtering.
        public var aclConfiguration: KendraClientTypes.AclConfiguration?
        /// Information about where the index should get the document information from the database.
        /// This member is required.
        public var columnConfiguration: KendraClientTypes.ColumnConfiguration?
        /// The information necessary to connect to a database.
        /// This member is required.
        public var connectionConfiguration: KendraClientTypes.ConnectionConfiguration?
        /// The type of database engine that runs the database.
        /// This member is required.
        public var databaseEngineType: KendraClientTypes.DatabaseEngineType?
        /// Provides information about how Amazon Kendra uses quote marks around SQL identifiers when querying a database data source.
        public var sqlConfiguration: KendraClientTypes.SqlConfiguration?
        /// Provides information for connecting to an Amazon VPC.
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init (
            aclConfiguration: KendraClientTypes.AclConfiguration? = nil,
            columnConfiguration: KendraClientTypes.ColumnConfiguration? = nil,
            connectionConfiguration: KendraClientTypes.ConnectionConfiguration? = nil,
            databaseEngineType: KendraClientTypes.DatabaseEngineType? = nil,
            sqlConfiguration: KendraClientTypes.SqlConfiguration? = nil,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.aclConfiguration = aclConfiguration
            self.columnConfiguration = columnConfiguration
            self.connectionConfiguration = connectionConfiguration
            self.databaseEngineType = databaseEngineType
            self.sqlConfiguration = sqlConfiguration
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension KendraClientTypes {
    public enum DatabaseEngineType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rdsAuroraMysql
        case rdsAuroraPostgresql
        case rdsMysql
        case rdsPostgresql
        case sdkUnknown(Swift.String)

        public static var allCases: [DatabaseEngineType] {
            return [
                .rdsAuroraMysql,
                .rdsAuroraPostgresql,
                .rdsMysql,
                .rdsPostgresql,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rdsAuroraMysql: return "RDS_AURORA_MYSQL"
            case .rdsAuroraPostgresql: return "RDS_AURORA_POSTGRESQL"
            case .rdsMysql: return "RDS_MYSQL"
            case .rdsPostgresql: return "RDS_POSTGRESQL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatabaseEngineType(rawValue: rawValue) ?? DatabaseEngineType.sdkUnknown(rawValue)
        }
    }
}

extension DeleteDataSourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DeleteDataSourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDataSourceInput: Swift.Equatable {
    /// The unique identifier of the data source to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The unique identifier of the index associated with the data source.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DeleteDataSourceInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension DeleteDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension DeleteDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDataSourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDataSourceOutputResponse: Swift.Equatable {

}

extension DeleteExperienceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DeleteExperienceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteExperienceInput: Swift.Equatable {
    /// The identifier of your Amazon Kendra experience you want to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience you want to delete.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DeleteExperienceInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension DeleteExperienceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension DeleteExperienceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteExperienceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteExperienceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteExperienceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteExperienceOutputResponse: Swift.Equatable {

}

extension DeleteFaqInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DeleteFaqInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFaqInput: Swift.Equatable {
    /// The identifier of the FAQ to remove.
    /// This member is required.
    public var id: Swift.String?
    /// The index to remove the FAQ from.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DeleteFaqInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension DeleteFaqInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension DeleteFaqOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFaqOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteFaqOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFaqOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteFaqOutputResponse: Swift.Equatable {

}

extension DeleteIndexInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }
}

extension DeleteIndexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteIndexInput: Swift.Equatable {
    /// The identifier of the index to delete.
    /// This member is required.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DeleteIndexInputBody: Swift.Equatable {
    let id: Swift.String?
}

extension DeleteIndexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension DeleteIndexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteIndexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteIndexOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIndexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteIndexOutputResponse: Swift.Equatable {

}

extension DeletePrincipalMappingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case groupId = "GroupId"
        case indexId = "IndexId"
        case orderingId = "OrderingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let orderingId = orderingId {
            try encodeContainer.encode(orderingId, forKey: .orderingId)
        }
    }
}

extension DeletePrincipalMappingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePrincipalMappingInput: Swift.Equatable {
    /// The identifier of the data source you want to delete a group from. This is useful if a group is tied to multiple data sources and you want to delete a group from accessing documents in a certain data source. For example, the groups "Research", "Engineering", and "Sales and Marketing" are all tied to the company's documents stored in the data sources Confluence and Salesforce. You want to delete "Research" and "Engineering" groups from Salesforce, so that these groups cannot access customer-related documents stored in Salesforce. Only "Sales and Marketing" should access documents in the Salesforce data source.
    public var dataSourceId: Swift.String?
    /// The identifier of the group you want to delete.
    /// This member is required.
    public var groupId: Swift.String?
    /// The identifier of the index you want to delete a group from.
    /// This member is required.
    public var indexId: Swift.String?
    /// The timestamp identifier you specify to ensure Amazon Kendra does not override the latest DELETE action with previous actions. The highest number ID, which is the ordering ID, is the latest action you want to process and apply on top of other actions with lower number IDs. This prevents previous actions with lower number IDs from possibly overriding the latest action. The ordering ID can be the UNIX time of the last update you made to a group members list. You would then provide this list when calling PutPrincipalMapping. This ensures your DELETE action for that updated group with the latest members list doesn't get overwritten by earlier DELETE actions for the same group which are yet to be processed. The default ordering ID is the current UNIX time in milliseconds that the action was received by Amazon Kendra.
    public var orderingId: Swift.Int?

    public init (
        dataSourceId: Swift.String? = nil,
        groupId: Swift.String? = nil,
        indexId: Swift.String? = nil,
        orderingId: Swift.Int? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.groupId = groupId
        self.indexId = indexId
        self.orderingId = orderingId
    }
}

struct DeletePrincipalMappingInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let dataSourceId: Swift.String?
    let groupId: Swift.String?
    let orderingId: Swift.Int?
}

extension DeletePrincipalMappingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case groupId = "GroupId"
        case indexId = "IndexId"
        case orderingId = "OrderingId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let orderingIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .orderingId)
        orderingId = orderingIdDecoded
    }
}

extension DeletePrincipalMappingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePrincipalMappingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePrincipalMappingOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePrincipalMappingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePrincipalMappingOutputResponse: Swift.Equatable {

}

extension DeleteQuerySuggestionsBlockListInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DeleteQuerySuggestionsBlockListInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteQuerySuggestionsBlockListInput: Swift.Equatable {
    /// The unique identifier of the block list that needs to be deleted.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the you want to delete a block list from.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DeleteQuerySuggestionsBlockListInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let id: Swift.String?
}

extension DeleteQuerySuggestionsBlockListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension DeleteQuerySuggestionsBlockListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteQuerySuggestionsBlockListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteQuerySuggestionsBlockListOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteQuerySuggestionsBlockListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteQuerySuggestionsBlockListOutputResponse: Swift.Equatable {

}

extension DeleteThesaurusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DeleteThesaurusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteThesaurusInput: Swift.Equatable {
    /// The identifier of the thesaurus to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index associated with the thesaurus to delete.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DeleteThesaurusInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension DeleteThesaurusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension DeleteThesaurusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteThesaurusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteThesaurusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteThesaurusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteThesaurusOutputResponse: Swift.Equatable {

}

extension DescribeDataSourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DescribeDataSourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataSourceInput: Swift.Equatable {
    /// The unique identifier of the data source to describe.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index that contains the data source.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DescribeDataSourceInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension DescribeDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension DescribeDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDataSourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDataSourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuration = output.configuration
            self.createdAt = output.createdAt
            self.customDocumentEnrichmentConfiguration = output.customDocumentEnrichmentConfiguration
            self.description = output.description
            self.errorMessage = output.errorMessage
            self.id = output.id
            self.indexId = output.indexId
            self.languageCode = output.languageCode
            self.name = output.name
            self.roleArn = output.roleArn
            self.schedule = output.schedule
            self.status = output.status
            self.type = output.type
            self.updatedAt = output.updatedAt
        } else {
            self.configuration = nil
            self.createdAt = nil
            self.customDocumentEnrichmentConfiguration = nil
            self.description = nil
            self.errorMessage = nil
            self.id = nil
            self.indexId = nil
            self.languageCode = nil
            self.name = nil
            self.roleArn = nil
            self.schedule = nil
            self.status = nil
            self.type = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeDataSourceOutputResponse: Swift.Equatable {
    /// Information that describes where the data source is located and how the data source is configured. The specific information in the description depends on the data source provider.
    public var configuration: KendraClientTypes.DataSourceConfiguration?
    /// The Unix timestamp of when the data source was created.
    public var createdAt: ClientRuntime.Date?
    /// Configuration information for altering document metadata and content during the document ingestion process when you describe a data source. For more information on how to create, modify and delete document metadata, or make other content alterations when you ingest documents into Amazon Kendra, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public var customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
    /// The description of the data source.
    public var description: Swift.String?
    /// When the Status field value is FAILED, the ErrorMessage field contains a description of the error that caused the data source to fail.
    public var errorMessage: Swift.String?
    /// The identifier of the data source.
    public var id: Swift.String?
    /// The identifier of the index that contains the data source.
    public var indexId: Swift.String?
    /// The code for a language. This shows a supported language for all documents in the data source. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// The name that you gave the data source when it was created.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the role that enables the data source to access its resources.
    public var roleArn: Swift.String?
    /// The schedule that Amazon Kendra will update the data source.
    public var schedule: Swift.String?
    /// The current status of the data source. When the status is ACTIVE the data source is ready to use. When the status is FAILED, the ErrorMessage field contains the reason that the data source failed.
    public var status: KendraClientTypes.DataSourceStatus?
    /// The type of the data source.
    public var type: KendraClientTypes.DataSourceType?
    /// The Unix timestamp of when the data source was last updated.
    public var updatedAt: ClientRuntime.Date?

    public init (
        configuration: KendraClientTypes.DataSourceConfiguration? = nil,
        createdAt: ClientRuntime.Date? = nil,
        customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration? = nil,
        description: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schedule: Swift.String? = nil,
        status: KendraClientTypes.DataSourceStatus? = nil,
        type: KendraClientTypes.DataSourceType? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.configuration = configuration
        self.createdAt = createdAt
        self.customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration
        self.description = description
        self.errorMessage = errorMessage
        self.id = id
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.schedule = schedule
        self.status = status
        self.type = type
        self.updatedAt = updatedAt
    }
}

struct DescribeDataSourceOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let name: Swift.String?
    let type: KendraClientTypes.DataSourceType?
    let configuration: KendraClientTypes.DataSourceConfiguration?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let description: Swift.String?
    let status: KendraClientTypes.DataSourceStatus?
    let schedule: Swift.String?
    let roleArn: Swift.String?
    let errorMessage: Swift.String?
    let languageCode: Swift.String?
    let customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
}

extension DescribeDataSourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case createdAt = "CreatedAt"
        case customDocumentEnrichmentConfiguration = "CustomDocumentEnrichmentConfiguration"
        case description = "Description"
        case errorMessage = "ErrorMessage"
        case id = "Id"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case schedule = "Schedule"
        case status = "Status"
        case type = "Type"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceType.self, forKey: .type)
        type = typeDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceStatus.self, forKey: .status)
        status = statusDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let customDocumentEnrichmentConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.CustomDocumentEnrichmentConfiguration.self, forKey: .customDocumentEnrichmentConfiguration)
        customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfigurationDecoded
    }
}

extension DescribeExperienceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DescribeExperienceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeExperienceInput: Swift.Equatable {
    /// The identifier of your Amazon Kendra experience you want to get information on.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience you want to get information on.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DescribeExperienceInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension DescribeExperienceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension DescribeExperienceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeExperienceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeExperienceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeExperienceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeExperienceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuration = output.configuration
            self.createdAt = output.createdAt
            self.description = output.description
            self.endpoints = output.endpoints
            self.errorMessage = output.errorMessage
            self.id = output.id
            self.indexId = output.indexId
            self.name = output.name
            self.roleArn = output.roleArn
            self.status = output.status
            self.updatedAt = output.updatedAt
        } else {
            self.configuration = nil
            self.createdAt = nil
            self.description = nil
            self.endpoints = nil
            self.errorMessage = nil
            self.id = nil
            self.indexId = nil
            self.name = nil
            self.roleArn = nil
            self.status = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeExperienceOutputResponse: Swift.Equatable {
    /// Shows the configuration information for your Amazon Kendra experience. This includes ContentSourceConfiguration, which specifies the data source IDs and/or FAQ IDs, and UserIdentityConfiguration, which specifies the user or group information to grant access to your Amazon Kendra experience.
    public var configuration: KendraClientTypes.ExperienceConfiguration?
    /// Shows the date-time your Amazon Kendra experience was created.
    public var createdAt: ClientRuntime.Date?
    /// Shows the description for your Amazon Kendra experience.
    public var description: Swift.String?
    /// Shows the endpoint URLs for your Amazon Kendra experiences. The URLs are unique and fully hosted by Amazon Web Services.
    public var endpoints: [KendraClientTypes.ExperienceEndpoint]?
    /// The reason your Amazon Kendra experience could not properly process.
    public var errorMessage: Swift.String?
    /// Shows the identifier of your Amazon Kendra experience.
    public var id: Swift.String?
    /// Shows the identifier of the index for your Amazon Kendra experience.
    public var indexId: Swift.String?
    /// Shows the name of your Amazon Kendra experience.
    public var name: Swift.String?
    /// Shows the Amazon Resource Name (ARN) of a role with permission to access Query operations, QuerySuggestions operations, SubmitFeedback operations, and Amazon Web Services SSO that stores your user and group information.
    public var roleArn: Swift.String?
    /// The current processing status of your Amazon Kendra experience. When the status is ACTIVE, your Amazon Kendra experience is ready to use. When the status is FAILED, the ErrorMessage field contains the reason that this failed.
    public var status: KendraClientTypes.ExperienceStatus?
    /// Shows the date-time your Amazon Kendra experience was last updated.
    public var updatedAt: ClientRuntime.Date?

    public init (
        configuration: KendraClientTypes.ExperienceConfiguration? = nil,
        createdAt: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        endpoints: [KendraClientTypes.ExperienceEndpoint]? = nil,
        errorMessage: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        status: KendraClientTypes.ExperienceStatus? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.configuration = configuration
        self.createdAt = createdAt
        self.description = description
        self.endpoints = endpoints
        self.errorMessage = errorMessage
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.status = status
        self.updatedAt = updatedAt
    }
}

struct DescribeExperienceOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let name: Swift.String?
    let endpoints: [KendraClientTypes.ExperienceEndpoint]?
    let configuration: KendraClientTypes.ExperienceConfiguration?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let description: Swift.String?
    let status: KendraClientTypes.ExperienceStatus?
    let roleArn: Swift.String?
    let errorMessage: Swift.String?
}

extension DescribeExperienceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case createdAt = "CreatedAt"
        case description = "Description"
        case endpoints = "Endpoints"
        case errorMessage = "ErrorMessage"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ExperienceEndpoint?].self, forKey: .endpoints)
        var endpointsDecoded0:[KendraClientTypes.ExperienceEndpoint]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [KendraClientTypes.ExperienceEndpoint]()
            for structure0 in endpointsContainer {
                if let structure0 = structure0 {
                    endpointsDecoded0?.append(structure0)
                }
            }
        }
        endpoints = endpointsDecoded0
        let configurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ExperienceConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ExperienceStatus.self, forKey: .status)
        status = statusDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension DescribeFaqInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DescribeFaqInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFaqInput: Swift.Equatable {
    /// The unique identifier of the FAQ.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index that contains the FAQ.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DescribeFaqInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension DescribeFaqInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension DescribeFaqOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFaqOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFaqOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFaqOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeFaqOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.description = output.description
            self.errorMessage = output.errorMessage
            self.fileFormat = output.fileFormat
            self.id = output.id
            self.indexId = output.indexId
            self.languageCode = output.languageCode
            self.name = output.name
            self.roleArn = output.roleArn
            self.s3Path = output.s3Path
            self.status = output.status
            self.updatedAt = output.updatedAt
        } else {
            self.createdAt = nil
            self.description = nil
            self.errorMessage = nil
            self.fileFormat = nil
            self.id = nil
            self.indexId = nil
            self.languageCode = nil
            self.name = nil
            self.roleArn = nil
            self.s3Path = nil
            self.status = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeFaqOutputResponse: Swift.Equatable {
    /// The date and time that the FAQ was created.
    public var createdAt: ClientRuntime.Date?
    /// The description of the FAQ that you provided when it was created.
    public var description: Swift.String?
    /// If the Status field is FAILED, the ErrorMessage field contains the reason why the FAQ failed.
    public var errorMessage: Swift.String?
    /// The file format used by the input files for the FAQ.
    public var fileFormat: KendraClientTypes.FaqFileFormat?
    /// The identifier of the FAQ.
    public var id: Swift.String?
    /// The identifier of the index that contains the FAQ.
    public var indexId: Swift.String?
    /// The code for a language. This shows a supported language for the FAQ document. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// The name that you gave the FAQ when it was created.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the role that provides access to the S3 bucket containing the input files for the FAQ.
    public var roleArn: Swift.String?
    /// Information required to find a specific file in an Amazon S3 bucket.
    public var s3Path: KendraClientTypes.S3Path?
    /// The status of the FAQ. It is ready to use when the status is ACTIVE.
    public var status: KendraClientTypes.FaqStatus?
    /// The date and time that the FAQ was last updated.
    public var updatedAt: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        fileFormat: KendraClientTypes.FaqFileFormat? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        s3Path: KendraClientTypes.S3Path? = nil,
        status: KendraClientTypes.FaqStatus? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.description = description
        self.errorMessage = errorMessage
        self.fileFormat = fileFormat
        self.id = id
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.s3Path = s3Path
        self.status = status
        self.updatedAt = updatedAt
    }
}

struct DescribeFaqOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let s3Path: KendraClientTypes.S3Path?
    let status: KendraClientTypes.FaqStatus?
    let roleArn: Swift.String?
    let errorMessage: Swift.String?
    let fileFormat: KendraClientTypes.FaqFileFormat?
    let languageCode: Swift.String?
}

extension DescribeFaqOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case description = "Description"
        case errorMessage = "ErrorMessage"
        case fileFormat = "FileFormat"
        case id = "Id"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case s3Path = "S3Path"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let s3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .s3Path)
        s3Path = s3PathDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.FaqStatus.self, forKey: .status)
        status = statusDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(KendraClientTypes.FaqFileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension DescribeIndexInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }
}

extension DescribeIndexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeIndexInput: Swift.Equatable {
    /// The name of the index to describe.
    /// This member is required.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DescribeIndexInputBody: Swift.Equatable {
    let id: Swift.String?
}

extension DescribeIndexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension DescribeIndexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeIndexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeIndexOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeIndexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeIndexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capacityUnits = output.capacityUnits
            self.createdAt = output.createdAt
            self.description = output.description
            self.documentMetadataConfigurations = output.documentMetadataConfigurations
            self.edition = output.edition
            self.errorMessage = output.errorMessage
            self.id = output.id
            self.indexStatistics = output.indexStatistics
            self.name = output.name
            self.roleArn = output.roleArn
            self.serverSideEncryptionConfiguration = output.serverSideEncryptionConfiguration
            self.status = output.status
            self.updatedAt = output.updatedAt
            self.userContextPolicy = output.userContextPolicy
            self.userGroupResolutionConfiguration = output.userGroupResolutionConfiguration
            self.userTokenConfigurations = output.userTokenConfigurations
        } else {
            self.capacityUnits = nil
            self.createdAt = nil
            self.description = nil
            self.documentMetadataConfigurations = nil
            self.edition = nil
            self.errorMessage = nil
            self.id = nil
            self.indexStatistics = nil
            self.name = nil
            self.roleArn = nil
            self.serverSideEncryptionConfiguration = nil
            self.status = nil
            self.updatedAt = nil
            self.userContextPolicy = nil
            self.userGroupResolutionConfiguration = nil
            self.userTokenConfigurations = nil
        }
    }
}

public struct DescribeIndexOutputResponse: Swift.Equatable {
    /// For Enterprise edition indexes, you can choose to use additional capacity to meet the needs of your application. This contains the capacity units used for the index. A 0 for the query capacity or the storage capacity indicates that the index is using the default capacity for the index.
    public var capacityUnits: KendraClientTypes.CapacityUnitsConfiguration?
    /// The Unix datetime that the index was created.
    public var createdAt: ClientRuntime.Date?
    /// The description of the index.
    public var description: Swift.String?
    /// Configuration settings for any metadata applied to the documents in the index.
    public var documentMetadataConfigurations: [KendraClientTypes.DocumentMetadataConfiguration]?
    /// The Amazon Kendra edition used for the index. You decide the edition when you create the index.
    public var edition: KendraClientTypes.IndexEdition?
    /// When th eStatus field value is FAILED, the ErrorMessage field contains a message that explains why.
    public var errorMessage: Swift.String?
    /// The name of the index.
    public var id: Swift.String?
    /// Provides information about the number of FAQ questions and answers and the number of text documents indexed.
    public var indexStatistics: KendraClientTypes.IndexStatistics?
    /// The name of the index.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that gives Amazon Kendra permission to write to your Amazon Cloudwatch logs.
    public var roleArn: Swift.String?
    /// The identifier of the KMScustomer master key (CMK) used to encrypt your data. Amazon Kendra doesn't support asymmetric CMKs.
    public var serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration?
    /// The current status of the index. When the value is ACTIVE, the index is ready for use. If the Status field value is FAILED, the ErrorMessage field contains a message that explains why.
    public var status: KendraClientTypes.IndexStatus?
    /// The Unix datetime that the index was last updated.
    public var updatedAt: ClientRuntime.Date?
    /// The user context policy for the Amazon Kendra index.
    public var userContextPolicy: KendraClientTypes.UserContextPolicy?
    /// Shows whether you have enabled the configuration for fetching access levels of groups and users from an Amazon Web Services Single Sign On identity source.
    public var userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
    /// The user token configuration for the Amazon Kendra index.
    public var userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?

    public init (
        capacityUnits: KendraClientTypes.CapacityUnitsConfiguration? = nil,
        createdAt: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        documentMetadataConfigurations: [KendraClientTypes.DocumentMetadataConfiguration]? = nil,
        edition: KendraClientTypes.IndexEdition? = nil,
        errorMessage: Swift.String? = nil,
        id: Swift.String? = nil,
        indexStatistics: KendraClientTypes.IndexStatistics? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration? = nil,
        status: KendraClientTypes.IndexStatus? = nil,
        updatedAt: ClientRuntime.Date? = nil,
        userContextPolicy: KendraClientTypes.UserContextPolicy? = nil,
        userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration? = nil,
        userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]? = nil
    )
    {
        self.capacityUnits = capacityUnits
        self.createdAt = createdAt
        self.description = description
        self.documentMetadataConfigurations = documentMetadataConfigurations
        self.edition = edition
        self.errorMessage = errorMessage
        self.id = id
        self.indexStatistics = indexStatistics
        self.name = name
        self.roleArn = roleArn
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        self.status = status
        self.updatedAt = updatedAt
        self.userContextPolicy = userContextPolicy
        self.userGroupResolutionConfiguration = userGroupResolutionConfiguration
        self.userTokenConfigurations = userTokenConfigurations
    }
}

struct DescribeIndexOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let id: Swift.String?
    let edition: KendraClientTypes.IndexEdition?
    let roleArn: Swift.String?
    let serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration?
    let status: KendraClientTypes.IndexStatus?
    let description: Swift.String?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let documentMetadataConfigurations: [KendraClientTypes.DocumentMetadataConfiguration]?
    let indexStatistics: KendraClientTypes.IndexStatistics?
    let errorMessage: Swift.String?
    let capacityUnits: KendraClientTypes.CapacityUnitsConfiguration?
    let userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?
    let userContextPolicy: KendraClientTypes.UserContextPolicy?
    let userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
}

extension DescribeIndexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUnits = "CapacityUnits"
        case createdAt = "CreatedAt"
        case description = "Description"
        case documentMetadataConfigurations = "DocumentMetadataConfigurations"
        case edition = "Edition"
        case errorMessage = "ErrorMessage"
        case id = "Id"
        case indexStatistics = "IndexStatistics"
        case name = "Name"
        case roleArn = "RoleArn"
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        case status = "Status"
        case updatedAt = "UpdatedAt"
        case userContextPolicy = "UserContextPolicy"
        case userGroupResolutionConfiguration = "UserGroupResolutionConfiguration"
        case userTokenConfigurations = "UserTokenConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let editionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.IndexEdition.self, forKey: .edition)
        edition = editionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.IndexStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let documentMetadataConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentMetadataConfiguration?].self, forKey: .documentMetadataConfigurations)
        var documentMetadataConfigurationsDecoded0:[KendraClientTypes.DocumentMetadataConfiguration]? = nil
        if let documentMetadataConfigurationsContainer = documentMetadataConfigurationsContainer {
            documentMetadataConfigurationsDecoded0 = [KendraClientTypes.DocumentMetadataConfiguration]()
            for structure0 in documentMetadataConfigurationsContainer {
                if let structure0 = structure0 {
                    documentMetadataConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        documentMetadataConfigurations = documentMetadataConfigurationsDecoded0
        let indexStatisticsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.IndexStatistics.self, forKey: .indexStatistics)
        indexStatistics = indexStatisticsDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.CapacityUnitsConfiguration.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
        let userTokenConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.UserTokenConfiguration?].self, forKey: .userTokenConfigurations)
        var userTokenConfigurationsDecoded0:[KendraClientTypes.UserTokenConfiguration]? = nil
        if let userTokenConfigurationsContainer = userTokenConfigurationsContainer {
            userTokenConfigurationsDecoded0 = [KendraClientTypes.UserTokenConfiguration]()
            for structure0 in userTokenConfigurationsContainer {
                if let structure0 = structure0 {
                    userTokenConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        userTokenConfigurations = userTokenConfigurationsDecoded0
        let userContextPolicyDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserContextPolicy.self, forKey: .userContextPolicy)
        userContextPolicy = userContextPolicyDecoded
        let userGroupResolutionConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserGroupResolutionConfiguration.self, forKey: .userGroupResolutionConfiguration)
        userGroupResolutionConfiguration = userGroupResolutionConfigurationDecoded
    }
}

extension DescribePrincipalMappingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case groupId = "GroupId"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DescribePrincipalMappingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePrincipalMappingInput: Swift.Equatable {
    /// The identifier of the data source to check the processing of PUT and DELETE actions for mapping users to their groups.
    public var dataSourceId: Swift.String?
    /// The identifier of the group required to check the processing of PUT and DELETE actions for mapping users to their groups.
    /// This member is required.
    public var groupId: Swift.String?
    /// The identifier of the index required to check the processing of PUT and DELETE actions for mapping users to their groups.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil,
        groupId: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.groupId = groupId
        self.indexId = indexId
    }
}

struct DescribePrincipalMappingInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let dataSourceId: Swift.String?
    let groupId: Swift.String?
}

extension DescribePrincipalMappingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case groupId = "GroupId"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
    }
}

extension DescribePrincipalMappingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePrincipalMappingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePrincipalMappingOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePrincipalMappingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribePrincipalMappingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
            self.groupId = output.groupId
            self.groupOrderingIdSummaries = output.groupOrderingIdSummaries
            self.indexId = output.indexId
        } else {
            self.dataSourceId = nil
            self.groupId = nil
            self.groupOrderingIdSummaries = nil
            self.indexId = nil
        }
    }
}

public struct DescribePrincipalMappingOutputResponse: Swift.Equatable {
    /// Shows the identifier of the data source to see information on the processing of PUT and DELETE actions for mapping users to their groups.
    public var dataSourceId: Swift.String?
    /// Shows the identifier of the group to see information on the processing of PUT and DELETE actions for mapping users to their groups.
    public var groupId: Swift.String?
    /// Shows the following information on the processing of PUT and DELETE actions for mapping users to their groups:
    ///
    /// * Status – the status can be either PROCESSING, SUCCEEDED, DELETING, DELETED, or FAILED.
    ///
    /// * Last updated – the last date-time an action was updated.
    ///
    /// * Received – the last date-time an action was received or submitted.
    ///
    /// * Ordering ID – the latest action that should process and apply after other actions.
    ///
    /// * Failure reason – the reason an action could not be processed.
    public var groupOrderingIdSummaries: [KendraClientTypes.GroupOrderingIdSummary]?
    /// Shows the identifier of the index to see information on the processing of PUT and DELETE actions for mapping users to their groups.
    public var indexId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil,
        groupId: Swift.String? = nil,
        groupOrderingIdSummaries: [KendraClientTypes.GroupOrderingIdSummary]? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.groupId = groupId
        self.groupOrderingIdSummaries = groupOrderingIdSummaries
        self.indexId = indexId
    }
}

struct DescribePrincipalMappingOutputResponseBody: Swift.Equatable {
    let indexId: Swift.String?
    let dataSourceId: Swift.String?
    let groupId: Swift.String?
    let groupOrderingIdSummaries: [KendraClientTypes.GroupOrderingIdSummary]?
}

extension DescribePrincipalMappingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case groupId = "GroupId"
        case groupOrderingIdSummaries = "GroupOrderingIdSummaries"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let groupOrderingIdSummariesContainer = try containerValues.decodeIfPresent([KendraClientTypes.GroupOrderingIdSummary?].self, forKey: .groupOrderingIdSummaries)
        var groupOrderingIdSummariesDecoded0:[KendraClientTypes.GroupOrderingIdSummary]? = nil
        if let groupOrderingIdSummariesContainer = groupOrderingIdSummariesContainer {
            groupOrderingIdSummariesDecoded0 = [KendraClientTypes.GroupOrderingIdSummary]()
            for structure0 in groupOrderingIdSummariesContainer {
                if let structure0 = structure0 {
                    groupOrderingIdSummariesDecoded0?.append(structure0)
                }
            }
        }
        groupOrderingIdSummaries = groupOrderingIdSummariesDecoded0
    }
}

extension DescribeQuerySuggestionsBlockListInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DescribeQuerySuggestionsBlockListInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeQuerySuggestionsBlockListInput: Swift.Equatable {
    /// The unique identifier of the block list.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for the block list.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DescribeQuerySuggestionsBlockListInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let id: Swift.String?
}

extension DescribeQuerySuggestionsBlockListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension DescribeQuerySuggestionsBlockListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeQuerySuggestionsBlockListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeQuerySuggestionsBlockListOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeQuerySuggestionsBlockListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeQuerySuggestionsBlockListOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.description = output.description
            self.errorMessage = output.errorMessage
            self.fileSizeBytes = output.fileSizeBytes
            self.id = output.id
            self.indexId = output.indexId
            self.itemCount = output.itemCount
            self.name = output.name
            self.roleArn = output.roleArn
            self.sourceS3Path = output.sourceS3Path
            self.status = output.status
            self.updatedAt = output.updatedAt
        } else {
            self.createdAt = nil
            self.description = nil
            self.errorMessage = nil
            self.fileSizeBytes = nil
            self.id = nil
            self.indexId = nil
            self.itemCount = nil
            self.name = nil
            self.roleArn = nil
            self.sourceS3Path = nil
            self.status = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeQuerySuggestionsBlockListOutputResponse: Swift.Equatable {
    /// Shows the date-time a block list for query suggestions was created.
    public var createdAt: ClientRuntime.Date?
    /// Shows the description for the block list.
    public var description: Swift.String?
    /// Shows the error message with details when there are issues in processing the block list.
    public var errorMessage: Swift.String?
    /// Shows the current size of the block list text file in S3.
    public var fileSizeBytes: Swift.Int?
    /// Shows the unique identifier of the block list.
    public var id: Swift.String?
    /// Shows the identifier of the index for the block list.
    public var indexId: Swift.String?
    /// Shows the current number of valid, non-empty words or phrases in the block list text file.
    public var itemCount: Swift.Int?
    /// Shows the name of the block list.
    public var name: Swift.String?
    /// Shows the current IAM (Identity and Access Management) role used by Amazon Kendra to access the block list text file in S3. The role needs S3 read permissions to your file in S3 and needs to give STS (Security Token Service) assume role permissions to Amazon Kendra.
    public var roleArn: Swift.String?
    /// Shows the current S3 path to your block list text file in your S3 bucket. Each block word or phrase should be on a separate line in a text file. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    public var sourceS3Path: KendraClientTypes.S3Path?
    /// Shows whether the current status of the block list is ACTIVE or INACTIVE.
    public var status: KendraClientTypes.QuerySuggestionsBlockListStatus?
    /// Shows the date-time a block list for query suggestions was last updated.
    public var updatedAt: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        fileSizeBytes: Swift.Int? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        itemCount: Swift.Int? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil,
        status: KendraClientTypes.QuerySuggestionsBlockListStatus? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.description = description
        self.errorMessage = errorMessage
        self.fileSizeBytes = fileSizeBytes
        self.id = id
        self.indexId = indexId
        self.itemCount = itemCount
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
        self.status = status
        self.updatedAt = updatedAt
    }
}

struct DescribeQuerySuggestionsBlockListOutputResponseBody: Swift.Equatable {
    let indexId: Swift.String?
    let id: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let status: KendraClientTypes.QuerySuggestionsBlockListStatus?
    let errorMessage: Swift.String?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let sourceS3Path: KendraClientTypes.S3Path?
    let itemCount: Swift.Int?
    let fileSizeBytes: Swift.Int?
    let roleArn: Swift.String?
}

extension DescribeQuerySuggestionsBlockListOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case description = "Description"
        case errorMessage = "ErrorMessage"
        case fileSizeBytes = "FileSizeBytes"
        case id = "Id"
        case indexId = "IndexId"
        case itemCount = "ItemCount"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.QuerySuggestionsBlockListStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let sourceS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .sourceS3Path)
        sourceS3Path = sourceS3PathDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let fileSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fileSizeBytes)
        fileSizeBytes = fileSizeBytesDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension DescribeQuerySuggestionsConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DescribeQuerySuggestionsConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeQuerySuggestionsConfigInput: Swift.Equatable {
    /// The identifier of the index you want to describe query suggestions settings for.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        indexId: Swift.String? = nil
    )
    {
        self.indexId = indexId
    }
}

struct DescribeQuerySuggestionsConfigInputBody: Swift.Equatable {
    let indexId: Swift.String?
}

extension DescribeQuerySuggestionsConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension DescribeQuerySuggestionsConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeQuerySuggestionsConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeQuerySuggestionsConfigOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeQuerySuggestionsConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeQuerySuggestionsConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.includeQueriesWithoutUserInformation = output.includeQueriesWithoutUserInformation
            self.lastClearTime = output.lastClearTime
            self.lastSuggestionsBuildTime = output.lastSuggestionsBuildTime
            self.minimumNumberOfQueryingUsers = output.minimumNumberOfQueryingUsers
            self.minimumQueryCount = output.minimumQueryCount
            self.mode = output.mode
            self.queryLogLookBackWindowInDays = output.queryLogLookBackWindowInDays
            self.status = output.status
            self.totalSuggestionsCount = output.totalSuggestionsCount
        } else {
            self.includeQueriesWithoutUserInformation = nil
            self.lastClearTime = nil
            self.lastSuggestionsBuildTime = nil
            self.minimumNumberOfQueryingUsers = nil
            self.minimumQueryCount = nil
            self.mode = nil
            self.queryLogLookBackWindowInDays = nil
            self.status = nil
            self.totalSuggestionsCount = nil
        }
    }
}

public struct DescribeQuerySuggestionsConfigOutputResponse: Swift.Equatable {
    /// Shows whether Amazon Kendra uses all queries or only uses queries that include user information to generate query suggestions.
    public var includeQueriesWithoutUserInformation: Swift.Bool?
    /// Shows the date-time query suggestions for an index was last cleared. After you clear suggestions, Amazon Kendra learns new suggestions based on new queries added to the query log from the time you cleared suggestions. Amazon Kendra only considers re-occurences of a query from the time you cleared suggestions.
    public var lastClearTime: ClientRuntime.Date?
    /// Shows the date-time query suggestions for an index was last updated.
    public var lastSuggestionsBuildTime: ClientRuntime.Date?
    /// Shows the minimum number of unique users who must search a query in order for the query to be eligible to suggest to your users.
    public var minimumNumberOfQueryingUsers: Swift.Int?
    /// Shows the minimum number of times a query must be searched in order for the query to be eligible to suggest to your users.
    public var minimumQueryCount: Swift.Int?
    /// Shows whether query suggestions are currently in ENABLED mode or LEARN_ONLY mode. By default, Amazon Kendra enables query suggestions.LEARN_ONLY turns off query suggestions for your users. You can change the mode using the [UpdateQuerySuggestionsConfig](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html) operation.
    public var mode: KendraClientTypes.Mode?
    /// Shows how recent your queries are in your query log time window (in days).
    public var queryLogLookBackWindowInDays: Swift.Int?
    /// Shows whether the status of query suggestions settings is currently Active or Updating. Active means the current settings apply and Updating means your changed settings are in the process of applying.
    public var status: KendraClientTypes.QuerySuggestionsStatus?
    /// Shows the current total count of query suggestions for an index. This count can change when you update your query suggestions settings, if you filter out certain queries from suggestions using a block list, and as the query log accumulates more queries for Amazon Kendra to learn from.
    public var totalSuggestionsCount: Swift.Int?

    public init (
        includeQueriesWithoutUserInformation: Swift.Bool? = nil,
        lastClearTime: ClientRuntime.Date? = nil,
        lastSuggestionsBuildTime: ClientRuntime.Date? = nil,
        minimumNumberOfQueryingUsers: Swift.Int? = nil,
        minimumQueryCount: Swift.Int? = nil,
        mode: KendraClientTypes.Mode? = nil,
        queryLogLookBackWindowInDays: Swift.Int? = nil,
        status: KendraClientTypes.QuerySuggestionsStatus? = nil,
        totalSuggestionsCount: Swift.Int? = nil
    )
    {
        self.includeQueriesWithoutUserInformation = includeQueriesWithoutUserInformation
        self.lastClearTime = lastClearTime
        self.lastSuggestionsBuildTime = lastSuggestionsBuildTime
        self.minimumNumberOfQueryingUsers = minimumNumberOfQueryingUsers
        self.minimumQueryCount = minimumQueryCount
        self.mode = mode
        self.queryLogLookBackWindowInDays = queryLogLookBackWindowInDays
        self.status = status
        self.totalSuggestionsCount = totalSuggestionsCount
    }
}

struct DescribeQuerySuggestionsConfigOutputResponseBody: Swift.Equatable {
    let mode: KendraClientTypes.Mode?
    let status: KendraClientTypes.QuerySuggestionsStatus?
    let queryLogLookBackWindowInDays: Swift.Int?
    let includeQueriesWithoutUserInformation: Swift.Bool?
    let minimumNumberOfQueryingUsers: Swift.Int?
    let minimumQueryCount: Swift.Int?
    let lastSuggestionsBuildTime: ClientRuntime.Date?
    let lastClearTime: ClientRuntime.Date?
    let totalSuggestionsCount: Swift.Int?
}

extension DescribeQuerySuggestionsConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeQueriesWithoutUserInformation = "IncludeQueriesWithoutUserInformation"
        case lastClearTime = "LastClearTime"
        case lastSuggestionsBuildTime = "LastSuggestionsBuildTime"
        case minimumNumberOfQueryingUsers = "MinimumNumberOfQueryingUsers"
        case minimumQueryCount = "MinimumQueryCount"
        case mode = "Mode"
        case queryLogLookBackWindowInDays = "QueryLogLookBackWindowInDays"
        case status = "Status"
        case totalSuggestionsCount = "TotalSuggestionsCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Mode.self, forKey: .mode)
        mode = modeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.QuerySuggestionsStatus.self, forKey: .status)
        status = statusDecoded
        let queryLogLookBackWindowInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queryLogLookBackWindowInDays)
        queryLogLookBackWindowInDays = queryLogLookBackWindowInDaysDecoded
        let includeQueriesWithoutUserInformationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeQueriesWithoutUserInformation)
        includeQueriesWithoutUserInformation = includeQueriesWithoutUserInformationDecoded
        let minimumNumberOfQueryingUsersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumNumberOfQueryingUsers)
        minimumNumberOfQueryingUsers = minimumNumberOfQueryingUsersDecoded
        let minimumQueryCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumQueryCount)
        minimumQueryCount = minimumQueryCountDecoded
        let lastSuggestionsBuildTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuggestionsBuildTime)
        lastSuggestionsBuildTime = lastSuggestionsBuildTimeDecoded
        let lastClearTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastClearTime)
        lastClearTime = lastClearTimeDecoded
        let totalSuggestionsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalSuggestionsCount)
        totalSuggestionsCount = totalSuggestionsCountDecoded
    }
}

extension DescribeThesaurusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DescribeThesaurusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeThesaurusInput: Swift.Equatable {
    /// The identifier of the thesaurus to describe.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index associated with the thesaurus to describe.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct DescribeThesaurusInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension DescribeThesaurusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension DescribeThesaurusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeThesaurusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeThesaurusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeThesaurusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeThesaurusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.description = output.description
            self.errorMessage = output.errorMessage
            self.fileSizeBytes = output.fileSizeBytes
            self.id = output.id
            self.indexId = output.indexId
            self.name = output.name
            self.roleArn = output.roleArn
            self.sourceS3Path = output.sourceS3Path
            self.status = output.status
            self.synonymRuleCount = output.synonymRuleCount
            self.termCount = output.termCount
            self.updatedAt = output.updatedAt
        } else {
            self.createdAt = nil
            self.description = nil
            self.errorMessage = nil
            self.fileSizeBytes = nil
            self.id = nil
            self.indexId = nil
            self.name = nil
            self.roleArn = nil
            self.sourceS3Path = nil
            self.status = nil
            self.synonymRuleCount = nil
            self.termCount = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeThesaurusOutputResponse: Swift.Equatable {
    /// The Unix datetime that the thesaurus was created.
    public var createdAt: ClientRuntime.Date?
    /// The thesaurus description.
    public var description: Swift.String?
    /// When the Status field value is FAILED, the ErrorMessage field provides more information.
    public var errorMessage: Swift.String?
    /// The size of the thesaurus file in bytes.
    public var fileSizeBytes: Swift.Int?
    /// The identifier of the thesaurus.
    public var id: Swift.String?
    /// The identifier of the index associated with the thesaurus to describe.
    public var indexId: Swift.String?
    /// The thesaurus name.
    public var name: Swift.String?
    /// An IAM role that gives Amazon Kendra permissions to access thesaurus file specified in SourceS3Path.
    public var roleArn: Swift.String?
    /// Information required to find a specific file in an Amazon S3 bucket.
    public var sourceS3Path: KendraClientTypes.S3Path?
    /// The current status of the thesaurus. When the value is ACTIVE, queries are able to use the thesaurus. If the Status field value is FAILED, the ErrorMessage field provides more information. If the status is ACTIVE_BUT_UPDATE_FAILED, it means that Amazon Kendra could not ingest the new thesaurus file. The old thesaurus file is still active.
    public var status: KendraClientTypes.ThesaurusStatus?
    /// The number of synonym rules in the thesaurus file.
    public var synonymRuleCount: Swift.Int?
    /// The number of unique terms in the thesaurus file. For example, the synonyms a,b,c and a=>d, the term count would be 4.
    public var termCount: Swift.Int?
    /// The Unix datetime that the thesaurus was last updated.
    public var updatedAt: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        fileSizeBytes: Swift.Int? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil,
        status: KendraClientTypes.ThesaurusStatus? = nil,
        synonymRuleCount: Swift.Int? = nil,
        termCount: Swift.Int? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.description = description
        self.errorMessage = errorMessage
        self.fileSizeBytes = fileSizeBytes
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
        self.status = status
        self.synonymRuleCount = synonymRuleCount
        self.termCount = termCount
        self.updatedAt = updatedAt
    }
}

struct DescribeThesaurusOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let status: KendraClientTypes.ThesaurusStatus?
    let errorMessage: Swift.String?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let roleArn: Swift.String?
    let sourceS3Path: KendraClientTypes.S3Path?
    let fileSizeBytes: Swift.Int?
    let termCount: Swift.Int?
    let synonymRuleCount: Swift.Int?
}

extension DescribeThesaurusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case description = "Description"
        case errorMessage = "ErrorMessage"
        case fileSizeBytes = "FileSizeBytes"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
        case status = "Status"
        case synonymRuleCount = "SynonymRuleCount"
        case termCount = "TermCount"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ThesaurusStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let sourceS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .sourceS3Path)
        sourceS3Path = sourceS3PathDecoded
        let fileSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fileSizeBytes)
        fileSizeBytes = fileSizeBytesDecoded
        let termCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .termCount)
        termCount = termCountDecoded
        let synonymRuleCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .synonymRuleCount)
        synonymRuleCount = synonymRuleCountDecoded
    }
}

extension DisassociateEntitiesFromExperienceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityList = "EntityList"
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityList = entityList {
            var entityListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityList)
            for disassociateentitylist0 in entityList {
                try entityListContainer.encode(disassociateentitylist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DisassociateEntitiesFromExperienceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociateEntitiesFromExperienceInput: Swift.Equatable {
    /// Lists users or groups in your Amazon Web Services SSO identity source.
    /// This member is required.
    public var entityList: [KendraClientTypes.EntityConfiguration]?
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        entityList: [KendraClientTypes.EntityConfiguration]? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.entityList = entityList
        self.id = id
        self.indexId = indexId
    }
}

struct DisassociateEntitiesFromExperienceInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let entityList: [KendraClientTypes.EntityConfiguration]?
}

extension DisassociateEntitiesFromExperienceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityList = "EntityList"
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let entityListContainer = try containerValues.decodeIfPresent([KendraClientTypes.EntityConfiguration?].self, forKey: .entityList)
        var entityListDecoded0:[KendraClientTypes.EntityConfiguration]? = nil
        if let entityListContainer = entityListContainer {
            entityListDecoded0 = [KendraClientTypes.EntityConfiguration]()
            for structure0 in entityListContainer {
                if let structure0 = structure0 {
                    entityListDecoded0?.append(structure0)
                }
            }
        }
        entityList = entityListDecoded0
    }
}

extension DisassociateEntitiesFromExperienceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateEntitiesFromExperienceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateEntitiesFromExperienceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateEntitiesFromExperienceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisassociateEntitiesFromExperienceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedEntityList = output.failedEntityList
        } else {
            self.failedEntityList = nil
        }
    }
}

public struct DisassociateEntitiesFromExperienceOutputResponse: Swift.Equatable {
    /// Lists the users or groups in your Amazon Web Services SSO identity source that failed to properly remove access to your Amazon Kendra experience.
    public var failedEntityList: [KendraClientTypes.FailedEntity]?

    public init (
        failedEntityList: [KendraClientTypes.FailedEntity]? = nil
    )
    {
        self.failedEntityList = failedEntityList
    }
}

struct DisassociateEntitiesFromExperienceOutputResponseBody: Swift.Equatable {
    let failedEntityList: [KendraClientTypes.FailedEntity]?
}

extension DisassociateEntitiesFromExperienceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedEntityList = "FailedEntityList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedEntityListContainer = try containerValues.decodeIfPresent([KendraClientTypes.FailedEntity?].self, forKey: .failedEntityList)
        var failedEntityListDecoded0:[KendraClientTypes.FailedEntity]? = nil
        if let failedEntityListContainer = failedEntityListContainer {
            failedEntityListDecoded0 = [KendraClientTypes.FailedEntity]()
            for structure0 in failedEntityListContainer {
                if let structure0 = structure0 {
                    failedEntityListDecoded0?.append(structure0)
                }
            }
        }
        failedEntityList = failedEntityListDecoded0
    }
}

extension DisassociatePersonasFromEntitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityIds = "EntityIds"
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityIds = entityIds {
            var entityIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityIds)
            for entityidslist0 in entityIds {
                try entityIdsContainer.encode(entityidslist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension DisassociatePersonasFromEntitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociatePersonasFromEntitiesInput: Swift.Equatable {
    /// The identifiers of users or groups in your Amazon Web Services SSO identity source. For example, user IDs could be user emails.
    /// This member is required.
    public var entityIds: [Swift.String]?
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        entityIds: [Swift.String]? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.entityIds = entityIds
        self.id = id
        self.indexId = indexId
    }
}

struct DisassociatePersonasFromEntitiesInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let entityIds: [Swift.String]?
}

extension DisassociatePersonasFromEntitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityIds = "EntityIds"
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let entityIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entityIds)
        var entityIdsDecoded0:[Swift.String]? = nil
        if let entityIdsContainer = entityIdsContainer {
            entityIdsDecoded0 = [Swift.String]()
            for string0 in entityIdsContainer {
                if let string0 = string0 {
                    entityIdsDecoded0?.append(string0)
                }
            }
        }
        entityIds = entityIdsDecoded0
    }
}

extension DisassociatePersonasFromEntitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociatePersonasFromEntitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociatePersonasFromEntitiesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociatePersonasFromEntitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisassociatePersonasFromEntitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedEntityList = output.failedEntityList
        } else {
            self.failedEntityList = nil
        }
    }
}

public struct DisassociatePersonasFromEntitiesOutputResponse: Swift.Equatable {
    /// Lists the users or groups in your Amazon Web Services SSO identity source that failed to properly remove access to your Amazon Kendra experience.
    public var failedEntityList: [KendraClientTypes.FailedEntity]?

    public init (
        failedEntityList: [KendraClientTypes.FailedEntity]? = nil
    )
    {
        self.failedEntityList = failedEntityList
    }
}

struct DisassociatePersonasFromEntitiesOutputResponseBody: Swift.Equatable {
    let failedEntityList: [KendraClientTypes.FailedEntity]?
}

extension DisassociatePersonasFromEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedEntityList = "FailedEntityList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedEntityListContainer = try containerValues.decodeIfPresent([KendraClientTypes.FailedEntity?].self, forKey: .failedEntityList)
        var failedEntityListDecoded0:[KendraClientTypes.FailedEntity]? = nil
        if let failedEntityListContainer = failedEntityListContainer {
            failedEntityListDecoded0 = [KendraClientTypes.FailedEntity]()
            for structure0 in failedEntityListContainer {
                if let structure0 = structure0 {
                    failedEntityListDecoded0?.append(structure0)
                }
            }
        }
        failedEntityList = failedEntityListDecoded0
    }
}

extension KendraClientTypes.Document: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlList = "AccessControlList"
        case attributes = "Attributes"
        case blob = "Blob"
        case contentType = "ContentType"
        case hierarchicalAccessControlList = "HierarchicalAccessControlList"
        case id = "Id"
        case s3Path = "S3Path"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControlList = accessControlList {
            var accessControlListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accessControlList)
            for principallist0 in accessControlList {
                try accessControlListContainer.encode(principallist0)
            }
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for documentattributelist0 in attributes {
                try attributesContainer.encode(documentattributelist0)
            }
        }
        if let blob = blob {
            try encodeContainer.encode(blob.base64EncodedString(), forKey: .blob)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType.rawValue, forKey: .contentType)
        }
        if let hierarchicalAccessControlList = hierarchicalAccessControlList {
            var hierarchicalAccessControlListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hierarchicalAccessControlList)
            for hierarchicalprincipallist0 in hierarchicalAccessControlList {
                try hierarchicalAccessControlListContainer.encode(hierarchicalprincipallist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let s3Path = s3Path {
            try encodeContainer.encode(s3Path, forKey: .s3Path)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let blobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .blob)
        blob = blobDecoded
        let s3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .s3Path)
        s3Path = s3PathDecoded
        let attributesContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentAttribute?].self, forKey: .attributes)
        var attributesDecoded0:[KendraClientTypes.DocumentAttribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [KendraClientTypes.DocumentAttribute]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
        let accessControlListContainer = try containerValues.decodeIfPresent([KendraClientTypes.Principal?].self, forKey: .accessControlList)
        var accessControlListDecoded0:[KendraClientTypes.Principal]? = nil
        if let accessControlListContainer = accessControlListContainer {
            accessControlListDecoded0 = [KendraClientTypes.Principal]()
            for structure0 in accessControlListContainer {
                if let structure0 = structure0 {
                    accessControlListDecoded0?.append(structure0)
                }
            }
        }
        accessControlList = accessControlListDecoded0
        let hierarchicalAccessControlListContainer = try containerValues.decodeIfPresent([KendraClientTypes.HierarchicalPrincipal?].self, forKey: .hierarchicalAccessControlList)
        var hierarchicalAccessControlListDecoded0:[KendraClientTypes.HierarchicalPrincipal]? = nil
        if let hierarchicalAccessControlListContainer = hierarchicalAccessControlListContainer {
            hierarchicalAccessControlListDecoded0 = [KendraClientTypes.HierarchicalPrincipal]()
            for structure0 in hierarchicalAccessControlListContainer {
                if let structure0 = structure0 {
                    hierarchicalAccessControlListDecoded0?.append(structure0)
                }
            }
        }
        hierarchicalAccessControlList = hierarchicalAccessControlListDecoded0
        let contentTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ContentType.self, forKey: .contentType)
        contentType = contentTypeDecoded
    }
}

extension KendraClientTypes {
    /// A document in an index.
    public struct Document: Swift.Equatable {
        /// Information on user and group access rights, which is used for user context filtering.
        public var accessControlList: [KendraClientTypes.Principal]?
        /// Custom attributes to apply to the document. Use the custom attributes to provide additional information for searching, to provide facets for refining searches, and to provide additional information in the query response.
        public var attributes: [KendraClientTypes.DocumentAttribute]?
        /// The contents of the document. Documents passed to the Blob parameter must be base64 encoded. Your code might not need to encode the document file bytes if you're using an Amazon Web Services SDK to call Amazon Kendra operations. If you are calling the Amazon Kendra endpoint directly using REST, you must base64 encode the contents before sending.
        public var blob: ClientRuntime.Data?
        /// The file type of the document in the Blob field.
        public var contentType: KendraClientTypes.ContentType?
        /// The list of [principal](https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html) lists that define the hierarchy for which documents users should have access to.
        public var hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]?
        /// A unique identifier of the document in the index.
        /// This member is required.
        public var id: Swift.String?
        /// Information required to find a specific file in an Amazon S3 bucket.
        public var s3Path: KendraClientTypes.S3Path?
        /// The title of the document.
        public var title: Swift.String?

        public init (
            accessControlList: [KendraClientTypes.Principal]? = nil,
            attributes: [KendraClientTypes.DocumentAttribute]? = nil,
            blob: ClientRuntime.Data? = nil,
            contentType: KendraClientTypes.ContentType? = nil,
            hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]? = nil,
            id: Swift.String? = nil,
            s3Path: KendraClientTypes.S3Path? = nil,
            title: Swift.String? = nil
        )
        {
            self.accessControlList = accessControlList
            self.attributes = attributes
            self.blob = blob
            self.contentType = contentType
            self.hierarchicalAccessControlList = hierarchicalAccessControlList
            self.id = id
            self.s3Path = s3Path
            self.title = title
        }
    }

}

extension KendraClientTypes.DocumentAttribute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttributeValue.self, forKey: .value)
        value = valueDecoded
    }
}

extension KendraClientTypes {
    /// A custom attribute value assigned to a document.
    public struct DocumentAttribute: Swift.Equatable {
        /// The identifier for the attribute.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the attribute.
        /// This member is required.
        public var value: KendraClientTypes.DocumentAttributeValue?

        public init (
            key: Swift.String? = nil,
            value: KendraClientTypes.DocumentAttributeValue? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension KendraClientTypes.DocumentAttributeCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionDocumentAttributeKey = "ConditionDocumentAttributeKey"
        case conditionOnValue = "ConditionOnValue"
        case `operator` = "Operator"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionDocumentAttributeKey = conditionDocumentAttributeKey {
            try encodeContainer.encode(conditionDocumentAttributeKey, forKey: .conditionDocumentAttributeKey)
        }
        if let conditionOnValue = conditionOnValue {
            try encodeContainer.encode(conditionOnValue, forKey: .conditionOnValue)
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionDocumentAttributeKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionDocumentAttributeKey)
        conditionDocumentAttributeKey = conditionDocumentAttributeKeyDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConditionOperator.self, forKey: .operator)
        `operator` = operatorDecoded
        let conditionOnValueDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttributeValue.self, forKey: .conditionOnValue)
        conditionOnValue = conditionOnValueDecoded
    }
}

extension KendraClientTypes {
    /// The condition used for the target document attribute or metadata field when ingesting documents into Amazon Kendra. You use this with [DocumentAttributeTarget to apply the condition](https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeTarget.html). For example, you can create the 'Department' target field and have it prefill department names associated with the documents based on information in the 'Source_URI' field. Set the condition that if the 'Source_URI' field contains 'financial' in its URI value, then prefill the target field 'Department' with the target value 'Finance' for the document. Amazon Kendra cannot create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using DocumentAttributeTarget. Amazon Kendra then will map your newly created metadata field to your index field.
    public struct DocumentAttributeCondition: Swift.Equatable {
        /// The identifier of the document attribute used for the condition. For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents. Amazon Kendra currently does not support _document_body as an attribute key used for the condition.
        /// This member is required.
        public var conditionDocumentAttributeKey: Swift.String?
        /// The value used by the operator. For example, you can specify the value 'financial' for strings in the 'Source_URI' field that partially match or contain this value.
        public var conditionOnValue: KendraClientTypes.DocumentAttributeValue?
        /// The condition operator. For example, you can use 'Contains' to partially match a string.
        /// This member is required.
        public var `operator`: KendraClientTypes.ConditionOperator?

        public init (
            conditionDocumentAttributeKey: Swift.String? = nil,
            conditionOnValue: KendraClientTypes.DocumentAttributeValue? = nil,
            `operator`: KendraClientTypes.ConditionOperator? = nil
        )
        {
            self.conditionDocumentAttributeKey = conditionDocumentAttributeKey
            self.conditionOnValue = conditionOnValue
            self.`operator` = `operator`
        }
    }

}

extension KendraClientTypes.DocumentAttributeTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetDocumentAttributeKey = "TargetDocumentAttributeKey"
        case targetDocumentAttributeValue = "TargetDocumentAttributeValue"
        case targetDocumentAttributeValueDeletion = "TargetDocumentAttributeValueDeletion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetDocumentAttributeKey = targetDocumentAttributeKey {
            try encodeContainer.encode(targetDocumentAttributeKey, forKey: .targetDocumentAttributeKey)
        }
        if let targetDocumentAttributeValue = targetDocumentAttributeValue {
            try encodeContainer.encode(targetDocumentAttributeValue, forKey: .targetDocumentAttributeValue)
        }
        if targetDocumentAttributeValueDeletion != false {
            try encodeContainer.encode(targetDocumentAttributeValueDeletion, forKey: .targetDocumentAttributeValueDeletion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDocumentAttributeKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetDocumentAttributeKey)
        targetDocumentAttributeKey = targetDocumentAttributeKeyDecoded
        let targetDocumentAttributeValueDeletionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .targetDocumentAttributeValueDeletion)
        targetDocumentAttributeValueDeletion = targetDocumentAttributeValueDeletionDecoded
        let targetDocumentAttributeValueDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttributeValue.self, forKey: .targetDocumentAttributeValue)
        targetDocumentAttributeValue = targetDocumentAttributeValueDecoded
    }
}

extension KendraClientTypes {
    /// The target document attribute or metadata field you want to alter when ingesting documents into Amazon Kendra. For example, you can delete customer identification numbers associated with the documents, stored in the document metadata field called 'Customer_ID'. You set the target key as 'Customer_ID' and the deletion flag to TRUE. This removes all customer ID values in the field 'Customer_ID'. This would scrub personally identifiable information from each document's metadata. Amazon Kendra cannot create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using DocumentAttributeTarget. Amazon Kendra then will map your newly created metadata field to your index field. You can also use this with [DocumentAttributeCondition](https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeCondition.html).
    public struct DocumentAttributeTarget: Swift.Equatable {
        /// The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.
        public var targetDocumentAttributeKey: Swift.String?
        /// The target value you want to create for the target attribute. For example, 'Finance' could be the target value for the target attribute key 'Department'.
        public var targetDocumentAttributeValue: KendraClientTypes.DocumentAttributeValue?
        /// TRUE to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to TRUE. To create a target value (TargetDocumentAttributeValue), set this to FALSE.
        public var targetDocumentAttributeValueDeletion: Swift.Bool

        public init (
            targetDocumentAttributeKey: Swift.String? = nil,
            targetDocumentAttributeValue: KendraClientTypes.DocumentAttributeValue? = nil,
            targetDocumentAttributeValueDeletion: Swift.Bool = false
        )
        {
            self.targetDocumentAttributeKey = targetDocumentAttributeKey
            self.targetDocumentAttributeValue = targetDocumentAttributeValue
            self.targetDocumentAttributeValueDeletion = targetDocumentAttributeValueDeletion
        }
    }

}

extension KendraClientTypes.DocumentAttributeValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dateValue = "DateValue"
        case longValue = "LongValue"
        case stringListValue = "StringListValue"
        case stringValue = "StringValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dateValue = dateValue {
            try encodeContainer.encode(dateValue.timeIntervalSince1970, forKey: .dateValue)
        }
        if let longValue = longValue {
            try encodeContainer.encode(longValue, forKey: .longValue)
        }
        if let stringListValue = stringListValue {
            var stringListValueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringListValue)
            for documentattributestringlistvalue0 in stringListValue {
                try stringListValueContainer.encode(documentattributestringlistvalue0)
            }
        }
        if let stringValue = stringValue {
            try encodeContainer.encode(stringValue, forKey: .stringValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
        let stringListValueContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stringListValue)
        var stringListValueDecoded0:[Swift.String]? = nil
        if let stringListValueContainer = stringListValueContainer {
            stringListValueDecoded0 = [Swift.String]()
            for string0 in stringListValueContainer {
                if let string0 = string0 {
                    stringListValueDecoded0?.append(string0)
                }
            }
        }
        stringListValue = stringListValueDecoded0
        let longValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .longValue)
        longValue = longValueDecoded
        let dateValueDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .dateValue)
        dateValue = dateValueDecoded
    }
}

extension KendraClientTypes {
    /// The value of a custom document attribute. You can only provide one value for a custom attribute.
    public struct DocumentAttributeValue: Swift.Equatable {
        /// A date expressed as an ISO 8601 string. It is important for the time zone to be included in the ISO 8601 date-time format. For example, 20120325T123010+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.
        public var dateValue: ClientRuntime.Date?
        /// A long integer value.
        public var longValue: Swift.Int?
        /// A list of strings.
        public var stringListValue: [Swift.String]?
        /// A string, such as "department".
        public var stringValue: Swift.String?

        public init (
            dateValue: ClientRuntime.Date? = nil,
            longValue: Swift.Int? = nil,
            stringListValue: [Swift.String]? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.dateValue = dateValue
            self.longValue = longValue
            self.stringListValue = stringListValue
            self.stringValue = stringValue
        }
    }

}

extension KendraClientTypes.DocumentAttributeValueCountPair: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case documentAttributeValue = "DocumentAttributeValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let documentAttributeValue = documentAttributeValue {
            try encodeContainer.encode(documentAttributeValue, forKey: .documentAttributeValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentAttributeValueDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttributeValue.self, forKey: .documentAttributeValue)
        documentAttributeValue = documentAttributeValueDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
    }
}

extension KendraClientTypes {
    /// Provides the count of documents that match a particular attribute when doing a faceted search.
    public struct DocumentAttributeValueCountPair: Swift.Equatable {
        /// The number of documents in the response that have the attribute value for the key.
        public var count: Swift.Int?
        /// The value of the attribute. For example, "HR."
        public var documentAttributeValue: KendraClientTypes.DocumentAttributeValue?

        public init (
            count: Swift.Int? = nil,
            documentAttributeValue: KendraClientTypes.DocumentAttributeValue? = nil
        )
        {
            self.count = count
            self.documentAttributeValue = documentAttributeValue
        }
    }

}

extension KendraClientTypes {
    public enum DocumentAttributeValueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dateValue
        case longValue
        case stringListValue
        case stringValue
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentAttributeValueType] {
            return [
                .dateValue,
                .longValue,
                .stringListValue,
                .stringValue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dateValue: return "DATE_VALUE"
            case .longValue: return "LONG_VALUE"
            case .stringListValue: return "STRING_LIST_VALUE"
            case .stringValue: return "STRING_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentAttributeValueType(rawValue: rawValue) ?? DocumentAttributeValueType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.DocumentInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case documentId = "DocumentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for documentattributelist0 in attributes {
                try attributesContainer.encode(documentattributelist0)
            }
        }
        if let documentId = documentId {
            try encodeContainer.encode(documentId, forKey: .documentId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentId)
        documentId = documentIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentAttribute?].self, forKey: .attributes)
        var attributesDecoded0:[KendraClientTypes.DocumentAttribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [KendraClientTypes.DocumentAttribute]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
    }
}

extension KendraClientTypes {
    /// Identifies a document for which to retrieve status information
    public struct DocumentInfo: Swift.Equatable {
        /// Attributes that identify a specific version of a document to check. The only valid attributes are:
        ///
        /// * version
        ///
        /// * datasourceId
        ///
        /// * jobExecutionId
        ///
        ///
        /// The attributes follow these rules:
        ///
        /// * dataSourceId and jobExecutionId must be used together.
        ///
        /// * version is ignored if dataSourceId and jobExecutionId are not provided.
        ///
        /// * If dataSourceId and jobExecutionId are provided, but version is not, the version defaults to "0".
        public var attributes: [KendraClientTypes.DocumentAttribute]?
        /// The unique identifier of the document.
        /// This member is required.
        public var documentId: Swift.String?

        public init (
            attributes: [KendraClientTypes.DocumentAttribute]? = nil,
            documentId: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.documentId = documentId
        }
    }

}

extension KendraClientTypes.DocumentMetadataConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case relevance = "Relevance"
        case search = "Search"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let relevance = relevance {
            try encodeContainer.encode(relevance, forKey: .relevance)
        }
        if let search = search {
            try encodeContainer.encode(search, forKey: .search)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttributeValueType.self, forKey: .type)
        type = typeDecoded
        let relevanceDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Relevance.self, forKey: .relevance)
        relevance = relevanceDecoded
        let searchDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Search.self, forKey: .search)
        search = searchDecoded
    }
}

extension KendraClientTypes {
    /// Specifies the properties of a custom index field.
    public struct DocumentMetadataConfiguration: Swift.Equatable {
        /// The name of the index field.
        /// This member is required.
        public var name: Swift.String?
        /// Provides manual tuning parameters to determine how the field affects the search results.
        public var relevance: KendraClientTypes.Relevance?
        /// Provides information about how the field is used during a search.
        public var search: KendraClientTypes.Search?
        /// The data type of the index field.
        /// This member is required.
        public var type: KendraClientTypes.DocumentAttributeValueType?

        public init (
            name: Swift.String? = nil,
            relevance: KendraClientTypes.Relevance? = nil,
            search: KendraClientTypes.Search? = nil,
            type: KendraClientTypes.DocumentAttributeValueType? = nil
        )
        {
            self.name = name
            self.relevance = relevance
            self.search = search
            self.type = type
        }
    }

}

extension KendraClientTypes.DocumentRelevanceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case relevance = "Relevance"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let relevance = relevance {
            try encodeContainer.encode(relevance, forKey: .relevance)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let relevanceDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Relevance.self, forKey: .relevance)
        relevance = relevanceDecoded
    }
}

extension KendraClientTypes {
    /// Overrides the document relevance properties of a custom index field.
    public struct DocumentRelevanceConfiguration: Swift.Equatable {
        /// The name of the tuning configuration to override document relevance at the index level.
        /// This member is required.
        public var name: Swift.String?
        /// Provides information for manually tuning the relevance of a field in a search. When a query includes terms that match the field, the results are given a boost in the response based on these tuning parameters.
        /// This member is required.
        public var relevance: KendraClientTypes.Relevance?

        public init (
            name: Swift.String? = nil,
            relevance: KendraClientTypes.Relevance? = nil
        )
        {
            self.name = name
            self.relevance = relevance
        }
    }

}

extension KendraClientTypes {
    public enum DocumentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case indexed
        case notFound
        case processing
        case updated
        case updateFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentStatus] {
            return [
                .failed,
                .indexed,
                .notFound,
                .processing,
                .updated,
                .updateFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .indexed: return "INDEXED"
            case .notFound: return "NOT_FOUND"
            case .processing: return "PROCESSING"
            case .updated: return "UPDATED"
            case .updateFailed: return "UPDATE_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentStatus(rawValue: rawValue) ?? DocumentStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.DocumentsMetadataConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Prefix = "S3Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Prefix = s3Prefix {
            try encodeContainer.encode(s3Prefix, forKey: .s3Prefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3PrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
    }
}

extension KendraClientTypes {
    /// Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.
    public struct DocumentsMetadataConfiguration: Swift.Equatable {
        /// A prefix used to filter metadata configuration files in the Amazon Web Services S3 bucket. The S3 bucket might contain multiple metadata files. Use S3Prefix to include only the desired metadata files.
        public var s3Prefix: Swift.String?

        public init (
            s3Prefix: Swift.String? = nil
        )
        {
            self.s3Prefix = s3Prefix
        }
    }

}

extension KendraClientTypes {
    public enum EndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case home
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointType] {
            return [
                .home,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .home: return "HOME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EndpointType(rawValue: rawValue) ?? EndpointType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.EntityConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityId = "EntityId"
        case entityType = "EntityType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityId = entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let entityType = entityType {
            try encodeContainer.encode(entityType.rawValue, forKey: .entityType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let entityTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.EntityType.self, forKey: .entityType)
        entityType = entityTypeDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information of users or groups in your Amazon Web Services SSO identity source to grant access your Amazon Kendra experience.
    public struct EntityConfiguration: Swift.Equatable {
        /// The identifier of a user or group in your Amazon Web Services SSO identity source. For example, a user ID could be an email.
        /// This member is required.
        public var entityId: Swift.String?
        /// Specifies whether you are configuring a User or a Group.
        /// This member is required.
        public var entityType: KendraClientTypes.EntityType?

        public init (
            entityId: Swift.String? = nil,
            entityType: KendraClientTypes.EntityType? = nil
        )
        {
            self.entityId = entityId
            self.entityType = entityType
        }
    }

}

extension KendraClientTypes.EntityDisplayData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firstName = "FirstName"
        case groupName = "GroupName"
        case identifiedUserName = "IdentifiedUserName"
        case lastName = "LastName"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firstName = firstName {
            try encodeContainer.encode(firstName, forKey: .firstName)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let identifiedUserName = identifiedUserName {
            try encodeContainer.encode(identifiedUserName, forKey: .identifiedUserName)
        }
        if let lastName = lastName {
            try encodeContainer.encode(lastName, forKey: .lastName)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let identifiedUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifiedUserName)
        identifiedUserName = identifiedUserNameDecoded
        let firstNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstName)
        firstName = firstNameDecoded
        let lastNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastName)
        lastName = lastNameDecoded
    }
}

extension KendraClientTypes {
    /// Information about the user entity.
    public struct EntityDisplayData: Swift.Equatable {
        /// The first name of the user.
        public var firstName: Swift.String?
        /// The name of the group.
        public var groupName: Swift.String?
        /// The user name of the user.
        public var identifiedUserName: Swift.String?
        /// The last name of the user.
        public var lastName: Swift.String?
        /// The name of the user.
        public var userName: Swift.String?

        public init (
            firstName: Swift.String? = nil,
            groupName: Swift.String? = nil,
            identifiedUserName: Swift.String? = nil,
            lastName: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.firstName = firstName
            self.groupName = groupName
            self.identifiedUserName = identifiedUserName
            self.lastName = lastName
            self.userName = userName
        }
    }

}

extension KendraClientTypes.EntityPersonaConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityId = "EntityId"
        case persona = "Persona"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityId = entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let persona = persona {
            try encodeContainer.encode(persona.rawValue, forKey: .persona)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let personaDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Persona.self, forKey: .persona)
        persona = personaDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information of users or groups in your Amazon Web Services SSO identity source for access to your Amazon Kendra experience. Specific permissions are defined for each user or group once they are granted access to your Amazon Kendra experience.
    public struct EntityPersonaConfiguration: Swift.Equatable {
        /// The identifier of a user or group in your Amazon Web Services SSO identity source. For example, a user ID could be an email.
        /// This member is required.
        public var entityId: Swift.String?
        /// The persona that defines the specific permissions of the user or group in your Amazon Web Services SSO identity source. The available personas or access roles are Owner and Viewer. For more information on these personas, see [Providing access to your search page](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience).
        /// This member is required.
        public var persona: KendraClientTypes.Persona?

        public init (
            entityId: Swift.String? = nil,
            persona: KendraClientTypes.Persona? = nil
        )
        {
            self.entityId = entityId
            self.persona = persona
        }
    }

}

extension KendraClientTypes {
    public enum EntityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case group
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityType] {
            return [
                .group,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EntityType(rawValue: rawValue) ?? EntityType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes {
    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case internalError
        case invalidRequest
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .internalError,
                .invalidRequest,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .internalError: return "InternalError"
            case .invalidRequest: return "InvalidRequest"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ExperienceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentSourceConfiguration = "ContentSourceConfiguration"
        case userIdentityConfiguration = "UserIdentityConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentSourceConfiguration = contentSourceConfiguration {
            try encodeContainer.encode(contentSourceConfiguration, forKey: .contentSourceConfiguration)
        }
        if let userIdentityConfiguration = userIdentityConfiguration {
            try encodeContainer.encode(userIdentityConfiguration, forKey: .userIdentityConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentSourceConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ContentSourceConfiguration.self, forKey: .contentSourceConfiguration)
        contentSourceConfiguration = contentSourceConfigurationDecoded
        let userIdentityConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserIdentityConfiguration.self, forKey: .userIdentityConfiguration)
        userIdentityConfiguration = userIdentityConfigurationDecoded
    }
}

extension KendraClientTypes {
    /// Specifies the configuration information for your Amazon Kendra experience. This includes the data source IDs and/or FAQ IDs, and user or group information to grant access to your Amazon Kendra experience.
    public struct ExperienceConfiguration: Swift.Equatable {
        /// The identifiers of your data sources and FAQs. Or, you can specify that you want to use documents indexed via the BatchPutDocument operation. This is the content you want to use for your Amazon Kendra experience.
        public var contentSourceConfiguration: KendraClientTypes.ContentSourceConfiguration?
        /// The Amazon Web Services SSO field name that contains the identifiers of your users, such as their emails.
        public var userIdentityConfiguration: KendraClientTypes.UserIdentityConfiguration?

        public init (
            contentSourceConfiguration: KendraClientTypes.ContentSourceConfiguration? = nil,
            userIdentityConfiguration: KendraClientTypes.UserIdentityConfiguration? = nil
        )
        {
            self.contentSourceConfiguration = contentSourceConfiguration
            self.userIdentityConfiguration = userIdentityConfiguration
        }
    }

}

extension KendraClientTypes.ExperienceEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
        case endpointType = "EndpointType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let endpointType = endpointType {
            try encodeContainer.encode(endpointType.rawValue, forKey: .endpointType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.EndpointType.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information of the endpoint for your Amazon Kendra experience.
    public struct ExperienceEndpoint: Swift.Equatable {
        /// The endpoint of your Amazon Kendra experience.
        public var endpoint: Swift.String?
        /// The type of endpoint for your Amazon Kendra experience. The type currently available is HOME, which is a unique and fully hosted URL to the home page of your Amazon Kendra experience.
        public var endpointType: KendraClientTypes.EndpointType?

        public init (
            endpoint: Swift.String? = nil,
            endpointType: KendraClientTypes.EndpointType? = nil
        )
        {
            self.endpoint = endpoint
            self.endpointType = endpointType
        }
    }

}

extension KendraClientTypes.ExperienceEntitiesSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayData = "DisplayData"
        case entityId = "EntityId"
        case entityType = "EntityType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayData = displayData {
            try encodeContainer.encode(displayData, forKey: .displayData)
        }
        if let entityId = entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let entityType = entityType {
            try encodeContainer.encode(entityType.rawValue, forKey: .entityType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let entityTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.EntityType.self, forKey: .entityType)
        entityType = entityTypeDecoded
        let displayDataDecoded = try containerValues.decodeIfPresent(KendraClientTypes.EntityDisplayData.self, forKey: .displayData)
        displayData = displayDataDecoded
    }
}

extension KendraClientTypes {
    /// Summary information for users or groups in your Amazon Web Services SSO identity source with granted access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see [Building a search experience with no code](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html).
    public struct ExperienceEntitiesSummary: Swift.Equatable {
        /// Information about the user entity.
        public var displayData: KendraClientTypes.EntityDisplayData?
        /// The identifier of a user or group in your Amazon Web Services SSO identity source. For example, a user ID could be an email.
        public var entityId: Swift.String?
        /// Shows the type as User or Group.
        public var entityType: KendraClientTypes.EntityType?

        public init (
            displayData: KendraClientTypes.EntityDisplayData? = nil,
            entityId: Swift.String? = nil,
            entityType: KendraClientTypes.EntityType? = nil
        )
        {
            self.displayData = displayData
            self.entityId = entityId
            self.entityType = entityType
        }
    }

}

extension KendraClientTypes {
    public enum ExperienceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ExperienceStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExperienceStatus(rawValue: rawValue) ?? ExperienceStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ExperiencesSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case endpoints = "Endpoints"
        case id = "Id"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .endpoints)
            for experienceendpoints0 in endpoints {
                try endpointsContainer.encode(experienceendpoints0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ExperienceStatus.self, forKey: .status)
        status = statusDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ExperienceEndpoint?].self, forKey: .endpoints)
        var endpointsDecoded0:[KendraClientTypes.ExperienceEndpoint]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [KendraClientTypes.ExperienceEndpoint]()
            for structure0 in endpointsContainer {
                if let structure0 = structure0 {
                    endpointsDecoded0?.append(structure0)
                }
            }
        }
        endpoints = endpointsDecoded0
    }
}

extension KendraClientTypes {
    /// Summary information for your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see [Building a search experience with no code](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html).
    public struct ExperiencesSummary: Swift.Equatable {
        /// The date-time your Amazon Kendra experience was created.
        public var createdAt: ClientRuntime.Date?
        /// The endpoint URLs for your Amazon Kendra experiences. The URLs are unique and fully hosted by Amazon Web Services.
        public var endpoints: [KendraClientTypes.ExperienceEndpoint]?
        /// The identifier of your Amazon Kendra experience.
        public var id: Swift.String?
        /// The name of your Amazon Kendra experience.
        public var name: Swift.String?
        /// The processing status of your Amazon Kendra experience.
        public var status: KendraClientTypes.ExperienceStatus?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            endpoints: [KendraClientTypes.ExperienceEndpoint]? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.ExperienceStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.endpoints = endpoints
            self.id = id
            self.name = name
            self.status = status
        }
    }

}

extension KendraClientTypes.Facet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentAttributeKey = "DocumentAttributeKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentAttributeKey = documentAttributeKey {
            try encodeContainer.encode(documentAttributeKey, forKey: .documentAttributeKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentAttributeKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentAttributeKey)
        documentAttributeKey = documentAttributeKeyDecoded
    }
}

extension KendraClientTypes {
    /// Information about a document attribute
    public struct Facet: Swift.Equatable {
        /// The unique key for the document attribute.
        public var documentAttributeKey: Swift.String?

        public init (
            documentAttributeKey: Swift.String? = nil
        )
        {
            self.documentAttributeKey = documentAttributeKey
        }
    }

}

extension KendraClientTypes.FacetResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentAttributeKey = "DocumentAttributeKey"
        case documentAttributeValueCountPairs = "DocumentAttributeValueCountPairs"
        case documentAttributeValueType = "DocumentAttributeValueType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentAttributeKey = documentAttributeKey {
            try encodeContainer.encode(documentAttributeKey, forKey: .documentAttributeKey)
        }
        if let documentAttributeValueCountPairs = documentAttributeValueCountPairs {
            var documentAttributeValueCountPairsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentAttributeValueCountPairs)
            for documentattributevaluecountpairlist0 in documentAttributeValueCountPairs {
                try documentAttributeValueCountPairsContainer.encode(documentattributevaluecountpairlist0)
            }
        }
        if let documentAttributeValueType = documentAttributeValueType {
            try encodeContainer.encode(documentAttributeValueType.rawValue, forKey: .documentAttributeValueType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentAttributeKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentAttributeKey)
        documentAttributeKey = documentAttributeKeyDecoded
        let documentAttributeValueTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttributeValueType.self, forKey: .documentAttributeValueType)
        documentAttributeValueType = documentAttributeValueTypeDecoded
        let documentAttributeValueCountPairsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentAttributeValueCountPair?].self, forKey: .documentAttributeValueCountPairs)
        var documentAttributeValueCountPairsDecoded0:[KendraClientTypes.DocumentAttributeValueCountPair]? = nil
        if let documentAttributeValueCountPairsContainer = documentAttributeValueCountPairsContainer {
            documentAttributeValueCountPairsDecoded0 = [KendraClientTypes.DocumentAttributeValueCountPair]()
            for structure0 in documentAttributeValueCountPairsContainer {
                if let structure0 = structure0 {
                    documentAttributeValueCountPairsDecoded0?.append(structure0)
                }
            }
        }
        documentAttributeValueCountPairs = documentAttributeValueCountPairsDecoded0
    }
}

extension KendraClientTypes {
    /// The facet values for the documents in the response.
    public struct FacetResult: Swift.Equatable {
        /// The key for the facet values. This is the same as the DocumentAttributeKey provided in the query.
        public var documentAttributeKey: Swift.String?
        /// An array of key/value pairs, where the key is the value of the attribute and the count is the number of documents that share the key value.
        public var documentAttributeValueCountPairs: [KendraClientTypes.DocumentAttributeValueCountPair]?
        /// The data type of the facet value. This is the same as the type defined for the index field when it was created.
        public var documentAttributeValueType: KendraClientTypes.DocumentAttributeValueType?

        public init (
            documentAttributeKey: Swift.String? = nil,
            documentAttributeValueCountPairs: [KendraClientTypes.DocumentAttributeValueCountPair]? = nil,
            documentAttributeValueType: KendraClientTypes.DocumentAttributeValueType? = nil
        )
        {
            self.documentAttributeKey = documentAttributeKey
            self.documentAttributeValueCountPairs = documentAttributeValueCountPairs
            self.documentAttributeValueType = documentAttributeValueType
        }
    }

}

extension KendraClientTypes.FailedEntity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityId = "EntityId"
        case errorMessage = "ErrorMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityId = entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension KendraClientTypes {
    /// Information on the users or groups in your Amazon Web Services SSO identity source that failed to properly configure with your Amazon Kendra experience.
    public struct FailedEntity: Swift.Equatable {
        /// The identifier of the user or group in your Amazon Web Services SSO identity source. For example, a user ID could be an email.
        public var entityId: Swift.String?
        /// The reason the user or group in your Amazon Web Services SSO identity source failed to properly configure with your Amazon Kendra experience.
        public var errorMessage: Swift.String?

        public init (
            entityId: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.entityId = entityId
            self.errorMessage = errorMessage
        }
    }

}

extension KendraClientTypes {
    public enum FaqFileFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case csvWithHeader
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [FaqFileFormat] {
            return [
                .csv,
                .csvWithHeader,
                .json,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .csvWithHeader: return "CSV_WITH_HEADER"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FaqFileFormat(rawValue: rawValue) ?? FaqFileFormat.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.FaqStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexedQuestionAnswersCount = "IndexedQuestionAnswersCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if indexedQuestionAnswersCount != 0 {
            try encodeContainer.encode(indexedQuestionAnswersCount, forKey: .indexedQuestionAnswersCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexedQuestionAnswersCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .indexedQuestionAnswersCount)
        indexedQuestionAnswersCount = indexedQuestionAnswersCountDecoded
    }
}

extension KendraClientTypes {
    /// Provides statistical information about the FAQ questions and answers contained in an index.
    public struct FaqStatistics: Swift.Equatable {
        /// The total number of FAQ questions and answers contained in the index.
        /// This member is required.
        public var indexedQuestionAnswersCount: Swift.Int

        public init (
            indexedQuestionAnswersCount: Swift.Int = 0
        )
        {
            self.indexedQuestionAnswersCount = indexedQuestionAnswersCount
        }
    }

}

extension KendraClientTypes {
    public enum FaqStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [FaqStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FaqStatus(rawValue: rawValue) ?? FaqStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.FaqSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case fileFormat = "FileFormat"
        case id = "Id"
        case languageCode = "LanguageCode"
        case name = "Name"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let fileFormat = fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.FaqStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(KendraClientTypes.FaqFileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension KendraClientTypes {
    /// Provides information about a frequently asked questions and answer contained in an index.
    public struct FaqSummary: Swift.Equatable {
        /// The UNIX datetime that the FAQ was added to the index.
        public var createdAt: ClientRuntime.Date?
        /// The file type used to create the FAQ.
        public var fileFormat: KendraClientTypes.FaqFileFormat?
        /// The unique identifier of the FAQ.
        public var id: Swift.String?
        /// The code for a language. This shows a supported language for the FAQ document as part of the summary information for FAQs. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
        public var languageCode: Swift.String?
        /// The name that you assigned the FAQ when you created or updated the FAQ.
        public var name: Swift.String?
        /// The current status of the FAQ. When the status is ACTIVE the FAQ is ready for use.
        public var status: KendraClientTypes.FaqStatus?
        /// The UNIX datetime that the FAQ was last updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            fileFormat: KendraClientTypes.FaqFileFormat? = nil,
            id: Swift.String? = nil,
            languageCode: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.FaqStatus? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.fileFormat = fileFormat
            self.id = id
            self.languageCode = languageCode
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension GetQuerySuggestionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxSuggestionsCount = "MaxSuggestionsCount"
        case queryText = "QueryText"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let maxSuggestionsCount = maxSuggestionsCount {
            try encodeContainer.encode(maxSuggestionsCount, forKey: .maxSuggestionsCount)
        }
        if let queryText = queryText {
            try encodeContainer.encode(queryText, forKey: .queryText)
        }
    }
}

extension GetQuerySuggestionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetQuerySuggestionsInput: Swift.Equatable {
    /// The identifier of the index you want to get query suggestions from.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of query suggestions you want to show to your users.
    public var maxSuggestionsCount: Swift.Int?
    /// The text of a user's query to generate query suggestions. A query is suggested if the query prefix matches what a user starts to type as their query. Amazon Kendra does not show any suggestions if a user types fewer than two characters or more than 60 characters. A query must also have at least one search result and contain at least one word of more than four characters.
    /// This member is required.
    public var queryText: Swift.String?

    public init (
        indexId: Swift.String? = nil,
        maxSuggestionsCount: Swift.Int? = nil,
        queryText: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxSuggestionsCount = maxSuggestionsCount
        self.queryText = queryText
    }
}

struct GetQuerySuggestionsInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let queryText: Swift.String?
    let maxSuggestionsCount: Swift.Int?
}

extension GetQuerySuggestionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxSuggestionsCount = "MaxSuggestionsCount"
        case queryText = "QueryText"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let queryTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryText)
        queryText = queryTextDecoded
        let maxSuggestionsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSuggestionsCount)
        maxSuggestionsCount = maxSuggestionsCountDecoded
    }
}

extension GetQuerySuggestionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetQuerySuggestionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetQuerySuggestionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetQuerySuggestionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetQuerySuggestionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.querySuggestionsId = output.querySuggestionsId
            self.suggestions = output.suggestions
        } else {
            self.querySuggestionsId = nil
            self.suggestions = nil
        }
    }
}

public struct GetQuerySuggestionsOutputResponse: Swift.Equatable {
    /// The unique identifier for a list of query suggestions for an index.
    public var querySuggestionsId: Swift.String?
    /// A list of query suggestions for an index.
    public var suggestions: [KendraClientTypes.Suggestion]?

    public init (
        querySuggestionsId: Swift.String? = nil,
        suggestions: [KendraClientTypes.Suggestion]? = nil
    )
    {
        self.querySuggestionsId = querySuggestionsId
        self.suggestions = suggestions
    }
}

struct GetQuerySuggestionsOutputResponseBody: Swift.Equatable {
    let querySuggestionsId: Swift.String?
    let suggestions: [KendraClientTypes.Suggestion]?
}

extension GetQuerySuggestionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case querySuggestionsId = "QuerySuggestionsId"
        case suggestions = "Suggestions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let querySuggestionsIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .querySuggestionsId)
        querySuggestionsId = querySuggestionsIdDecoded
        let suggestionsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Suggestion?].self, forKey: .suggestions)
        var suggestionsDecoded0:[KendraClientTypes.Suggestion]? = nil
        if let suggestionsContainer = suggestionsContainer {
            suggestionsDecoded0 = [KendraClientTypes.Suggestion]()
            for structure0 in suggestionsContainer {
                if let structure0 = structure0 {
                    suggestionsDecoded0?.append(structure0)
                }
            }
        }
        suggestions = suggestionsDecoded0
    }
}

extension GetSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case interval = "Interval"
        case maxResults = "MaxResults"
        case metricType = "MetricType"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let interval = interval {
            try encodeContainer.encode(interval.rawValue, forKey: .interval)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let metricType = metricType {
            try encodeContainer.encode(metricType.rawValue, forKey: .metricType)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension GetSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSnapshotsInput: Swift.Equatable {
    /// The identifier of the index to get search metrics data.
    /// This member is required.
    public var indexId: Swift.String?
    /// The time interval or time window to get search metrics data. The time interval uses the time zone of your index. You can view data in the following time windows:
    ///
    /// * THIS_WEEK: The current week, starting on the Sunday and ending on the day before the current date.
    ///
    /// * ONE_WEEK_AGO: The previous week, starting on the Sunday and ending on the following Saturday.
    ///
    /// * TWO_WEEKS_AGO: The week before the previous week, starting on the Sunday and ending on the following Saturday.
    ///
    /// * THIS_MONTH: The current month, starting on the first day of the month and ending on the day before the current date.
    ///
    /// * ONE_MONTH_AGO: The previous month, starting on the first day of the month and ending on the last day of the month.
    ///
    /// * TWO_MONTHS_AGO: The month before the previous month, starting on the first day of the month and ending on last day of the month.
    /// This member is required.
    public var interval: KendraClientTypes.Interval?
    /// The maximum number of returned data for the metric.
    public var maxResults: Swift.Int?
    /// The metric you want to retrieve. You can specify only one metric per call. For more information about the metrics you can view, see [Gaining insights with search analytics](https://docs.aws.amazon.com/kendra/latest/dg/search-analytics.html).
    /// This member is required.
    public var metricType: KendraClientTypes.MetricType?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of search metrics data.
    public var nextToken: Swift.String?

    public init (
        indexId: Swift.String? = nil,
        interval: KendraClientTypes.Interval? = nil,
        maxResults: Swift.Int? = nil,
        metricType: KendraClientTypes.MetricType? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.interval = interval
        self.maxResults = maxResults
        self.metricType = metricType
        self.nextToken = nextToken
    }
}

struct GetSnapshotsInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let interval: KendraClientTypes.Interval?
    let metricType: KendraClientTypes.MetricType?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case interval = "Interval"
        case maxResults = "MaxResults"
        case metricType = "MetricType"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let intervalDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Interval.self, forKey: .interval)
        interval = intervalDecoded
        let metricTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.MetricType.self, forKey: .metricType)
        metricType = metricTypeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.snapShotTimeFilter = output.snapShotTimeFilter
            self.snapshotsData = output.snapshotsData
            self.snapshotsDataHeader = output.snapshotsDataHeader
        } else {
            self.nextToken = nil
            self.snapShotTimeFilter = nil
            self.snapshotsData = nil
            self.snapshotsDataHeader = nil
        }
    }
}

public struct GetSnapshotsOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon Kendra returns this token, which you can use in a later request to retrieve the next set of search metrics data.
    public var nextToken: Swift.String?
    /// The date-time for the beginning and end of the time window for the search metrics data.
    public var snapShotTimeFilter: KendraClientTypes.TimeRange?
    /// The search metrics data. The data returned depends on the metric type you requested.
    public var snapshotsData: [[Swift.String]]?
    /// The column headers for the search metrics data.
    public var snapshotsDataHeader: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        snapShotTimeFilter: KendraClientTypes.TimeRange? = nil,
        snapshotsData: [[Swift.String]]? = nil,
        snapshotsDataHeader: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.snapShotTimeFilter = snapShotTimeFilter
        self.snapshotsData = snapshotsData
        self.snapshotsDataHeader = snapshotsDataHeader
    }
}

struct GetSnapshotsOutputResponseBody: Swift.Equatable {
    let snapShotTimeFilter: KendraClientTypes.TimeRange?
    let snapshotsDataHeader: [Swift.String]?
    let snapshotsData: [[Swift.String]]?
    let nextToken: Swift.String?
}

extension GetSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case snapShotTimeFilter = "SnapShotTimeFilter"
        case snapshotsData = "SnapshotsData"
        case snapshotsDataHeader = "SnapshotsDataHeader"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapShotTimeFilterDecoded = try containerValues.decodeIfPresent(KendraClientTypes.TimeRange.self, forKey: .snapShotTimeFilter)
        snapShotTimeFilter = snapShotTimeFilterDecoded
        let snapshotsDataHeaderContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .snapshotsDataHeader)
        var snapshotsDataHeaderDecoded0:[Swift.String]? = nil
        if let snapshotsDataHeaderContainer = snapshotsDataHeaderContainer {
            snapshotsDataHeaderDecoded0 = [Swift.String]()
            for string0 in snapshotsDataHeaderContainer {
                if let string0 = string0 {
                    snapshotsDataHeaderDecoded0?.append(string0)
                }
            }
        }
        snapshotsDataHeader = snapshotsDataHeaderDecoded0
        let snapshotsDataContainer = try containerValues.decodeIfPresent([[Swift.String?]?].self, forKey: .snapshotsData)
        var snapshotsDataDecoded0:[[Swift.String]]? = nil
        if let snapshotsDataContainer = snapshotsDataContainer {
            snapshotsDataDecoded0 = [[Swift.String]]()
            for list0 in snapshotsDataContainer {
                var list0Decoded0: [Swift.String]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.String]()
                    for string1 in list0 {
                        if let string1 = string1 {
                            list0Decoded0?.append(string1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    snapshotsDataDecoded0?.append(list0Decoded0)
                }
            }
        }
        snapshotsData = snapshotsDataDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension KendraClientTypes.GoogleDriveConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludeMimeTypes = "ExcludeMimeTypes"
        case excludeSharedDrives = "ExcludeSharedDrives"
        case excludeUserAccounts = "ExcludeUserAccounts"
        case exclusionPatterns = "ExclusionPatterns"
        case fieldMappings = "FieldMappings"
        case inclusionPatterns = "InclusionPatterns"
        case secretArn = "SecretArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludeMimeTypes = excludeMimeTypes {
            var excludeMimeTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeMimeTypes)
            for excludemimetypeslist0 in excludeMimeTypes {
                try excludeMimeTypesContainer.encode(excludemimetypeslist0)
            }
        }
        if let excludeSharedDrives = excludeSharedDrives {
            var excludeSharedDrivesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeSharedDrives)
            for excludeshareddriveslist0 in excludeSharedDrives {
                try excludeSharedDrivesContainer.encode(excludeshareddriveslist0)
            }
        }
        if let excludeUserAccounts = excludeUserAccounts {
            var excludeUserAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeUserAccounts)
            for excludeuseraccountslist0 in excludeUserAccounts {
                try excludeUserAccountsContainer.encode(excludeuseraccountslist0)
            }
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
        let excludeMimeTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludeMimeTypes)
        var excludeMimeTypesDecoded0:[Swift.String]? = nil
        if let excludeMimeTypesContainer = excludeMimeTypesContainer {
            excludeMimeTypesDecoded0 = [Swift.String]()
            for string0 in excludeMimeTypesContainer {
                if let string0 = string0 {
                    excludeMimeTypesDecoded0?.append(string0)
                }
            }
        }
        excludeMimeTypes = excludeMimeTypesDecoded0
        let excludeUserAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludeUserAccounts)
        var excludeUserAccountsDecoded0:[Swift.String]? = nil
        if let excludeUserAccountsContainer = excludeUserAccountsContainer {
            excludeUserAccountsDecoded0 = [Swift.String]()
            for string0 in excludeUserAccountsContainer {
                if let string0 = string0 {
                    excludeUserAccountsDecoded0?.append(string0)
                }
            }
        }
        excludeUserAccounts = excludeUserAccountsDecoded0
        let excludeSharedDrivesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludeSharedDrives)
        var excludeSharedDrivesDecoded0:[Swift.String]? = nil
        if let excludeSharedDrivesContainer = excludeSharedDrivesContainer {
            excludeSharedDrivesDecoded0 = [Swift.String]()
            for string0 in excludeSharedDrivesContainer {
                if let string0 = string0 {
                    excludeSharedDrivesDecoded0?.append(string0)
                }
            }
        }
        excludeSharedDrives = excludeSharedDrivesDecoded0
    }
}

extension KendraClientTypes {
    /// Provides configuration information for data sources that connect to Google Drive.
    public struct GoogleDriveConfiguration: Swift.Equatable {
        /// A list of MIME types to exclude from the index. All documents matching the specified MIME type are excluded. For a list of MIME types, see [Using a Google Workspace Drive data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html).
        public var excludeMimeTypes: [Swift.String]?
        /// A list of identifiers or shared drives to exclude from the index. All files and folders stored on the shared drive are excluded.
        public var excludeSharedDrives: [Swift.String]?
        /// A list of email addresses of the users. Documents owned by these users are excluded from the index. Documents shared with excluded users are indexed unless they are excluded in another way.
        public var excludeUserAccounts: [Swift.String]?
        /// A list of regular expression patterns that apply to the path on Google Drive. Items that match the pattern are excluded from the index from both shared drives and users' My Drives. Items that don't match the pattern are included in the index. If an item matches both an exclusion pattern and an inclusion pattern, it is excluded from the index.
        public var exclusionPatterns: [Swift.String]?
        /// Defines mapping between a field in the Google Drive and a Amazon Kendra index field. If you are using the console, you can define index fields when creating the mapping. If you are using the API, you must first create the field using the UpdateIndex operation.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns that apply to path on Google Drive. Items that match the pattern are included in the index from both shared drives and users' My Drives. Items that don't match the pattern are excluded from the index. If an item matches both an inclusion pattern and an exclusion pattern, it is excluded from the index.
        public var inclusionPatterns: [Swift.String]?
        /// The Amazon Resource Name (ARN) of a Secrets Managersecret that contains the credentials required to connect to Google Drive. For more information, see [Using a Google Workspace Drive data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html).
        /// This member is required.
        public var secretArn: Swift.String?

        public init (
            excludeMimeTypes: [Swift.String]? = nil,
            excludeSharedDrives: [Swift.String]? = nil,
            excludeUserAccounts: [Swift.String]? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            secretArn: Swift.String? = nil
        )
        {
            self.excludeMimeTypes = excludeMimeTypes
            self.excludeSharedDrives = excludeSharedDrives
            self.excludeUserAccounts = excludeUserAccounts
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.secretArn = secretArn
        }
    }

}

extension KendraClientTypes.GroupMembers: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memberGroups = "MemberGroups"
        case memberUsers = "MemberUsers"
        case s3PathforGroupMembers = "S3PathforGroupMembers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let memberGroups = memberGroups {
            var memberGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memberGroups)
            for membergroups0 in memberGroups {
                try memberGroupsContainer.encode(membergroups0)
            }
        }
        if let memberUsers = memberUsers {
            var memberUsersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memberUsers)
            for memberusers0 in memberUsers {
                try memberUsersContainer.encode(memberusers0)
            }
        }
        if let s3PathforGroupMembers = s3PathforGroupMembers {
            try encodeContainer.encode(s3PathforGroupMembers, forKey: .s3PathforGroupMembers)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memberGroupsContainer = try containerValues.decodeIfPresent([KendraClientTypes.MemberGroup?].self, forKey: .memberGroups)
        var memberGroupsDecoded0:[KendraClientTypes.MemberGroup]? = nil
        if let memberGroupsContainer = memberGroupsContainer {
            memberGroupsDecoded0 = [KendraClientTypes.MemberGroup]()
            for structure0 in memberGroupsContainer {
                if let structure0 = structure0 {
                    memberGroupsDecoded0?.append(structure0)
                }
            }
        }
        memberGroups = memberGroupsDecoded0
        let memberUsersContainer = try containerValues.decodeIfPresent([KendraClientTypes.MemberUser?].self, forKey: .memberUsers)
        var memberUsersDecoded0:[KendraClientTypes.MemberUser]? = nil
        if let memberUsersContainer = memberUsersContainer {
            memberUsersDecoded0 = [KendraClientTypes.MemberUser]()
            for structure0 in memberUsersContainer {
                if let structure0 = structure0 {
                    memberUsersDecoded0?.append(structure0)
                }
            }
        }
        memberUsers = memberUsersDecoded0
        let s3PathforGroupMembersDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .s3PathforGroupMembers)
        s3PathforGroupMembers = s3PathforGroupMembersDecoded
    }
}

extension KendraClientTypes {
    /// A list of users or sub groups that belong to a group. Users and groups are useful for filtering search results to different users based on their group's access to documents.
    public struct GroupMembers: Swift.Equatable {
        /// A list of sub groups that belong to a group. For example, the sub groups "Research", "Engineering", and "Sales and Marketing" all belong to the group "Company".
        public var memberGroups: [KendraClientTypes.MemberGroup]?
        /// A list of users that belong to a group. For example, a list of interns all belong to the "Interns" group.
        public var memberUsers: [KendraClientTypes.MemberUser]?
        /// If you have more than 1000 users and/or sub groups for a single group, you need to provide the path to the S3 file that lists your users and sub groups for a group. Your sub groups can contain more than 1000 users, but the list of sub groups that belong to a group (and/or users) must be no more than 1000. You can download this [example S3 file](https://docs.aws.amazon.com/kendra/latest/dg/samples/group_members.zip) that uses the correct format for listing group members. Note, dataSourceId is optional. The value of type for a group is always GROUP and for a user it is always USER.
        public var s3PathforGroupMembers: KendraClientTypes.S3Path?

        public init (
            memberGroups: [KendraClientTypes.MemberGroup]? = nil,
            memberUsers: [KendraClientTypes.MemberUser]? = nil,
            s3PathforGroupMembers: KendraClientTypes.S3Path? = nil
        )
        {
            self.memberGroups = memberGroups
            self.memberUsers = memberUsers
            self.s3PathforGroupMembers = s3PathforGroupMembers
        }
    }

}

extension KendraClientTypes.GroupOrderingIdSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureReason = "FailureReason"
        case lastUpdatedAt = "LastUpdatedAt"
        case orderingId = "OrderingId"
        case receivedAt = "ReceivedAt"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let orderingId = orderingId {
            try encodeContainer.encode(orderingId, forKey: .orderingId)
        }
        if let receivedAt = receivedAt {
            try encodeContainer.encode(receivedAt.timeIntervalSince1970, forKey: .receivedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.PrincipalMappingStatus.self, forKey: .status)
        status = statusDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let receivedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .receivedAt)
        receivedAt = receivedAtDecoded
        let orderingIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .orderingId)
        orderingId = orderingIdDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension KendraClientTypes {
    /// Information on the processing of PUT and DELETE actions for mapping users to their groups.
    public struct GroupOrderingIdSummary: Swift.Equatable {
        /// The reason an action could not be processed. An action can be a PUT or DELETE action for mapping users to their groups.
        public var failureReason: Swift.String?
        /// The last date-time an action was updated. An action can be a PUT or DELETE action for mapping users to their groups.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// The order in which actions should complete processing. An action can be a PUT or DELETE action for mapping users to their groups.
        public var orderingId: Swift.Int?
        /// The date-time an action was received by Amazon Kendra. An action can be a PUT or DELETE action for mapping users to their groups.
        public var receivedAt: ClientRuntime.Date?
        /// The current processing status of actions for mapping users to their groups. The status can be either PROCESSING, SUCCEEDED, DELETING, DELETED, or FAILED.
        public var status: KendraClientTypes.PrincipalMappingStatus?

        public init (
            failureReason: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            orderingId: Swift.Int? = nil,
            receivedAt: ClientRuntime.Date? = nil,
            status: KendraClientTypes.PrincipalMappingStatus? = nil
        )
        {
            self.failureReason = failureReason
            self.lastUpdatedAt = lastUpdatedAt
            self.orderingId = orderingId
            self.receivedAt = receivedAt
            self.status = status
        }
    }

}

extension KendraClientTypes.GroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupId = "GroupId"
        case orderingId = "OrderingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let orderingId = orderingId {
            try encodeContainer.encode(orderingId, forKey: .orderingId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let orderingIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .orderingId)
        orderingId = orderingIdDecoded
    }
}

extension KendraClientTypes {
    /// Group summary information.
    public struct GroupSummary: Swift.Equatable {
        /// The identifier of the group you want group summary information on.
        public var groupId: Swift.String?
        /// The timestamp identifier used for the latest PUT or DELETE action.
        public var orderingId: Swift.Int?

        public init (
            groupId: Swift.String? = nil,
            orderingId: Swift.Int? = nil
        )
        {
            self.groupId = groupId
            self.orderingId = orderingId
        }
    }

}

extension KendraClientTypes.HierarchicalPrincipal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case principalList = "PrincipalList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let principalList = principalList {
            var principalListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .principalList)
            for principallist0 in principalList {
                try principalListContainer.encode(principallist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalListContainer = try containerValues.decodeIfPresent([KendraClientTypes.Principal?].self, forKey: .principalList)
        var principalListDecoded0:[KendraClientTypes.Principal]? = nil
        if let principalListContainer = principalListContainer {
            principalListDecoded0 = [KendraClientTypes.Principal]()
            for structure0 in principalListContainer {
                if let structure0 = structure0 {
                    principalListDecoded0?.append(structure0)
                }
            }
        }
        principalList = principalListDecoded0
    }
}

extension KendraClientTypes {
    /// Information to define the hierarchy for which documents users should have access to.
    public struct HierarchicalPrincipal: Swift.Equatable {
        /// A list of [principal](https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html) lists that define the hierarchy for which documents users should have access to. Each hierarchical list specifies which user or group has allow or deny access for each document.
        /// This member is required.
        public var principalList: [KendraClientTypes.Principal]?

        public init (
            principalList: [KendraClientTypes.Principal]? = nil
        )
        {
            self.principalList = principalList
        }
    }

}

extension KendraClientTypes.Highlight: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffset = "BeginOffset"
        case endOffset = "EndOffset"
        case topAnswer = "TopAnswer"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let endOffset = endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
        if topAnswer != false {
            try encodeContainer.encode(topAnswer, forKey: .topAnswer)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
        let topAnswerDecoded = try containerValues.decode(Swift.Bool.self, forKey: .topAnswer)
        topAnswer = topAnswerDecoded
        let typeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.HighlightType.self, forKey: .type)
        type = typeDecoded
    }
}

extension KendraClientTypes {
    /// Provides information that you can use to highlight a search result so that your users can quickly identify terms in the response.
    public struct Highlight: Swift.Equatable {
        /// The zero-based location in the response string where the highlight starts.
        /// This member is required.
        public var beginOffset: Swift.Int?
        /// The zero-based location in the response string where the highlight ends.
        /// This member is required.
        public var endOffset: Swift.Int?
        /// Indicates whether the response is the best response. True if this is the best response; otherwise, false.
        public var topAnswer: Swift.Bool
        /// The highlight type.
        public var type: KendraClientTypes.HighlightType?

        public init (
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            topAnswer: Swift.Bool = false,
            type: KendraClientTypes.HighlightType? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.topAnswer = topAnswer
            self.type = type
        }
    }

}

extension KendraClientTypes {
    public enum HighlightType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case standard
        case thesaurusSynonym
        case sdkUnknown(Swift.String)

        public static var allCases: [HighlightType] {
            return [
                .standard,
                .thesaurusSynonym,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case .thesaurusSynonym: return "THESAURUS_SYNONYM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HighlightType(rawValue: rawValue) ?? HighlightType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.HookConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invocationCondition = "InvocationCondition"
        case lambdaArn = "LambdaArn"
        case s3Bucket = "S3Bucket"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invocationCondition = invocationCondition {
            try encodeContainer.encode(invocationCondition, forKey: .invocationCondition)
        }
        if let lambdaArn = lambdaArn {
            try encodeContainer.encode(lambdaArn, forKey: .lambdaArn)
        }
        if let s3Bucket = s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invocationConditionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttributeCondition.self, forKey: .invocationCondition)
        invocationCondition = invocationConditionDecoded
        let lambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaArn)
        lambdaArn = lambdaArnDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information for invoking a Lambda function in Lambda to alter document metadata and content when ingesting documents into Amazon Kendra. You can configure your Lambda function using [PreExtractionHookConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_PreExtractionHookConfiguration.html) if you want to apply advanced alterations on the original or raw documents. If you want to apply advanced alterations on the Amazon Kendra structured documents, you must configure your Lambda function using [PostExtractionHookConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_PostExtractionHookConfiguration.html). You can only invoke one Lambda function. However, this function can invoke other functions it requires. For more information, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public struct HookConfiguration: Swift.Equatable {
        /// The condition used for when a Lambda function should be invoked. For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.
        public var invocationCondition: KendraClientTypes.DocumentAttributeCondition?
        /// The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
        /// This member is required.
        public var lambdaArn: Swift.String?
        /// Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see [Data contracts for Lambda functions](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda).
        /// This member is required.
        public var s3Bucket: Swift.String?

        public init (
            invocationCondition: KendraClientTypes.DocumentAttributeCondition? = nil,
            lambdaArn: Swift.String? = nil,
            s3Bucket: Swift.String? = nil
        )
        {
            self.invocationCondition = invocationCondition
            self.lambdaArn = lambdaArn
            self.s3Bucket = s3Bucket
        }
    }

}

extension KendraClientTypes.IndexConfigurationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case edition = "Edition"
        case id = "Id"
        case name = "Name"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let edition = edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let editionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.IndexEdition.self, forKey: .edition)
        edition = editionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.IndexStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension KendraClientTypes {
    /// A summary of information about an index.
    public struct IndexConfigurationSummary: Swift.Equatable {
        /// The Unix timestamp when the index was created.
        /// This member is required.
        public var createdAt: ClientRuntime.Date?
        /// Indicates whether the index is a enterprise edition index or a developer edition index.
        public var edition: KendraClientTypes.IndexEdition?
        /// A unique identifier for the index. Use this to identify the index when you are using operations such as Query, DescribeIndex, UpdateIndex, and DeleteIndex.
        public var id: Swift.String?
        /// The name of the index.
        public var name: Swift.String?
        /// The current status of the index. When the status is ACTIVE, the index is ready to search.
        /// This member is required.
        public var status: KendraClientTypes.IndexStatus?
        /// The Unix timestamp when the index was last updated by the UpdateIndex operation.
        /// This member is required.
        public var updatedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            edition: KendraClientTypes.IndexEdition? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.IndexStatus? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.edition = edition
            self.id = id
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension KendraClientTypes {
    public enum IndexEdition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case developerEdition
        case enterpriseEdition
        case sdkUnknown(Swift.String)

        public static var allCases: [IndexEdition] {
            return [
                .developerEdition,
                .enterpriseEdition,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .developerEdition: return "DEVELOPER_EDITION"
            case .enterpriseEdition: return "ENTERPRISE_EDITION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IndexEdition(rawValue: rawValue) ?? IndexEdition.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.IndexStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faqStatistics = "FaqStatistics"
        case textDocumentStatistics = "TextDocumentStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let faqStatistics = faqStatistics {
            try encodeContainer.encode(faqStatistics, forKey: .faqStatistics)
        }
        if let textDocumentStatistics = textDocumentStatistics {
            try encodeContainer.encode(textDocumentStatistics, forKey: .textDocumentStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let faqStatisticsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.FaqStatistics.self, forKey: .faqStatistics)
        faqStatistics = faqStatisticsDecoded
        let textDocumentStatisticsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.TextDocumentStatistics.self, forKey: .textDocumentStatistics)
        textDocumentStatistics = textDocumentStatisticsDecoded
    }
}

extension KendraClientTypes {
    /// Provides information about the number of documents and the number of questions and answers in an index.
    public struct IndexStatistics: Swift.Equatable {
        /// The number of question and answer topics in the index.
        /// This member is required.
        public var faqStatistics: KendraClientTypes.FaqStatistics?
        /// The number of text documents indexed.
        /// This member is required.
        public var textDocumentStatistics: KendraClientTypes.TextDocumentStatistics?

        public init (
            faqStatistics: KendraClientTypes.FaqStatistics? = nil,
            textDocumentStatistics: KendraClientTypes.TextDocumentStatistics? = nil
        )
        {
            self.faqStatistics = faqStatistics
            self.textDocumentStatistics = textDocumentStatistics
        }
    }

}

extension KendraClientTypes {
    public enum IndexStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case systemUpdating
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [IndexStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .systemUpdating,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .systemUpdating: return "SYSTEM_UPDATING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IndexStatus(rawValue: rawValue) ?? IndexStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case condition = "Condition"
        case documentContentDeletion = "DocumentContentDeletion"
        case target = "Target"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let condition = condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if documentContentDeletion != false {
            try encodeContainer.encode(documentContentDeletion, forKey: .documentContentDeletion)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttributeCondition.self, forKey: .condition)
        condition = conditionDecoded
        let targetDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentAttributeTarget.self, forKey: .target)
        target = targetDecoded
        let documentContentDeletionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .documentContentDeletion)
        documentContentDeletion = documentContentDeletionDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information for applying basic logic to alter document metadata and content when ingesting documents into Amazon Kendra. To apply advanced logic, to go beyond what you can do with basic logic, see [HookConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_HookConfiguration.html). For more information, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public struct InlineCustomDocumentEnrichmentConfiguration: Swift.Equatable {
        /// Configuration of the condition used for the target document attribute or metadata field when ingesting documents into Amazon Kendra.
        public var condition: KendraClientTypes.DocumentAttributeCondition?
        /// TRUE to delete content if the condition used for the target attribute is met.
        public var documentContentDeletion: Swift.Bool
        /// Configuration of the target document attribute or metadata field when ingesting documents into Amazon Kendra. You can also include a value.
        public var target: KendraClientTypes.DocumentAttributeTarget?

        public init (
            condition: KendraClientTypes.DocumentAttributeCondition? = nil,
            documentContentDeletion: Swift.Bool = false,
            target: KendraClientTypes.DocumentAttributeTarget? = nil
        )
        {
            self.condition = condition
            self.documentContentDeletion = documentContentDeletion
            self.target = target
        }
    }

}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KendraClientTypes {
    public enum Interval: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case oneMonthAgo
        case oneWeekAgo
        case thisMonth
        case thisWeek
        case twoMonthsAgo
        case twoWeeksAgo
        case sdkUnknown(Swift.String)

        public static var allCases: [Interval] {
            return [
                .oneMonthAgo,
                .oneWeekAgo,
                .thisMonth,
                .thisWeek,
                .twoMonthsAgo,
                .twoWeeksAgo,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .oneMonthAgo: return "ONE_MONTH_AGO"
            case .oneWeekAgo: return "ONE_WEEK_AGO"
            case .thisMonth: return "THIS_MONTH"
            case .thisWeek: return "THIS_WEEK"
            case .twoMonthsAgo: return "TWO_MONTHS_AGO"
            case .twoWeeksAgo: return "TWO_WEEKS_AGO"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Interval(rawValue: rawValue) ?? Interval.sdkUnknown(rawValue)
        }
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input to the request is not valid.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KendraClientTypes.JsonTokenTypeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupAttributeField = "GroupAttributeField"
        case userNameAttributeField = "UserNameAttributeField"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupAttributeField = groupAttributeField {
            try encodeContainer.encode(groupAttributeField, forKey: .groupAttributeField)
        }
        if let userNameAttributeField = userNameAttributeField {
            try encodeContainer.encode(userNameAttributeField, forKey: .userNameAttributeField)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameAttributeFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userNameAttributeField)
        userNameAttributeField = userNameAttributeFieldDecoded
        let groupAttributeFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupAttributeField)
        groupAttributeField = groupAttributeFieldDecoded
    }
}

extension KendraClientTypes {
    /// Configuration information for the JSON token type.
    public struct JsonTokenTypeConfiguration: Swift.Equatable {
        /// The group attribute field.
        /// This member is required.
        public var groupAttributeField: Swift.String?
        /// The user name attribute field.
        /// This member is required.
        public var userNameAttributeField: Swift.String?

        public init (
            groupAttributeField: Swift.String? = nil,
            userNameAttributeField: Swift.String? = nil
        )
        {
            self.groupAttributeField = groupAttributeField
            self.userNameAttributeField = userNameAttributeField
        }
    }

}

extension KendraClientTypes.JwtTokenTypeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case claimRegex = "ClaimRegex"
        case groupAttributeField = "GroupAttributeField"
        case issuer = "Issuer"
        case keyLocation = "KeyLocation"
        case secretManagerArn = "SecretManagerArn"
        case uRL = "URL"
        case userNameAttributeField = "UserNameAttributeField"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let claimRegex = claimRegex {
            try encodeContainer.encode(claimRegex, forKey: .claimRegex)
        }
        if let groupAttributeField = groupAttributeField {
            try encodeContainer.encode(groupAttributeField, forKey: .groupAttributeField)
        }
        if let issuer = issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let keyLocation = keyLocation {
            try encodeContainer.encode(keyLocation.rawValue, forKey: .keyLocation)
        }
        if let secretManagerArn = secretManagerArn {
            try encodeContainer.encode(secretManagerArn, forKey: .secretManagerArn)
        }
        if let uRL = uRL {
            try encodeContainer.encode(uRL, forKey: .uRL)
        }
        if let userNameAttributeField = userNameAttributeField {
            try encodeContainer.encode(userNameAttributeField, forKey: .userNameAttributeField)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyLocationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.KeyLocation.self, forKey: .keyLocation)
        keyLocation = keyLocationDecoded
        let uRLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uRL)
        uRL = uRLDecoded
        let secretManagerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretManagerArn)
        secretManagerArn = secretManagerArnDecoded
        let userNameAttributeFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userNameAttributeField)
        userNameAttributeField = userNameAttributeFieldDecoded
        let groupAttributeFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupAttributeField)
        groupAttributeField = groupAttributeFieldDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let claimRegexDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .claimRegex)
        claimRegex = claimRegexDecoded
    }
}

extension KendraClientTypes {
    /// Configuration information for the JWT token type.
    public struct JwtTokenTypeConfiguration: Swift.Equatable {
        /// The regular expression that identifies the claim.
        public var claimRegex: Swift.String?
        /// The group attribute field.
        public var groupAttributeField: Swift.String?
        /// The issuer of the token.
        public var issuer: Swift.String?
        /// The location of the key.
        /// This member is required.
        public var keyLocation: KendraClientTypes.KeyLocation?
        /// The Amazon Resource Name (arn) of the secret.
        public var secretManagerArn: Swift.String?
        /// The signing key URL.
        public var uRL: Swift.String?
        /// The user name attribute field.
        public var userNameAttributeField: Swift.String?

        public init (
            claimRegex: Swift.String? = nil,
            groupAttributeField: Swift.String? = nil,
            issuer: Swift.String? = nil,
            keyLocation: KendraClientTypes.KeyLocation? = nil,
            secretManagerArn: Swift.String? = nil,
            uRL: Swift.String? = nil,
            userNameAttributeField: Swift.String? = nil
        )
        {
            self.claimRegex = claimRegex
            self.groupAttributeField = groupAttributeField
            self.issuer = issuer
            self.keyLocation = keyLocation
            self.secretManagerArn = secretManagerArn
            self.uRL = uRL
            self.userNameAttributeField = userNameAttributeField
        }
    }

}

extension KendraClientTypes {
    public enum KeyLocation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case secretManager
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyLocation] {
            return [
                .secretManager,
                .url,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .secretManager: return "SECRET_MANAGER"
            case .url: return "URL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyLocation(rawValue: rawValue) ?? KeyLocation.sdkUnknown(rawValue)
        }
    }
}

extension ListDataSourceSyncJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTimeFilter = "StartTimeFilter"
        case statusFilter = "StatusFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTimeFilter = startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let statusFilter = statusFilter {
            try encodeContainer.encode(statusFilter.rawValue, forKey: .statusFilter)
        }
    }
}

extension ListDataSourceSyncJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDataSourceSyncJobsInput: Swift.Equatable {
    /// The identifier of the data source.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index that contains the data source.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of synchronization jobs to return in the response. If there are fewer results in the list, this response contains only the actual results.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of jobs.
    public var nextToken: Swift.String?
    /// When specified, the synchronization jobs returned in the list are limited to jobs between the specified dates.
    public var startTimeFilter: KendraClientTypes.TimeRange?
    /// When specified, only returns synchronization jobs with the Status field equal to the specified status.
    public var statusFilter: KendraClientTypes.DataSourceSyncJobStatus?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTimeFilter: KendraClientTypes.TimeRange? = nil,
        statusFilter: KendraClientTypes.DataSourceSyncJobStatus? = nil
    )
    {
        self.id = id
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTimeFilter = startTimeFilter
        self.statusFilter = statusFilter
    }
}

struct ListDataSourceSyncJobsInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let startTimeFilter: KendraClientTypes.TimeRange?
    let statusFilter: KendraClientTypes.DataSourceSyncJobStatus?
}

extension ListDataSourceSyncJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTimeFilter = "StartTimeFilter"
        case statusFilter = "StatusFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(KendraClientTypes.TimeRange.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let statusFilterDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceSyncJobStatus.self, forKey: .statusFilter)
        statusFilter = statusFilterDecoded
    }
}

extension ListDataSourceSyncJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDataSourceSyncJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDataSourceSyncJobsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDataSourceSyncJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDataSourceSyncJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.history = output.history
            self.nextToken = output.nextToken
        } else {
            self.history = nil
            self.nextToken = nil
        }
    }
}

public struct ListDataSourceSyncJobsOutputResponse: Swift.Equatable {
    /// A history of synchronization jobs for the data source.
    public var history: [KendraClientTypes.DataSourceSyncJob]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of jobs.
    public var nextToken: Swift.String?

    public init (
        history: [KendraClientTypes.DataSourceSyncJob]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.history = history
        self.nextToken = nextToken
    }
}

struct ListDataSourceSyncJobsOutputResponseBody: Swift.Equatable {
    let history: [KendraClientTypes.DataSourceSyncJob]?
    let nextToken: Swift.String?
}

extension ListDataSourceSyncJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case history = "History"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let historyContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceSyncJob?].self, forKey: .history)
        var historyDecoded0:[KendraClientTypes.DataSourceSyncJob]? = nil
        if let historyContainer = historyContainer {
            historyDecoded0 = [KendraClientTypes.DataSourceSyncJob]()
            for structure0 in historyContainer {
                if let structure0 = structure0 {
                    historyDecoded0?.append(structure0)
                }
            }
        }
        history = historyDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDataSourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDataSourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDataSourcesInput: Swift.Equatable {
    /// The identifier of the index that contains the data source.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of data sources to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of data sources (DataSourceSummaryItems).
    public var nextToken: Swift.String?

    public init (
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDataSourcesInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDataSourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDataSourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDataSourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDataSourcesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDataSourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDataSourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaryItems = output.summaryItems
        } else {
            self.nextToken = nil
            self.summaryItems = nil
        }
    }
}

public struct ListDataSourcesOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of data sources.
    public var nextToken: Swift.String?
    /// An array of summary information for one or more data sources.
    public var summaryItems: [KendraClientTypes.DataSourceSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaryItems: [KendraClientTypes.DataSourceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaryItems = summaryItems
    }
}

struct ListDataSourcesOutputResponseBody: Swift.Equatable {
    let summaryItems: [KendraClientTypes.DataSourceSummary]?
    let nextToken: Swift.String?
}

extension ListDataSourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaryItems = "SummaryItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceSummary?].self, forKey: .summaryItems)
        var summaryItemsDecoded0:[KendraClientTypes.DataSourceSummary]? = nil
        if let summaryItemsContainer = summaryItemsContainer {
            summaryItemsDecoded0 = [KendraClientTypes.DataSourceSummary]()
            for structure0 in summaryItemsContainer {
                if let structure0 = structure0 {
                    summaryItemsDecoded0?.append(structure0)
                }
            }
        }
        summaryItems = summaryItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEntityPersonasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListEntityPersonasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEntityPersonasInput: Swift.Equatable {
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of returned users or groups.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of users or groups.
    public var nextToken: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListEntityPersonasInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListEntityPersonasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListEntityPersonasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEntityPersonasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListEntityPersonasOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEntityPersonasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListEntityPersonasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaryItems = output.summaryItems
        } else {
            self.nextToken = nil
            self.summaryItems = nil
        }
    }
}

public struct ListEntityPersonasOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon Kendra returns this token, which you can use in a later request to retrieve the next set of users or groups.
    public var nextToken: Swift.String?
    /// An array of summary information for one or more users or groups.
    public var summaryItems: [KendraClientTypes.PersonasSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaryItems: [KendraClientTypes.PersonasSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaryItems = summaryItems
    }
}

struct ListEntityPersonasOutputResponseBody: Swift.Equatable {
    let summaryItems: [KendraClientTypes.PersonasSummary]?
    let nextToken: Swift.String?
}

extension ListEntityPersonasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaryItems = "SummaryItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.PersonasSummary?].self, forKey: .summaryItems)
        var summaryItemsDecoded0:[KendraClientTypes.PersonasSummary]? = nil
        if let summaryItemsContainer = summaryItemsContainer {
            summaryItemsDecoded0 = [KendraClientTypes.PersonasSummary]()
            for structure0 in summaryItemsContainer {
                if let structure0 = structure0 {
                    summaryItemsDecoded0?.append(structure0)
                }
            }
        }
        summaryItems = summaryItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExperienceEntitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListExperienceEntitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListExperienceEntitiesInput: Swift.Equatable {
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of users or groups.
    public var nextToken: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
        self.nextToken = nextToken
    }
}

struct ListExperienceEntitiesInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
    let nextToken: Swift.String?
}

extension ListExperienceEntitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExperienceEntitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListExperienceEntitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListExperienceEntitiesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListExperienceEntitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListExperienceEntitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaryItems = output.summaryItems
        } else {
            self.nextToken = nil
            self.summaryItems = nil
        }
    }
}

public struct ListExperienceEntitiesOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon Kendra returns this token, which you can use in a later request to retrieve the next set of users or groups.
    public var nextToken: Swift.String?
    /// An array of summary information for one or more users or groups.
    public var summaryItems: [KendraClientTypes.ExperienceEntitiesSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaryItems: [KendraClientTypes.ExperienceEntitiesSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaryItems = summaryItems
    }
}

struct ListExperienceEntitiesOutputResponseBody: Swift.Equatable {
    let summaryItems: [KendraClientTypes.ExperienceEntitiesSummary]?
    let nextToken: Swift.String?
}

extension ListExperienceEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaryItems = "SummaryItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ExperienceEntitiesSummary?].self, forKey: .summaryItems)
        var summaryItemsDecoded0:[KendraClientTypes.ExperienceEntitiesSummary]? = nil
        if let summaryItemsContainer = summaryItemsContainer {
            summaryItemsDecoded0 = [KendraClientTypes.ExperienceEntitiesSummary]()
            for structure0 in summaryItemsContainer {
                if let structure0 = structure0 {
                    summaryItemsDecoded0?.append(structure0)
                }
            }
        }
        summaryItems = summaryItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExperiencesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListExperiencesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListExperiencesInput: Swift.Equatable {
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of returned Amazon Kendra experiences.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of Amazon Kendra experiences.
    public var nextToken: Swift.String?

    public init (
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListExperiencesInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListExperiencesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListExperiencesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListExperiencesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListExperiencesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListExperiencesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListExperiencesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaryItems = output.summaryItems
        } else {
            self.nextToken = nil
            self.summaryItems = nil
        }
    }
}

public struct ListExperiencesOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon Kendra returns this token, which you can use in a later request to retrieve the next set of Amazon Kendra experiences.
    public var nextToken: Swift.String?
    /// An array of summary information for one or more Amazon Kendra experiences.
    public var summaryItems: [KendraClientTypes.ExperiencesSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaryItems: [KendraClientTypes.ExperiencesSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaryItems = summaryItems
    }
}

struct ListExperiencesOutputResponseBody: Swift.Equatable {
    let summaryItems: [KendraClientTypes.ExperiencesSummary]?
    let nextToken: Swift.String?
}

extension ListExperiencesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaryItems = "SummaryItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ExperiencesSummary?].self, forKey: .summaryItems)
        var summaryItemsDecoded0:[KendraClientTypes.ExperiencesSummary]? = nil
        if let summaryItemsContainer = summaryItemsContainer {
            summaryItemsDecoded0 = [KendraClientTypes.ExperiencesSummary]()
            for structure0 in summaryItemsContainer {
                if let structure0 = structure0 {
                    summaryItemsDecoded0?.append(structure0)
                }
            }
        }
        summaryItems = summaryItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFaqsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListFaqsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListFaqsInput: Swift.Equatable {
    /// The index that contains the FAQ lists.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of FAQs to return in the response. If there are fewer results in the list, this response contains only the actual results.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of FAQs.
    public var nextToken: Swift.String?

    public init (
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListFaqsInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListFaqsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListFaqsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFaqsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListFaqsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFaqsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListFaqsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.faqSummaryItems = output.faqSummaryItems
            self.nextToken = output.nextToken
        } else {
            self.faqSummaryItems = nil
            self.nextToken = nil
        }
    }
}

public struct ListFaqsOutputResponse: Swift.Equatable {
    /// information about the FAQs associated with the specified index.
    public var faqSummaryItems: [KendraClientTypes.FaqSummary]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of FAQs.
    public var nextToken: Swift.String?

    public init (
        faqSummaryItems: [KendraClientTypes.FaqSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.faqSummaryItems = faqSummaryItems
        self.nextToken = nextToken
    }
}

struct ListFaqsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let faqSummaryItems: [KendraClientTypes.FaqSummary]?
}

extension ListFaqsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faqSummaryItems = "FaqSummaryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let faqSummaryItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.FaqSummary?].self, forKey: .faqSummaryItems)
        var faqSummaryItemsDecoded0:[KendraClientTypes.FaqSummary]? = nil
        if let faqSummaryItemsContainer = faqSummaryItemsContainer {
            faqSummaryItemsDecoded0 = [KendraClientTypes.FaqSummary]()
            for structure0 in faqSummaryItemsContainer {
                if let structure0 = structure0 {
                    faqSummaryItemsDecoded0?.append(structure0)
                }
            }
        }
        faqSummaryItems = faqSummaryItemsDecoded0
    }
}

extension ListGroupsOlderThanOrderingIdInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case orderingId = "OrderingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let orderingId = orderingId {
            try encodeContainer.encode(orderingId, forKey: .orderingId)
        }
    }
}

extension ListGroupsOlderThanOrderingIdInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGroupsOlderThanOrderingIdInput: Swift.Equatable {
    /// The identifier of the data source for getting a list of groups mapped to users before a given ordering timestamp identifier.
    public var dataSourceId: Swift.String?
    /// The identifier of the index for getting a list of groups mapped to users before a given ordering or timestamp identifier.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of returned groups that are mapped to users before a given ordering or timestamp identifier.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of groups that are mapped to users before a given ordering or timestamp identifier.
    public var nextToken: Swift.String?
    /// The timestamp identifier used for the latest PUT or DELETE action for mapping users to their groups.
    /// This member is required.
    public var orderingId: Swift.Int?

    public init (
        dataSourceId: Swift.String? = nil,
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        orderingId: Swift.Int? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.orderingId = orderingId
    }
}

struct ListGroupsOlderThanOrderingIdInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let dataSourceId: Swift.String?
    let orderingId: Swift.Int?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListGroupsOlderThanOrderingIdInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case orderingId = "OrderingId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let orderingIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .orderingId)
        orderingId = orderingIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListGroupsOlderThanOrderingIdOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGroupsOlderThanOrderingIdOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGroupsOlderThanOrderingIdOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGroupsOlderThanOrderingIdOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListGroupsOlderThanOrderingIdOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groupsSummaries = output.groupsSummaries
            self.nextToken = output.nextToken
        } else {
            self.groupsSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListGroupsOlderThanOrderingIdOutputResponse: Swift.Equatable {
    /// Summary information for list of groups that are mapped to users before a given ordering or timestamp identifier.
    public var groupsSummaries: [KendraClientTypes.GroupSummary]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of groups that are mapped to users before a given ordering or timestamp identifier.
    public var nextToken: Swift.String?

    public init (
        groupsSummaries: [KendraClientTypes.GroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groupsSummaries = groupsSummaries
        self.nextToken = nextToken
    }
}

struct ListGroupsOlderThanOrderingIdOutputResponseBody: Swift.Equatable {
    let groupsSummaries: [KendraClientTypes.GroupSummary]?
    let nextToken: Swift.String?
}

extension ListGroupsOlderThanOrderingIdOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupsSummaries = "GroupsSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupsSummariesContainer = try containerValues.decodeIfPresent([KendraClientTypes.GroupSummary?].self, forKey: .groupsSummaries)
        var groupsSummariesDecoded0:[KendraClientTypes.GroupSummary]? = nil
        if let groupsSummariesContainer = groupsSummariesContainer {
            groupsSummariesDecoded0 = [KendraClientTypes.GroupSummary]()
            for structure0 in groupsSummariesContainer {
                if let structure0 = structure0 {
                    groupsSummariesDecoded0?.append(structure0)
                }
            }
        }
        groupsSummaries = groupsSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListIndicesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListIndicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListIndicesInput: Swift.Equatable {
    /// The maximum number of data sources to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of indexes (DataSourceSummaryItems).
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListIndicesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListIndicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListIndicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIndicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListIndicesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIndicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListIndicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.indexConfigurationSummaryItems = output.indexConfigurationSummaryItems
            self.nextToken = output.nextToken
        } else {
            self.indexConfigurationSummaryItems = nil
            self.nextToken = nil
        }
    }
}

public struct ListIndicesOutputResponse: Swift.Equatable {
    /// An array of summary information for one or more indexes.
    public var indexConfigurationSummaryItems: [KendraClientTypes.IndexConfigurationSummary]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of indexes.
    public var nextToken: Swift.String?

    public init (
        indexConfigurationSummaryItems: [KendraClientTypes.IndexConfigurationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexConfigurationSummaryItems = indexConfigurationSummaryItems
        self.nextToken = nextToken
    }
}

struct ListIndicesOutputResponseBody: Swift.Equatable {
    let indexConfigurationSummaryItems: [KendraClientTypes.IndexConfigurationSummary]?
    let nextToken: Swift.String?
}

extension ListIndicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexConfigurationSummaryItems = "IndexConfigurationSummaryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexConfigurationSummaryItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.IndexConfigurationSummary?].self, forKey: .indexConfigurationSummaryItems)
        var indexConfigurationSummaryItemsDecoded0:[KendraClientTypes.IndexConfigurationSummary]? = nil
        if let indexConfigurationSummaryItemsContainer = indexConfigurationSummaryItemsContainer {
            indexConfigurationSummaryItemsDecoded0 = [KendraClientTypes.IndexConfigurationSummary]()
            for structure0 in indexConfigurationSummaryItemsContainer {
                if let structure0 = structure0 {
                    indexConfigurationSummaryItemsDecoded0?.append(structure0)
                }
            }
        }
        indexConfigurationSummaryItems = indexConfigurationSummaryItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListQuerySuggestionsBlockListsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListQuerySuggestionsBlockListsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListQuerySuggestionsBlockListsInput: Swift.Equatable {
    /// The identifier of the index for a list of all block lists that exist for that index. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of block lists to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of block lists (BlockListSummaryItems).
    public var nextToken: Swift.String?

    public init (
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListQuerySuggestionsBlockListsInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListQuerySuggestionsBlockListsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListQuerySuggestionsBlockListsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListQuerySuggestionsBlockListsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListQuerySuggestionsBlockListsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQuerySuggestionsBlockListsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListQuerySuggestionsBlockListsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blockListSummaryItems = output.blockListSummaryItems
            self.nextToken = output.nextToken
        } else {
            self.blockListSummaryItems = nil
            self.nextToken = nil
        }
    }
}

public struct ListQuerySuggestionsBlockListsOutputResponse: Swift.Equatable {
    /// Summary items for a block list. This includes summary items on the block list ID, block list name, when the block list was created, when the block list was last updated, and the count of block words/phrases in the block list. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    public var blockListSummaryItems: [KendraClientTypes.QuerySuggestionsBlockListSummary]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of block lists.
    public var nextToken: Swift.String?

    public init (
        blockListSummaryItems: [KendraClientTypes.QuerySuggestionsBlockListSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.blockListSummaryItems = blockListSummaryItems
        self.nextToken = nextToken
    }
}

struct ListQuerySuggestionsBlockListsOutputResponseBody: Swift.Equatable {
    let blockListSummaryItems: [KendraClientTypes.QuerySuggestionsBlockListSummary]?
    let nextToken: Swift.String?
}

extension ListQuerySuggestionsBlockListsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockListSummaryItems = "BlockListSummaryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockListSummaryItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.QuerySuggestionsBlockListSummary?].self, forKey: .blockListSummaryItems)
        var blockListSummaryItemsDecoded0:[KendraClientTypes.QuerySuggestionsBlockListSummary]? = nil
        if let blockListSummaryItemsContainer = blockListSummaryItemsContainer {
            blockListSummaryItemsDecoded0 = [KendraClientTypes.QuerySuggestionsBlockListSummary]()
            for structure0 in blockListSummaryItemsContainer {
                if let structure0 = structure0 {
                    blockListSummaryItemsDecoded0?.append(structure0)
                }
            }
        }
        blockListSummaryItems = blockListSummaryItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the index, FAQ, or data source to get a list of tags for.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceUnavailableException(ResourceUnavailableException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// A list of tags associated with the index, FAQ, or data source.
    public var tags: [KendraClientTypes.Tag]?

    public init (
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [KendraClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KendraClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KendraClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListThesauriInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListThesauriInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListThesauriInput: Swift.Equatable {
    /// The identifier of the index associated with the thesaurus to list.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of thesauri to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of thesauri (ThesaurusSummaryItems).
    public var nextToken: Swift.String?

    public init (
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListThesauriInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListThesauriInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexId = "IndexId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListThesauriOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThesauriOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThesauriOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThesauriOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThesauriOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.thesaurusSummaryItems = output.thesaurusSummaryItems
        } else {
            self.nextToken = nil
            self.thesaurusSummaryItems = nil
        }
    }
}

public struct ListThesauriOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of thesauri.
    public var nextToken: Swift.String?
    /// An array of summary information for a thesaurus or multiple thesauri.
    public var thesaurusSummaryItems: [KendraClientTypes.ThesaurusSummary]?

    public init (
        nextToken: Swift.String? = nil,
        thesaurusSummaryItems: [KendraClientTypes.ThesaurusSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.thesaurusSummaryItems = thesaurusSummaryItems
    }
}

struct ListThesauriOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let thesaurusSummaryItems: [KendraClientTypes.ThesaurusSummary]?
}

extension ListThesauriOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case thesaurusSummaryItems = "ThesaurusSummaryItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let thesaurusSummaryItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ThesaurusSummary?].self, forKey: .thesaurusSummaryItems)
        var thesaurusSummaryItemsDecoded0:[KendraClientTypes.ThesaurusSummary]? = nil
        if let thesaurusSummaryItemsContainer = thesaurusSummaryItemsContainer {
            thesaurusSummaryItemsDecoded0 = [KendraClientTypes.ThesaurusSummary]()
            for structure0 in thesaurusSummaryItemsContainer {
                if let structure0 = structure0 {
                    thesaurusSummaryItemsDecoded0?.append(structure0)
                }
            }
        }
        thesaurusSummaryItems = thesaurusSummaryItemsDecoded0
    }
}

extension KendraClientTypes.MemberGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case groupId = "GroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension KendraClientTypes {
    /// The sub groups that belong to a group.
    public struct MemberGroup: Swift.Equatable {
        /// The identifier of the data source for the sub group you want to map to a group.
        public var dataSourceId: Swift.String?
        /// The identifier of the sub group you want to map to a group.
        /// This member is required.
        public var groupId: Swift.String?

        public init (
            dataSourceId: Swift.String? = nil,
            groupId: Swift.String? = nil
        )
        {
            self.dataSourceId = dataSourceId
            self.groupId = groupId
        }
    }

}

extension KendraClientTypes.MemberUser: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userId = "UserId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
    }
}

extension KendraClientTypes {
    /// The users that belong to a group.
    public struct MemberUser: Swift.Equatable {
        /// The identifier of the user you want to map to a group.
        /// This member is required.
        public var userId: Swift.String?

        public init (
            userId: Swift.String? = nil
        )
        {
            self.userId = userId
        }
    }

}

extension KendraClientTypes {
    public enum MetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aggQueryDocMetrics
        case docsByClickCount
        case queriesByCount
        case queriesByZeroClickRate
        case queriesByZeroResultRate
        case trendQueryDocMetrics
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricType] {
            return [
                .aggQueryDocMetrics,
                .docsByClickCount,
                .queriesByCount,
                .queriesByZeroClickRate,
                .queriesByZeroResultRate,
                .trendQueryDocMetrics,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aggQueryDocMetrics: return "AGG_QUERY_DOC_METRICS"
            case .docsByClickCount: return "DOCS_BY_CLICK_COUNT"
            case .queriesByCount: return "QUERIES_BY_COUNT"
            case .queriesByZeroClickRate: return "QUERIES_BY_ZERO_CLICK_RATE"
            case .queriesByZeroResultRate: return "QUERIES_BY_ZERO_RESULT_RATE"
            case .trendQueryDocMetrics: return "TREND_QUERY_DOC_METRICS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricType(rawValue: rawValue) ?? MetricType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes {
    public enum Mode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case learnOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [Mode] {
            return [
                .enabled,
                .learnOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "ENABLED"
            case .learnOnly: return "LEARN_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mode(rawValue: rawValue) ?? Mode.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.OneDriveConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disableLocalGroups = "DisableLocalGroups"
        case exclusionPatterns = "ExclusionPatterns"
        case fieldMappings = "FieldMappings"
        case inclusionPatterns = "InclusionPatterns"
        case oneDriveUsers = "OneDriveUsers"
        case secretArn = "SecretArn"
        case tenantDomain = "TenantDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if disableLocalGroups != false {
            try encodeContainer.encode(disableLocalGroups, forKey: .disableLocalGroups)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let oneDriveUsers = oneDriveUsers {
            try encodeContainer.encode(oneDriveUsers, forKey: .oneDriveUsers)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let tenantDomain = tenantDomain {
            try encodeContainer.encode(tenantDomain, forKey: .tenantDomain)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tenantDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tenantDomain)
        tenantDomain = tenantDomainDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let oneDriveUsersDecoded = try containerValues.decodeIfPresent(KendraClientTypes.OneDriveUsers.self, forKey: .oneDriveUsers)
        oneDriveUsers = oneDriveUsersDecoded
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
        let disableLocalGroupsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disableLocalGroups)
        disableLocalGroups = disableLocalGroupsDecoded
    }
}

extension KendraClientTypes {
    /// Provides configuration information for data sources that connect to OneDrive.
    public struct OneDriveConfiguration: Swift.Equatable {
        /// A Boolean value that specifies whether local groups are disabled (True) or enabled (False).
        public var disableLocalGroups: Swift.Bool
        /// List of regular expressions applied to documents. Items that match the exclusion pattern are not indexed. If you provide both an inclusion pattern and an exclusion pattern, any item that matches the exclusion pattern isn't indexed. The exclusion pattern is applied to the file name.
        public var exclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map Microsoft OneDrive fields to custom fields in the Amazon Kendra index. You must first create the index fields before you map OneDrive fields.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns. Documents that match the pattern are included in the index. Documents that don't match the pattern are excluded from the index. If a document matches both an inclusion pattern and an exclusion pattern, the document is not included in the index. The exclusion pattern is applied to the file name.
        public var inclusionPatterns: [Swift.String]?
        /// A list of user accounts whose documents should be indexed.
        /// This member is required.
        public var oneDriveUsers: KendraClientTypes.OneDriveUsers?
        /// The Amazon Resource Name (ARN) of an Secrets Managersecret that contains the user name and password to connect to OneDrive. The user namd should be the application ID for the OneDrive application, and the password is the application key for the OneDrive application.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The Azure Active Directory domain of the organization.
        /// This member is required.
        public var tenantDomain: Swift.String?

        public init (
            disableLocalGroups: Swift.Bool = false,
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            oneDriveUsers: KendraClientTypes.OneDriveUsers? = nil,
            secretArn: Swift.String? = nil,
            tenantDomain: Swift.String? = nil
        )
        {
            self.disableLocalGroups = disableLocalGroups
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.oneDriveUsers = oneDriveUsers
            self.secretArn = secretArn
            self.tenantDomain = tenantDomain
        }
    }

}

extension KendraClientTypes.OneDriveUsers: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case oneDriveUserList = "OneDriveUserList"
        case oneDriveUserS3Path = "OneDriveUserS3Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let oneDriveUserList = oneDriveUserList {
            var oneDriveUserListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .oneDriveUserList)
            for onedriveuserlist0 in oneDriveUserList {
                try oneDriveUserListContainer.encode(onedriveuserlist0)
            }
        }
        if let oneDriveUserS3Path = oneDriveUserS3Path {
            try encodeContainer.encode(oneDriveUserS3Path, forKey: .oneDriveUserS3Path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oneDriveUserListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .oneDriveUserList)
        var oneDriveUserListDecoded0:[Swift.String]? = nil
        if let oneDriveUserListContainer = oneDriveUserListContainer {
            oneDriveUserListDecoded0 = [Swift.String]()
            for string0 in oneDriveUserListContainer {
                if let string0 = string0 {
                    oneDriveUserListDecoded0?.append(string0)
                }
            }
        }
        oneDriveUserList = oneDriveUserListDecoded0
        let oneDriveUserS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .oneDriveUserS3Path)
        oneDriveUserS3Path = oneDriveUserS3PathDecoded
    }
}

extension KendraClientTypes {
    /// User accounts whose documents should be indexed.
    public struct OneDriveUsers: Swift.Equatable {
        /// A list of users whose documents should be indexed. Specify the user names in email format, for example, username@tenantdomain. If you need to index the documents of more than 100 users, use the OneDriveUserS3Path field to specify the location of a file containing a list of users.
        public var oneDriveUserList: [Swift.String]?
        /// The S3 bucket location of a file containing a list of users whose documents should be indexed.
        public var oneDriveUserS3Path: KendraClientTypes.S3Path?

        public init (
            oneDriveUserList: [Swift.String]? = nil,
            oneDriveUserS3Path: KendraClientTypes.S3Path? = nil
        )
        {
            self.oneDriveUserList = oneDriveUserList
            self.oneDriveUserS3Path = oneDriveUserS3Path
        }
    }

}

extension KendraClientTypes {
    public enum Order: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [Order] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Order(rawValue: rawValue) ?? Order.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes {
    public enum Persona: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case owner
        case viewer
        case sdkUnknown(Swift.String)

        public static var allCases: [Persona] {
            return [
                .owner,
                .viewer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .owner: return "OWNER"
            case .viewer: return "VIEWER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Persona(rawValue: rawValue) ?? Persona.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.PersonasSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case entityId = "EntityId"
        case persona = "Persona"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let entityId = entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let persona = persona {
            try encodeContainer.encode(persona.rawValue, forKey: .persona)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let personaDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Persona.self, forKey: .persona)
        persona = personaDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension KendraClientTypes {
    /// Summary information for users or groups in your Amazon Web Services SSO identity source. This applies to users and groups with specific permissions that define their level of access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see [Building a search experience with no code](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html).
    public struct PersonasSummary: Swift.Equatable {
        /// The date-time the summary information was created.
        public var createdAt: ClientRuntime.Date?
        /// The identifier of a user or group in your Amazon Web Services SSO identity source. For example, a user ID could be an email.
        public var entityId: Swift.String?
        /// The persona that defines the specific permissions of the user or group in your Amazon Web Services SSO identity source. The available personas or access roles are Owner and Viewer. For more information on these personas, see [Providing access to your search page](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience).
        public var persona: KendraClientTypes.Persona?
        /// The date-time the summary information was last updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            entityId: Swift.String? = nil,
            persona: KendraClientTypes.Persona? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.entityId = entityId
            self.persona = persona
            self.updatedAt = updatedAt
        }
    }

}

extension KendraClientTypes.Principal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case access = "Access"
        case dataSourceId = "DataSourceId"
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let access = access {
            try encodeContainer.encode(access.rawValue, forKey: .access)
        }
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.PrincipalType.self, forKey: .type)
        type = typeDecoded
        let accessDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ReadAccessType.self, forKey: .access)
        access = accessDecoded
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension KendraClientTypes {
    /// Provides user and group information for document access filtering.
    public struct Principal: Swift.Equatable {
        /// Whether to allow or deny access to the principal.
        /// This member is required.
        public var access: KendraClientTypes.ReadAccessType?
        /// The identifier of the data source the principal should access documents from.
        public var dataSourceId: Swift.String?
        /// The name of the user or group.
        /// This member is required.
        public var name: Swift.String?
        /// The type of principal.
        /// This member is required.
        public var type: KendraClientTypes.PrincipalType?

        public init (
            access: KendraClientTypes.ReadAccessType? = nil,
            dataSourceId: Swift.String? = nil,
            name: Swift.String? = nil,
            type: KendraClientTypes.PrincipalType? = nil
        )
        {
            self.access = access
            self.dataSourceId = dataSourceId
            self.name = name
            self.type = type
        }
    }

}

extension KendraClientTypes {
    public enum PrincipalMappingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleted
        case deleting
        case failed
        case processing
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [PrincipalMappingStatus] {
            return [
                .deleted,
                .deleting,
                .failed,
                .processing,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .processing: return "PROCESSING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PrincipalMappingStatus(rawValue: rawValue) ?? PrincipalMappingStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes {
    public enum PrincipalType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case group
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [PrincipalType] {
            return [
                .group,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PrincipalType(rawValue: rawValue) ?? PrincipalType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ProxyConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentials = "Credentials"
        case host = "Host"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credentials = credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let host = host {
            try encodeContainer.encode(host, forKey: .host)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .host)
        host = hostDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information for a web proxy to connect to website hosts.
    public struct ProxyConfiguration: Swift.Equatable {
        /// Your secret ARN, which you can create in [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) The credentials are optional. You use a secret if web proxy credentials are required to connect to a website host. Amazon Kendra currently support basic authentication to connect to a web proxy server. The secret stores your credentials.
        public var credentials: Swift.String?
        /// The name of the website host you want to connect to via a web proxy server. For example, the host name of https://a.example.com/page1.html is "a.example.com".
        /// This member is required.
        public var host: Swift.String?
        /// The port number of the website host you want to connect to via a web proxy server. For example, the port for https://a.example.com/page1.html is 443, the standard port for HTTPS.
        /// This member is required.
        public var port: Swift.Int?

        public init (
            credentials: Swift.String? = nil,
            host: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.credentials = credentials
            self.host = host
            self.port = port
        }
    }

}

extension PutPrincipalMappingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case groupId = "GroupId"
        case groupMembers = "GroupMembers"
        case indexId = "IndexId"
        case orderingId = "OrderingId"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let groupMembers = groupMembers {
            try encodeContainer.encode(groupMembers, forKey: .groupMembers)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let orderingId = orderingId {
            try encodeContainer.encode(orderingId, forKey: .orderingId)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension PutPrincipalMappingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutPrincipalMappingInput: Swift.Equatable {
    /// The identifier of the data source you want to map users to their groups. This is useful if a group is tied to multiple data sources, but you only want the group to access documents of a certain data source. For example, the groups "Research", "Engineering", and "Sales and Marketing" are all tied to the company's documents stored in the data sources Confluence and Salesforce. However, "Sales and Marketing" team only needs access to customer-related documents stored in Salesforce.
    public var dataSourceId: Swift.String?
    /// The identifier of the group you want to map its users to.
    /// This member is required.
    public var groupId: Swift.String?
    /// The list that contains your users or sub groups that belong the same group. For example, the group "Company" includes the user "CEO" and the sub groups "Research", "Engineering", and "Sales and Marketing". If you have more than 1000 users and/or sub groups for a single group, you need to provide the path to the S3 file that lists your users and sub groups for a group. Your sub groups can contain more than 1000 users, but the list of sub groups that belong to a group (and/or users) must be no more than 1000.
    /// This member is required.
    public var groupMembers: KendraClientTypes.GroupMembers?
    /// The identifier of the index you want to map users to their groups.
    /// This member is required.
    public var indexId: Swift.String?
    /// The timestamp identifier you specify to ensure Amazon Kendra does not override the latest PUT action with previous actions. The highest number ID, which is the ordering ID, is the latest action you want to process and apply on top of other actions with lower number IDs. This prevents previous actions with lower number IDs from possibly overriding the latest action. The ordering ID can be the UNIX time of the last update you made to a group members list. You would then provide this list when calling PutPrincipalMapping. This ensures your PUT action for that updated group with the latest members list doesn't get overwritten by earlier PUT actions for the same group which are yet to be processed. The default ordering ID is the current UNIX time in milliseconds that the action was received by Amazon Kendra.
    public var orderingId: Swift.Int?
    /// The Amazon Resource Name (ARN) of a role that has access to the S3 file that contains your list of users or sub groups that belong to a group. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-ds).
    public var roleArn: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil,
        groupId: Swift.String? = nil,
        groupMembers: KendraClientTypes.GroupMembers? = nil,
        indexId: Swift.String? = nil,
        orderingId: Swift.Int? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.groupId = groupId
        self.groupMembers = groupMembers
        self.indexId = indexId
        self.orderingId = orderingId
        self.roleArn = roleArn
    }
}

struct PutPrincipalMappingInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let dataSourceId: Swift.String?
    let groupId: Swift.String?
    let groupMembers: KendraClientTypes.GroupMembers?
    let orderingId: Swift.Int?
    let roleArn: Swift.String?
}

extension PutPrincipalMappingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case groupId = "GroupId"
        case groupMembers = "GroupMembers"
        case indexId = "IndexId"
        case orderingId = "OrderingId"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let groupMembersDecoded = try containerValues.decodeIfPresent(KendraClientTypes.GroupMembers.self, forKey: .groupMembers)
        groupMembers = groupMembersDecoded
        let orderingIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .orderingId)
        orderingId = orderingIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension PutPrincipalMappingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutPrincipalMappingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutPrincipalMappingOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutPrincipalMappingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutPrincipalMappingOutputResponse: Swift.Equatable {

}

extension KendraClientTypes {
    public enum QueryIdentifiersEnclosingOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case doubleQuotes
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryIdentifiersEnclosingOption] {
            return [
                .doubleQuotes,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .doubleQuotes: return "DOUBLE_QUOTES"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueryIdentifiersEnclosingOption(rawValue: rawValue) ?? QueryIdentifiersEnclosingOption.sdkUnknown(rawValue)
        }
    }
}

extension QueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeFilter = "AttributeFilter"
        case documentRelevanceOverrideConfigurations = "DocumentRelevanceOverrideConfigurations"
        case facets = "Facets"
        case indexId = "IndexId"
        case pageNumber = "PageNumber"
        case pageSize = "PageSize"
        case queryResultTypeFilter = "QueryResultTypeFilter"
        case queryText = "QueryText"
        case requestedDocumentAttributes = "RequestedDocumentAttributes"
        case sortingConfiguration = "SortingConfiguration"
        case userContext = "UserContext"
        case visitorId = "VisitorId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeFilter = attributeFilter {
            try encodeContainer.encode(attributeFilter, forKey: .attributeFilter)
        }
        if let documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurations {
            var documentRelevanceOverrideConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentRelevanceOverrideConfigurations)
            for documentrelevanceoverrideconfigurationlist0 in documentRelevanceOverrideConfigurations {
                try documentRelevanceOverrideConfigurationsContainer.encode(documentrelevanceoverrideconfigurationlist0)
            }
        }
        if let facets = facets {
            var facetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .facets)
            for facetlist0 in facets {
                try facetsContainer.encode(facetlist0)
            }
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let pageNumber = pageNumber {
            try encodeContainer.encode(pageNumber, forKey: .pageNumber)
        }
        if let pageSize = pageSize {
            try encodeContainer.encode(pageSize, forKey: .pageSize)
        }
        if let queryResultTypeFilter = queryResultTypeFilter {
            try encodeContainer.encode(queryResultTypeFilter.rawValue, forKey: .queryResultTypeFilter)
        }
        if let queryText = queryText {
            try encodeContainer.encode(queryText, forKey: .queryText)
        }
        if let requestedDocumentAttributes = requestedDocumentAttributes {
            var requestedDocumentAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedDocumentAttributes)
            for documentattributekeylist0 in requestedDocumentAttributes {
                try requestedDocumentAttributesContainer.encode(documentattributekeylist0)
            }
        }
        if let sortingConfiguration = sortingConfiguration {
            try encodeContainer.encode(sortingConfiguration, forKey: .sortingConfiguration)
        }
        if let userContext = userContext {
            try encodeContainer.encode(userContext, forKey: .userContext)
        }
        if let visitorId = visitorId {
            try encodeContainer.encode(visitorId, forKey: .visitorId)
        }
    }
}

extension QueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct QueryInput: Swift.Equatable {
    /// Enables filtered searches based on document attributes. You can only provide one attribute filter; however, the AndAllFilters, NotFilter, and OrAllFilters parameters contain a list of other filters. The AttributeFilter parameter enables you to create a set of filtering rules that a document must satisfy to be included in the query results.
    public var attributeFilter: KendraClientTypes.AttributeFilter?
    /// Overrides relevance tuning configurations of fields or attributes set at the index level. If you use this API to override the relevance tuning configured at the index level, but there is no relevance tuning configured at the index level, then Amazon Kendra does not apply any relevance tuning. If there is relevance tuning configured at the index level, but you do not use this API to override any relevance tuning in the index, then Amazon Kendra uses the relevance tuning that is configured at the index level. If there is relevance tuning configured for fields at the index level, but you use this API to override only some of these fields, then for the fields you did not override, the importance is set to 1.
    public var documentRelevanceOverrideConfigurations: [KendraClientTypes.DocumentRelevanceConfiguration]?
    /// An array of documents attributes. Amazon Kendra returns a count for each attribute key specified. You can use this information to help narrow the search for your user.
    public var facets: [KendraClientTypes.Facet]?
    /// The unique identifier of the index to search. The identifier is returned in the response from the CreateIndex operation.
    /// This member is required.
    public var indexId: Swift.String?
    /// Query results are returned in pages the size of the PageSize parameter. By default, Amazon Kendra returns the first page of results. Use this parameter to get result pages after the first one.
    public var pageNumber: Swift.Int?
    /// Sets the number of results that are returned in each page of results. The default page size is 10. The maximum number of results returned is 100. If you ask for more than 100 results, only 100 are returned.
    public var pageSize: Swift.Int?
    /// Sets the type of query. Only results for the specified query type are returned.
    public var queryResultTypeFilter: KendraClientTypes.QueryResultType?
    /// The text to search for.
    /// This member is required.
    public var queryText: Swift.String?
    /// An array of document attributes to include in the response. No other document attributes are included in the response. By default all document attributes are included in the response.
    public var requestedDocumentAttributes: [Swift.String]?
    /// Provides information that determines how the results of the query are sorted. You can set the field that Amazon Kendra should sort the results on, and specify whether the results should be sorted in ascending or descending order. In the case of ties in sorting the results, the results are sorted by relevance. If you don't provide sorting configuration, the results are sorted by the relevance that Amazon Kendra determines for the result.
    public var sortingConfiguration: KendraClientTypes.SortingConfiguration?
    /// The user context token or user and group information.
    public var userContext: KendraClientTypes.UserContext?
    /// Provides an identifier for a specific user. The VisitorId should be a unique identifier, such as a GUID. Don't use personally identifiable information, such as the user's email address, as the VisitorId.
    public var visitorId: Swift.String?

    public init (
        attributeFilter: KendraClientTypes.AttributeFilter? = nil,
        documentRelevanceOverrideConfigurations: [KendraClientTypes.DocumentRelevanceConfiguration]? = nil,
        facets: [KendraClientTypes.Facet]? = nil,
        indexId: Swift.String? = nil,
        pageNumber: Swift.Int? = nil,
        pageSize: Swift.Int? = nil,
        queryResultTypeFilter: KendraClientTypes.QueryResultType? = nil,
        queryText: Swift.String? = nil,
        requestedDocumentAttributes: [Swift.String]? = nil,
        sortingConfiguration: KendraClientTypes.SortingConfiguration? = nil,
        userContext: KendraClientTypes.UserContext? = nil,
        visitorId: Swift.String? = nil
    )
    {
        self.attributeFilter = attributeFilter
        self.documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurations
        self.facets = facets
        self.indexId = indexId
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.queryResultTypeFilter = queryResultTypeFilter
        self.queryText = queryText
        self.requestedDocumentAttributes = requestedDocumentAttributes
        self.sortingConfiguration = sortingConfiguration
        self.userContext = userContext
        self.visitorId = visitorId
    }
}

struct QueryInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let queryText: Swift.String?
    let attributeFilter: KendraClientTypes.AttributeFilter?
    let facets: [KendraClientTypes.Facet]?
    let requestedDocumentAttributes: [Swift.String]?
    let queryResultTypeFilter: KendraClientTypes.QueryResultType?
    let documentRelevanceOverrideConfigurations: [KendraClientTypes.DocumentRelevanceConfiguration]?
    let pageNumber: Swift.Int?
    let pageSize: Swift.Int?
    let sortingConfiguration: KendraClientTypes.SortingConfiguration?
    let userContext: KendraClientTypes.UserContext?
    let visitorId: Swift.String?
}

extension QueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeFilter = "AttributeFilter"
        case documentRelevanceOverrideConfigurations = "DocumentRelevanceOverrideConfigurations"
        case facets = "Facets"
        case indexId = "IndexId"
        case pageNumber = "PageNumber"
        case pageSize = "PageSize"
        case queryResultTypeFilter = "QueryResultTypeFilter"
        case queryText = "QueryText"
        case requestedDocumentAttributes = "RequestedDocumentAttributes"
        case sortingConfiguration = "SortingConfiguration"
        case userContext = "UserContext"
        case visitorId = "VisitorId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let queryTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryText)
        queryText = queryTextDecoded
        let attributeFilterDecoded = try containerValues.decodeIfPresent(KendraClientTypes.AttributeFilter.self, forKey: .attributeFilter)
        attributeFilter = attributeFilterDecoded
        let facetsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Facet?].self, forKey: .facets)
        var facetsDecoded0:[KendraClientTypes.Facet]? = nil
        if let facetsContainer = facetsContainer {
            facetsDecoded0 = [KendraClientTypes.Facet]()
            for structure0 in facetsContainer {
                if let structure0 = structure0 {
                    facetsDecoded0?.append(structure0)
                }
            }
        }
        facets = facetsDecoded0
        let requestedDocumentAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .requestedDocumentAttributes)
        var requestedDocumentAttributesDecoded0:[Swift.String]? = nil
        if let requestedDocumentAttributesContainer = requestedDocumentAttributesContainer {
            requestedDocumentAttributesDecoded0 = [Swift.String]()
            for string0 in requestedDocumentAttributesContainer {
                if let string0 = string0 {
                    requestedDocumentAttributesDecoded0?.append(string0)
                }
            }
        }
        requestedDocumentAttributes = requestedDocumentAttributesDecoded0
        let queryResultTypeFilterDecoded = try containerValues.decodeIfPresent(KendraClientTypes.QueryResultType.self, forKey: .queryResultTypeFilter)
        queryResultTypeFilter = queryResultTypeFilterDecoded
        let documentRelevanceOverrideConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentRelevanceConfiguration?].self, forKey: .documentRelevanceOverrideConfigurations)
        var documentRelevanceOverrideConfigurationsDecoded0:[KendraClientTypes.DocumentRelevanceConfiguration]? = nil
        if let documentRelevanceOverrideConfigurationsContainer = documentRelevanceOverrideConfigurationsContainer {
            documentRelevanceOverrideConfigurationsDecoded0 = [KendraClientTypes.DocumentRelevanceConfiguration]()
            for structure0 in documentRelevanceOverrideConfigurationsContainer {
                if let structure0 = structure0 {
                    documentRelevanceOverrideConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurationsDecoded0
        let pageNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageNumber)
        pageNumber = pageNumberDecoded
        let pageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageSize)
        pageSize = pageSizeDecoded
        let sortingConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SortingConfiguration.self, forKey: .sortingConfiguration)
        sortingConfiguration = sortingConfigurationDecoded
        let userContextDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserContext.self, forKey: .userContext)
        userContext = userContextDecoded
        let visitorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .visitorId)
        visitorId = visitorIdDecoded
    }
}

extension QueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension QueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum QueryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension QueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: QueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.facetResults = output.facetResults
            self.queryId = output.queryId
            self.resultItems = output.resultItems
            self.totalNumberOfResults = output.totalNumberOfResults
        } else {
            self.facetResults = nil
            self.queryId = nil
            self.resultItems = nil
            self.totalNumberOfResults = nil
        }
    }
}

public struct QueryOutputResponse: Swift.Equatable {
    /// Contains the facet results. A FacetResult contains the counts for each attribute key that was specified in the Facets input parameter.
    public var facetResults: [KendraClientTypes.FacetResult]?
    /// The unique identifier for the search. You use QueryId to identify the search when using the feedback API.
    public var queryId: Swift.String?
    /// The results of the search.
    public var resultItems: [KendraClientTypes.QueryResultItem]?
    /// The total number of items found by the search; however, you can only retrieve up to 100 items. For example, if the search found 192 items, you can only retrieve the first 100 of the items.
    public var totalNumberOfResults: Swift.Int?

    public init (
        facetResults: [KendraClientTypes.FacetResult]? = nil,
        queryId: Swift.String? = nil,
        resultItems: [KendraClientTypes.QueryResultItem]? = nil,
        totalNumberOfResults: Swift.Int? = nil
    )
    {
        self.facetResults = facetResults
        self.queryId = queryId
        self.resultItems = resultItems
        self.totalNumberOfResults = totalNumberOfResults
    }
}

struct QueryOutputResponseBody: Swift.Equatable {
    let queryId: Swift.String?
    let resultItems: [KendraClientTypes.QueryResultItem]?
    let facetResults: [KendraClientTypes.FacetResult]?
    let totalNumberOfResults: Swift.Int?
}

extension QueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case facetResults = "FacetResults"
        case queryId = "QueryId"
        case resultItems = "ResultItems"
        case totalNumberOfResults = "TotalNumberOfResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
        let resultItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.QueryResultItem?].self, forKey: .resultItems)
        var resultItemsDecoded0:[KendraClientTypes.QueryResultItem]? = nil
        if let resultItemsContainer = resultItemsContainer {
            resultItemsDecoded0 = [KendraClientTypes.QueryResultItem]()
            for structure0 in resultItemsContainer {
                if let structure0 = structure0 {
                    resultItemsDecoded0?.append(structure0)
                }
            }
        }
        resultItems = resultItemsDecoded0
        let facetResultsContainer = try containerValues.decodeIfPresent([KendraClientTypes.FacetResult?].self, forKey: .facetResults)
        var facetResultsDecoded0:[KendraClientTypes.FacetResult]? = nil
        if let facetResultsContainer = facetResultsContainer {
            facetResultsDecoded0 = [KendraClientTypes.FacetResult]()
            for structure0 in facetResultsContainer {
                if let structure0 = structure0 {
                    facetResultsDecoded0?.append(structure0)
                }
            }
        }
        facetResults = facetResultsDecoded0
        let totalNumberOfResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfResults)
        totalNumberOfResults = totalNumberOfResultsDecoded
    }
}

extension KendraClientTypes.QueryResultItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalAttributes = "AdditionalAttributes"
        case documentAttributes = "DocumentAttributes"
        case documentExcerpt = "DocumentExcerpt"
        case documentId = "DocumentId"
        case documentTitle = "DocumentTitle"
        case documentURI = "DocumentURI"
        case feedbackToken = "FeedbackToken"
        case id = "Id"
        case scoreAttributes = "ScoreAttributes"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalAttributes = additionalAttributes {
            var additionalAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalAttributes)
            for additionalresultattributelist0 in additionalAttributes {
                try additionalAttributesContainer.encode(additionalresultattributelist0)
            }
        }
        if let documentAttributes = documentAttributes {
            var documentAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentAttributes)
            for documentattributelist0 in documentAttributes {
                try documentAttributesContainer.encode(documentattributelist0)
            }
        }
        if let documentExcerpt = documentExcerpt {
            try encodeContainer.encode(documentExcerpt, forKey: .documentExcerpt)
        }
        if let documentId = documentId {
            try encodeContainer.encode(documentId, forKey: .documentId)
        }
        if let documentTitle = documentTitle {
            try encodeContainer.encode(documentTitle, forKey: .documentTitle)
        }
        if let documentURI = documentURI {
            try encodeContainer.encode(documentURI, forKey: .documentURI)
        }
        if let feedbackToken = feedbackToken {
            try encodeContainer.encode(feedbackToken, forKey: .feedbackToken)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let scoreAttributes = scoreAttributes {
            try encodeContainer.encode(scoreAttributes, forKey: .scoreAttributes)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.QueryResultType.self, forKey: .type)
        type = typeDecoded
        let additionalAttributesContainer = try containerValues.decodeIfPresent([KendraClientTypes.AdditionalResultAttribute?].self, forKey: .additionalAttributes)
        var additionalAttributesDecoded0:[KendraClientTypes.AdditionalResultAttribute]? = nil
        if let additionalAttributesContainer = additionalAttributesContainer {
            additionalAttributesDecoded0 = [KendraClientTypes.AdditionalResultAttribute]()
            for structure0 in additionalAttributesContainer {
                if let structure0 = structure0 {
                    additionalAttributesDecoded0?.append(structure0)
                }
            }
        }
        additionalAttributes = additionalAttributesDecoded0
        let documentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentId)
        documentId = documentIdDecoded
        let documentTitleDecoded = try containerValues.decodeIfPresent(KendraClientTypes.TextWithHighlights.self, forKey: .documentTitle)
        documentTitle = documentTitleDecoded
        let documentExcerptDecoded = try containerValues.decodeIfPresent(KendraClientTypes.TextWithHighlights.self, forKey: .documentExcerpt)
        documentExcerpt = documentExcerptDecoded
        let documentURIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentURI)
        documentURI = documentURIDecoded
        let documentAttributesContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentAttribute?].self, forKey: .documentAttributes)
        var documentAttributesDecoded0:[KendraClientTypes.DocumentAttribute]? = nil
        if let documentAttributesContainer = documentAttributesContainer {
            documentAttributesDecoded0 = [KendraClientTypes.DocumentAttribute]()
            for structure0 in documentAttributesContainer {
                if let structure0 = structure0 {
                    documentAttributesDecoded0?.append(structure0)
                }
            }
        }
        documentAttributes = documentAttributesDecoded0
        let scoreAttributesDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ScoreAttributes.self, forKey: .scoreAttributes)
        scoreAttributes = scoreAttributesDecoded
        let feedbackTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackToken)
        feedbackToken = feedbackTokenDecoded
    }
}

extension KendraClientTypes {
    /// A single query result. A query result contains information about a document returned by the query. This includes the original location of the document, a list of attributes assigned to the document, and relevant text from the document that satisfies the query.
    public struct QueryResultItem: Swift.Equatable {
        /// One or more additional attributes associated with the query result.
        public var additionalAttributes: [KendraClientTypes.AdditionalResultAttribute]?
        /// An array of document attributes for the document that the query result maps to. For example, the document author (Author) or the source URI (SourceUri) of the document.
        public var documentAttributes: [KendraClientTypes.DocumentAttribute]?
        /// An extract of the text in the document. Contains information about highlighting the relevant terms in the excerpt.
        public var documentExcerpt: KendraClientTypes.TextWithHighlights?
        /// The unique identifier for the document.
        public var documentId: Swift.String?
        /// The title of the document. Contains the text of the title and information for highlighting the relevant terms in the title.
        public var documentTitle: KendraClientTypes.TextWithHighlights?
        /// The URI of the original location of the document.
        public var documentURI: Swift.String?
        /// A token that identifies a particular result from a particular query. Use this token to provide click-through feedback for the result. For more information, see [ Submitting feedback ](https://docs.aws.amazon.com/kendra/latest/dg/submitting-feedback.html).
        public var feedbackToken: Swift.String?
        /// The unique identifier for the query result.
        public var id: Swift.String?
        /// Indicates the confidence that Amazon Kendra has that a result matches the query that you provided. Each result is placed into a bin that indicates the confidence, VERY_HIGH, HIGH, MEDIUM and LOW. You can use the score to determine if a response meets the confidence needed for your application. The field is only set to LOW when the Type field is set to DOCUMENT and Amazon Kendra is not confident that the result matches the query.
        public var scoreAttributes: KendraClientTypes.ScoreAttributes?
        /// The type of document.
        public var type: KendraClientTypes.QueryResultType?

        public init (
            additionalAttributes: [KendraClientTypes.AdditionalResultAttribute]? = nil,
            documentAttributes: [KendraClientTypes.DocumentAttribute]? = nil,
            documentExcerpt: KendraClientTypes.TextWithHighlights? = nil,
            documentId: Swift.String? = nil,
            documentTitle: KendraClientTypes.TextWithHighlights? = nil,
            documentURI: Swift.String? = nil,
            feedbackToken: Swift.String? = nil,
            id: Swift.String? = nil,
            scoreAttributes: KendraClientTypes.ScoreAttributes? = nil,
            type: KendraClientTypes.QueryResultType? = nil
        )
        {
            self.additionalAttributes = additionalAttributes
            self.documentAttributes = documentAttributes
            self.documentExcerpt = documentExcerpt
            self.documentId = documentId
            self.documentTitle = documentTitle
            self.documentURI = documentURI
            self.feedbackToken = feedbackToken
            self.id = id
            self.scoreAttributes = scoreAttributes
            self.type = type
        }
    }

}

extension KendraClientTypes {
    public enum QueryResultType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case answer
        case document
        case questionAnswer
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryResultType] {
            return [
                .answer,
                .document,
                .questionAnswer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .answer: return "ANSWER"
            case .document: return "DOCUMENT"
            case .questionAnswer: return "QUESTION_ANSWER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueryResultType(rawValue: rawValue) ?? QueryResultType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes {
    public enum QuerySuggestionsBlockListStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case activeButUpdateFailed
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [QuerySuggestionsBlockListStatus] {
            return [
                .active,
                .activeButUpdateFailed,
                .creating,
                .deleting,
                .failed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .activeButUpdateFailed: return "ACTIVE_BUT_UPDATE_FAILED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QuerySuggestionsBlockListStatus(rawValue: rawValue) ?? QuerySuggestionsBlockListStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.QuerySuggestionsBlockListSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case id = "Id"
        case itemCount = "ItemCount"
        case name = "Name"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let itemCount = itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.QuerySuggestionsBlockListStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
    }
}

extension KendraClientTypes {
    /// Summary information on a query suggestions block list. This includes information on the block list ID, block list name, when the block list was created, when the block list was last updated, and the count of block words/phrases in the block list. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    public struct QuerySuggestionsBlockListSummary: Swift.Equatable {
        /// The date-time summary information for a query suggestions block list was last created.
        public var createdAt: ClientRuntime.Date?
        /// The identifier of a block list.
        public var id: Swift.String?
        /// The number of items in the block list file.
        public var itemCount: Swift.Int?
        /// The name of the block list.
        public var name: Swift.String?
        /// The status of the block list.
        public var status: KendraClientTypes.QuerySuggestionsBlockListStatus?
        /// The date-time the block list was last updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            itemCount: Swift.Int? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.QuerySuggestionsBlockListStatus? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.id = id
            self.itemCount = itemCount
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension KendraClientTypes {
    public enum QuerySuggestionsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [QuerySuggestionsStatus] {
            return [
                .active,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QuerySuggestionsStatus(rawValue: rawValue) ?? QuerySuggestionsStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes {
    public enum ReadAccessType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [ReadAccessType] {
            return [
                .allow,
                .deny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .deny: return "DENY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReadAccessType(rawValue: rawValue) ?? ReadAccessType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.Relevance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "Duration"
        case freshness = "Freshness"
        case importance = "Importance"
        case rankOrder = "RankOrder"
        case valueImportanceMap = "ValueImportanceMap"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let freshness = freshness {
            try encodeContainer.encode(freshness, forKey: .freshness)
        }
        if let importance = importance {
            try encodeContainer.encode(importance, forKey: .importance)
        }
        if let rankOrder = rankOrder {
            try encodeContainer.encode(rankOrder.rawValue, forKey: .rankOrder)
        }
        if let valueImportanceMap = valueImportanceMap {
            var valueImportanceMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .valueImportanceMap)
            for (dictKey0, valueimportancemap0) in valueImportanceMap {
                try valueImportanceMapContainer.encode(valueimportancemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let freshnessDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .freshness)
        freshness = freshnessDecoded
        let importanceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importance)
        importance = importanceDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .duration)
        duration = durationDecoded
        let rankOrderDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Order.self, forKey: .rankOrder)
        rankOrder = rankOrderDecoded
        let valueImportanceMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .valueImportanceMap)
        var valueImportanceMapDecoded0: [Swift.String:Swift.Int]? = nil
        if let valueImportanceMapContainer = valueImportanceMapContainer {
            valueImportanceMapDecoded0 = [Swift.String:Swift.Int]()
            for (key0, importance0) in valueImportanceMapContainer {
                if let importance0 = importance0 {
                    valueImportanceMapDecoded0?[key0] = importance0
                }
            }
        }
        valueImportanceMap = valueImportanceMapDecoded0
    }
}

extension KendraClientTypes {
    /// Provides information for manually tuning the relevance of a field in a search. When a query includes terms that match the field, the results are given a boost in the response based on these tuning parameters.
    public struct Relevance: Swift.Equatable {
        /// Specifies the time period that the boost applies to. For example, to make the boost apply to documents with the field value within the last month, you would use "2628000s". Once the field value is beyond the specified range, the effect of the boost drops off. The higher the importance, the faster the effect drops off. If you don't specify a value, the default is 3 months. The value of the field is a numeric string followed by the character "s", for example "86400s" for one day, or "604800s" for one week. Only applies to DATE fields.
        public var duration: Swift.String?
        /// Indicates that this field determines how "fresh" a document is. For example, if document 1 was created on November 5, and document 2 was created on October 31, document 1 is "fresher" than document 2. You can only set the Freshness field on one DATE type field. Only applies to DATE fields.
        public var freshness: Swift.Bool?
        /// The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers.
        public var importance: Swift.Int?
        /// Determines how values should be interpreted. When the RankOrder field is ASCENDING, higher numbers are better. For example, a document with a rating score of 10 is higher ranking than a document with a rating score of 1. When the RankOrder field is DESCENDING, lower numbers are better. For example, in a task tracking application, a priority 1 task is more important than a priority 5 task. Only applies to LONG and DOUBLE fields.
        public var rankOrder: KendraClientTypes.Order?
        /// A list of values that should be given a different boost when they appear in the result list. For example, if you are boosting a field called "department," query terms that match the department field are boosted in the result. However, you can add entries from the department field to boost documents with those values higher. For example, you can add entries to the map with names of departments. If you add "HR",5 and "Legal",3 those departments are given special attention when they appear in the metadata of a document. When those terms appear they are given the specified importance instead of the regular importance for the boost.
        public var valueImportanceMap: [Swift.String:Swift.Int]?

        public init (
            duration: Swift.String? = nil,
            freshness: Swift.Bool? = nil,
            importance: Swift.Int? = nil,
            rankOrder: KendraClientTypes.Order? = nil,
            valueImportanceMap: [Swift.String:Swift.Int]? = nil
        )
        {
            self.duration = duration
            self.freshness = freshness
            self.importance = importance
            self.rankOrder = rankOrder
            self.valueImportanceMap = valueImportanceMap
        }
    }

}

extension KendraClientTypes.RelevanceFeedback: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relevanceValue = "RelevanceValue"
        case resultId = "ResultId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relevanceValue = relevanceValue {
            try encodeContainer.encode(relevanceValue.rawValue, forKey: .relevanceValue)
        }
        if let resultId = resultId {
            try encodeContainer.encode(resultId, forKey: .resultId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resultId)
        resultId = resultIdDecoded
        let relevanceValueDecoded = try containerValues.decodeIfPresent(KendraClientTypes.RelevanceType.self, forKey: .relevanceValue)
        relevanceValue = relevanceValueDecoded
    }
}

extension KendraClientTypes {
    /// Provides feedback on how relevant a document is to a search. Your application uses the SubmitFeedback operation to provide relevance information.
    public struct RelevanceFeedback: Swift.Equatable {
        /// Whether to document was relevant or not relevant to the search.
        /// This member is required.
        public var relevanceValue: KendraClientTypes.RelevanceType?
        /// The unique identifier of the search result that the user provided relevance feedback for.
        /// This member is required.
        public var resultId: Swift.String?

        public init (
            relevanceValue: KendraClientTypes.RelevanceType? = nil,
            resultId: Swift.String? = nil
        )
        {
            self.relevanceValue = relevanceValue
            self.resultId = resultId
        }
    }

}

extension KendraClientTypes {
    public enum RelevanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notRelevant
        case relevant
        case sdkUnknown(Swift.String)

        public static var allCases: [RelevanceType] {
            return [
                .notRelevant,
                .relevant,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notRelevant: return "NOT_RELEVANT"
            case .relevant: return "RELEVANT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelevanceType(rawValue: rawValue) ?? RelevanceType.sdkUnknown(rawValue)
        }
    }
}

extension ResourceAlreadyExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceAlreadyExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct ResourceAlreadyExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceAlreadyExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceAlreadyExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct ResourceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct ResourceUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KendraClientTypes.S3DataSourceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlListConfiguration = "AccessControlListConfiguration"
        case bucketName = "BucketName"
        case documentsMetadataConfiguration = "DocumentsMetadataConfiguration"
        case exclusionPatterns = "ExclusionPatterns"
        case inclusionPatterns = "InclusionPatterns"
        case inclusionPrefixes = "InclusionPrefixes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControlListConfiguration = accessControlListConfiguration {
            try encodeContainer.encode(accessControlListConfiguration, forKey: .accessControlListConfiguration)
        }
        if let bucketName = bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let documentsMetadataConfiguration = documentsMetadataConfiguration {
            try encodeContainer.encode(documentsMetadataConfiguration, forKey: .documentsMetadataConfiguration)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let inclusionPrefixes = inclusionPrefixes {
            var inclusionPrefixesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPrefixes)
            for datasourceinclusionsexclusionsstrings0 in inclusionPrefixes {
                try inclusionPrefixesContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let inclusionPrefixesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPrefixes)
        var inclusionPrefixesDecoded0:[Swift.String]? = nil
        if let inclusionPrefixesContainer = inclusionPrefixesContainer {
            inclusionPrefixesDecoded0 = [Swift.String]()
            for string0 in inclusionPrefixesContainer {
                if let string0 = string0 {
                    inclusionPrefixesDecoded0?.append(string0)
                }
            }
        }
        inclusionPrefixes = inclusionPrefixesDecoded0
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let documentsMetadataConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentsMetadataConfiguration.self, forKey: .documentsMetadataConfiguration)
        documentsMetadataConfiguration = documentsMetadataConfigurationDecoded
        let accessControlListConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.AccessControlListConfiguration.self, forKey: .accessControlListConfiguration)
        accessControlListConfiguration = accessControlListConfigurationDecoded
    }
}

extension KendraClientTypes {
    /// Provides configuration information for a data source to index documents in an Amazon S3 bucket.
    public struct S3DataSourceConfiguration: Swift.Equatable {
        /// Provides the path to the S3 bucket that contains the user context filtering files for the data source. For the format of the file, see [Access control for S3 data sources](https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html).
        public var accessControlListConfiguration: KendraClientTypes.AccessControlListConfiguration?
        /// The name of the bucket that contains the documents.
        /// This member is required.
        public var bucketName: Swift.String?
        /// Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.
        public var documentsMetadataConfiguration: KendraClientTypes.DocumentsMetadataConfiguration?
        /// A list of glob patterns for documents that should not be indexed. If a document that matches an inclusion prefix or inclusion pattern also matches an exclusion pattern, the document is not indexed. Some [examples](https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters) are:
        ///
        /// * *.png , *.jpg will exclude all PNG and JPEG image files in a directory (files with the extensions .png and .jpg).
        ///
        /// * *internal* will exclude all files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.
        ///
        /// * **/*internal* will exclude all internal-related files in a directory and its subdirectories.
        public var exclusionPatterns: [Swift.String]?
        /// A list of glob patterns for documents that should be indexed. If a document that matches an inclusion pattern also matches an exclusion pattern, the document is not indexed. Some [examples](https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters) are:
        ///
        /// * *.txt will include all text files in a directory (files with the extension .txt).
        ///
        /// * **/*.txt will include all text files in a directory and its subdirectories.
        ///
        /// * *tax* will include all files in a directory that contain 'tax' in the file name, such as 'tax', 'taxes', 'income_tax'.
        public var inclusionPatterns: [Swift.String]?
        /// A list of S3 prefixes for the documents that should be included in the index.
        public var inclusionPrefixes: [Swift.String]?

        public init (
            accessControlListConfiguration: KendraClientTypes.AccessControlListConfiguration? = nil,
            bucketName: Swift.String? = nil,
            documentsMetadataConfiguration: KendraClientTypes.DocumentsMetadataConfiguration? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            inclusionPrefixes: [Swift.String]? = nil
        )
        {
            self.accessControlListConfiguration = accessControlListConfiguration
            self.bucketName = bucketName
            self.documentsMetadataConfiguration = documentsMetadataConfiguration
            self.exclusionPatterns = exclusionPatterns
            self.inclusionPatterns = inclusionPatterns
            self.inclusionPrefixes = inclusionPrefixes
        }
    }

}

extension KendraClientTypes.S3Path: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case key = "Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension KendraClientTypes {
    /// Information required to find a specific file in an Amazon S3 bucket.
    public struct S3Path: Swift.Equatable {
        /// The name of the S3 bucket that contains the file.
        /// This member is required.
        public var bucket: Swift.String?
        /// The name of the file.
        /// This member is required.
        public var key: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension KendraClientTypes.SalesforceChatterFeedConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentDataFieldName = "DocumentDataFieldName"
        case documentTitleFieldName = "DocumentTitleFieldName"
        case fieldMappings = "FieldMappings"
        case includeFilterTypes = "IncludeFilterTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentDataFieldName = documentDataFieldName {
            try encodeContainer.encode(documentDataFieldName, forKey: .documentDataFieldName)
        }
        if let documentTitleFieldName = documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let includeFilterTypes = includeFilterTypes {
            var includeFilterTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includeFilterTypes)
            for salesforcechatterfeedincludefiltertypes0 in includeFilterTypes {
                try includeFilterTypesContainer.encode(salesforcechatterfeedincludefiltertypes0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentDataFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentDataFieldName)
        documentDataFieldName = documentDataFieldNameDecoded
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
        let includeFilterTypesContainer = try containerValues.decodeIfPresent([KendraClientTypes.SalesforceChatterFeedIncludeFilterType?].self, forKey: .includeFilterTypes)
        var includeFilterTypesDecoded0:[KendraClientTypes.SalesforceChatterFeedIncludeFilterType]? = nil
        if let includeFilterTypesContainer = includeFilterTypesContainer {
            includeFilterTypesDecoded0 = [KendraClientTypes.SalesforceChatterFeedIncludeFilterType]()
            for string0 in includeFilterTypesContainer {
                if let string0 = string0 {
                    includeFilterTypesDecoded0?.append(string0)
                }
            }
        }
        includeFilterTypes = includeFilterTypesDecoded0
    }
}

extension KendraClientTypes {
    /// Defines configuration for syncing a Salesforce chatter feed. The contents of the object comes from the Salesforce FeedItem table.
    public struct SalesforceChatterFeedConfiguration: Swift.Equatable {
        /// The name of the column in the Salesforce FeedItem table that contains the content to index. Typically this is the Body column.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the column in the Salesforce FeedItem table that contains the title of the document. This is typically the Title column.
        public var documentTitleFieldName: Swift.String?
        /// Maps fields from a Salesforce chatter feed into Amazon Kendra index fields.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// Filters the documents in the feed based on status of the user. When you specify ACTIVE_USERS only documents from users who have an active account are indexed. When you specify STANDARD_USER only documents for Salesforce standard users are documented. You can specify both.
        public var includeFilterTypes: [KendraClientTypes.SalesforceChatterFeedIncludeFilterType]?

        public init (
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            includeFilterTypes: [KendraClientTypes.SalesforceChatterFeedIncludeFilterType]? = nil
        )
        {
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
            self.includeFilterTypes = includeFilterTypes
        }
    }

}

extension KendraClientTypes {
    public enum SalesforceChatterFeedIncludeFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activeUser
        case standardUser
        case sdkUnknown(Swift.String)

        public static var allCases: [SalesforceChatterFeedIncludeFilterType] {
            return [
                .activeUser,
                .standardUser,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activeUser: return "ACTIVE_USER"
            case .standardUser: return "STANDARD_USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SalesforceChatterFeedIncludeFilterType(rawValue: rawValue) ?? SalesforceChatterFeedIncludeFilterType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.SalesforceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case chatterFeedConfiguration = "ChatterFeedConfiguration"
        case crawlAttachments = "CrawlAttachments"
        case excludeAttachmentFilePatterns = "ExcludeAttachmentFilePatterns"
        case includeAttachmentFilePatterns = "IncludeAttachmentFilePatterns"
        case knowledgeArticleConfiguration = "KnowledgeArticleConfiguration"
        case secretArn = "SecretArn"
        case serverUrl = "ServerUrl"
        case standardObjectAttachmentConfiguration = "StandardObjectAttachmentConfiguration"
        case standardObjectConfigurations = "StandardObjectConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let chatterFeedConfiguration = chatterFeedConfiguration {
            try encodeContainer.encode(chatterFeedConfiguration, forKey: .chatterFeedConfiguration)
        }
        if crawlAttachments != false {
            try encodeContainer.encode(crawlAttachments, forKey: .crawlAttachments)
        }
        if let excludeAttachmentFilePatterns = excludeAttachmentFilePatterns {
            var excludeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in excludeAttachmentFilePatterns {
                try excludeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let includeAttachmentFilePatterns = includeAttachmentFilePatterns {
            var includeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in includeAttachmentFilePatterns {
                try includeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let knowledgeArticleConfiguration = knowledgeArticleConfiguration {
            try encodeContainer.encode(knowledgeArticleConfiguration, forKey: .knowledgeArticleConfiguration)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let serverUrl = serverUrl {
            try encodeContainer.encode(serverUrl, forKey: .serverUrl)
        }
        if let standardObjectAttachmentConfiguration = standardObjectAttachmentConfiguration {
            try encodeContainer.encode(standardObjectAttachmentConfiguration, forKey: .standardObjectAttachmentConfiguration)
        }
        if let standardObjectConfigurations = standardObjectConfigurations {
            var standardObjectConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .standardObjectConfigurations)
            for salesforcestandardobjectconfigurationlist0 in standardObjectConfigurations {
                try standardObjectConfigurationsContainer.encode(salesforcestandardobjectconfigurationlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverUrl)
        serverUrl = serverUrlDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let standardObjectConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.SalesforceStandardObjectConfiguration?].self, forKey: .standardObjectConfigurations)
        var standardObjectConfigurationsDecoded0:[KendraClientTypes.SalesforceStandardObjectConfiguration]? = nil
        if let standardObjectConfigurationsContainer = standardObjectConfigurationsContainer {
            standardObjectConfigurationsDecoded0 = [KendraClientTypes.SalesforceStandardObjectConfiguration]()
            for structure0 in standardObjectConfigurationsContainer {
                if let structure0 = structure0 {
                    standardObjectConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        standardObjectConfigurations = standardObjectConfigurationsDecoded0
        let knowledgeArticleConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SalesforceKnowledgeArticleConfiguration.self, forKey: .knowledgeArticleConfiguration)
        knowledgeArticleConfiguration = knowledgeArticleConfigurationDecoded
        let chatterFeedConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SalesforceChatterFeedConfiguration.self, forKey: .chatterFeedConfiguration)
        chatterFeedConfiguration = chatterFeedConfigurationDecoded
        let crawlAttachmentsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .crawlAttachments)
        crawlAttachments = crawlAttachmentsDecoded
        let standardObjectAttachmentConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration.self, forKey: .standardObjectAttachmentConfiguration)
        standardObjectAttachmentConfiguration = standardObjectAttachmentConfigurationDecoded
        let includeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includeAttachmentFilePatterns)
        var includeAttachmentFilePatternsDecoded0:[Swift.String]? = nil
        if let includeAttachmentFilePatternsContainer = includeAttachmentFilePatternsContainer {
            includeAttachmentFilePatternsDecoded0 = [Swift.String]()
            for string0 in includeAttachmentFilePatternsContainer {
                if let string0 = string0 {
                    includeAttachmentFilePatternsDecoded0?.append(string0)
                }
            }
        }
        includeAttachmentFilePatterns = includeAttachmentFilePatternsDecoded0
        let excludeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludeAttachmentFilePatterns)
        var excludeAttachmentFilePatternsDecoded0:[Swift.String]? = nil
        if let excludeAttachmentFilePatternsContainer = excludeAttachmentFilePatternsContainer {
            excludeAttachmentFilePatternsDecoded0 = [Swift.String]()
            for string0 in excludeAttachmentFilePatternsContainer {
                if let string0 = string0 {
                    excludeAttachmentFilePatternsDecoded0?.append(string0)
                }
            }
        }
        excludeAttachmentFilePatterns = excludeAttachmentFilePatternsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides configuration information for connecting to a Salesforce data source.
    public struct SalesforceConfiguration: Swift.Equatable {
        /// Specifies configuration information for Salesforce chatter feeds.
        public var chatterFeedConfiguration: KendraClientTypes.SalesforceChatterFeedConfiguration?
        /// Indicates whether Amazon Kendra should index attachments to Salesforce objects.
        public var crawlAttachments: Swift.Bool
        /// A list of regular expression patterns. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an exclusion pattern and an inclusion pattern, the document is not included in the index. The regex is applied to the name of the attached file.
        public var excludeAttachmentFilePatterns: [Swift.String]?
        /// A list of regular expression patterns. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion pattern and an exclusion pattern, the document is not included in the index. The regex is applied to the name of the attached file.
        public var includeAttachmentFilePatterns: [Swift.String]?
        /// Specifies configuration information for the knowledge article types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge articles and the standard fields of knowledge articles, or the custom fields of custom knowledge articles, but not both.
        public var knowledgeArticleConfiguration: KendraClientTypes.SalesforceKnowledgeArticleConfiguration?
        /// The Amazon Resource Name (ARN) of an Secrets Managersecret that contains the key/value pairs required to connect to your Salesforce instance. The secret must contain a JSON structure with the following keys:
        ///
        /// * authenticationUrl - The OAUTH endpoint that Amazon Kendra connects to get an OAUTH token.
        ///
        /// * consumerKey - The application public key generated when you created your Salesforce application.
        ///
        /// * consumerSecret - The application private key generated when you created your Salesforce application.
        ///
        /// * password - The password associated with the user logging in to the Salesforce instance.
        ///
        /// * securityToken - The token associated with the user account logging in to the Salesforce instance.
        ///
        /// * username - The user name of the user logging in to the Salesforce instance.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The instance URL for the Salesforce site that you want to index.
        /// This member is required.
        public var serverUrl: Swift.String?
        /// Provides configuration information for processing attachments to Salesforce standard objects.
        public var standardObjectAttachmentConfiguration: KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration?
        /// Specifies the Salesforce standard objects that Amazon Kendra indexes.
        public var standardObjectConfigurations: [KendraClientTypes.SalesforceStandardObjectConfiguration]?

        public init (
            chatterFeedConfiguration: KendraClientTypes.SalesforceChatterFeedConfiguration? = nil,
            crawlAttachments: Swift.Bool = false,
            excludeAttachmentFilePatterns: [Swift.String]? = nil,
            includeAttachmentFilePatterns: [Swift.String]? = nil,
            knowledgeArticleConfiguration: KendraClientTypes.SalesforceKnowledgeArticleConfiguration? = nil,
            secretArn: Swift.String? = nil,
            serverUrl: Swift.String? = nil,
            standardObjectAttachmentConfiguration: KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration? = nil,
            standardObjectConfigurations: [KendraClientTypes.SalesforceStandardObjectConfiguration]? = nil
        )
        {
            self.chatterFeedConfiguration = chatterFeedConfiguration
            self.crawlAttachments = crawlAttachments
            self.excludeAttachmentFilePatterns = excludeAttachmentFilePatterns
            self.includeAttachmentFilePatterns = includeAttachmentFilePatterns
            self.knowledgeArticleConfiguration = knowledgeArticleConfiguration
            self.secretArn = secretArn
            self.serverUrl = serverUrl
            self.standardObjectAttachmentConfiguration = standardObjectAttachmentConfiguration
            self.standardObjectConfigurations = standardObjectConfigurations
        }
    }

}

extension KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentDataFieldName = "DocumentDataFieldName"
        case documentTitleFieldName = "DocumentTitleFieldName"
        case fieldMappings = "FieldMappings"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentDataFieldName = documentDataFieldName {
            try encodeContainer.encode(documentDataFieldName, forKey: .documentDataFieldName)
        }
        if let documentTitleFieldName = documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let documentDataFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentDataFieldName)
        documentDataFieldName = documentDataFieldNameDecoded
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides configuration information for indexing Salesforce custom articles.
    public struct SalesforceCustomKnowledgeArticleTypeConfiguration: Swift.Equatable {
        /// The name of the field in the custom knowledge article that contains the document data to index.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the field in the custom knowledge article that contains the document title.
        public var documentTitleFieldName: Swift.String?
        /// One or more objects that map fields in the custom knowledge article to fields in the Amazon Kendra index.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// The name of the configuration.
        /// This member is required.
        public var name: Swift.String?

        public init (
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            name: Swift.String? = nil
        )
        {
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
            self.name = name
        }
    }

}

extension KendraClientTypes.SalesforceKnowledgeArticleConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKnowledgeArticleTypeConfigurations = "CustomKnowledgeArticleTypeConfigurations"
        case includedStates = "IncludedStates"
        case standardKnowledgeArticleTypeConfiguration = "StandardKnowledgeArticleTypeConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customKnowledgeArticleTypeConfigurations = customKnowledgeArticleTypeConfigurations {
            var customKnowledgeArticleTypeConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customKnowledgeArticleTypeConfigurations)
            for salesforcecustomknowledgearticletypeconfigurationlist0 in customKnowledgeArticleTypeConfigurations {
                try customKnowledgeArticleTypeConfigurationsContainer.encode(salesforcecustomknowledgearticletypeconfigurationlist0)
            }
        }
        if let includedStates = includedStates {
            var includedStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedStates)
            for salesforceknowledgearticlestatelist0 in includedStates {
                try includedStatesContainer.encode(salesforceknowledgearticlestatelist0.rawValue)
            }
        }
        if let standardKnowledgeArticleTypeConfiguration = standardKnowledgeArticleTypeConfiguration {
            try encodeContainer.encode(standardKnowledgeArticleTypeConfiguration, forKey: .standardKnowledgeArticleTypeConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includedStatesContainer = try containerValues.decodeIfPresent([KendraClientTypes.SalesforceKnowledgeArticleState?].self, forKey: .includedStates)
        var includedStatesDecoded0:[KendraClientTypes.SalesforceKnowledgeArticleState]? = nil
        if let includedStatesContainer = includedStatesContainer {
            includedStatesDecoded0 = [KendraClientTypes.SalesforceKnowledgeArticleState]()
            for string0 in includedStatesContainer {
                if let string0 = string0 {
                    includedStatesDecoded0?.append(string0)
                }
            }
        }
        includedStates = includedStatesDecoded0
        let standardKnowledgeArticleTypeConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration.self, forKey: .standardKnowledgeArticleTypeConfiguration)
        standardKnowledgeArticleTypeConfiguration = standardKnowledgeArticleTypeConfigurationDecoded
        let customKnowledgeArticleTypeConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration?].self, forKey: .customKnowledgeArticleTypeConfigurations)
        var customKnowledgeArticleTypeConfigurationsDecoded0:[KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration]? = nil
        if let customKnowledgeArticleTypeConfigurationsContainer = customKnowledgeArticleTypeConfigurationsContainer {
            customKnowledgeArticleTypeConfigurationsDecoded0 = [KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration]()
            for structure0 in customKnowledgeArticleTypeConfigurationsContainer {
                if let structure0 = structure0 {
                    customKnowledgeArticleTypeConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        customKnowledgeArticleTypeConfigurations = customKnowledgeArticleTypeConfigurationsDecoded0
    }
}

extension KendraClientTypes {
    /// Specifies configuration information for the knowledge article types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge articles and the standard fields of knowledge articles, or the custom fields of custom knowledge articles, but not both
    public struct SalesforceKnowledgeArticleConfiguration: Swift.Equatable {
        /// Provides configuration information for custom Salesforce knowledge articles.
        public var customKnowledgeArticleTypeConfigurations: [KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration]?
        /// Specifies the document states that should be included when Amazon Kendra indexes knowledge articles. You must specify at least one state.
        /// This member is required.
        public var includedStates: [KendraClientTypes.SalesforceKnowledgeArticleState]?
        /// Provides configuration information for standard Salesforce knowledge articles.
        public var standardKnowledgeArticleTypeConfiguration: KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration?

        public init (
            customKnowledgeArticleTypeConfigurations: [KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration]? = nil,
            includedStates: [KendraClientTypes.SalesforceKnowledgeArticleState]? = nil,
            standardKnowledgeArticleTypeConfiguration: KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration? = nil
        )
        {
            self.customKnowledgeArticleTypeConfigurations = customKnowledgeArticleTypeConfigurations
            self.includedStates = includedStates
            self.standardKnowledgeArticleTypeConfiguration = standardKnowledgeArticleTypeConfiguration
        }
    }

}

extension KendraClientTypes {
    public enum SalesforceKnowledgeArticleState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archived
        case draft
        case published
        case sdkUnknown(Swift.String)

        public static var allCases: [SalesforceKnowledgeArticleState] {
            return [
                .archived,
                .draft,
                .published,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archived: return "ARCHIVED"
            case .draft: return "DRAFT"
            case .published: return "PUBLISHED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SalesforceKnowledgeArticleState(rawValue: rawValue) ?? SalesforceKnowledgeArticleState.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentDataFieldName = "DocumentDataFieldName"
        case documentTitleFieldName = "DocumentTitleFieldName"
        case fieldMappings = "FieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentDataFieldName = documentDataFieldName {
            try encodeContainer.encode(documentDataFieldName, forKey: .documentDataFieldName)
        }
        if let documentTitleFieldName = documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentDataFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentDataFieldName)
        documentDataFieldName = documentDataFieldNameDecoded
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides configuration information for standard Salesforce knowledge articles.
    public struct SalesforceStandardKnowledgeArticleTypeConfiguration: Swift.Equatable {
        /// The name of the field that contains the document data to index.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the field that contains the document title.
        public var documentTitleFieldName: Swift.String?
        /// One or more objects that map fields in the knowledge article to Amazon Kendra index fields. The index field must exist before you can map a Salesforce field to it.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?

        public init (
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        )
        {
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
        }
    }

}

extension KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentTitleFieldName = "DocumentTitleFieldName"
        case fieldMappings = "FieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentTitleFieldName = documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides configuration information for processing attachments to Salesforce standard objects.
    public struct SalesforceStandardObjectAttachmentConfiguration: Swift.Equatable {
        /// The name of the field used for the document title.
        public var documentTitleFieldName: Swift.String?
        /// One or more objects that map fields in attachments to Amazon Kendra index fields.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?

        public init (
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        )
        {
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
        }
    }

}

extension KendraClientTypes.SalesforceStandardObjectConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentDataFieldName = "DocumentDataFieldName"
        case documentTitleFieldName = "DocumentTitleFieldName"
        case fieldMappings = "FieldMappings"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentDataFieldName = documentDataFieldName {
            try encodeContainer.encode(documentDataFieldName, forKey: .documentDataFieldName)
        }
        if let documentTitleFieldName = documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SalesforceStandardObjectName.self, forKey: .name)
        name = nameDecoded
        let documentDataFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentDataFieldName)
        documentDataFieldName = documentDataFieldNameDecoded
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Specifies configuration information for indexing a single standard object.
    public struct SalesforceStandardObjectConfiguration: Swift.Equatable {
        /// The name of the field in the standard object table that contains the document contents.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the field in the standard object table that contains the document title.
        public var documentTitleFieldName: Swift.String?
        /// One or more objects that map fields in the standard object to Amazon Kendra index fields. The index field must exist before you can map a Salesforce field to it.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// The name of the standard object.
        /// This member is required.
        public var name: KendraClientTypes.SalesforceStandardObjectName?

        public init (
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            name: KendraClientTypes.SalesforceStandardObjectName? = nil
        )
        {
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
            self.name = name
        }
    }

}

extension KendraClientTypes {
    public enum SalesforceStandardObjectName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case account
        case campaign
        case `case`
        case contact
        case contract
        case document
        case group
        case idea
        case lead
        case opportunity
        case partner
        case pricebook
        case product
        case profile
        case solution
        case task
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [SalesforceStandardObjectName] {
            return [
                .account,
                .campaign,
                .case,
                .contact,
                .contract,
                .document,
                .group,
                .idea,
                .lead,
                .opportunity,
                .partner,
                .pricebook,
                .product,
                .profile,
                .solution,
                .task,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .campaign: return "CAMPAIGN"
            case .case: return "CASE"
            case .contact: return "CONTACT"
            case .contract: return "CONTRACT"
            case .document: return "DOCUMENT"
            case .group: return "GROUP"
            case .idea: return "IDEA"
            case .lead: return "LEAD"
            case .opportunity: return "OPPORTUNITY"
            case .partner: return "PARTNER"
            case .pricebook: return "PRICEBOOK"
            case .product: return "PRODUCT"
            case .profile: return "PROFILE"
            case .solution: return "SOLUTION"
            case .task: return "TASK"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SalesforceStandardObjectName(rawValue: rawValue) ?? SalesforceStandardObjectName.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ScoreAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scoreConfidence = "ScoreConfidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scoreConfidence = scoreConfidence {
            try encodeContainer.encode(scoreConfidence.rawValue, forKey: .scoreConfidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scoreConfidenceDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ScoreConfidence.self, forKey: .scoreConfidence)
        scoreConfidence = scoreConfidenceDecoded
    }
}

extension KendraClientTypes {
    /// Provides a relative ranking that indicates how confident Amazon Kendra is that the response matches the query.
    public struct ScoreAttributes: Swift.Equatable {
        /// A relative ranking for how well the response matches the query.
        public var scoreConfidence: KendraClientTypes.ScoreConfidence?

        public init (
            scoreConfidence: KendraClientTypes.ScoreConfidence? = nil
        )
        {
            self.scoreConfidence = scoreConfidence
        }
    }

}

extension KendraClientTypes {
    /// Enumeration for query score confidence.
    public enum ScoreConfidence: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case notAvailable
        case veryHigh
        case sdkUnknown(Swift.String)

        public static var allCases: [ScoreConfidence] {
            return [
                .high,
                .low,
                .medium,
                .notAvailable,
                .veryHigh,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case .notAvailable: return "NOT_AVAILABLE"
            case .veryHigh: return "VERY_HIGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScoreConfidence(rawValue: rawValue) ?? ScoreConfidence.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.Search: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayable = "Displayable"
        case facetable = "Facetable"
        case searchable = "Searchable"
        case sortable = "Sortable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if displayable != false {
            try encodeContainer.encode(displayable, forKey: .displayable)
        }
        if facetable != false {
            try encodeContainer.encode(facetable, forKey: .facetable)
        }
        if searchable != false {
            try encodeContainer.encode(searchable, forKey: .searchable)
        }
        if sortable != false {
            try encodeContainer.encode(sortable, forKey: .sortable)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let facetableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .facetable)
        facetable = facetableDecoded
        let searchableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .searchable)
        searchable = searchableDecoded
        let displayableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .displayable)
        displayable = displayableDecoded
        let sortableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sortable)
        sortable = sortableDecoded
    }
}

extension KendraClientTypes {
    /// Provides information about how a custom index field is used during a search.
    public struct Search: Swift.Equatable {
        /// Determines whether the field is returned in the query response. The default is true.
        public var displayable: Swift.Bool
        /// Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is false .
        public var facetable: Swift.Bool
        /// Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is true for string fields and false for number and date fields.
        public var searchable: Swift.Bool
        /// Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is false.
        public var sortable: Swift.Bool

        public init (
            displayable: Swift.Bool = false,
            facetable: Swift.Bool = false,
            searchable: Swift.Bool = false,
            sortable: Swift.Bool = false
        )
        {
            self.displayable = displayable
            self.facetable = facetable
            self.searchable = searchable
            self.sortable = sortable
        }
    }

}

extension KendraClientTypes.SeedUrlConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case seedUrls = "SeedUrls"
        case webCrawlerMode = "WebCrawlerMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let seedUrls = seedUrls {
            var seedUrlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .seedUrls)
            for seedurllist0 in seedUrls {
                try seedUrlsContainer.encode(seedurllist0)
            }
        }
        if let webCrawlerMode = webCrawlerMode {
            try encodeContainer.encode(webCrawlerMode.rawValue, forKey: .webCrawlerMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let seedUrlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .seedUrls)
        var seedUrlsDecoded0:[Swift.String]? = nil
        if let seedUrlsContainer = seedUrlsContainer {
            seedUrlsDecoded0 = [Swift.String]()
            for string0 in seedUrlsContainer {
                if let string0 = string0 {
                    seedUrlsDecoded0?.append(string0)
                }
            }
        }
        seedUrls = seedUrlsDecoded0
        let webCrawlerModeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.WebCrawlerMode.self, forKey: .webCrawlerMode)
        webCrawlerMode = webCrawlerModeDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information of the seed or starting point URLs to crawl. When selecting websites to index, you must adhere to the [Amazon Acceptable Use Policy](https://aws.amazon.com/aup/) and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own webpages, or webpages that you have authorization to index.
    public struct SeedUrlConfiguration: Swift.Equatable {
        /// The list of seed or starting point URLs of the websites you want to crawl. The list can include a maximum of 100 seed URLs.
        /// This member is required.
        public var seedUrls: [Swift.String]?
        /// You can choose one of the following modes:
        ///
        /// * HOST_ONLY – crawl only the website host names. For example, if the seed URL is "abc.example.com", then only URLs with host name "abc.example.com" are crawled.
        ///
        /// * SUBDOMAINS – crawl the website host names with subdomains. For example, if the seed URL is "abc.example.com", then "a.abc.example.com" and "b.abc.example.com" are also crawled.
        ///
        /// * EVERYTHING – crawl the website host names with subdomains and other domains that the webpages link to.
        ///
        ///
        /// The default mode is set to HOST_ONLY.
        public var webCrawlerMode: KendraClientTypes.WebCrawlerMode?

        public init (
            seedUrls: [Swift.String]? = nil,
            webCrawlerMode: KendraClientTypes.WebCrawlerMode? = nil
        )
        {
            self.seedUrls = seedUrls
            self.webCrawlerMode = webCrawlerMode
        }
    }

}

extension KendraClientTypes.ServerSideEncryptionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension KendraClientTypes {
    /// Provides the identifier of the KMScustomer master key (CMK) used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.
    public struct ServerSideEncryptionConfiguration: Swift.Equatable {
        /// The identifier of the KMScustomer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.
        public var kmsKeyId: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension KendraClientTypes {
    public enum ServiceNowAuthenticationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case httpBasic
        case oauth2
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceNowAuthenticationType] {
            return [
                .httpBasic,
                .oauth2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .httpBasic: return "HTTP_BASIC"
            case .oauth2: return "OAUTH2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceNowAuthenticationType(rawValue: rawValue) ?? ServiceNowAuthenticationType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes {
    public enum ServiceNowBuildVersionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case london
        case others
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceNowBuildVersionType] {
            return [
                .london,
                .others,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .london: return "LONDON"
            case .others: return "OTHERS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceNowBuildVersionType(rawValue: rawValue) ?? ServiceNowBuildVersionType.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ServiceNowConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationType = "AuthenticationType"
        case hostUrl = "HostUrl"
        case knowledgeArticleConfiguration = "KnowledgeArticleConfiguration"
        case secretArn = "SecretArn"
        case serviceCatalogConfiguration = "ServiceCatalogConfiguration"
        case serviceNowBuildVersion = "ServiceNowBuildVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authenticationType = authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if let hostUrl = hostUrl {
            try encodeContainer.encode(hostUrl, forKey: .hostUrl)
        }
        if let knowledgeArticleConfiguration = knowledgeArticleConfiguration {
            try encodeContainer.encode(knowledgeArticleConfiguration, forKey: .knowledgeArticleConfiguration)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let serviceCatalogConfiguration = serviceCatalogConfiguration {
            try encodeContainer.encode(serviceCatalogConfiguration, forKey: .serviceCatalogConfiguration)
        }
        if let serviceNowBuildVersion = serviceNowBuildVersion {
            try encodeContainer.encode(serviceNowBuildVersion.rawValue, forKey: .serviceNowBuildVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostUrl)
        hostUrl = hostUrlDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let serviceNowBuildVersionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ServiceNowBuildVersionType.self, forKey: .serviceNowBuildVersion)
        serviceNowBuildVersion = serviceNowBuildVersionDecoded
        let knowledgeArticleConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ServiceNowKnowledgeArticleConfiguration.self, forKey: .knowledgeArticleConfiguration)
        knowledgeArticleConfiguration = knowledgeArticleConfigurationDecoded
        let serviceCatalogConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ServiceNowServiceCatalogConfiguration.self, forKey: .serviceCatalogConfiguration)
        serviceCatalogConfiguration = serviceCatalogConfigurationDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ServiceNowAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
    }
}

extension KendraClientTypes {
    /// Provides configuration information required to connect to a ServiceNow data source.
    public struct ServiceNowConfiguration: Swift.Equatable {
        /// Determines the type of authentication used to connect to the ServiceNow instance. If you choose HTTP_BASIC, Amazon Kendra is authenticated using the user name and password provided in the Secrets Manager secret in the SecretArn field. When you choose OAUTH2, Amazon Kendra is authenticated using the OAuth token and secret provided in the Secrets Manager secret, and the user name and password are used to determine which information Amazon Kendra has access to. When you use OAUTH2 authentication, you must generate a token and a client secret using the ServiceNow console. For more information, see [Using a ServiceNow data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html).
        public var authenticationType: KendraClientTypes.ServiceNowAuthenticationType?
        /// The ServiceNow instance that the data source connects to. The host endpoint should look like the following: {instance}.service-now.com.
        /// This member is required.
        public var hostUrl: Swift.String?
        /// Provides configuration information for crawling knowledge articles in the ServiceNow site.
        public var knowledgeArticleConfiguration: KendraClientTypes.ServiceNowKnowledgeArticleConfiguration?
        /// The Amazon Resource Name (ARN) of the Secrets Manager secret that contains the user name and password required to connect to the ServiceNow instance.
        /// This member is required.
        public var secretArn: Swift.String?
        /// Provides configuration information for crawling service catalogs in the ServiceNow site.
        public var serviceCatalogConfiguration: KendraClientTypes.ServiceNowServiceCatalogConfiguration?
        /// The identifier of the release that the ServiceNow host is running. If the host is not running the LONDON release, use OTHERS.
        /// This member is required.
        public var serviceNowBuildVersion: KendraClientTypes.ServiceNowBuildVersionType?

        public init (
            authenticationType: KendraClientTypes.ServiceNowAuthenticationType? = nil,
            hostUrl: Swift.String? = nil,
            knowledgeArticleConfiguration: KendraClientTypes.ServiceNowKnowledgeArticleConfiguration? = nil,
            secretArn: Swift.String? = nil,
            serviceCatalogConfiguration: KendraClientTypes.ServiceNowServiceCatalogConfiguration? = nil,
            serviceNowBuildVersion: KendraClientTypes.ServiceNowBuildVersionType? = nil
        )
        {
            self.authenticationType = authenticationType
            self.hostUrl = hostUrl
            self.knowledgeArticleConfiguration = knowledgeArticleConfiguration
            self.secretArn = secretArn
            self.serviceCatalogConfiguration = serviceCatalogConfiguration
            self.serviceNowBuildVersion = serviceNowBuildVersion
        }
    }

}

extension KendraClientTypes.ServiceNowKnowledgeArticleConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlAttachments = "CrawlAttachments"
        case documentDataFieldName = "DocumentDataFieldName"
        case documentTitleFieldName = "DocumentTitleFieldName"
        case excludeAttachmentFilePatterns = "ExcludeAttachmentFilePatterns"
        case fieldMappings = "FieldMappings"
        case filterQuery = "FilterQuery"
        case includeAttachmentFilePatterns = "IncludeAttachmentFilePatterns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if crawlAttachments != false {
            try encodeContainer.encode(crawlAttachments, forKey: .crawlAttachments)
        }
        if let documentDataFieldName = documentDataFieldName {
            try encodeContainer.encode(documentDataFieldName, forKey: .documentDataFieldName)
        }
        if let documentTitleFieldName = documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let excludeAttachmentFilePatterns = excludeAttachmentFilePatterns {
            var excludeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in excludeAttachmentFilePatterns {
                try excludeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let filterQuery = filterQuery {
            try encodeContainer.encode(filterQuery, forKey: .filterQuery)
        }
        if let includeAttachmentFilePatterns = includeAttachmentFilePatterns {
            var includeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in includeAttachmentFilePatterns {
                try includeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlAttachmentsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .crawlAttachments)
        crawlAttachments = crawlAttachmentsDecoded
        let includeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includeAttachmentFilePatterns)
        var includeAttachmentFilePatternsDecoded0:[Swift.String]? = nil
        if let includeAttachmentFilePatternsContainer = includeAttachmentFilePatternsContainer {
            includeAttachmentFilePatternsDecoded0 = [Swift.String]()
            for string0 in includeAttachmentFilePatternsContainer {
                if let string0 = string0 {
                    includeAttachmentFilePatternsDecoded0?.append(string0)
                }
            }
        }
        includeAttachmentFilePatterns = includeAttachmentFilePatternsDecoded0
        let excludeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludeAttachmentFilePatterns)
        var excludeAttachmentFilePatternsDecoded0:[Swift.String]? = nil
        if let excludeAttachmentFilePatternsContainer = excludeAttachmentFilePatternsContainer {
            excludeAttachmentFilePatternsDecoded0 = [Swift.String]()
            for string0 in excludeAttachmentFilePatternsContainer {
                if let string0 = string0 {
                    excludeAttachmentFilePatternsDecoded0?.append(string0)
                }
            }
        }
        excludeAttachmentFilePatterns = excludeAttachmentFilePatternsDecoded0
        let documentDataFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentDataFieldName)
        documentDataFieldName = documentDataFieldNameDecoded
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
        let filterQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterQuery)
        filterQuery = filterQueryDecoded
    }
}

extension KendraClientTypes {
    /// Provides configuration information for crawling knowledge articles in the ServiceNow site.
    public struct ServiceNowKnowledgeArticleConfiguration: Swift.Equatable {
        /// Indicates whether Amazon Kendra should index attachments to knowledge articles.
        public var crawlAttachments: Swift.Bool
        /// The name of the ServiceNow field that is mapped to the index document contents field in the Amazon Kendra index.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the ServiceNow field that is mapped to the index document title field.
        public var documentTitleFieldName: Swift.String?
        /// List of regular expressions applied to knowledge articles. Items that don't match the inclusion pattern are not indexed. The regex is applied to the field specified in the PatternTargetField
        public var excludeAttachmentFilePatterns: [Swift.String]?
        /// Mapping between ServiceNow fields and Amazon Kendra index fields. You must create the index field before you map the field.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A query that selects the knowledge articles to index. The query can return articles from multiple knowledge bases, and the knowledge bases can be public or private. The query string must be one generated by the ServiceNow console. For more information, see [Specifying documents to index with a query](https://docs.aws.amazon.com/kendra/latest/dg/servicenow-query.html).
        public var filterQuery: Swift.String?
        /// List of regular expressions applied to knowledge articles. Items that don't match the inclusion pattern are not indexed. The regex is applied to the field specified in the PatternTargetField.
        public var includeAttachmentFilePatterns: [Swift.String]?

        public init (
            crawlAttachments: Swift.Bool = false,
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            excludeAttachmentFilePatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            filterQuery: Swift.String? = nil,
            includeAttachmentFilePatterns: [Swift.String]? = nil
        )
        {
            self.crawlAttachments = crawlAttachments
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.excludeAttachmentFilePatterns = excludeAttachmentFilePatterns
            self.fieldMappings = fieldMappings
            self.filterQuery = filterQuery
            self.includeAttachmentFilePatterns = includeAttachmentFilePatterns
        }
    }

}

extension KendraClientTypes.ServiceNowServiceCatalogConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlAttachments = "CrawlAttachments"
        case documentDataFieldName = "DocumentDataFieldName"
        case documentTitleFieldName = "DocumentTitleFieldName"
        case excludeAttachmentFilePatterns = "ExcludeAttachmentFilePatterns"
        case fieldMappings = "FieldMappings"
        case includeAttachmentFilePatterns = "IncludeAttachmentFilePatterns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if crawlAttachments != false {
            try encodeContainer.encode(crawlAttachments, forKey: .crawlAttachments)
        }
        if let documentDataFieldName = documentDataFieldName {
            try encodeContainer.encode(documentDataFieldName, forKey: .documentDataFieldName)
        }
        if let documentTitleFieldName = documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let excludeAttachmentFilePatterns = excludeAttachmentFilePatterns {
            var excludeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in excludeAttachmentFilePatterns {
                try excludeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let includeAttachmentFilePatterns = includeAttachmentFilePatterns {
            var includeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in includeAttachmentFilePatterns {
                try includeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlAttachmentsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .crawlAttachments)
        crawlAttachments = crawlAttachmentsDecoded
        let includeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includeAttachmentFilePatterns)
        var includeAttachmentFilePatternsDecoded0:[Swift.String]? = nil
        if let includeAttachmentFilePatternsContainer = includeAttachmentFilePatternsContainer {
            includeAttachmentFilePatternsDecoded0 = [Swift.String]()
            for string0 in includeAttachmentFilePatternsContainer {
                if let string0 = string0 {
                    includeAttachmentFilePatternsDecoded0?.append(string0)
                }
            }
        }
        includeAttachmentFilePatterns = includeAttachmentFilePatternsDecoded0
        let excludeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludeAttachmentFilePatterns)
        var excludeAttachmentFilePatternsDecoded0:[Swift.String]? = nil
        if let excludeAttachmentFilePatternsContainer = excludeAttachmentFilePatternsContainer {
            excludeAttachmentFilePatternsDecoded0 = [Swift.String]()
            for string0 in excludeAttachmentFilePatternsContainer {
                if let string0 = string0 {
                    excludeAttachmentFilePatternsDecoded0?.append(string0)
                }
            }
        }
        excludeAttachmentFilePatterns = excludeAttachmentFilePatternsDecoded0
        let documentDataFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentDataFieldName)
        documentDataFieldName = documentDataFieldNameDecoded
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides configuration information for crawling service catalog items in the ServiceNow site
    public struct ServiceNowServiceCatalogConfiguration: Swift.Equatable {
        /// Indicates whether Amazon Kendra should crawl attachments to the service catalog items.
        public var crawlAttachments: Swift.Bool
        /// The name of the ServiceNow field that is mapped to the index document contents field in the Amazon Kendra index.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the ServiceNow field that is mapped to the index document title field.
        public var documentTitleFieldName: Swift.String?
        /// A list of regular expression patterns. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an exclusion pattern and an inclusion pattern, the document is not included in the index. The regex is applied to the file name of the attachment.
        public var excludeAttachmentFilePatterns: [Swift.String]?
        /// Mapping between ServiceNow fields and Amazon Kendra index fields. You must create the index field before you map the field.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an exclusion pattern and an inclusion pattern, the document is not included in the index. The regex is applied to the file name of the attachment.
        public var includeAttachmentFilePatterns: [Swift.String]?

        public init (
            crawlAttachments: Swift.Bool = false,
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            excludeAttachmentFilePatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            includeAttachmentFilePatterns: [Swift.String]? = nil
        )
        {
            self.crawlAttachments = crawlAttachments
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.excludeAttachmentFilePatterns = excludeAttachmentFilePatterns
            self.fieldMappings = fieldMappings
            self.includeAttachmentFilePatterns = includeAttachmentFilePatterns
        }
    }

}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KendraClientTypes.SharePointConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlAttachments = "CrawlAttachments"
        case disableLocalGroups = "DisableLocalGroups"
        case documentTitleFieldName = "DocumentTitleFieldName"
        case exclusionPatterns = "ExclusionPatterns"
        case fieldMappings = "FieldMappings"
        case inclusionPatterns = "InclusionPatterns"
        case secretArn = "SecretArn"
        case sharePointVersion = "SharePointVersion"
        case sslCertificateS3Path = "SslCertificateS3Path"
        case urls = "Urls"
        case useChangeLog = "UseChangeLog"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if crawlAttachments != false {
            try encodeContainer.encode(crawlAttachments, forKey: .crawlAttachments)
        }
        if disableLocalGroups != false {
            try encodeContainer.encode(disableLocalGroups, forKey: .disableLocalGroups)
        }
        if let documentTitleFieldName = documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let sharePointVersion = sharePointVersion {
            try encodeContainer.encode(sharePointVersion.rawValue, forKey: .sharePointVersion)
        }
        if let sslCertificateS3Path = sslCertificateS3Path {
            try encodeContainer.encode(sslCertificateS3Path, forKey: .sslCertificateS3Path)
        }
        if let urls = urls {
            var urlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urls)
            for sharepointurllist0 in urls {
                try urlsContainer.encode(sharepointurllist0)
            }
        }
        if useChangeLog != false {
            try encodeContainer.encode(useChangeLog, forKey: .useChangeLog)
        }
        if let vpcConfiguration = vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sharePointVersionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SharePointVersion.self, forKey: .sharePointVersion)
        sharePointVersion = sharePointVersionDecoded
        let urlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urls)
        var urlsDecoded0:[Swift.String]? = nil
        if let urlsContainer = urlsContainer {
            urlsDecoded0 = [Swift.String]()
            for string0 in urlsContainer {
                if let string0 = string0 {
                    urlsDecoded0?.append(string0)
                }
            }
        }
        urls = urlsDecoded0
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let crawlAttachmentsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .crawlAttachments)
        crawlAttachments = crawlAttachmentsDecoded
        let useChangeLogDecoded = try containerValues.decode(Swift.Bool.self, forKey: .useChangeLog)
        useChangeLog = useChangeLogDecoded
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let disableLocalGroupsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disableLocalGroups)
        disableLocalGroups = disableLocalGroupsDecoded
        let sslCertificateS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .sslCertificateS3Path)
        sslCertificateS3Path = sslCertificateS3PathDecoded
    }
}

extension KendraClientTypes {
    /// Provides configuration information for connecting to a Microsoft SharePoint data source.
    public struct SharePointConfiguration: Swift.Equatable {
        /// TRUE to include attachments to documents stored in your Microsoft SharePoint site in the index; otherwise, FALSE.
        public var crawlAttachments: Swift.Bool
        /// A Boolean value that specifies whether local groups are disabled (True) or enabled (False).
        public var disableLocalGroups: Swift.Bool
        /// The Microsoft SharePoint attribute field that contains the title of the document.
        public var documentTitleFieldName: Swift.String?
        /// A list of regular expression patterns. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an exclusion pattern and an inclusion pattern, the document is not included in the index. The regex is applied to the display URL of the SharePoint document.
        public var exclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map Microsoft SharePoint attributes to custom fields in the Amazon Kendra index. You must first create the index fields using the UpdateIndex operation before you map SharePoint attributes. For more information, see [Mapping Data Source Fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html).
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion pattern and an exclusion pattern, the document is not included in the index. The regex is applied to the display URL of the SharePoint document.
        public var inclusionPatterns: [Swift.String]?
        /// The Amazon Resource Name (ARN) of credentials stored in Secrets Manager. The credentials should be a user/password pair. If you use SharePoint Server, you also need to provide the sever domain name as part of the credentials. For more information, see [Using a Microsoft SharePoint Data Source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-sharepoint.html). For more information about Secrets Manager see [ What Is Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) in the Secrets Manager user guide.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The version of Microsoft SharePoint that you are using as a data source.
        /// This member is required.
        public var sharePointVersion: KendraClientTypes.SharePointVersion?
        /// Information required to find a specific file in an Amazon S3 bucket.
        public var sslCertificateS3Path: KendraClientTypes.S3Path?
        /// The URLs of the Microsoft SharePoint site that contains the documents that should be indexed.
        /// This member is required.
        public var urls: [Swift.String]?
        /// Set to TRUE to use the Microsoft SharePoint change log to determine the documents that need to be updated in the index. Depending on the size of the SharePoint change log, it may take longer for Amazon Kendra to use the change log than it takes it to determine the changed documents using the Amazon Kendra document crawler.
        public var useChangeLog: Swift.Bool
        /// Provides information for connecting to an Amazon VPC.
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init (
            crawlAttachments: Swift.Bool = false,
            disableLocalGroups: Swift.Bool = false,
            documentTitleFieldName: Swift.String? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            secretArn: Swift.String? = nil,
            sharePointVersion: KendraClientTypes.SharePointVersion? = nil,
            sslCertificateS3Path: KendraClientTypes.S3Path? = nil,
            urls: [Swift.String]? = nil,
            useChangeLog: Swift.Bool = false,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.crawlAttachments = crawlAttachments
            self.disableLocalGroups = disableLocalGroups
            self.documentTitleFieldName = documentTitleFieldName
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.secretArn = secretArn
            self.sharePointVersion = sharePointVersion
            self.sslCertificateS3Path = sslCertificateS3Path
            self.urls = urls
            self.useChangeLog = useChangeLog
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension KendraClientTypes {
    public enum SharePointVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sharepoint2013
        case sharepoint2016
        case sharepointOnline
        case sdkUnknown(Swift.String)

        public static var allCases: [SharePointVersion] {
            return [
                .sharepoint2013,
                .sharepoint2016,
                .sharepointOnline,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sharepoint2013: return "SHAREPOINT_2013"
            case .sharepoint2016: return "SHAREPOINT_2016"
            case .sharepointOnline: return "SHAREPOINT_ONLINE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SharePointVersion(rawValue: rawValue) ?? SharePointVersion.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.SiteMapsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case siteMaps = "SiteMaps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let siteMaps = siteMaps {
            var siteMapsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .siteMaps)
            for sitemapslist0 in siteMaps {
                try siteMapsContainer.encode(sitemapslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let siteMapsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .siteMaps)
        var siteMapsDecoded0:[Swift.String]? = nil
        if let siteMapsContainer = siteMapsContainer {
            siteMapsDecoded0 = [Swift.String]()
            for string0 in siteMapsContainer {
                if let string0 = string0 {
                    siteMapsDecoded0?.append(string0)
                }
            }
        }
        siteMaps = siteMapsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides the configuration information of the sitemap URLs to crawl. When selecting websites to index, you must adhere to the [Amazon Acceptable Use Policy](https://aws.amazon.com/aup/) and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own webpages, or webpages that you have authorization to index.
    public struct SiteMapsConfiguration: Swift.Equatable {
        /// The list of sitemap URLs of the websites you want to crawl. The list can include a maximum of three sitemap URLs.
        /// This member is required.
        public var siteMaps: [Swift.String]?

        public init (
            siteMaps: [Swift.String]? = nil
        )
        {
            self.siteMaps = siteMaps
        }
    }

}

extension KendraClientTypes {
    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case asc
        case desc
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .asc,
                .desc,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .asc: return "ASC"
            case .desc: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.SortingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentAttributeKey = "DocumentAttributeKey"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentAttributeKey = documentAttributeKey {
            try encodeContainer.encode(documentAttributeKey, forKey: .documentAttributeKey)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentAttributeKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentAttributeKey)
        documentAttributeKey = documentAttributeKeyDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension KendraClientTypes {
    /// Specifies the document attribute to use to sort the response to a Amazon Kendra query. You can specify a single attribute for sorting. The attribute must have the Sortable flag set to true, otherwise Amazon Kendra returns an exception. You can sort attributes of the following types.
    ///
    /// * Date value
    ///
    /// * Long value
    ///
    /// * String value
    ///
    ///
    /// You can't sort attributes of the following type.
    ///
    /// * String list value
    public struct SortingConfiguration: Swift.Equatable {
        /// The name of the document attribute used to sort the response. You can use any field that has the Sortable flag set to true. You can also sort by any of the following built-in attributes:
        ///
        /// * _category
        ///
        /// * _created_at
        ///
        /// * _last_updated_at
        ///
        /// * _version
        ///
        /// * _view_count
        /// This member is required.
        public var documentAttributeKey: Swift.String?
        /// The order that the results should be returned in. In case of ties, the relevance assigned to the result by Amazon Kendra is used as the tie-breaker.
        /// This member is required.
        public var sortOrder: KendraClientTypes.SortOrder?

        public init (
            documentAttributeKey: Swift.String? = nil,
            sortOrder: KendraClientTypes.SortOrder? = nil
        )
        {
            self.documentAttributeKey = documentAttributeKey
            self.sortOrder = sortOrder
        }
    }

}

extension KendraClientTypes.SqlConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryIdentifiersEnclosingOption = "QueryIdentifiersEnclosingOption"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryIdentifiersEnclosingOption = queryIdentifiersEnclosingOption {
            try encodeContainer.encode(queryIdentifiersEnclosingOption.rawValue, forKey: .queryIdentifiersEnclosingOption)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdentifiersEnclosingOptionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.QueryIdentifiersEnclosingOption.self, forKey: .queryIdentifiersEnclosingOption)
        queryIdentifiersEnclosingOption = queryIdentifiersEnclosingOptionDecoded
    }
}

extension KendraClientTypes {
    /// Provides information that configures Amazon Kendra to use a SQL database.
    public struct SqlConfiguration: Swift.Equatable {
        /// Determines whether Amazon Kendra encloses SQL identifiers for tables and column names in double quotes (") when making a database query. By default, Amazon Kendra passes SQL identifiers the way that they are entered into the data source configuration. It does not change the case of identifiers or enclose them in quotes. PostgreSQL internally converts uppercase characters to lower case characters in identifiers unless they are quoted. Choosing this option encloses identifiers in quotes so that PostgreSQL does not convert the character's case. For MySQL databases, you must enable the ansi_quotes option when you set this field to DOUBLE_QUOTES.
        public var queryIdentifiersEnclosingOption: KendraClientTypes.QueryIdentifiersEnclosingOption?

        public init (
            queryIdentifiersEnclosingOption: KendraClientTypes.QueryIdentifiersEnclosingOption? = nil
        )
        {
            self.queryIdentifiersEnclosingOption = queryIdentifiersEnclosingOption
        }
    }

}

extension StartDataSourceSyncJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension StartDataSourceSyncJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartDataSourceSyncJobInput: Swift.Equatable {
    /// The identifier of the data source to synchronize.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index that contains the data source.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct StartDataSourceSyncJobInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension StartDataSourceSyncJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension StartDataSourceSyncJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartDataSourceSyncJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartDataSourceSyncJobOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartDataSourceSyncJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartDataSourceSyncJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executionId = output.executionId
        } else {
            self.executionId = nil
        }
    }
}

public struct StartDataSourceSyncJobOutputResponse: Swift.Equatable {
    /// Identifies a particular synchronization job.
    public var executionId: Swift.String?

    public init (
        executionId: Swift.String? = nil
    )
    {
        self.executionId = executionId
    }
}

struct StartDataSourceSyncJobOutputResponseBody: Swift.Equatable {
    let executionId: Swift.String?
}

extension StartDataSourceSyncJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionId = "ExecutionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionId)
        executionId = executionIdDecoded
    }
}

extension KendraClientTypes.Status: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentId = "DocumentId"
        case documentStatus = "DocumentStatus"
        case failureCode = "FailureCode"
        case failureReason = "FailureReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentId = documentId {
            try encodeContainer.encode(documentId, forKey: .documentId)
        }
        if let documentStatus = documentStatus {
            try encodeContainer.encode(documentStatus.rawValue, forKey: .documentStatus)
        }
        if let failureCode = failureCode {
            try encodeContainer.encode(failureCode, forKey: .failureCode)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentId)
        documentId = documentIdDecoded
        let documentStatusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DocumentStatus.self, forKey: .documentStatus)
        documentStatus = documentStatusDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension KendraClientTypes {
    /// Provides information about the status of documents submitted for indexing.
    public struct Status: Swift.Equatable {
        /// The unique identifier of the document.
        public var documentId: Swift.String?
        /// The current status of a document. If the document was submitted for deletion, the status is NOT_FOUND after the document is deleted.
        public var documentStatus: KendraClientTypes.DocumentStatus?
        /// Indicates the source of the error.
        public var failureCode: Swift.String?
        /// Provides detailed information about why the document couldn't be indexed. Use this information to correct the error before you resubmit the document for indexing.
        public var failureReason: Swift.String?

        public init (
            documentId: Swift.String? = nil,
            documentStatus: KendraClientTypes.DocumentStatus? = nil,
            failureCode: Swift.String? = nil,
            failureReason: Swift.String? = nil
        )
        {
            self.documentId = documentId
            self.documentStatus = documentStatus
            self.failureCode = failureCode
            self.failureReason = failureReason
        }
    }

}

extension StopDataSourceSyncJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
    }
}

extension StopDataSourceSyncJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopDataSourceSyncJobInput: Swift.Equatable {
    /// The identifier of the data source for which to stop the synchronization jobs.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index that contains the data source.
    /// This member is required.
    public var indexId: Swift.String?

    public init (
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

struct StopDataSourceSyncJobInputBody: Swift.Equatable {
    let id: Swift.String?
    let indexId: Swift.String?
}

extension StopDataSourceSyncJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case indexId = "IndexId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
    }
}

extension StopDataSourceSyncJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopDataSourceSyncJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopDataSourceSyncJobOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopDataSourceSyncJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopDataSourceSyncJobOutputResponse: Swift.Equatable {

}

extension SubmitFeedbackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clickFeedbackItems = "ClickFeedbackItems"
        case indexId = "IndexId"
        case queryId = "QueryId"
        case relevanceFeedbackItems = "RelevanceFeedbackItems"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clickFeedbackItems = clickFeedbackItems {
            var clickFeedbackItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clickFeedbackItems)
            for clickfeedbacklist0 in clickFeedbackItems {
                try clickFeedbackItemsContainer.encode(clickfeedbacklist0)
            }
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let queryId = queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
        if let relevanceFeedbackItems = relevanceFeedbackItems {
            var relevanceFeedbackItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relevanceFeedbackItems)
            for relevancefeedbacklist0 in relevanceFeedbackItems {
                try relevanceFeedbackItemsContainer.encode(relevancefeedbacklist0)
            }
        }
    }
}

extension SubmitFeedbackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SubmitFeedbackInput: Swift.Equatable {
    /// Tells Amazon Kendra that a particular search result link was chosen by the user.
    public var clickFeedbackItems: [KendraClientTypes.ClickFeedback]?
    /// The identifier of the index that was queried.
    /// This member is required.
    public var indexId: Swift.String?
    /// The identifier of the specific query for which you are submitting feedback. The query ID is returned in the response to the Query operation.
    /// This member is required.
    public var queryId: Swift.String?
    /// Provides Amazon Kendra with relevant or not relevant feedback for whether a particular item was relevant to the search.
    public var relevanceFeedbackItems: [KendraClientTypes.RelevanceFeedback]?

    public init (
        clickFeedbackItems: [KendraClientTypes.ClickFeedback]? = nil,
        indexId: Swift.String? = nil,
        queryId: Swift.String? = nil,
        relevanceFeedbackItems: [KendraClientTypes.RelevanceFeedback]? = nil
    )
    {
        self.clickFeedbackItems = clickFeedbackItems
        self.indexId = indexId
        self.queryId = queryId
        self.relevanceFeedbackItems = relevanceFeedbackItems
    }
}

struct SubmitFeedbackInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let queryId: Swift.String?
    let clickFeedbackItems: [KendraClientTypes.ClickFeedback]?
    let relevanceFeedbackItems: [KendraClientTypes.RelevanceFeedback]?
}

extension SubmitFeedbackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clickFeedbackItems = "ClickFeedbackItems"
        case indexId = "IndexId"
        case queryId = "QueryId"
        case relevanceFeedbackItems = "RelevanceFeedbackItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
        let clickFeedbackItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ClickFeedback?].self, forKey: .clickFeedbackItems)
        var clickFeedbackItemsDecoded0:[KendraClientTypes.ClickFeedback]? = nil
        if let clickFeedbackItemsContainer = clickFeedbackItemsContainer {
            clickFeedbackItemsDecoded0 = [KendraClientTypes.ClickFeedback]()
            for structure0 in clickFeedbackItemsContainer {
                if let structure0 = structure0 {
                    clickFeedbackItemsDecoded0?.append(structure0)
                }
            }
        }
        clickFeedbackItems = clickFeedbackItemsDecoded0
        let relevanceFeedbackItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.RelevanceFeedback?].self, forKey: .relevanceFeedbackItems)
        var relevanceFeedbackItemsDecoded0:[KendraClientTypes.RelevanceFeedback]? = nil
        if let relevanceFeedbackItemsContainer = relevanceFeedbackItemsContainer {
            relevanceFeedbackItemsDecoded0 = [KendraClientTypes.RelevanceFeedback]()
            for structure0 in relevanceFeedbackItemsContainer {
                if let structure0 = structure0 {
                    relevanceFeedbackItemsDecoded0?.append(structure0)
                }
            }
        }
        relevanceFeedbackItems = relevanceFeedbackItemsDecoded0
    }
}

extension SubmitFeedbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SubmitFeedbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SubmitFeedbackOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceUnavailableException(ResourceUnavailableException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SubmitFeedbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SubmitFeedbackOutputResponse: Swift.Equatable {

}

extension KendraClientTypes.Suggestion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let valueDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SuggestionValue.self, forKey: .value)
        value = valueDecoded
    }
}

extension KendraClientTypes {
    /// A single query suggestion.
    public struct Suggestion: Swift.Equatable {
        /// The unique UUID (universally unique identifier) of a single query suggestion.
        public var id: Swift.String?
        /// The value for the unique UUID (universally unique identifier) of a single query suggestion. The value is the text string of a suggestion.
        public var value: KendraClientTypes.SuggestionValue?

        public init (
            id: Swift.String? = nil,
            value: KendraClientTypes.SuggestionValue? = nil
        )
        {
            self.id = id
            self.value = value
        }
    }

}

extension KendraClientTypes.SuggestionHighlight: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffset = "BeginOffset"
        case endOffset = "EndOffset"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let endOffset = endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
    }
}

extension KendraClientTypes {
    /// The text highlights for a single query suggestion.
    public struct SuggestionHighlight: Swift.Equatable {
        /// The zero-based location in the response string where the highlight starts.
        public var beginOffset: Swift.Int?
        /// The zero-based location in the response string where the highlight ends.
        public var endOffset: Swift.Int?

        public init (
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
        }
    }

}

extension KendraClientTypes.SuggestionTextWithHighlights: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case highlights = "Highlights"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let highlights = highlights {
            var highlightsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .highlights)
            for suggestionhighlightlist0 in highlights {
                try highlightsContainer.encode(suggestionhighlightlist0)
            }
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let highlightsContainer = try containerValues.decodeIfPresent([KendraClientTypes.SuggestionHighlight?].self, forKey: .highlights)
        var highlightsDecoded0:[KendraClientTypes.SuggestionHighlight]? = nil
        if let highlightsContainer = highlightsContainer {
            highlightsDecoded0 = [KendraClientTypes.SuggestionHighlight]()
            for structure0 in highlightsContainer {
                if let structure0 = structure0 {
                    highlightsDecoded0?.append(structure0)
                }
            }
        }
        highlights = highlightsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides text and information about where to highlight the query suggestion text.
    public struct SuggestionTextWithHighlights: Swift.Equatable {
        /// The beginning and end of the query suggestion text that should be highlighted.
        public var highlights: [KendraClientTypes.SuggestionHighlight]?
        /// The query suggestion text to display to the user.
        public var text: Swift.String?

        public init (
            highlights: [KendraClientTypes.SuggestionHighlight]? = nil,
            text: Swift.String? = nil
        )
        {
            self.highlights = highlights
            self.text = text
        }
    }

}

extension KendraClientTypes.SuggestionValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SuggestionTextWithHighlights.self, forKey: .text)
        text = textDecoded
    }
}

extension KendraClientTypes {
    /// The SuggestionTextWithHighlights structure information.
    public struct SuggestionValue: Swift.Equatable {
        /// The SuggestionTextWithHighlights structure that contains the query suggestion text and highlights.
        public var text: KendraClientTypes.SuggestionTextWithHighlights?

        public init (
            text: KendraClientTypes.SuggestionTextWithHighlights? = nil
        )
        {
            self.text = text
        }
    }

}

extension KendraClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension KendraClientTypes {
    /// A list of key/value pairs that identify an index, FAQ, or data source. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
    public struct Tag: Swift.Equatable {
        /// The key for the tag. Keys are not case sensitive and must be unique for the index, FAQ, or data source.
        /// This member is required.
        public var key: Swift.String?
        /// The value associated with the tag. The value may be an empty string but it can't be null.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the index, FAQ, or data source to tag.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tag keys to add to the index, FAQ, or data source. If a tag already exists, the existing value is replaced with the new value.
    /// This member is required.
    public var tags: [KendraClientTypes.Tag]?

    public init (
        resourceARN: Swift.String? = nil,
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tags: [KendraClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KendraClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KendraClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceUnavailableException(ResourceUnavailableException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

}

extension KendraClientTypes.TextDocumentStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexedTextBytes = "IndexedTextBytes"
        case indexedTextDocumentsCount = "IndexedTextDocumentsCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if indexedTextBytes != 0 {
            try encodeContainer.encode(indexedTextBytes, forKey: .indexedTextBytes)
        }
        if indexedTextDocumentsCount != 0 {
            try encodeContainer.encode(indexedTextDocumentsCount, forKey: .indexedTextDocumentsCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexedTextDocumentsCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .indexedTextDocumentsCount)
        indexedTextDocumentsCount = indexedTextDocumentsCountDecoded
        let indexedTextBytesDecoded = try containerValues.decode(Swift.Int.self, forKey: .indexedTextBytes)
        indexedTextBytes = indexedTextBytesDecoded
    }
}

extension KendraClientTypes {
    /// Provides information about text documents indexed in an index.
    public struct TextDocumentStatistics: Swift.Equatable {
        /// The total size, in bytes, of the indexed documents.
        /// This member is required.
        public var indexedTextBytes: Swift.Int
        /// The number of text documents indexed.
        /// This member is required.
        public var indexedTextDocumentsCount: Swift.Int

        public init (
            indexedTextBytes: Swift.Int = 0,
            indexedTextDocumentsCount: Swift.Int = 0
        )
        {
            self.indexedTextBytes = indexedTextBytes
            self.indexedTextDocumentsCount = indexedTextDocumentsCount
        }
    }

}

extension KendraClientTypes.TextWithHighlights: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case highlights = "Highlights"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let highlights = highlights {
            var highlightsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .highlights)
            for highlightlist0 in highlights {
                try highlightsContainer.encode(highlightlist0)
            }
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let highlightsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Highlight?].self, forKey: .highlights)
        var highlightsDecoded0:[KendraClientTypes.Highlight]? = nil
        if let highlightsContainer = highlightsContainer {
            highlightsDecoded0 = [KendraClientTypes.Highlight]()
            for structure0 in highlightsContainer {
                if let structure0 = structure0 {
                    highlightsDecoded0?.append(structure0)
                }
            }
        }
        highlights = highlightsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides text and information about where to highlight the text.
    public struct TextWithHighlights: Swift.Equatable {
        /// The beginning and end of the text that should be highlighted.
        public var highlights: [KendraClientTypes.Highlight]?
        /// The text to display to the user.
        public var text: Swift.String?

        public init (
            highlights: [KendraClientTypes.Highlight]? = nil,
            text: Swift.String? = nil
        )
        {
            self.highlights = highlights
            self.text = text
        }
    }

}

extension KendraClientTypes {
    public enum ThesaurusStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case activeButUpdateFailed
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ThesaurusStatus] {
            return [
                .active,
                .activeButUpdateFailed,
                .creating,
                .deleting,
                .failed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .activeButUpdateFailed: return "ACTIVE_BUT_UPDATE_FAILED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ThesaurusStatus(rawValue: rawValue) ?? ThesaurusStatus.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.ThesaurusSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case id = "Id"
        case name = "Name"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ThesaurusStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension KendraClientTypes {
    /// An array of summary information for a thesaurus or multiple thesauri.
    public struct ThesaurusSummary: Swift.Equatable {
        /// The Unix datetime that the thesaurus was created.
        public var createdAt: ClientRuntime.Date?
        /// The identifier of the thesaurus.
        public var id: Swift.String?
        /// The name of the thesaurus.
        public var name: Swift.String?
        /// The status of the thesaurus.
        public var status: KendraClientTypes.ThesaurusStatus?
        /// The Unix datetime that the thesaurus was last updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.ThesaurusStatus? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.id = id
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KendraClientTypes.TimeRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension KendraClientTypes {
    /// Provides a range of time.
    public struct TimeRange: Swift.Equatable {
        /// The UNIX datetime of the end of the time range.
        public var endTime: ClientRuntime.Date?
        /// The UNIX datetime of the beginning of the time range.
        public var startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the index, FAQ, or data source to remove the tag from.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tag keys to remove from the index, FAQ, or data source. If a tag key does not exist on the resource, it is ignored.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceUnavailableException(ResourceUnavailableException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

}

extension UpdateDataSourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case customDocumentEnrichmentConfiguration = "CustomDocumentEnrichmentConfiguration"
        case description = "Description"
        case id = "Id"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case schedule = "Schedule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration {
            try encodeContainer.encode(customDocumentEnrichmentConfiguration, forKey: .customDocumentEnrichmentConfiguration)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
    }
}

extension UpdateDataSourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDataSourceInput: Swift.Equatable {
    /// Configuration information for an Amazon Kendra data source.
    public var configuration: KendraClientTypes.DataSourceConfiguration?
    /// Configuration information for altering document metadata and content during the document ingestion process when you update a data source. For more information on how to create, modify and delete document metadata, or make other content alterations when you ingest documents into Amazon Kendra, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public var customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
    /// The new description for the data source.
    public var description: Swift.String?
    /// The unique identifier of the data source to update.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index that contains the data source to update.
    /// This member is required.
    public var indexId: Swift.String?
    /// The code for a language. This allows you to support a language for all documents when updating the data source. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// The name of the data source to update. The name of the data source can't be updated. To rename a data source you must delete the data source and re-create it.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the new role to use when the data source is accessing resources on your behalf.
    public var roleArn: Swift.String?
    /// The new update schedule for the data source.
    public var schedule: Swift.String?

    public init (
        configuration: KendraClientTypes.DataSourceConfiguration? = nil,
        customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schedule: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration
        self.description = description
        self.id = id
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.schedule = schedule
    }
}

struct UpdateDataSourceInputBody: Swift.Equatable {
    let id: Swift.String?
    let name: Swift.String?
    let indexId: Swift.String?
    let configuration: KendraClientTypes.DataSourceConfiguration?
    let description: Swift.String?
    let schedule: Swift.String?
    let roleArn: Swift.String?
    let languageCode: Swift.String?
    let customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
}

extension UpdateDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case customDocumentEnrichmentConfiguration = "CustomDocumentEnrichmentConfiguration"
        case description = "Description"
        case id = "Id"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case schedule = "Schedule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let customDocumentEnrichmentConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.CustomDocumentEnrichmentConfiguration.self, forKey: .customDocumentEnrichmentConfiguration)
        customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfigurationDecoded
    }
}

extension UpdateDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDataSourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateDataSourceOutputResponse: Swift.Equatable {

}

extension UpdateExperienceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case description = "Description"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdateExperienceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateExperienceInput: Swift.Equatable {
    /// Provides the user configuration information. This includes the Amazon Web Services SSO field name that contains the identifiers of your users, such as their emails.
    public var configuration: KendraClientTypes.ExperienceConfiguration?
    /// The description of your Amazon Kendra experience you want to update.
    public var description: Swift.String?
    /// The identifier of your Amazon Kendra experience you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience you want to update.
    /// This member is required.
    public var indexId: Swift.String?
    /// The name of your Amazon Kendra experience you want to update.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access Query operations, QuerySuggestions operations, SubmitFeedback operations, and Amazon Web Services SSO that stores your user and group information. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    public var roleArn: Swift.String?

    public init (
        configuration: KendraClientTypes.ExperienceConfiguration? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.description = description
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
    }
}

struct UpdateExperienceInputBody: Swift.Equatable {
    let id: Swift.String?
    let name: Swift.String?
    let indexId: Swift.String?
    let roleArn: Swift.String?
    let configuration: KendraClientTypes.ExperienceConfiguration?
    let description: Swift.String?
}

extension UpdateExperienceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case description = "Description"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ExperienceConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateExperienceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateExperienceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateExperienceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateExperienceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateExperienceOutputResponse: Swift.Equatable {

}

extension UpdateIndexInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUnits = "CapacityUnits"
        case description = "Description"
        case documentMetadataConfigurationUpdates = "DocumentMetadataConfigurationUpdates"
        case id = "Id"
        case name = "Name"
        case roleArn = "RoleArn"
        case userContextPolicy = "UserContextPolicy"
        case userGroupResolutionConfiguration = "UserGroupResolutionConfiguration"
        case userTokenConfigurations = "UserTokenConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityUnits = capacityUnits {
            try encodeContainer.encode(capacityUnits, forKey: .capacityUnits)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let documentMetadataConfigurationUpdates = documentMetadataConfigurationUpdates {
            var documentMetadataConfigurationUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentMetadataConfigurationUpdates)
            for documentmetadataconfigurationlist0 in documentMetadataConfigurationUpdates {
                try documentMetadataConfigurationUpdatesContainer.encode(documentmetadataconfigurationlist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let userContextPolicy = userContextPolicy {
            try encodeContainer.encode(userContextPolicy.rawValue, forKey: .userContextPolicy)
        }
        if let userGroupResolutionConfiguration = userGroupResolutionConfiguration {
            try encodeContainer.encode(userGroupResolutionConfiguration, forKey: .userGroupResolutionConfiguration)
        }
        if let userTokenConfigurations = userTokenConfigurations {
            var userTokenConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userTokenConfigurations)
            for usertokenconfigurationlist0 in userTokenConfigurations {
                try userTokenConfigurationsContainer.encode(usertokenconfigurationlist0)
            }
        }
    }
}

extension UpdateIndexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateIndexInput: Swift.Equatable {
    /// Sets the number of additional storage and query capacity units that should be used by the index. You can change the capacity of the index up to 5 times per day. If you are using extra storage units, you can't reduce the storage capacity below that required to meet the storage needs for your index.
    public var capacityUnits: KendraClientTypes.CapacityUnitsConfiguration?
    /// A new description for the index.
    public var description: Swift.String?
    /// The document metadata to update.
    public var documentMetadataConfigurationUpdates: [KendraClientTypes.DocumentMetadataConfiguration]?
    /// The identifier of the index to update.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the index to update.
    public var name: Swift.String?
    /// A new IAM role that gives Amazon Kendra permission to access your Amazon CloudWatch logs.
    public var roleArn: Swift.String?
    /// The user context policy.
    public var userContextPolicy: KendraClientTypes.UserContextPolicy?
    /// Enables fetching access levels of groups and users from an Amazon Web Services Single Sign On identity source. To configure this, see [UserGroupResolutionConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_UserGroupResolutionConfiguration.html).
    public var userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
    /// The user token configuration.
    public var userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?

    public init (
        capacityUnits: KendraClientTypes.CapacityUnitsConfiguration? = nil,
        description: Swift.String? = nil,
        documentMetadataConfigurationUpdates: [KendraClientTypes.DocumentMetadataConfiguration]? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        userContextPolicy: KendraClientTypes.UserContextPolicy? = nil,
        userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration? = nil,
        userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]? = nil
    )
    {
        self.capacityUnits = capacityUnits
        self.description = description
        self.documentMetadataConfigurationUpdates = documentMetadataConfigurationUpdates
        self.id = id
        self.name = name
        self.roleArn = roleArn
        self.userContextPolicy = userContextPolicy
        self.userGroupResolutionConfiguration = userGroupResolutionConfiguration
        self.userTokenConfigurations = userTokenConfigurations
    }
}

struct UpdateIndexInputBody: Swift.Equatable {
    let id: Swift.String?
    let name: Swift.String?
    let roleArn: Swift.String?
    let description: Swift.String?
    let documentMetadataConfigurationUpdates: [KendraClientTypes.DocumentMetadataConfiguration]?
    let capacityUnits: KendraClientTypes.CapacityUnitsConfiguration?
    let userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?
    let userContextPolicy: KendraClientTypes.UserContextPolicy?
    let userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
}

extension UpdateIndexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUnits = "CapacityUnits"
        case description = "Description"
        case documentMetadataConfigurationUpdates = "DocumentMetadataConfigurationUpdates"
        case id = "Id"
        case name = "Name"
        case roleArn = "RoleArn"
        case userContextPolicy = "UserContextPolicy"
        case userGroupResolutionConfiguration = "UserGroupResolutionConfiguration"
        case userTokenConfigurations = "UserTokenConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let documentMetadataConfigurationUpdatesContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentMetadataConfiguration?].self, forKey: .documentMetadataConfigurationUpdates)
        var documentMetadataConfigurationUpdatesDecoded0:[KendraClientTypes.DocumentMetadataConfiguration]? = nil
        if let documentMetadataConfigurationUpdatesContainer = documentMetadataConfigurationUpdatesContainer {
            documentMetadataConfigurationUpdatesDecoded0 = [KendraClientTypes.DocumentMetadataConfiguration]()
            for structure0 in documentMetadataConfigurationUpdatesContainer {
                if let structure0 = structure0 {
                    documentMetadataConfigurationUpdatesDecoded0?.append(structure0)
                }
            }
        }
        documentMetadataConfigurationUpdates = documentMetadataConfigurationUpdatesDecoded0
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.CapacityUnitsConfiguration.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
        let userTokenConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.UserTokenConfiguration?].self, forKey: .userTokenConfigurations)
        var userTokenConfigurationsDecoded0:[KendraClientTypes.UserTokenConfiguration]? = nil
        if let userTokenConfigurationsContainer = userTokenConfigurationsContainer {
            userTokenConfigurationsDecoded0 = [KendraClientTypes.UserTokenConfiguration]()
            for structure0 in userTokenConfigurationsContainer {
                if let structure0 = structure0 {
                    userTokenConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        userTokenConfigurations = userTokenConfigurationsDecoded0
        let userContextPolicyDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserContextPolicy.self, forKey: .userContextPolicy)
        userContextPolicy = userContextPolicyDecoded
        let userGroupResolutionConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserGroupResolutionConfiguration.self, forKey: .userGroupResolutionConfiguration)
        userGroupResolutionConfiguration = userGroupResolutionConfigurationDecoded
    }
}

extension UpdateIndexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateIndexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateIndexOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateIndexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateIndexOutputResponse: Swift.Equatable {

}

extension UpdateQuerySuggestionsBlockListInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sourceS3Path = sourceS3Path {
            try encodeContainer.encode(sourceS3Path, forKey: .sourceS3Path)
        }
    }
}

extension UpdateQuerySuggestionsBlockListInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateQuerySuggestionsBlockListInput: Swift.Equatable {
    /// The description for a block list.
    public var description: Swift.String?
    /// The unique identifier of a block list.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for a block list.
    /// This member is required.
    public var indexId: Swift.String?
    /// The name of a block list.
    public var name: Swift.String?
    /// The IAM (Identity and Access Management) role used to access the block list text file in S3.
    public var roleArn: Swift.String?
    /// The S3 path where your block list text file sits in S3. If you update your block list and provide the same path to the block list text file in S3, then Amazon Kendra reloads the file to refresh the block list. Amazon Kendra does not automatically refresh your block list. You need to call the UpdateQuerySuggestionsBlockList API to refresh you block list. If you update your block list, then Amazon Kendra asynchronously refreshes all query suggestions with the latest content in the S3 file. This means changes might not take effect immediately.
    public var sourceS3Path: KendraClientTypes.S3Path?

    public init (
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil
    )
    {
        self.description = description
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
    }
}

struct UpdateQuerySuggestionsBlockListInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let id: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let sourceS3Path: KendraClientTypes.S3Path?
    let roleArn: Swift.String?
}

extension UpdateQuerySuggestionsBlockListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .sourceS3Path)
        sourceS3Path = sourceS3PathDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateQuerySuggestionsBlockListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQuerySuggestionsBlockListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQuerySuggestionsBlockListOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQuerySuggestionsBlockListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateQuerySuggestionsBlockListOutputResponse: Swift.Equatable {

}

extension UpdateQuerySuggestionsConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeQueriesWithoutUserInformation = "IncludeQueriesWithoutUserInformation"
        case indexId = "IndexId"
        case minimumNumberOfQueryingUsers = "MinimumNumberOfQueryingUsers"
        case minimumQueryCount = "MinimumQueryCount"
        case mode = "Mode"
        case queryLogLookBackWindowInDays = "QueryLogLookBackWindowInDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeQueriesWithoutUserInformation = includeQueriesWithoutUserInformation {
            try encodeContainer.encode(includeQueriesWithoutUserInformation, forKey: .includeQueriesWithoutUserInformation)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let minimumNumberOfQueryingUsers = minimumNumberOfQueryingUsers {
            try encodeContainer.encode(minimumNumberOfQueryingUsers, forKey: .minimumNumberOfQueryingUsers)
        }
        if let minimumQueryCount = minimumQueryCount {
            try encodeContainer.encode(minimumQueryCount, forKey: .minimumQueryCount)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let queryLogLookBackWindowInDays = queryLogLookBackWindowInDays {
            try encodeContainer.encode(queryLogLookBackWindowInDays, forKey: .queryLogLookBackWindowInDays)
        }
    }
}

extension UpdateQuerySuggestionsConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateQuerySuggestionsConfigInput: Swift.Equatable {
    /// TRUE to include queries without user information (i.e. all queries, irrespective of the user), otherwise FALSE to only include queries with user information. If you pass user information to Amazon Kendra along with the queries, you can set this flag to FALSE and instruct Amazon Kendra to only consider queries with user information. If you set to FALSE, Amazon Kendra only considers queries searched at least MinimumQueryCount times across MinimumNumberOfQueryingUsers unique users for suggestions. If you set to TRUE, Amazon Kendra ignores all user information and learns from all queries.
    public var includeQueriesWithoutUserInformation: Swift.Bool?
    /// The identifier of the index you want to update query suggestions settings for.
    /// This member is required.
    public var indexId: Swift.String?
    /// The minimum number of unique users who must search a query in order for the query to be eligible to suggest to your users. Increasing this number might decrease the number of suggestions. However, this ensures a query is searched by many users and is truly popular to suggest to users. How you tune this setting depends on your specific needs.
    public var minimumNumberOfQueryingUsers: Swift.Int?
    /// The the minimum number of times a query must be searched in order to be eligible to suggest to your users. Decreasing this number increases the number of suggestions. However, this affects the quality of suggestions as it sets a low bar for a query to be considered popular to suggest to users. How you tune this setting depends on your specific needs.
    public var minimumQueryCount: Swift.Int?
    /// Set the mode to ENABLED or LEARN_ONLY. By default, Amazon Kendra enables query suggestions. LEARN_ONLY mode allows you to turn off query suggestions. You can to update this at any time. In LEARN_ONLY mode, Amazon Kendra continues to learn from new queries to keep suggestions up to date for when you are ready to switch to ENABLED mode again.
    public var mode: KendraClientTypes.Mode?
    /// How recent your queries are in your query log time window. The time window is the number of days from current day to past days. By default, Amazon Kendra sets this to 180.
    public var queryLogLookBackWindowInDays: Swift.Int?

    public init (
        includeQueriesWithoutUserInformation: Swift.Bool? = nil,
        indexId: Swift.String? = nil,
        minimumNumberOfQueryingUsers: Swift.Int? = nil,
        minimumQueryCount: Swift.Int? = nil,
        mode: KendraClientTypes.Mode? = nil,
        queryLogLookBackWindowInDays: Swift.Int? = nil
    )
    {
        self.includeQueriesWithoutUserInformation = includeQueriesWithoutUserInformation
        self.indexId = indexId
        self.minimumNumberOfQueryingUsers = minimumNumberOfQueryingUsers
        self.minimumQueryCount = minimumQueryCount
        self.mode = mode
        self.queryLogLookBackWindowInDays = queryLogLookBackWindowInDays
    }
}

struct UpdateQuerySuggestionsConfigInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let mode: KendraClientTypes.Mode?
    let queryLogLookBackWindowInDays: Swift.Int?
    let includeQueriesWithoutUserInformation: Swift.Bool?
    let minimumNumberOfQueryingUsers: Swift.Int?
    let minimumQueryCount: Swift.Int?
}

extension UpdateQuerySuggestionsConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeQueriesWithoutUserInformation = "IncludeQueriesWithoutUserInformation"
        case indexId = "IndexId"
        case minimumNumberOfQueryingUsers = "MinimumNumberOfQueryingUsers"
        case minimumQueryCount = "MinimumQueryCount"
        case mode = "Mode"
        case queryLogLookBackWindowInDays = "QueryLogLookBackWindowInDays"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let modeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Mode.self, forKey: .mode)
        mode = modeDecoded
        let queryLogLookBackWindowInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queryLogLookBackWindowInDays)
        queryLogLookBackWindowInDays = queryLogLookBackWindowInDaysDecoded
        let includeQueriesWithoutUserInformationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeQueriesWithoutUserInformation)
        includeQueriesWithoutUserInformation = includeQueriesWithoutUserInformationDecoded
        let minimumNumberOfQueryingUsersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumNumberOfQueryingUsers)
        minimumNumberOfQueryingUsers = minimumNumberOfQueryingUsersDecoded
        let minimumQueryCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumQueryCount)
        minimumQueryCount = minimumQueryCountDecoded
    }
}

extension UpdateQuerySuggestionsConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQuerySuggestionsConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQuerySuggestionsConfigOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQuerySuggestionsConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateQuerySuggestionsConfigOutputResponse: Swift.Equatable {

}

extension UpdateThesaurusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sourceS3Path = sourceS3Path {
            try encodeContainer.encode(sourceS3Path, forKey: .sourceS3Path)
        }
    }
}

extension UpdateThesaurusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateThesaurusInput: Swift.Equatable {
    /// The updated description of the thesaurus.
    public var description: Swift.String?
    /// The identifier of the thesaurus to update.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index associated with the thesaurus to update.
    /// This member is required.
    public var indexId: Swift.String?
    /// The updated name of the thesaurus.
    public var name: Swift.String?
    /// The updated role ARN of the thesaurus.
    public var roleArn: Swift.String?
    /// Information required to find a specific file in an Amazon S3 bucket.
    public var sourceS3Path: KendraClientTypes.S3Path?

    public init (
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil
    )
    {
        self.description = description
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
    }
}

struct UpdateThesaurusInputBody: Swift.Equatable {
    let id: Swift.String?
    let name: Swift.String?
    let indexId: Swift.String?
    let description: Swift.String?
    let roleArn: Swift.String?
    let sourceS3Path: KendraClientTypes.S3Path?
}

extension UpdateThesaurusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let sourceS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .sourceS3Path)
        sourceS3Path = sourceS3PathDecoded
    }
}

extension UpdateThesaurusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateThesaurusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateThesaurusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateThesaurusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateThesaurusOutputResponse: Swift.Equatable {

}

extension KendraClientTypes.Urls: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case seedUrlConfiguration = "SeedUrlConfiguration"
        case siteMapsConfiguration = "SiteMapsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let seedUrlConfiguration = seedUrlConfiguration {
            try encodeContainer.encode(seedUrlConfiguration, forKey: .seedUrlConfiguration)
        }
        if let siteMapsConfiguration = siteMapsConfiguration {
            try encodeContainer.encode(siteMapsConfiguration, forKey: .siteMapsConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let seedUrlConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SeedUrlConfiguration.self, forKey: .seedUrlConfiguration)
        seedUrlConfiguration = seedUrlConfigurationDecoded
        let siteMapsConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SiteMapsConfiguration.self, forKey: .siteMapsConfiguration)
        siteMapsConfiguration = siteMapsConfigurationDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information of the URLs to crawl. You can only crawl websites that use the secure communication protocol, Hypertext Transfer Protocol Secure (HTTPS). If you receive an error when crawling a website, it could be that the website is blocked from crawling. When selecting websites to index, you must adhere to the [Amazon Acceptable Use Policy](https://aws.amazon.com/aup/) and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own webpages, or webpages that you have authorization to index.
    public struct Urls: Swift.Equatable {
        /// Provides the configuration of the seed or starting point URLs of the websites you want to crawl. You can choose to crawl only the website host names, or the website host names with subdomains, or the website host names with subdomains and other domains that the webpages link to. You can list up to 100 seed URLs.
        public var seedUrlConfiguration: KendraClientTypes.SeedUrlConfiguration?
        /// Provides the configuration of the sitemap URLs of the websites you want to crawl. Only URLs belonging to the same website host names are crawled. You can list up to three sitemap URLs.
        public var siteMapsConfiguration: KendraClientTypes.SiteMapsConfiguration?

        public init (
            seedUrlConfiguration: KendraClientTypes.SeedUrlConfiguration? = nil,
            siteMapsConfiguration: KendraClientTypes.SiteMapsConfiguration? = nil
        )
        {
            self.seedUrlConfiguration = seedUrlConfiguration
            self.siteMapsConfiguration = siteMapsConfiguration
        }
    }

}

extension KendraClientTypes.UserContext: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceGroups = "DataSourceGroups"
        case groups = "Groups"
        case token = "Token"
        case userId = "UserId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceGroups = dataSourceGroups {
            var dataSourceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSourceGroups)
            for datasourcegroups0 in dataSourceGroups {
                try dataSourceGroupsContainer.encode(datasourcegroups0)
            }
        }
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for groups0 in groups {
                try groupsContainer.encode(groups0)
            }
        }
        if let token = token {
            try encodeContainer.encode(token, forKey: .token)
        }
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let groupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .groups)
        var groupsDecoded0:[Swift.String]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [Swift.String]()
            for string0 in groupsContainer {
                if let string0 = string0 {
                    groupsDecoded0?.append(string0)
                }
            }
        }
        groups = groupsDecoded0
        let dataSourceGroupsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceGroup?].self, forKey: .dataSourceGroups)
        var dataSourceGroupsDecoded0:[KendraClientTypes.DataSourceGroup]? = nil
        if let dataSourceGroupsContainer = dataSourceGroupsContainer {
            dataSourceGroupsDecoded0 = [KendraClientTypes.DataSourceGroup]()
            for structure0 in dataSourceGroupsContainer {
                if let structure0 = structure0 {
                    dataSourceGroupsDecoded0?.append(structure0)
                }
            }
        }
        dataSourceGroups = dataSourceGroupsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides information about the user context for an Amazon Kendra index. This is used for filtering search results for different users based on their access to documents. You provide one of the following:
    ///
    /// * User token
    ///
    /// * User ID, the groups the user belongs to, and any data sources the groups can access.
    ///
    ///
    /// If you provide both, an exception is thrown.
    public struct UserContext: Swift.Equatable {
        /// The list of data source groups you want to filter search results based on groups' access to documents in that data source.
        public var dataSourceGroups: [KendraClientTypes.DataSourceGroup]?
        /// The list of groups you want to filter search results based on the groups' access to documents.
        public var groups: [Swift.String]?
        /// The user context token for filtering search results for a user. It must be a JWT or a JSON token.
        public var token: Swift.String?
        /// The identifier of the user you want to filter search results based on their access to documents.
        public var userId: Swift.String?

        public init (
            dataSourceGroups: [KendraClientTypes.DataSourceGroup]? = nil,
            groups: [Swift.String]? = nil,
            token: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.dataSourceGroups = dataSourceGroups
            self.groups = groups
            self.token = token
            self.userId = userId
        }
    }

}

extension KendraClientTypes {
    public enum UserContextPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case attributeFilter
        case userToken
        case sdkUnknown(Swift.String)

        public static var allCases: [UserContextPolicy] {
            return [
                .attributeFilter,
                .userToken,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .attributeFilter: return "ATTRIBUTE_FILTER"
            case .userToken: return "USER_TOKEN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UserContextPolicy(rawValue: rawValue) ?? UserContextPolicy.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.UserGroupResolutionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userGroupResolutionMode = "UserGroupResolutionMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userGroupResolutionMode = userGroupResolutionMode {
            try encodeContainer.encode(userGroupResolutionMode.rawValue, forKey: .userGroupResolutionMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userGroupResolutionModeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserGroupResolutionMode.self, forKey: .userGroupResolutionMode)
        userGroupResolutionMode = userGroupResolutionModeDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information to fetch access levels of groups and users from an Amazon Web Services Single Sign On identity source. This is useful for setting up user context filtering, where Amazon Kendra filters search results for different users based on their group's access to documents. You can also map your users to their groups for user context filtering using the [PutPrincipalMapping operation](https://docs.aws.amazon.com/kendra/latest/dg/API_PutPrincipalMapping.html). To set up an Amazon Web Services SSO identity source in the console to use with Amazon Kendra, see [Getting started with an Amazon Web Services SSO identity source](https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html). You must also grant the required permissions to use Amazon Web Services SSO with Amazon Kendra. For more information, see [IAM roles for Amazon Web Services SSO](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-aws-sso).
    public struct UserGroupResolutionConfiguration: Swift.Equatable {
        /// The identity store provider (mode) you want to use to fetch access levels of groups and users. Amazon Web Services Single Sign On is currently the only available mode. Your users and groups must exist in an Amazon Web Services SSO identity source in order to use this mode.
        /// This member is required.
        public var userGroupResolutionMode: KendraClientTypes.UserGroupResolutionMode?

        public init (
            userGroupResolutionMode: KendraClientTypes.UserGroupResolutionMode? = nil
        )
        {
            self.userGroupResolutionMode = userGroupResolutionMode
        }
    }

}

extension KendraClientTypes {
    public enum UserGroupResolutionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsSso
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [UserGroupResolutionMode] {
            return [
                .awsSso,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsSso: return "AWS_SSO"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UserGroupResolutionMode(rawValue: rawValue) ?? UserGroupResolutionMode.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.UserIdentityConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityAttributeName = "IdentityAttributeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityAttributeName = identityAttributeName {
            try encodeContainer.encode(identityAttributeName, forKey: .identityAttributeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityAttributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityAttributeName)
        identityAttributeName = identityAttributeNameDecoded
    }
}

extension KendraClientTypes {
    /// Configuration information for the identifiers of your users.
    public struct UserIdentityConfiguration: Swift.Equatable {
        /// The Amazon Web Services SSO field name that contains the identifiers of your users, such as their emails. This is used for [user context filtering](https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html) and for granting access to your Amazon Kendra experience. You must set up Amazon Web Services SSO with Amazon Kendra. You must include your users and groups in your Access Control List when you ingest documents into your index. For more information, see [Getting started with an Amazon Web Services SSO identity source](https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html).
        public var identityAttributeName: Swift.String?

        public init (
            identityAttributeName: Swift.String? = nil
        )
        {
            self.identityAttributeName = identityAttributeName
        }
    }

}

extension KendraClientTypes.UserTokenConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jsonTokenTypeConfiguration = "JsonTokenTypeConfiguration"
        case jwtTokenTypeConfiguration = "JwtTokenTypeConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jsonTokenTypeConfiguration = jsonTokenTypeConfiguration {
            try encodeContainer.encode(jsonTokenTypeConfiguration, forKey: .jsonTokenTypeConfiguration)
        }
        if let jwtTokenTypeConfiguration = jwtTokenTypeConfiguration {
            try encodeContainer.encode(jwtTokenTypeConfiguration, forKey: .jwtTokenTypeConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jwtTokenTypeConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.JwtTokenTypeConfiguration.self, forKey: .jwtTokenTypeConfiguration)
        jwtTokenTypeConfiguration = jwtTokenTypeConfigurationDecoded
        let jsonTokenTypeConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.JsonTokenTypeConfiguration.self, forKey: .jsonTokenTypeConfiguration)
        jsonTokenTypeConfiguration = jsonTokenTypeConfigurationDecoded
    }
}

extension KendraClientTypes {
    /// Provides configuration information for a token configuration.
    public struct UserTokenConfiguration: Swift.Equatable {
        /// Information about the JSON token type configuration.
        public var jsonTokenTypeConfiguration: KendraClientTypes.JsonTokenTypeConfiguration?
        /// Information about the JWT token type configuration.
        public var jwtTokenTypeConfiguration: KendraClientTypes.JwtTokenTypeConfiguration?

        public init (
            jsonTokenTypeConfiguration: KendraClientTypes.JsonTokenTypeConfiguration? = nil,
            jwtTokenTypeConfiguration: KendraClientTypes.JwtTokenTypeConfiguration? = nil
        )
        {
            self.jsonTokenTypeConfiguration = jsonTokenTypeConfiguration
            self.jwtTokenTypeConfiguration = jwtTokenTypeConfiguration
        }
    }

}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KendraClientTypes.WebCrawlerConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationConfiguration = "AuthenticationConfiguration"
        case crawlDepth = "CrawlDepth"
        case maxContentSizePerPageInMegaBytes = "MaxContentSizePerPageInMegaBytes"
        case maxLinksPerPage = "MaxLinksPerPage"
        case maxUrlsPerMinuteCrawlRate = "MaxUrlsPerMinuteCrawlRate"
        case proxyConfiguration = "ProxyConfiguration"
        case urlExclusionPatterns = "UrlExclusionPatterns"
        case urlInclusionPatterns = "UrlInclusionPatterns"
        case urls = "Urls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authenticationConfiguration = authenticationConfiguration {
            try encodeContainer.encode(authenticationConfiguration, forKey: .authenticationConfiguration)
        }
        if let crawlDepth = crawlDepth {
            try encodeContainer.encode(crawlDepth, forKey: .crawlDepth)
        }
        if let maxContentSizePerPageInMegaBytes = maxContentSizePerPageInMegaBytes {
            try encodeContainer.encode(maxContentSizePerPageInMegaBytes, forKey: .maxContentSizePerPageInMegaBytes)
        }
        if let maxLinksPerPage = maxLinksPerPage {
            try encodeContainer.encode(maxLinksPerPage, forKey: .maxLinksPerPage)
        }
        if let maxUrlsPerMinuteCrawlRate = maxUrlsPerMinuteCrawlRate {
            try encodeContainer.encode(maxUrlsPerMinuteCrawlRate, forKey: .maxUrlsPerMinuteCrawlRate)
        }
        if let proxyConfiguration = proxyConfiguration {
            try encodeContainer.encode(proxyConfiguration, forKey: .proxyConfiguration)
        }
        if let urlExclusionPatterns = urlExclusionPatterns {
            var urlExclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlExclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in urlExclusionPatterns {
                try urlExclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let urlInclusionPatterns = urlInclusionPatterns {
            var urlInclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlInclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in urlInclusionPatterns {
                try urlInclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let urls = urls {
            try encodeContainer.encode(urls, forKey: .urls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Urls.self, forKey: .urls)
        urls = urlsDecoded
        let crawlDepthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .crawlDepth)
        crawlDepth = crawlDepthDecoded
        let maxLinksPerPageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLinksPerPage)
        maxLinksPerPage = maxLinksPerPageDecoded
        let maxContentSizePerPageInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .maxContentSizePerPageInMegaBytes)
        maxContentSizePerPageInMegaBytes = maxContentSizePerPageInMegaBytesDecoded
        let maxUrlsPerMinuteCrawlRateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxUrlsPerMinuteCrawlRate)
        maxUrlsPerMinuteCrawlRate = maxUrlsPerMinuteCrawlRateDecoded
        let urlInclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urlInclusionPatterns)
        var urlInclusionPatternsDecoded0:[Swift.String]? = nil
        if let urlInclusionPatternsContainer = urlInclusionPatternsContainer {
            urlInclusionPatternsDecoded0 = [Swift.String]()
            for string0 in urlInclusionPatternsContainer {
                if let string0 = string0 {
                    urlInclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        urlInclusionPatterns = urlInclusionPatternsDecoded0
        let urlExclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urlExclusionPatterns)
        var urlExclusionPatternsDecoded0:[Swift.String]? = nil
        if let urlExclusionPatternsContainer = urlExclusionPatternsContainer {
            urlExclusionPatternsDecoded0 = [Swift.String]()
            for string0 in urlExclusionPatternsContainer {
                if let string0 = string0 {
                    urlExclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        urlExclusionPatterns = urlExclusionPatternsDecoded0
        let proxyConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ProxyConfiguration.self, forKey: .proxyConfiguration)
        proxyConfiguration = proxyConfigurationDecoded
        let authenticationConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.AuthenticationConfiguration.self, forKey: .authenticationConfiguration)
        authenticationConfiguration = authenticationConfigurationDecoded
    }
}

extension KendraClientTypes {
    /// Provides the configuration information required for Amazon Kendra Web Crawler.
    public struct WebCrawlerConfiguration: Swift.Equatable {
        /// Provides configuration information required to connect to websites using authentication. You can connect to websites using basic authentication of user name and password. You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS. You use a secret in [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) to store your authentication credentials.
        public var authenticationConfiguration: KendraClientTypes.AuthenticationConfiguration?
        /// Specifies the number of levels in a website that you want to crawl. The first level begins from the website seed or starting point URL. For example, if a website has 3 levels – index level (i.e. seed in this example), sections level, and subsections level – and you are only interested in crawling information up to the sections level (i.e. levels 0-1), you can set your depth to 1. The default crawl depth is set to 2.
        public var crawlDepth: Swift.Int?
        /// The maximum size (in MB) of a webpage or attachment to crawl. Files larger than this size (in MB) are skipped/not crawled. The default maximum size of a webpage or attachment is set to 50 MB.
        public var maxContentSizePerPageInMegaBytes: Swift.Float?
        /// The maximum number of URLs on a webpage to include when crawling a website. This number is per webpage. As a website’s webpages are crawled, any URLs the webpages link to are also crawled. URLs on a webpage are crawled in order of appearance. The default maximum links per page is 100.
        public var maxLinksPerPage: Swift.Int?
        /// The maximum number of URLs crawled per website host per minute. A minimum of one URL is required. The default maximum number of URLs crawled per website host per minute is 300.
        public var maxUrlsPerMinuteCrawlRate: Swift.Int?
        /// Provides configuration information required to connect to your internal websites via a web proxy. You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS. Web proxy credentials are optional and you can use them to connect to a web proxy server that requires basic authentication. To store web proxy credentials, you use a secret in [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html).
        public var proxyConfiguration: KendraClientTypes.ProxyConfiguration?
        /// The regular expression pattern to exclude certain URLs to crawl. If there is a regular expression pattern to include certain URLs that conflicts with the exclude pattern, the exclude pattern takes precedence.
        public var urlExclusionPatterns: [Swift.String]?
        /// The regular expression pattern to include certain URLs to crawl. If there is a regular expression pattern to exclude certain URLs that conflicts with the include pattern, the exclude pattern takes precedence.
        public var urlInclusionPatterns: [Swift.String]?
        /// Specifies the seed or starting point URLs of the websites or the sitemap URLs of the websites you want to crawl. You can include website subdomains. You can list up to 100 seed URLs and up to three sitemap URLs. You can only crawl websites that use the secure communication protocol, Hypertext Transfer Protocol Secure (HTTPS). If you receive an error when crawling a website, it could be that the website is blocked from crawling. When selecting websites to index, you must adhere to the [Amazon Acceptable Use Policy](https://aws.amazon.com/aup/) and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own webpages, or webpages that you have authorization to index.
        /// This member is required.
        public var urls: KendraClientTypes.Urls?

        public init (
            authenticationConfiguration: KendraClientTypes.AuthenticationConfiguration? = nil,
            crawlDepth: Swift.Int? = nil,
            maxContentSizePerPageInMegaBytes: Swift.Float? = nil,
            maxLinksPerPage: Swift.Int? = nil,
            maxUrlsPerMinuteCrawlRate: Swift.Int? = nil,
            proxyConfiguration: KendraClientTypes.ProxyConfiguration? = nil,
            urlExclusionPatterns: [Swift.String]? = nil,
            urlInclusionPatterns: [Swift.String]? = nil,
            urls: KendraClientTypes.Urls? = nil
        )
        {
            self.authenticationConfiguration = authenticationConfiguration
            self.crawlDepth = crawlDepth
            self.maxContentSizePerPageInMegaBytes = maxContentSizePerPageInMegaBytes
            self.maxLinksPerPage = maxLinksPerPage
            self.maxUrlsPerMinuteCrawlRate = maxUrlsPerMinuteCrawlRate
            self.proxyConfiguration = proxyConfiguration
            self.urlExclusionPatterns = urlExclusionPatterns
            self.urlInclusionPatterns = urlInclusionPatterns
            self.urls = urls
        }
    }

}

extension KendraClientTypes {
    public enum WebCrawlerMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case everything
        case hostOnly
        case subdomains
        case sdkUnknown(Swift.String)

        public static var allCases: [WebCrawlerMode] {
            return [
                .everything,
                .hostOnly,
                .subdomains,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .everything: return "EVERYTHING"
            case .hostOnly: return "HOST_ONLY"
            case .subdomains: return "SUBDOMAINS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WebCrawlerMode(rawValue: rawValue) ?? WebCrawlerMode.sdkUnknown(rawValue)
        }
    }
}

extension KendraClientTypes.WorkDocsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlComments = "CrawlComments"
        case exclusionPatterns = "ExclusionPatterns"
        case fieldMappings = "FieldMappings"
        case inclusionPatterns = "InclusionPatterns"
        case organizationId = "OrganizationId"
        case useChangeLog = "UseChangeLog"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if crawlComments != false {
            try encodeContainer.encode(crawlComments, forKey: .crawlComments)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let organizationId = organizationId {
            try encodeContainer.encode(organizationId, forKey: .organizationId)
        }
        if useChangeLog != false {
            try encodeContainer.encode(useChangeLog, forKey: .useChangeLog)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationId)
        organizationId = organizationIdDecoded
        let crawlCommentsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .crawlComments)
        crawlComments = crawlCommentsDecoded
        let useChangeLogDecoded = try containerValues.decode(Swift.Bool.self, forKey: .useChangeLog)
        useChangeLog = useChangeLogDecoded
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
    }
}

extension KendraClientTypes {
    /// Provides the configuration information to connect to Amazon WorkDocs as your data source. Amazon WorkDocs connector is available in Oregon, North Virginia, Sydney, Singapore and Ireland regions.
    public struct WorkDocsConfiguration: Swift.Equatable {
        /// TRUE to include comments on documents in your index. Including comments in your index means each comment is a document that can be searched on. The default is set to FALSE.
        public var crawlComments: Swift.Bool
        /// A list of regular expression patterns to exclude certain files in your Amazon WorkDocs site repository. Files that match the patterns are excluded from the index. Files that don’t match the patterns are included in the index. If a file matches both an inclusion pattern and an exclusion pattern, the exclusion pattern takes precedence and the file isn’t included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map Amazon WorkDocs field names to custom index field names in Amazon Kendra. You must first create the custom index fields using the UpdateIndex operation before you map to Amazon WorkDocs fields. For more information, see [Mapping Data Source Fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Amazon WorkDocs data source field names need to exist in your Amazon WorkDocs custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to include certain files in your Amazon WorkDocs site repository. Files that match the patterns are included in the index. Files that don't match the patterns are excluded from the index. If a file matches both an inclusion pattern and an exclusion pattern, the exclusion pattern takes precedence and the file isn’t included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// The identifier of the directory corresponding to your Amazon WorkDocs site repository. You can find the organization ID in the [Directory Service](https://console.aws.amazon.com/directoryservicev2/) by going to Active Directory, then Directories. Your Amazon WorkDocs site directory has an ID, which is the organization ID. You can also set up a new Amazon WorkDocs directory in the Directory Service console and enable a Amazon WorkDocs site for the directory in the Amazon WorkDocs console.
        /// This member is required.
        public var organizationId: Swift.String?
        /// TRUE to use the change logs to update documents in your index instead of scanning all documents. If you are syncing your Amazon WorkDocs data source with your index for the first time, all documents are scanned. After your first sync, you can use the change logs to update your documents in your index for future syncs. The default is set to FALSE.
        public var useChangeLog: Swift.Bool

        public init (
            crawlComments: Swift.Bool = false,
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            organizationId: Swift.String? = nil,
            useChangeLog: Swift.Bool = false
        )
        {
            self.crawlComments = crawlComments
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.organizationId = organizationId
            self.useChangeLog = useChangeLog
        }
    }

}
