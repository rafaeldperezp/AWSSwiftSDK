// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[DescribeDomainControllersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeDomainControllersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeDomainControllersOutputResponse`
extension DirectoryClient {
    public func describeDomainControllersPaginated(input: DescribeDomainControllersInput) -> ClientRuntime.PaginatorSequence<DescribeDomainControllersInput, DescribeDomainControllersOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeDomainControllersInput, DescribeDomainControllersOutputResponse>(input: input, inputKey: \DescribeDomainControllersInput.nextToken, outputKey: \DescribeDomainControllersOutputResponse.nextToken, paginationFunction: self.describeDomainControllers(input:))
    }
}

extension DescribeDomainControllersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeDomainControllersInput {
        return DescribeDomainControllersInput(
            directoryId: self.directoryId,
            domainControllerIds: self.domainControllerIds,
            limit: self.limit,
            nextToken: token
        )}
}
