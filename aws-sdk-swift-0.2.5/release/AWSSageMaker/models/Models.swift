// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension SageMakerClientTypes.ActionSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceId = "SourceId"
        case sourceType = "SourceType"
        case sourceUri = "SourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceId = sourceId {
            try encodeContainer.encode(sourceId, forKey: .sourceId)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
        if let sourceUri = sourceUri {
            try encodeContainer.encode(sourceUri, forKey: .sourceUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUri)
        sourceUri = sourceUriDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let sourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
    }
}

extension SageMakerClientTypes {
    /// A structure describing the source of an action.
    public struct ActionSource: Swift.Equatable {
        /// The ID of the source.
        public var sourceId: Swift.String?
        /// The type of the source.
        public var sourceType: Swift.String?
        /// The URI of the source.
        /// This member is required.
        public var sourceUri: Swift.String?

        public init (
            sourceId: Swift.String? = nil,
            sourceType: Swift.String? = nil,
            sourceUri: Swift.String? = nil
        )
        {
            self.sourceId = sourceId
            self.sourceType = sourceType
            self.sourceUri = sourceUri
        }
    }

}

extension SageMakerClientTypes {
    public enum ActionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionStatus(rawValue: rawValue) ?? ActionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ActionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionArn = "ActionArn"
        case actionName = "ActionName"
        case actionType = "ActionType"
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case source = "Source"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionArn = actionArn {
            try encodeContainer.encode(actionArn, forKey: .actionArn)
        }
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let actionType = actionType {
            try encodeContainer.encode(actionType, forKey: .actionType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionArn)
        actionArn = actionArnDecoded
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ActionSource.self, forKey: .source)
        source = sourceDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ActionStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Lists the properties of an action. An action represents an action or activity. Some examples are a workflow step and a model deployment. Generally, an action involves at least one input artifact or output artifact.
    public struct ActionSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the action.
        public var actionArn: Swift.String?
        /// The name of the action.
        public var actionName: Swift.String?
        /// The type of the action.
        public var actionType: Swift.String?
        /// When the action was created.
        public var creationTime: ClientRuntime.Date?
        /// When the action was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The source of the action.
        public var source: SageMakerClientTypes.ActionSource?
        /// The status of the action.
        public var status: SageMakerClientTypes.ActionStatus?

        public init (
            actionArn: Swift.String? = nil,
            actionName: Swift.String? = nil,
            actionType: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            source: SageMakerClientTypes.ActionSource? = nil,
            status: SageMakerClientTypes.ActionStatus? = nil
        )
        {
            self.actionArn = actionArn
            self.actionName = actionName
            self.actionType = actionType
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.source = source
            self.status = status
        }
    }

}

extension AddAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationType = "AssociationType"
        case destinationArn = "DestinationArn"
        case sourceArn = "SourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationType = associationType {
            try encodeContainer.encode(associationType.rawValue, forKey: .associationType)
        }
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
    }
}

extension AddAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AddAssociationInput: Swift.Equatable {
    /// The type of association. The following are suggested uses for each type. Amazon SageMaker places no restrictions on their use.
    ///
    /// * ContributedTo - The source contributed to the destination or had a part in enabling the destination. For example, the training data contributed to the training job.
    ///
    /// * AssociatedWith - The source is connected to the destination. For example, an approval workflow is associated with a model deployment.
    ///
    /// * DerivedFrom - The destination is a modification of the source. For example, a digest output of a channel input for a processing job is derived from the original inputs.
    ///
    /// * Produced - The source generated the destination. For example, a training job produced a model artifact.
    public var associationType: SageMakerClientTypes.AssociationEdgeType?
    /// The Amazon Resource Name (ARN) of the destination.
    /// This member is required.
    public var destinationArn: Swift.String?
    /// The ARN of the source.
    /// This member is required.
    public var sourceArn: Swift.String?

    public init (
        associationType: SageMakerClientTypes.AssociationEdgeType? = nil,
        destinationArn: Swift.String? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.associationType = associationType
        self.destinationArn = destinationArn
        self.sourceArn = sourceArn
    }
}

struct AddAssociationInputBody: Swift.Equatable {
    let sourceArn: Swift.String?
    let destinationArn: Swift.String?
    let associationType: SageMakerClientTypes.AssociationEdgeType?
}

extension AddAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationType = "AssociationType"
        case destinationArn = "DestinationArn"
        case sourceArn = "SourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let associationTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AssociationEdgeType.self, forKey: .associationType)
        associationType = associationTypeDecoded
    }
}

extension AddAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddAssociationOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AddAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.destinationArn = output.destinationArn
            self.sourceArn = output.sourceArn
        } else {
            self.destinationArn = nil
            self.sourceArn = nil
        }
    }
}

public struct AddAssociationOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the destination.
    public var destinationArn: Swift.String?
    /// The ARN of the source.
    public var sourceArn: Swift.String?

    public init (
        destinationArn: Swift.String? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.sourceArn = sourceArn
    }
}

struct AddAssociationOutputResponseBody: Swift.Equatable {
    let sourceArn: Swift.String?
    let destinationArn: Swift.String?
}

extension AddAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn = "DestinationArn"
        case sourceArn = "SourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
    }
}

extension AddTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension AddTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AddTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to tag.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    /// This member is required.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct AddTagsInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
}

extension AddTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension AddTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AddTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct AddTagsOutputResponse: Swift.Equatable {
    /// A list of tags associated with the Amazon SageMaker resource.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct AddTagsOutputResponseBody: Swift.Equatable {
    let tags: [SageMakerClientTypes.Tag]?
}

extension AddTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes.AdditionalInferenceSpecificationDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers = "Containers"
        case description = "Description"
        case name = "Name"
        case supportedContentTypes = "SupportedContentTypes"
        case supportedRealtimeInferenceInstanceTypes = "SupportedRealtimeInferenceInstanceTypes"
        case supportedResponseMIMETypes = "SupportedResponseMIMETypes"
        case supportedTransformInstanceTypes = "SupportedTransformInstanceTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for modelpackagecontainerdefinitionlist0 in containers {
                try containersContainer.encode(modelpackagecontainerdefinitionlist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let supportedContentTypes = supportedContentTypes {
            var supportedContentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedContentTypes)
            for contenttypes0 in supportedContentTypes {
                try supportedContentTypesContainer.encode(contenttypes0)
            }
        }
        if let supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes {
            var supportedRealtimeInferenceInstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedRealtimeInferenceInstanceTypes)
            for realtimeinferenceinstancetypes0 in supportedRealtimeInferenceInstanceTypes {
                try supportedRealtimeInferenceInstanceTypesContainer.encode(realtimeinferenceinstancetypes0.rawValue)
            }
        }
        if let supportedResponseMIMETypes = supportedResponseMIMETypes {
            var supportedResponseMIMETypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedResponseMIMETypes)
            for responsemimetypes0 in supportedResponseMIMETypes {
                try supportedResponseMIMETypesContainer.encode(responsemimetypes0)
            }
        }
        if let supportedTransformInstanceTypes = supportedTransformInstanceTypes {
            var supportedTransformInstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedTransformInstanceTypes)
            for transforminstancetypes0 in supportedTransformInstanceTypes {
                try supportedTransformInstanceTypesContainer.encode(transforminstancetypes0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let containersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelPackageContainerDefinition?].self, forKey: .containers)
        var containersDecoded0:[SageMakerClientTypes.ModelPackageContainerDefinition]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [SageMakerClientTypes.ModelPackageContainerDefinition]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let supportedTransformInstanceTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TransformInstanceType?].self, forKey: .supportedTransformInstanceTypes)
        var supportedTransformInstanceTypesDecoded0:[SageMakerClientTypes.TransformInstanceType]? = nil
        if let supportedTransformInstanceTypesContainer = supportedTransformInstanceTypesContainer {
            supportedTransformInstanceTypesDecoded0 = [SageMakerClientTypes.TransformInstanceType]()
            for string0 in supportedTransformInstanceTypesContainer {
                if let string0 = string0 {
                    supportedTransformInstanceTypesDecoded0?.append(string0)
                }
            }
        }
        supportedTransformInstanceTypes = supportedTransformInstanceTypesDecoded0
        let supportedRealtimeInferenceInstanceTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariantInstanceType?].self, forKey: .supportedRealtimeInferenceInstanceTypes)
        var supportedRealtimeInferenceInstanceTypesDecoded0:[SageMakerClientTypes.ProductionVariantInstanceType]? = nil
        if let supportedRealtimeInferenceInstanceTypesContainer = supportedRealtimeInferenceInstanceTypesContainer {
            supportedRealtimeInferenceInstanceTypesDecoded0 = [SageMakerClientTypes.ProductionVariantInstanceType]()
            for string0 in supportedRealtimeInferenceInstanceTypesContainer {
                if let string0 = string0 {
                    supportedRealtimeInferenceInstanceTypesDecoded0?.append(string0)
                }
            }
        }
        supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypesDecoded0
        let supportedContentTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedContentTypes)
        var supportedContentTypesDecoded0:[Swift.String]? = nil
        if let supportedContentTypesContainer = supportedContentTypesContainer {
            supportedContentTypesDecoded0 = [Swift.String]()
            for string0 in supportedContentTypesContainer {
                if let string0 = string0 {
                    supportedContentTypesDecoded0?.append(string0)
                }
            }
        }
        supportedContentTypes = supportedContentTypesDecoded0
        let supportedResponseMIMETypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedResponseMIMETypes)
        var supportedResponseMIMETypesDecoded0:[Swift.String]? = nil
        if let supportedResponseMIMETypesContainer = supportedResponseMIMETypesContainer {
            supportedResponseMIMETypesDecoded0 = [Swift.String]()
            for string0 in supportedResponseMIMETypesContainer {
                if let string0 = string0 {
                    supportedResponseMIMETypesDecoded0?.append(string0)
                }
            }
        }
        supportedResponseMIMETypes = supportedResponseMIMETypesDecoded0
    }
}

extension SageMakerClientTypes {
    /// A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package
    public struct AdditionalInferenceSpecificationDefinition: Swift.Equatable {
        /// The Amazon ECR registry path of the Docker image that contains the inference code.
        /// This member is required.
        public var containers: [SageMakerClientTypes.ModelPackageContainerDefinition]?
        /// A description of the additional Inference specification
        public var description: Swift.String?
        /// A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package.
        /// This member is required.
        public var name: Swift.String?
        /// The supported MIME types for the input data.
        public var supportedContentTypes: [Swift.String]?
        /// A list of the instance types that are used to generate inferences in real-time.
        public var supportedRealtimeInferenceInstanceTypes: [SageMakerClientTypes.ProductionVariantInstanceType]?
        /// The supported MIME types for the output data.
        public var supportedResponseMIMETypes: [Swift.String]?
        /// A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        public var supportedTransformInstanceTypes: [SageMakerClientTypes.TransformInstanceType]?

        public init (
            containers: [SageMakerClientTypes.ModelPackageContainerDefinition]? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            supportedContentTypes: [Swift.String]? = nil,
            supportedRealtimeInferenceInstanceTypes: [SageMakerClientTypes.ProductionVariantInstanceType]? = nil,
            supportedResponseMIMETypes: [Swift.String]? = nil,
            supportedTransformInstanceTypes: [SageMakerClientTypes.TransformInstanceType]? = nil
        )
        {
            self.containers = containers
            self.description = description
            self.name = name
            self.supportedContentTypes = supportedContentTypes
            self.supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes
            self.supportedResponseMIMETypes = supportedResponseMIMETypes
            self.supportedTransformInstanceTypes = supportedTransformInstanceTypes
        }
    }

}

extension SageMakerClientTypes.AgentVersion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentCount = "AgentCount"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if agentCount != 0 {
            try encodeContainer.encode(agentCount, forKey: .agentCount)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let agentCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .agentCount)
        agentCount = agentCountDecoded
    }
}

extension SageMakerClientTypes {
    /// Edge Manager agent version.
    public struct AgentVersion: Swift.Equatable {
        /// The number of Edge Manager agents.
        /// This member is required.
        public var agentCount: Swift.Int
        /// Version of the agent.
        /// This member is required.
        public var version: Swift.String?

        public init (
            agentCount: Swift.Int = 0,
            version: Swift.String? = nil
        )
        {
            self.agentCount = agentCount
            self.version = version
        }
    }

}

extension SageMakerClientTypes.Alarm: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName = "AlarmName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
    }
}

extension SageMakerClientTypes {
    /// An Amazon CloudWatch alarm configured to monitor metrics on an endpoint.
    public struct Alarm: Swift.Equatable {
        /// The name of a CloudWatch alarm in your account.
        public var alarmName: Swift.String?

        public init (
            alarmName: Swift.String? = nil
        )
        {
            self.alarmName = alarmName
        }
    }

}

extension SageMakerClientTypes {
    public enum AlgorithmSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [AlgorithmSortBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AlgorithmSortBy(rawValue: rawValue) ?? AlgorithmSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.AlgorithmSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmName = "AlgorithmName"
        case enableSageMakerMetricsTimeSeries = "EnableSageMakerMetricsTimeSeries"
        case metricDefinitions = "MetricDefinitions"
        case trainingImage = "TrainingImage"
        case trainingInputMode = "TrainingInputMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if enableSageMakerMetricsTimeSeries != false {
            try encodeContainer.encode(enableSageMakerMetricsTimeSeries, forKey: .enableSageMakerMetricsTimeSeries)
        }
        if let metricDefinitions = metricDefinitions {
            var metricDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricDefinitions)
            for metricdefinitionlist0 in metricDefinitions {
                try metricDefinitionsContainer.encode(metricdefinitionlist0)
            }
        }
        if let trainingImage = trainingImage {
            try encodeContainer.encode(trainingImage, forKey: .trainingImage)
        }
        if let trainingInputMode = trainingInputMode {
            try encodeContainer.encode(trainingInputMode.rawValue, forKey: .trainingInputMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingImage)
        trainingImage = trainingImageDecoded
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let trainingInputModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingInputMode.self, forKey: .trainingInputMode)
        trainingInputMode = trainingInputModeDecoded
        let metricDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MetricDefinition?].self, forKey: .metricDefinitions)
        var metricDefinitionsDecoded0:[SageMakerClientTypes.MetricDefinition]? = nil
        if let metricDefinitionsContainer = metricDefinitionsContainer {
            metricDefinitionsDecoded0 = [SageMakerClientTypes.MetricDefinition]()
            for structure0 in metricDefinitionsContainer {
                if let structure0 = structure0 {
                    metricDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        metricDefinitions = metricDefinitionsDecoded0
        let enableSageMakerMetricsTimeSeriesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableSageMakerMetricsTimeSeries)
        enableSageMakerMetricsTimeSeries = enableSageMakerMetricsTimeSeriesDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the training algorithm to use in a [CreateTrainingJob] request. For more information about algorithms provided by Amazon SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). For information about using your own algorithms, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
    public struct AlgorithmSpecification: Swift.Equatable {
        /// The name of the algorithm resource to use for the training job. This must be an algorithm resource that you created or subscribe to on Amazon Web Services Marketplace. If you specify a value for this parameter, you can't specify a value for TrainingImage.
        public var algorithmName: Swift.String?
        /// To generate and save time-series metrics during training, set to true. The default is false and time-series metrics aren't generated except in the following cases:
        ///
        /// * You use one of the Amazon SageMaker built-in algorithms
        ///
        /// * You use one of the following [Prebuilt Amazon SageMaker Docker Images](https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html):
        ///
        /// * Tensorflow (version >= 1.15)
        ///
        /// * MXNet (version >= 1.6)
        ///
        /// * PyTorch (version >= 1.3)
        ///
        ///
        ///
        ///
        /// * You specify at least one [MetricDefinition]
        public var enableSageMakerMetricsTimeSeries: Swift.Bool
        /// A list of metric definition objects. Each object specifies the metric name and regular expressions used to parse algorithm logs. Amazon SageMaker publishes each metric to Amazon CloudWatch.
        public var metricDefinitions: [SageMakerClientTypes.MetricDefinition]?
        /// The registry path of the Docker image that contains the training algorithm. For information about docker registry paths for built-in algorithms, see [Algorithms Provided by Amazon SageMaker: Common Parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html). Amazon SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
        public var trainingImage: Swift.String?
        /// The training input mode that the algorithm supports. For more information about input modes, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Pipe mode If an algorithm supports Pipe mode, Amazon SageMaker streams data directly from Amazon S3 to the container. File mode If an algorithm supports File mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container. You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any. For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training. FastFile mode If an algorithm supports FastFile mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk. FastFile mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.
        /// This member is required.
        public var trainingInputMode: SageMakerClientTypes.TrainingInputMode?

        public init (
            algorithmName: Swift.String? = nil,
            enableSageMakerMetricsTimeSeries: Swift.Bool = false,
            metricDefinitions: [SageMakerClientTypes.MetricDefinition]? = nil,
            trainingImage: Swift.String? = nil,
            trainingInputMode: SageMakerClientTypes.TrainingInputMode? = nil
        )
        {
            self.algorithmName = algorithmName
            self.enableSageMakerMetricsTimeSeries = enableSageMakerMetricsTimeSeries
            self.metricDefinitions = metricDefinitions
            self.trainingImage = trainingImage
            self.trainingInputMode = trainingInputMode
        }
    }

}

extension SageMakerClientTypes {
    public enum AlgorithmStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case deleting
        case failed
        case inProgress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [AlgorithmStatus] {
            return [
                .completed,
                .deleting,
                .failed,
                .inProgress,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AlgorithmStatus(rawValue: rawValue) ?? AlgorithmStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.AlgorithmStatusDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageScanStatuses = "ImageScanStatuses"
        case validationStatuses = "ValidationStatuses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let imageScanStatuses = imageScanStatuses {
            var imageScanStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .imageScanStatuses)
            for algorithmstatusitemlist0 in imageScanStatuses {
                try imageScanStatusesContainer.encode(algorithmstatusitemlist0)
            }
        }
        if let validationStatuses = validationStatuses {
            var validationStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationStatuses)
            for algorithmstatusitemlist0 in validationStatuses {
                try validationStatusesContainer.encode(algorithmstatusitemlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validationStatusesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AlgorithmStatusItem?].self, forKey: .validationStatuses)
        var validationStatusesDecoded0:[SageMakerClientTypes.AlgorithmStatusItem]? = nil
        if let validationStatusesContainer = validationStatusesContainer {
            validationStatusesDecoded0 = [SageMakerClientTypes.AlgorithmStatusItem]()
            for structure0 in validationStatusesContainer {
                if let structure0 = structure0 {
                    validationStatusesDecoded0?.append(structure0)
                }
            }
        }
        validationStatuses = validationStatusesDecoded0
        let imageScanStatusesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AlgorithmStatusItem?].self, forKey: .imageScanStatuses)
        var imageScanStatusesDecoded0:[SageMakerClientTypes.AlgorithmStatusItem]? = nil
        if let imageScanStatusesContainer = imageScanStatusesContainer {
            imageScanStatusesDecoded0 = [SageMakerClientTypes.AlgorithmStatusItem]()
            for structure0 in imageScanStatusesContainer {
                if let structure0 = structure0 {
                    imageScanStatusesDecoded0?.append(structure0)
                }
            }
        }
        imageScanStatuses = imageScanStatusesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Specifies the validation and image scan statuses of the algorithm.
    public struct AlgorithmStatusDetails: Swift.Equatable {
        /// The status of the scan of the algorithm's Docker image container.
        public var imageScanStatuses: [SageMakerClientTypes.AlgorithmStatusItem]?
        /// The status of algorithm validation.
        public var validationStatuses: [SageMakerClientTypes.AlgorithmStatusItem]?

        public init (
            imageScanStatuses: [SageMakerClientTypes.AlgorithmStatusItem]? = nil,
            validationStatuses: [SageMakerClientTypes.AlgorithmStatusItem]? = nil
        )
        {
            self.imageScanStatuses = imageScanStatuses
            self.validationStatuses = validationStatuses
        }
    }

}

extension SageMakerClientTypes.AlgorithmStatusItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureReason = "FailureReason"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DetailedAlgorithmStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension SageMakerClientTypes {
    /// Represents the overall status of an algorithm.
    public struct AlgorithmStatusItem: Swift.Equatable {
        /// if the overall status is Failed, the reason for the failure.
        public var failureReason: Swift.String?
        /// The name of the algorithm for which the overall status is being reported.
        /// This member is required.
        public var name: Swift.String?
        /// The current status.
        /// This member is required.
        public var status: SageMakerClientTypes.DetailedAlgorithmStatus?

        public init (
            failureReason: Swift.String? = nil,
            name: Swift.String? = nil,
            status: SageMakerClientTypes.DetailedAlgorithmStatus? = nil
        )
        {
            self.failureReason = failureReason
            self.name = name
            self.status = status
        }
    }

}

extension SageMakerClientTypes.AlgorithmSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmArn = "AlgorithmArn"
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case algorithmStatus = "AlgorithmStatus"
        case creationTime = "CreationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmArn = algorithmArn {
            try encodeContainer.encode(algorithmArn, forKey: .algorithmArn)
        }
        if let algorithmDescription = algorithmDescription {
            try encodeContainer.encode(algorithmDescription, forKey: .algorithmDescription)
        }
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if let algorithmStatus = algorithmStatus {
            try encodeContainer.encode(algorithmStatus.rawValue, forKey: .algorithmStatus)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let algorithmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmArn)
        algorithmArn = algorithmArnDecoded
        let algorithmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmDescription)
        algorithmDescription = algorithmDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let algorithmStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmStatus.self, forKey: .algorithmStatus)
        algorithmStatus = algorithmStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about an algorithm.
    public struct AlgorithmSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the algorithm.
        /// This member is required.
        public var algorithmArn: Swift.String?
        /// A brief description of the algorithm.
        public var algorithmDescription: Swift.String?
        /// The name of the algorithm that is described by the summary.
        /// This member is required.
        public var algorithmName: Swift.String?
        /// The overall status of the algorithm.
        /// This member is required.
        public var algorithmStatus: SageMakerClientTypes.AlgorithmStatus?
        /// A timestamp that shows when the algorithm was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?

        public init (
            algorithmArn: Swift.String? = nil,
            algorithmDescription: Swift.String? = nil,
            algorithmName: Swift.String? = nil,
            algorithmStatus: SageMakerClientTypes.AlgorithmStatus? = nil,
            creationTime: ClientRuntime.Date? = nil
        )
        {
            self.algorithmArn = algorithmArn
            self.algorithmDescription = algorithmDescription
            self.algorithmName = algorithmName
            self.algorithmStatus = algorithmStatus
            self.creationTime = creationTime
        }
    }

}

extension SageMakerClientTypes.AlgorithmValidationProfile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case profileName = "ProfileName"
        case trainingJobDefinition = "TrainingJobDefinition"
        case transformJobDefinition = "TransformJobDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let profileName = profileName {
            try encodeContainer.encode(profileName, forKey: .profileName)
        }
        if let trainingJobDefinition = trainingJobDefinition {
            try encodeContainer.encode(trainingJobDefinition, forKey: .trainingJobDefinition)
        }
        if let transformJobDefinition = transformJobDefinition {
            try encodeContainer.encode(transformJobDefinition, forKey: .transformJobDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileName)
        profileName = profileNameDecoded
        let trainingJobDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobDefinition.self, forKey: .trainingJobDefinition)
        trainingJobDefinition = trainingJobDefinitionDecoded
        let transformJobDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJobDefinition.self, forKey: .transformJobDefinition)
        transformJobDefinition = transformJobDefinitionDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines a training job and a batch transform job that Amazon SageMaker runs to validate your algorithm. The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.
    public struct AlgorithmValidationProfile: Swift.Equatable {
        /// The name of the profile for the algorithm. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
        /// This member is required.
        public var profileName: Swift.String?
        /// The TrainingJobDefinition object that describes the training job that Amazon SageMaker runs to validate your algorithm.
        /// This member is required.
        public var trainingJobDefinition: SageMakerClientTypes.TrainingJobDefinition?
        /// The TransformJobDefinition object that describes the transform job that Amazon SageMaker runs to validate your algorithm.
        public var transformJobDefinition: SageMakerClientTypes.TransformJobDefinition?

        public init (
            profileName: Swift.String? = nil,
            trainingJobDefinition: SageMakerClientTypes.TrainingJobDefinition? = nil,
            transformJobDefinition: SageMakerClientTypes.TransformJobDefinition? = nil
        )
        {
            self.profileName = profileName
            self.trainingJobDefinition = trainingJobDefinition
            self.transformJobDefinition = transformJobDefinition
        }
    }

}

extension SageMakerClientTypes.AlgorithmValidationSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case validationProfiles = "ValidationProfiles"
        case validationRole = "ValidationRole"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let validationProfiles = validationProfiles {
            var validationProfilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationProfiles)
            for algorithmvalidationprofiles0 in validationProfiles {
                try validationProfilesContainer.encode(algorithmvalidationprofiles0)
            }
        }
        if let validationRole = validationRole {
            try encodeContainer.encode(validationRole, forKey: .validationRole)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validationRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationRole)
        validationRole = validationRoleDecoded
        let validationProfilesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AlgorithmValidationProfile?].self, forKey: .validationProfiles)
        var validationProfilesDecoded0:[SageMakerClientTypes.AlgorithmValidationProfile]? = nil
        if let validationProfilesContainer = validationProfilesContainer {
            validationProfilesDecoded0 = [SageMakerClientTypes.AlgorithmValidationProfile]()
            for structure0 in validationProfilesContainer {
                if let structure0 = structure0 {
                    validationProfilesDecoded0?.append(structure0)
                }
            }
        }
        validationProfiles = validationProfilesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Specifies configurations for one or more training jobs that Amazon SageMaker runs to test the algorithm.
    public struct AlgorithmValidationSpecification: Swift.Equatable {
        /// An array of AlgorithmValidationProfile objects, each of which specifies a training job and batch transform job that Amazon SageMaker runs to validate your algorithm.
        /// This member is required.
        public var validationProfiles: [SageMakerClientTypes.AlgorithmValidationProfile]?
        /// The IAM roles that Amazon SageMaker uses to run the training jobs.
        /// This member is required.
        public var validationRole: Swift.String?

        public init (
            validationProfiles: [SageMakerClientTypes.AlgorithmValidationProfile]? = nil,
            validationRole: Swift.String? = nil
        )
        {
            self.validationProfiles = validationProfiles
            self.validationRole = validationRole
        }
    }

}

extension SageMakerClientTypes.AnnotationConsolidationConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotationConsolidationLambdaArn = "AnnotationConsolidationLambdaArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotationConsolidationLambdaArn = annotationConsolidationLambdaArn {
            try encodeContainer.encode(annotationConsolidationLambdaArn, forKey: .annotationConsolidationLambdaArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let annotationConsolidationLambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotationConsolidationLambdaArn)
        annotationConsolidationLambdaArn = annotationConsolidationLambdaArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Configures how labels are consolidated across human workers and processes output data.
    public struct AnnotationConsolidationConfig: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of a Lambda function implements the logic for [annotation consolidation](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html) and to process output data. This parameter is required for all labeling jobs. For [built-in task types](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html), use one of the following Amazon SageMaker Ground Truth Lambda function ARNs for AnnotationConsolidationLambdaArn. For custom labeling workflows, see [Post-annotation Lambda](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-postlambda). Bounding box - Finds the most similar boxes from different workers based on the Jaccard index of the boxes.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-BoundingBox
        ///
        ///
        /// Image classification - Uses a variant of the Expectation Maximization approach to estimate the true class of an image based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClass
        ///
        ///
        /// Multi-label image classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of an image based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClassMultiLabel
        ///
        ///
        /// Semantic segmentation - Treats each pixel in an image as a multi-class classification and treats pixel annotations from workers as "votes" for the correct label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-SemanticSegmentation
        ///
        ///
        /// Text classification - Uses a variant of the Expectation Maximization approach to estimate the true class of text based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClass
        ///
        ///
        /// Multi-label text classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of text based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClassMultiLabel
        ///
        ///
        /// Named entity recognition - Groups similar selections and calculates aggregate boundaries, resolving to most-assigned label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-NamedEntityRecognition
        ///
        ///
        /// Video Classification - Use this task type when you need workers to classify videos using predefined labels that you specify. Workers are shown videos and are asked to choose one label for each video.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoMultiClass
        ///
        ///
        /// Video Frame Object Detection - Use this task type to have workers identify and locate objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to identify and localize various objects in a series of video frames, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectDetection
        ///
        ///
        /// Video Frame Object Tracking - Use this task type to have workers track the movement of objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to track the movement of objects, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectTracking
        ///
        ///
        /// 3D Point Cloud Object Detection - Use this task type when you want workers to classify objects in a 3D point cloud by drawing 3D cuboids around objects. For example, you can use this task type to ask workers to identify different types of objects in a point cloud, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectDetection
        ///
        ///
        /// 3D Point Cloud Object Tracking - Use this task type when you want workers to draw 3D cuboids around objects that appear in a sequence of 3D point cloud frames. For example, you can use this task type to ask workers to track the movement of vehicles across multiple point cloud frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectTracking
        ///
        ///
        /// 3D Point Cloud Semantic Segmentation - Use this task type when you want workers to create a point-level semantic segmentation masks by painting objects in a 3D point cloud using different colors where each color is assigned to one of the classes you specify.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudSemanticSegmentation
        ///
        ///
        /// Use the following ARNs for Label Verification and Adjustment Jobs Use label verification and adjustment jobs to review and adjust labels. To learn more, see [Verify and Adjust Labels ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html). Semantic Segmentation Adjustment - Treats each pixel in an image as a multi-class classification and treats pixel adjusted annotations from workers as "votes" for the correct label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentSemanticSegmentation
        ///
        ///
        /// Semantic Segmentation Verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgment for semantic segmentation labels based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationSemanticSegmentation
        ///
        ///
        /// Bounding Box Adjustment - Finds the most similar boxes from different workers based on the Jaccard index of the adjusted annotations.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentBoundingBox
        ///
        ///
        /// Bounding Box Verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgement for bounding box labels based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationBoundingBox
        ///
        ///
        /// Video Frame Object Detection Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to classify and localize objects in a sequence of video frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectDetection
        ///
        ///
        /// Video Frame Object Tracking Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to track object movement across a sequence of video frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectTracking
        ///
        ///
        /// 3D Point Cloud Object Detection Adjustment - Use this task type when you want workers to adjust 3D cuboids around objects in a 3D point cloud.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        ///
        /// 3D Point Cloud Object Tracking Adjustment - Use this task type when you want workers to adjust 3D cuboids around objects that appear in a sequence of 3D point cloud frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        ///
        /// 3D Point Cloud Semantic Segmentation Adjustment - Use this task type when you want workers to adjust a point-level semantic segmentation masks using a paint tool.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        /// This member is required.
        public var annotationConsolidationLambdaArn: Swift.String?

        public init (
            annotationConsolidationLambdaArn: Swift.String? = nil
        )
        {
            self.annotationConsolidationLambdaArn = annotationConsolidationLambdaArn
        }
    }

}

extension SageMakerClientTypes.AppDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case creationTime = "CreationTime"
        case domainId = "DomainId"
        case status = "Status"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appName = appName {
            try encodeContainer.encode(appName, forKey: .appName)
        }
        if let appType = appType {
            try encodeContainer.encode(appType.rawValue, forKey: .appType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let appTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppType.self, forKey: .appType)
        appType = appTypeDecoded
        let appNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appName)
        appName = appNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Details about an Amazon SageMaker app.
    public struct AppDetails: Swift.Equatable {
        /// The name of the app.
        public var appName: Swift.String?
        /// The type of app.
        public var appType: SageMakerClientTypes.AppType?
        /// The creation time.
        public var creationTime: ClientRuntime.Date?
        /// The domain ID.
        public var domainId: Swift.String?
        /// The status.
        public var status: SageMakerClientTypes.AppStatus?
        /// The user profile name.
        public var userProfileName: Swift.String?

        public init (
            appName: Swift.String? = nil,
            appType: SageMakerClientTypes.AppType? = nil,
            creationTime: ClientRuntime.Date? = nil,
            domainId: Swift.String? = nil,
            status: SageMakerClientTypes.AppStatus? = nil,
            userProfileName: Swift.String? = nil
        )
        {
            self.appName = appName
            self.appType = appType
            self.creationTime = creationTime
            self.domainId = domainId
            self.status = status
            self.userProfileName = userProfileName
        }
    }

}

extension SageMakerClientTypes.AppImageConfigDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigArn = "AppImageConfigArn"
        case appImageConfigName = "AppImageConfigName"
        case creationTime = "CreationTime"
        case kernelGatewayImageConfig = "KernelGatewayImageConfig"
        case lastModifiedTime = "LastModifiedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appImageConfigArn = appImageConfigArn {
            try encodeContainer.encode(appImageConfigArn, forKey: .appImageConfigArn)
        }
        if let appImageConfigName = appImageConfigName {
            try encodeContainer.encode(appImageConfigName, forKey: .appImageConfigName)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let kernelGatewayImageConfig = kernelGatewayImageConfig {
            try encodeContainer.encode(kernelGatewayImageConfig, forKey: .kernelGatewayImageConfig)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appImageConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigArn)
        appImageConfigArn = appImageConfigArnDecoded
        let appImageConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigName)
        appImageConfigName = appImageConfigNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let kernelGatewayImageConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.KernelGatewayImageConfig.self, forKey: .kernelGatewayImageConfig)
        kernelGatewayImageConfig = kernelGatewayImageConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// The configuration for running a SageMaker image as a KernelGateway app.
    public struct AppImageConfigDetails: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AppImageConfig.
        public var appImageConfigArn: Swift.String?
        /// The name of the AppImageConfig. Must be unique to your account.
        public var appImageConfigName: Swift.String?
        /// When the AppImageConfig was created.
        public var creationTime: ClientRuntime.Date?
        /// The configuration for the file system and kernels in the SageMaker image.
        public var kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?
        /// When the AppImageConfig was last modified.
        public var lastModifiedTime: ClientRuntime.Date?

        public init (
            appImageConfigArn: Swift.String? = nil,
            appImageConfigName: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.appImageConfigArn = appImageConfigArn
            self.appImageConfigName = appImageConfigName
            self.creationTime = creationTime
            self.kernelGatewayImageConfig = kernelGatewayImageConfig
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {
    public enum AppImageConfigSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case lastmodifiedtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [AppImageConfigSortKey] {
            return [
                .creationtime,
                .lastmodifiedtime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .lastmodifiedtime: return "LastModifiedTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AppImageConfigSortKey(rawValue: rawValue) ?? AppImageConfigSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum AppInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mlC512xlarge
        case mlC518xlarge
        case mlC524xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Large
        case mlC5Xlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlM5d12xlarge
        case mlM5d16xlarge
        case mlM5d24xlarge
        case mlM5d2xlarge
        case mlM5d4xlarge
        case mlM5d8xlarge
        case mlM5dLarge
        case mlM5dXlarge
        case mlM512xlarge
        case mlM516xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM58xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlP3dn24xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlR512xlarge
        case mlR516xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR58xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlT32xlarge
        case mlT3Large
        case mlT3Medium
        case mlT3Micro
        case mlT3Small
        case mlT3Xlarge
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [AppInstanceType] {
            return [
                .mlC512xlarge,
                .mlC518xlarge,
                .mlC524xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Large,
                .mlC5Xlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlM5d12xlarge,
                .mlM5d16xlarge,
                .mlM5d24xlarge,
                .mlM5d2xlarge,
                .mlM5d4xlarge,
                .mlM5d8xlarge,
                .mlM5dLarge,
                .mlM5dXlarge,
                .mlM512xlarge,
                .mlM516xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM58xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlP3dn24xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlR512xlarge,
                .mlR516xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR58xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlT32xlarge,
                .mlT3Large,
                .mlT3Medium,
                .mlT3Micro,
                .mlT3Small,
                .mlT3Xlarge,
                .system,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mlC512xlarge: return "ml.c5.12xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC524xlarge: return "ml.c5.24xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Large: return "ml.c5.large"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlM5d12xlarge: return "ml.m5d.12xlarge"
            case .mlM5d16xlarge: return "ml.m5d.16xlarge"
            case .mlM5d24xlarge: return "ml.m5d.24xlarge"
            case .mlM5d2xlarge: return "ml.m5d.2xlarge"
            case .mlM5d4xlarge: return "ml.m5d.4xlarge"
            case .mlM5d8xlarge: return "ml.m5d.8xlarge"
            case .mlM5dLarge: return "ml.m5d.large"
            case .mlM5dXlarge: return "ml.m5d.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM516xlarge: return "ml.m5.16xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM58xlarge: return "ml.m5.8xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlP3dn24xlarge: return "ml.p3dn.24xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR516xlarge: return "ml.r5.16xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR58xlarge: return "ml.r5.8xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlT32xlarge: return "ml.t3.2xlarge"
            case .mlT3Large: return "ml.t3.large"
            case .mlT3Medium: return "ml.t3.medium"
            case .mlT3Micro: return "ml.t3.micro"
            case .mlT3Small: return "ml.t3.small"
            case .mlT3Xlarge: return "ml.t3.xlarge"
            case .system: return "system"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AppInstanceType(rawValue: rawValue) ?? AppInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum AppNetworkAccessType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case publicinternetonly
        case vpconly
        case sdkUnknown(Swift.String)

        public static var allCases: [AppNetworkAccessType] {
            return [
                .publicinternetonly,
                .vpconly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .publicinternetonly: return "PublicInternetOnly"
            case .vpconly: return "VpcOnly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AppNetworkAccessType(rawValue: rawValue) ?? AppNetworkAccessType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum AppSecurityGroupManagement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case customer
        case service
        case sdkUnknown(Swift.String)

        public static var allCases: [AppSecurityGroupManagement] {
            return [
                .customer,
                .service,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .customer: return "Customer"
            case .service: return "Service"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AppSecurityGroupManagement(rawValue: rawValue) ?? AppSecurityGroupManagement.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum AppSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case sdkUnknown(Swift.String)

        public static var allCases: [AppSortKey] {
            return [
                .creationtime,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AppSortKey(rawValue: rawValue) ?? AppSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.AppSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerArguments = "ContainerArguments"
        case containerEntrypoint = "ContainerEntrypoint"
        case imageUri = "ImageUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerArguments = containerArguments {
            var containerArgumentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerArguments)
            for containerarguments0 in containerArguments {
                try containerArgumentsContainer.encode(containerarguments0)
            }
        }
        if let containerEntrypoint = containerEntrypoint {
            var containerEntrypointContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerEntrypoint)
            for containerentrypoint0 in containerEntrypoint {
                try containerEntrypointContainer.encode(containerentrypoint0)
            }
        }
        if let imageUri = imageUri {
            try encodeContainer.encode(imageUri, forKey: .imageUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let containerEntrypointContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerEntrypoint)
        var containerEntrypointDecoded0:[Swift.String]? = nil
        if let containerEntrypointContainer = containerEntrypointContainer {
            containerEntrypointDecoded0 = [Swift.String]()
            for string0 in containerEntrypointContainer {
                if let string0 = string0 {
                    containerEntrypointDecoded0?.append(string0)
                }
            }
        }
        containerEntrypoint = containerEntrypointDecoded0
        let containerArgumentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerArguments)
        var containerArgumentsDecoded0:[Swift.String]? = nil
        if let containerArgumentsContainer = containerArgumentsContainer {
            containerArgumentsDecoded0 = [Swift.String]()
            for string0 in containerArgumentsContainer {
                if let string0 = string0 {
                    containerArgumentsDecoded0?.append(string0)
                }
            }
        }
        containerArguments = containerArgumentsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Configuration to run a processing job in a specified container image.
    public struct AppSpecification: Swift.Equatable {
        /// The arguments for a container used to run a processing job.
        public var containerArguments: [Swift.String]?
        /// The entrypoint for a container used to run a processing job.
        public var containerEntrypoint: [Swift.String]?
        /// The container image to be run by the processing job.
        /// This member is required.
        public var imageUri: Swift.String?

        public init (
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            imageUri: Swift.String? = nil
        )
        {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.imageUri = imageUri
        }
    }

}

extension SageMakerClientTypes {
    public enum AppStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleted
        case deleting
        case failed
        case inservice
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [AppStatus] {
            return [
                .deleted,
                .deleting,
                .failed,
                .inservice,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "Deleted"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AppStatus(rawValue: rawValue) ?? AppStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum AppType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case jupyterserver
        case kernelgateway
        case rsessiongateway
        case rstudioserverpro
        case tensorboard
        case sdkUnknown(Swift.String)

        public static var allCases: [AppType] {
            return [
                .jupyterserver,
                .kernelgateway,
                .rsessiongateway,
                .rstudioserverpro,
                .tensorboard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .jupyterserver: return "JupyterServer"
            case .kernelgateway: return "KernelGateway"
            case .rsessiongateway: return "RSessionGateway"
            case .rstudioserverpro: return "RStudioServerPro"
            case .tensorboard: return "TensorBoard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AppType(rawValue: rawValue) ?? AppType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ArtifactSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceTypes = "SourceTypes"
        case sourceUri = "SourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceTypes = sourceTypes {
            var sourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceTypes)
            for artifactsourcetypes0 in sourceTypes {
                try sourceTypesContainer.encode(artifactsourcetypes0)
            }
        }
        if let sourceUri = sourceUri {
            try encodeContainer.encode(sourceUri, forKey: .sourceUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUri)
        sourceUri = sourceUriDecoded
        let sourceTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ArtifactSourceType?].self, forKey: .sourceTypes)
        var sourceTypesDecoded0:[SageMakerClientTypes.ArtifactSourceType]? = nil
        if let sourceTypesContainer = sourceTypesContainer {
            sourceTypesDecoded0 = [SageMakerClientTypes.ArtifactSourceType]()
            for structure0 in sourceTypesContainer {
                if let structure0 = structure0 {
                    sourceTypesDecoded0?.append(structure0)
                }
            }
        }
        sourceTypes = sourceTypesDecoded0
    }
}

extension SageMakerClientTypes {
    /// A structure describing the source of an artifact.
    public struct ArtifactSource: Swift.Equatable {
        /// A list of source types.
        public var sourceTypes: [SageMakerClientTypes.ArtifactSourceType]?
        /// The URI of the source.
        /// This member is required.
        public var sourceUri: Swift.String?

        public init (
            sourceTypes: [SageMakerClientTypes.ArtifactSourceType]? = nil,
            sourceUri: Swift.String? = nil
        )
        {
            self.sourceTypes = sourceTypes
            self.sourceUri = sourceUri
        }
    }

}

extension SageMakerClientTypes {
    public enum ArtifactSourceIdType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case custom
        case md5Hash
        case s3Etag
        case s3Version
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactSourceIdType] {
            return [
                .custom,
                .md5Hash,
                .s3Etag,
                .s3Version,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .custom: return "Custom"
            case .md5Hash: return "MD5Hash"
            case .s3Etag: return "S3ETag"
            case .s3Version: return "S3Version"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArtifactSourceIdType(rawValue: rawValue) ?? ArtifactSourceIdType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ArtifactSourceType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceIdType = "SourceIdType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceIdType = sourceIdType {
            try encodeContainer.encode(sourceIdType.rawValue, forKey: .sourceIdType)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIdTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ArtifactSourceIdType.self, forKey: .sourceIdType)
        sourceIdType = sourceIdTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// The ID and ID type of an artifact source.
    public struct ArtifactSourceType: Swift.Equatable {
        /// The type of ID.
        /// This member is required.
        public var sourceIdType: SageMakerClientTypes.ArtifactSourceIdType?
        /// The ID.
        /// This member is required.
        public var value: Swift.String?

        public init (
            sourceIdType: SageMakerClientTypes.ArtifactSourceIdType? = nil,
            value: Swift.String? = nil
        )
        {
            self.sourceIdType = sourceIdType
            self.value = value
        }
    }

}

extension SageMakerClientTypes.ArtifactSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
        case artifactName = "ArtifactName"
        case artifactType = "ArtifactType"
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactArn = artifactArn {
            try encodeContainer.encode(artifactArn, forKey: .artifactArn)
        }
        if let artifactName = artifactName {
            try encodeContainer.encode(artifactName, forKey: .artifactName)
        }
        if let artifactType = artifactType {
            try encodeContainer.encode(artifactType, forKey: .artifactType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactArn)
        artifactArn = artifactArnDecoded
        let artifactNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactName)
        artifactName = artifactNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ArtifactSource.self, forKey: .source)
        source = sourceDecoded
        let artifactTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactType)
        artifactType = artifactTypeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of an artifact. An artifact represents a URI addressable object or data. Some examples are a dataset and a model.
    public struct ArtifactSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the artifact.
        public var artifactArn: Swift.String?
        /// The name of the artifact.
        public var artifactName: Swift.String?
        /// The type of the artifact.
        public var artifactType: Swift.String?
        /// When the artifact was created.
        public var creationTime: ClientRuntime.Date?
        /// When the artifact was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The source of the artifact.
        public var source: SageMakerClientTypes.ArtifactSource?

        public init (
            artifactArn: Swift.String? = nil,
            artifactName: Swift.String? = nil,
            artifactType: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            source: SageMakerClientTypes.ArtifactSource? = nil
        )
        {
            self.artifactArn = artifactArn
            self.artifactName = artifactName
            self.artifactType = artifactType
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.source = source
        }
    }

}

extension SageMakerClientTypes {
    public enum AssemblyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case line
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AssemblyType] {
            return [
                .line,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .line: return "Line"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AssemblyType(rawValue: rawValue) ?? AssemblyType.sdkUnknown(rawValue)
        }
    }
}

extension AssociateTrialComponentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentName = "TrialComponentName"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }
}

extension AssociateTrialComponentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateTrialComponentInput: Swift.Equatable {
    /// The name of the component to associated with the trial.
    /// This member is required.
    public var trialComponentName: Swift.String?
    /// The name of the trial to associate with.
    /// This member is required.
    public var trialName: Swift.String?

    public init (
        trialComponentName: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.trialComponentName = trialComponentName
        self.trialName = trialName
    }
}

struct AssociateTrialComponentInputBody: Swift.Equatable {
    let trialComponentName: Swift.String?
    let trialName: Swift.String?
}

extension AssociateTrialComponentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentName = "TrialComponentName"
        case trialName = "TrialName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
    }
}

extension AssociateTrialComponentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateTrialComponentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateTrialComponentOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateTrialComponentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateTrialComponentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trialArn = output.trialArn
            self.trialComponentArn = output.trialComponentArn
        } else {
            self.trialArn = nil
            self.trialComponentArn = nil
        }
    }
}

public struct AssociateTrialComponentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?
    /// The ARN of the trial component.
    public var trialComponentArn: Swift.String?

    public init (
        trialArn: Swift.String? = nil,
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
        self.trialComponentArn = trialComponentArn
    }
}

struct AssociateTrialComponentOutputResponseBody: Swift.Equatable {
    let trialComponentArn: Swift.String?
    let trialArn: Swift.String?
}

extension AssociateTrialComponentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialArn = "TrialArn"
        case trialComponentArn = "TrialComponentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
        let trialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialArn)
        trialArn = trialArnDecoded
    }
}

extension SageMakerClientTypes {
    public enum AssociationEdgeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case associatedWith
        case contributedTo
        case derivedFrom
        case produced
        case sdkUnknown(Swift.String)

        public static var allCases: [AssociationEdgeType] {
            return [
                .associatedWith,
                .contributedTo,
                .derivedFrom,
                .produced,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .associatedWith: return "AssociatedWith"
            case .contributedTo: return "ContributedTo"
            case .derivedFrom: return "DerivedFrom"
            case .produced: return "Produced"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AssociationEdgeType(rawValue: rawValue) ?? AssociationEdgeType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.AssociationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationType = "AssociationType"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case destinationArn = "DestinationArn"
        case destinationName = "DestinationName"
        case destinationType = "DestinationType"
        case sourceArn = "SourceArn"
        case sourceName = "SourceName"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationType = associationType {
            try encodeContainer.encode(associationType.rawValue, forKey: .associationType)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let destinationName = destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let destinationType = destinationType {
            try encodeContainer.encode(destinationType, forKey: .destinationType)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let sourceName = sourceName {
            try encodeContainer.encode(sourceName, forKey: .sourceName)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let associationTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AssociationEdgeType.self, forKey: .associationType)
        associationType = associationTypeDecoded
        let sourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceName)
        sourceName = sourceNameDecoded
        let destinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of an association. An association is an entity that links other lineage or experiment entities. An example would be an association between a training job and a model.
    public struct AssociationSummary: Swift.Equatable {
        /// The type of the association.
        public var associationType: SageMakerClientTypes.AssociationEdgeType?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the association was created.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the destination.
        public var destinationArn: Swift.String?
        /// The name of the destination.
        public var destinationName: Swift.String?
        /// The destination type.
        public var destinationType: Swift.String?
        /// The ARN of the source.
        public var sourceArn: Swift.String?
        /// The name of the source.
        public var sourceName: Swift.String?
        /// The source type.
        public var sourceType: Swift.String?

        public init (
            associationType: SageMakerClientTypes.AssociationEdgeType? = nil,
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            destinationArn: Swift.String? = nil,
            destinationName: Swift.String? = nil,
            destinationType: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            sourceName: Swift.String? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.associationType = associationType
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.destinationArn = destinationArn
            self.destinationName = destinationName
            self.destinationType = destinationType
            self.sourceArn = sourceArn
            self.sourceName = sourceName
            self.sourceType = sourceType
        }
    }

}

extension SageMakerClientTypes.AsyncInferenceClientConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxConcurrentInvocationsPerInstance = "MaxConcurrentInvocationsPerInstance"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxConcurrentInvocationsPerInstance = maxConcurrentInvocationsPerInstance {
            try encodeContainer.encode(maxConcurrentInvocationsPerInstance, forKey: .maxConcurrentInvocationsPerInstance)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxConcurrentInvocationsPerInstanceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentInvocationsPerInstance)
        maxConcurrentInvocationsPerInstance = maxConcurrentInvocationsPerInstanceDecoded
    }
}

extension SageMakerClientTypes {
    /// Configures the behavior of the client used by Amazon SageMaker to interact with the model container during asynchronous inference.
    public struct AsyncInferenceClientConfig: Swift.Equatable {
        /// The maximum number of concurrent requests sent by the SageMaker client to the model container. If no value is provided, Amazon SageMaker will choose an optimal value for you.
        public var maxConcurrentInvocationsPerInstance: Swift.Int?

        public init (
            maxConcurrentInvocationsPerInstance: Swift.Int? = nil
        )
        {
            self.maxConcurrentInvocationsPerInstance = maxConcurrentInvocationsPerInstance
        }
    }

}

extension SageMakerClientTypes.AsyncInferenceConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientConfig = "ClientConfig"
        case outputConfig = "OutputConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientConfig = clientConfig {
            try encodeContainer.encode(clientConfig, forKey: .clientConfig)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AsyncInferenceClientConfig.self, forKey: .clientConfig)
        clientConfig = clientConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AsyncInferenceOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies configuration for how an endpoint performs asynchronous inference.
    public struct AsyncInferenceConfig: Swift.Equatable {
        /// Configures the behavior of the client used by Amazon SageMaker to interact with the model container during asynchronous inference.
        public var clientConfig: SageMakerClientTypes.AsyncInferenceClientConfig?
        /// Specifies the configuration for asynchronous inference invocation outputs.
        /// This member is required.
        public var outputConfig: SageMakerClientTypes.AsyncInferenceOutputConfig?

        public init (
            clientConfig: SageMakerClientTypes.AsyncInferenceClientConfig? = nil,
            outputConfig: SageMakerClientTypes.AsyncInferenceOutputConfig? = nil
        )
        {
            self.clientConfig = clientConfig
            self.outputConfig = outputConfig
        }
    }

}

extension SageMakerClientTypes.AsyncInferenceNotificationConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorTopic = "ErrorTopic"
        case successTopic = "SuccessTopic"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorTopic = errorTopic {
            try encodeContainer.encode(errorTopic, forKey: .errorTopic)
        }
        if let successTopic = successTopic {
            try encodeContainer.encode(successTopic, forKey: .successTopic)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successTopic)
        successTopic = successTopicDecoded
        let errorTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorTopic)
        errorTopic = errorTopicDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the configuration for notifications of inference results for asynchronous inference.
    public struct AsyncInferenceNotificationConfig: Swift.Equatable {
        /// Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.
        public var errorTopic: Swift.String?
        /// Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.
        public var successTopic: Swift.String?

        public init (
            errorTopic: Swift.String? = nil,
            successTopic: Swift.String? = nil
        )
        {
            self.errorTopic = errorTopic
            self.successTopic = successTopic
        }
    }

}

extension SageMakerClientTypes.AsyncInferenceOutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case notificationConfig = "NotificationConfig"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let notificationConfig = notificationConfig {
            try encodeContainer.encode(notificationConfig, forKey: .notificationConfig)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let notificationConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AsyncInferenceNotificationConfig.self, forKey: .notificationConfig)
        notificationConfig = notificationConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the configuration for asynchronous inference invocation outputs.
    public struct AsyncInferenceOutputConfig: Swift.Equatable {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the asynchronous inference output in Amazon S3.
        public var kmsKeyId: Swift.String?
        /// Specifies the configuration for notifications of inference results for asynchronous inference.
        public var notificationConfig: SageMakerClientTypes.AsyncInferenceNotificationConfig?
        /// The Amazon S3 location to upload inference responses to.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            notificationConfig: SageMakerClientTypes.AsyncInferenceNotificationConfig? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.notificationConfig = notificationConfig
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes.AthenaDatasetDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalog = "Catalog"
        case database = "Database"
        case kmsKeyId = "KmsKeyId"
        case outputCompression = "OutputCompression"
        case outputFormat = "OutputFormat"
        case outputS3Uri = "OutputS3Uri"
        case queryString = "QueryString"
        case workGroup = "WorkGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalog = catalog {
            try encodeContainer.encode(catalog, forKey: .catalog)
        }
        if let database = database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let outputCompression = outputCompression {
            try encodeContainer.encode(outputCompression.rawValue, forKey: .outputCompression)
        }
        if let outputFormat = outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let outputS3Uri = outputS3Uri {
            try encodeContainer.encode(outputS3Uri, forKey: .outputS3Uri)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let workGroup = workGroup {
            try encodeContainer.encode(workGroup, forKey: .workGroup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalog)
        catalog = catalogDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .database)
        database = databaseDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let workGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workGroup)
        workGroup = workGroupDecoded
        let outputS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Uri)
        outputS3Uri = outputS3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AthenaResultFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let outputCompressionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AthenaResultCompressionType.self, forKey: .outputCompression)
        outputCompression = outputCompressionDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for Athena Dataset Definition input.
    public struct AthenaDatasetDefinition: Swift.Equatable {
        /// The name of the data catalog used in Athena query execution.
        /// This member is required.
        public var catalog: Swift.String?
        /// The name of the database used in the Athena query execution.
        /// This member is required.
        public var database: Swift.String?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data generated from an Athena query execution.
        public var kmsKeyId: Swift.String?
        /// The compression used for Athena query results.
        public var outputCompression: SageMakerClientTypes.AthenaResultCompressionType?
        /// The data storage format for Athena query results.
        /// This member is required.
        public var outputFormat: SageMakerClientTypes.AthenaResultFormat?
        /// The location in Amazon S3 where Athena query results are stored.
        /// This member is required.
        public var outputS3Uri: Swift.String?
        /// The SQL query statements, to be executed.
        /// This member is required.
        public var queryString: Swift.String?
        /// The name of the workgroup in which the Athena query is being started.
        public var workGroup: Swift.String?

        public init (
            catalog: Swift.String? = nil,
            database: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            outputCompression: SageMakerClientTypes.AthenaResultCompressionType? = nil,
            outputFormat: SageMakerClientTypes.AthenaResultFormat? = nil,
            outputS3Uri: Swift.String? = nil,
            queryString: Swift.String? = nil,
            workGroup: Swift.String? = nil
        )
        {
            self.catalog = catalog
            self.database = database
            self.kmsKeyId = kmsKeyId
            self.outputCompression = outputCompression
            self.outputFormat = outputFormat
            self.outputS3Uri = outputS3Uri
            self.queryString = queryString
            self.workGroup = workGroup
        }
    }

}

extension SageMakerClientTypes {
    /// The compression used for Athena query results.
    public enum AthenaResultCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gzip
        case snappy
        case zlib
        case sdkUnknown(Swift.String)

        public static var allCases: [AthenaResultCompressionType] {
            return [
                .gzip,
                .snappy,
                .zlib,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .snappy: return "SNAPPY"
            case .zlib: return "ZLIB"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AthenaResultCompressionType(rawValue: rawValue) ?? AthenaResultCompressionType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    /// The data storage format for Athena query results.
    public enum AthenaResultFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case avro
        case json
        case orc
        case parquet
        case textfile
        case sdkUnknown(Swift.String)

        public static var allCases: [AthenaResultFormat] {
            return [
                .avro,
                .json,
                .orc,
                .parquet,
                .textfile,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .avro: return "AVRO"
            case .json: return "JSON"
            case .orc: return "ORC"
            case .parquet: return "PARQUET"
            case .textfile: return "TEXTFILE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AthenaResultFormat(rawValue: rawValue) ?? AthenaResultFormat.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum AuthMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case iam
        case sso
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthMode] {
            return [
                .iam,
                .sso,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .iam: return "IAM"
            case .sso: return "SSO"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthMode(rawValue: rawValue) ?? AuthMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.AutoMLCandidate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case candidateName = "CandidateName"
        case candidateProperties = "CandidateProperties"
        case candidateStatus = "CandidateStatus"
        case candidateSteps = "CandidateSteps"
        case creationTime = "CreationTime"
        case endTime = "EndTime"
        case failureReason = "FailureReason"
        case finalAutoMLJobObjectiveMetric = "FinalAutoMLJobObjectiveMetric"
        case inferenceContainers = "InferenceContainers"
        case lastModifiedTime = "LastModifiedTime"
        case objectiveStatus = "ObjectiveStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let candidateName = candidateName {
            try encodeContainer.encode(candidateName, forKey: .candidateName)
        }
        if let candidateProperties = candidateProperties {
            try encodeContainer.encode(candidateProperties, forKey: .candidateProperties)
        }
        if let candidateStatus = candidateStatus {
            try encodeContainer.encode(candidateStatus.rawValue, forKey: .candidateStatus)
        }
        if let candidateSteps = candidateSteps {
            var candidateStepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .candidateSteps)
            for candidatesteps0 in candidateSteps {
                try candidateStepsContainer.encode(candidatesteps0)
            }
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let finalAutoMLJobObjectiveMetric = finalAutoMLJobObjectiveMetric {
            try encodeContainer.encode(finalAutoMLJobObjectiveMetric, forKey: .finalAutoMLJobObjectiveMetric)
        }
        if let inferenceContainers = inferenceContainers {
            var inferenceContainersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inferenceContainers)
            for automlcontainerdefinitions0 in inferenceContainers {
                try inferenceContainersContainer.encode(automlcontainerdefinitions0)
            }
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let objectiveStatus = objectiveStatus {
            try encodeContainer.encode(objectiveStatus.rawValue, forKey: .objectiveStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let candidateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .candidateName)
        candidateName = candidateNameDecoded
        let finalAutoMLJobObjectiveMetricDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FinalAutoMLJobObjectiveMetric.self, forKey: .finalAutoMLJobObjectiveMetric)
        finalAutoMLJobObjectiveMetric = finalAutoMLJobObjectiveMetricDecoded
        let objectiveStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ObjectiveStatus.self, forKey: .objectiveStatus)
        objectiveStatus = objectiveStatusDecoded
        let candidateStepsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AutoMLCandidateStep?].self, forKey: .candidateSteps)
        var candidateStepsDecoded0:[SageMakerClientTypes.AutoMLCandidateStep]? = nil
        if let candidateStepsContainer = candidateStepsContainer {
            candidateStepsDecoded0 = [SageMakerClientTypes.AutoMLCandidateStep]()
            for structure0 in candidateStepsContainer {
                if let structure0 = structure0 {
                    candidateStepsDecoded0?.append(structure0)
                }
            }
        }
        candidateSteps = candidateStepsDecoded0
        let candidateStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CandidateStatus.self, forKey: .candidateStatus)
        candidateStatus = candidateStatusDecoded
        let inferenceContainersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AutoMLContainerDefinition?].self, forKey: .inferenceContainers)
        var inferenceContainersDecoded0:[SageMakerClientTypes.AutoMLContainerDefinition]? = nil
        if let inferenceContainersContainer = inferenceContainersContainer {
            inferenceContainersDecoded0 = [SageMakerClientTypes.AutoMLContainerDefinition]()
            for structure0 in inferenceContainersContainer {
                if let structure0 = structure0 {
                    inferenceContainersDecoded0?.append(structure0)
                }
            }
        }
        inferenceContainers = inferenceContainersDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let candidatePropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CandidateProperties.self, forKey: .candidateProperties)
        candidateProperties = candidatePropertiesDecoded
    }
}

extension SageMakerClientTypes {
    /// Information about a candidate produced by an AutoML training job, including its status, steps, and other properties.
    public struct AutoMLCandidate: Swift.Equatable {
        /// The name of the candidate.
        /// This member is required.
        public var candidateName: Swift.String?
        /// The properties of an AutoML candidate job.
        public var candidateProperties: SageMakerClientTypes.CandidateProperties?
        /// The candidate's status.
        /// This member is required.
        public var candidateStatus: SageMakerClientTypes.CandidateStatus?
        /// Information about the candidate's steps.
        /// This member is required.
        public var candidateSteps: [SageMakerClientTypes.AutoMLCandidateStep]?
        /// The creation time.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The end time.
        public var endTime: ClientRuntime.Date?
        /// The failure reason.
        public var failureReason: Swift.String?
        /// The best candidate result from an AutoML training job.
        public var finalAutoMLJobObjectiveMetric: SageMakerClientTypes.FinalAutoMLJobObjectiveMetric?
        /// Information about the inference container definitions.
        public var inferenceContainers: [SageMakerClientTypes.AutoMLContainerDefinition]?
        /// The last modified time.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The objective's status.
        /// This member is required.
        public var objectiveStatus: SageMakerClientTypes.ObjectiveStatus?

        public init (
            candidateName: Swift.String? = nil,
            candidateProperties: SageMakerClientTypes.CandidateProperties? = nil,
            candidateStatus: SageMakerClientTypes.CandidateStatus? = nil,
            candidateSteps: [SageMakerClientTypes.AutoMLCandidateStep]? = nil,
            creationTime: ClientRuntime.Date? = nil,
            endTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            finalAutoMLJobObjectiveMetric: SageMakerClientTypes.FinalAutoMLJobObjectiveMetric? = nil,
            inferenceContainers: [SageMakerClientTypes.AutoMLContainerDefinition]? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            objectiveStatus: SageMakerClientTypes.ObjectiveStatus? = nil
        )
        {
            self.candidateName = candidateName
            self.candidateProperties = candidateProperties
            self.candidateStatus = candidateStatus
            self.candidateSteps = candidateSteps
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureReason = failureReason
            self.finalAutoMLJobObjectiveMetric = finalAutoMLJobObjectiveMetric
            self.inferenceContainers = inferenceContainers
            self.lastModifiedTime = lastModifiedTime
            self.objectiveStatus = objectiveStatus
        }
    }

}

extension SageMakerClientTypes.AutoMLCandidateStep: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case candidateStepArn = "CandidateStepArn"
        case candidateStepName = "CandidateStepName"
        case candidateStepType = "CandidateStepType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let candidateStepArn = candidateStepArn {
            try encodeContainer.encode(candidateStepArn, forKey: .candidateStepArn)
        }
        if let candidateStepName = candidateStepName {
            try encodeContainer.encode(candidateStepName, forKey: .candidateStepName)
        }
        if let candidateStepType = candidateStepType {
            try encodeContainer.encode(candidateStepType.rawValue, forKey: .candidateStepType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let candidateStepTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CandidateStepType.self, forKey: .candidateStepType)
        candidateStepType = candidateStepTypeDecoded
        let candidateStepArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .candidateStepArn)
        candidateStepArn = candidateStepArnDecoded
        let candidateStepNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .candidateStepName)
        candidateStepName = candidateStepNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Information about the steps for a candidate and what step it is working on.
    public struct AutoMLCandidateStep: Swift.Equatable {
        /// The ARN for the candidate's step.
        /// This member is required.
        public var candidateStepArn: Swift.String?
        /// The name for the candidate's step.
        /// This member is required.
        public var candidateStepName: Swift.String?
        /// Whether the candidate is at the transform, training, or processing step.
        /// This member is required.
        public var candidateStepType: SageMakerClientTypes.CandidateStepType?

        public init (
            candidateStepArn: Swift.String? = nil,
            candidateStepName: Swift.String? = nil,
            candidateStepType: SageMakerClientTypes.CandidateStepType? = nil
        )
        {
            self.candidateStepArn = candidateStepArn
            self.candidateStepName = candidateStepName
            self.candidateStepType = candidateStepType
        }
    }

}

extension SageMakerClientTypes.AutoMLChannel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compressionType = "CompressionType"
        case dataSource = "DataSource"
        case targetAttributeName = "TargetAttributeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compressionType = compressionType {
            try encodeContainer.encode(compressionType.rawValue, forKey: .compressionType)
        }
        if let dataSource = dataSource {
            try encodeContainer.encode(dataSource, forKey: .dataSource)
        }
        if let targetAttributeName = targetAttributeName {
            try encodeContainer.encode(targetAttributeName, forKey: .targetAttributeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLDataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let compressionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CompressionType.self, forKey: .compressionType)
        compressionType = compressionTypeDecoded
        let targetAttributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetAttributeName)
        targetAttributeName = targetAttributeNameDecoded
    }
}

extension SageMakerClientTypes {
    /// A channel is a named input source that training algorithms can consume. For more information, see .
    public struct AutoMLChannel: Swift.Equatable {
        /// You can use Gzip or None. The default value is None.
        public var compressionType: SageMakerClientTypes.CompressionType?
        /// The data source for an AutoML channel.
        /// This member is required.
        public var dataSource: SageMakerClientTypes.AutoMLDataSource?
        /// The name of the target variable in supervised learning, usually represented by 'y'.
        /// This member is required.
        public var targetAttributeName: Swift.String?

        public init (
            compressionType: SageMakerClientTypes.CompressionType? = nil,
            dataSource: SageMakerClientTypes.AutoMLDataSource? = nil,
            targetAttributeName: Swift.String? = nil
        )
        {
            self.compressionType = compressionType
            self.dataSource = dataSource
            self.targetAttributeName = targetAttributeName
        }
    }

}

extension SageMakerClientTypes.AutoMLContainerDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environment = "Environment"
        case image = "Image"
        case modelDataUrl = "ModelDataUrl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, environmentmap0) in environment {
                try environmentContainer.encode(environmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let modelDataUrl = modelDataUrl {
            try encodeContainer.encode(modelDataUrl, forKey: .modelDataUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let modelDataUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelDataUrl)
        modelDataUrl = modelDataUrlDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, environmentvalue0) in environmentContainer {
                if let environmentvalue0 = environmentvalue0 {
                    environmentDecoded0?[key0] = environmentvalue0
                }
            }
        }
        environment = environmentDecoded0
    }
}

extension SageMakerClientTypes {
    /// A list of container definitions that describe the different containers that make up an AutoML candidate. For more information, see .
    public struct AutoMLContainerDefinition: Swift.Equatable {
        /// The environment variables to set in the container. For more information, see .
        public var environment: [Swift.String:Swift.String]?
        /// The Amazon Elastic Container Registry (Amazon ECR) path of the container. For more information, see .
        /// This member is required.
        public var image: Swift.String?
        /// The location of the model artifacts. For more information, see .
        /// This member is required.
        public var modelDataUrl: Swift.String?

        public init (
            environment: [Swift.String:Swift.String]? = nil,
            image: Swift.String? = nil,
            modelDataUrl: Swift.String? = nil
        )
        {
            self.environment = environment
            self.image = image
            self.modelDataUrl = modelDataUrl
        }
    }

}

extension SageMakerClientTypes.AutoMLDataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3DataSource = "S3DataSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3DataSource = s3DataSource {
            try encodeContainer.encode(s3DataSource, forKey: .s3DataSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3DataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLS3DataSource.self, forKey: .s3DataSource)
        s3DataSource = s3DataSourceDecoded
    }
}

extension SageMakerClientTypes {
    /// The data source for the Autopilot job.
    public struct AutoMLDataSource: Swift.Equatable {
        /// The Amazon S3 location of the input data. The input data must be in CSV format and contain at least 500 rows.
        /// This member is required.
        public var s3DataSource: SageMakerClientTypes.AutoMLS3DataSource?

        public init (
            s3DataSource: SageMakerClientTypes.AutoMLS3DataSource? = nil
        )
        {
            self.s3DataSource = s3DataSource
        }
    }

}

extension SageMakerClientTypes.AutoMLJobArtifacts: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case candidateDefinitionNotebookLocation = "CandidateDefinitionNotebookLocation"
        case dataExplorationNotebookLocation = "DataExplorationNotebookLocation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let candidateDefinitionNotebookLocation = candidateDefinitionNotebookLocation {
            try encodeContainer.encode(candidateDefinitionNotebookLocation, forKey: .candidateDefinitionNotebookLocation)
        }
        if let dataExplorationNotebookLocation = dataExplorationNotebookLocation {
            try encodeContainer.encode(dataExplorationNotebookLocation, forKey: .dataExplorationNotebookLocation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let candidateDefinitionNotebookLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .candidateDefinitionNotebookLocation)
        candidateDefinitionNotebookLocation = candidateDefinitionNotebookLocationDecoded
        let dataExplorationNotebookLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataExplorationNotebookLocation)
        dataExplorationNotebookLocation = dataExplorationNotebookLocationDecoded
    }
}

extension SageMakerClientTypes {
    /// The artifacts that are generated during an AutoML job.
    public struct AutoMLJobArtifacts: Swift.Equatable {
        /// The URL of the notebook location.
        public var candidateDefinitionNotebookLocation: Swift.String?
        /// The URL of the notebook location.
        public var dataExplorationNotebookLocation: Swift.String?

        public init (
            candidateDefinitionNotebookLocation: Swift.String? = nil,
            dataExplorationNotebookLocation: Swift.String? = nil
        )
        {
            self.candidateDefinitionNotebookLocation = candidateDefinitionNotebookLocation
            self.dataExplorationNotebookLocation = dataExplorationNotebookLocation
        }
    }

}

extension SageMakerClientTypes.AutoMLJobCompletionCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxAutoMLJobRuntimeInSeconds = "MaxAutoMLJobRuntimeInSeconds"
        case maxCandidates = "MaxCandidates"
        case maxRuntimePerTrainingJobInSeconds = "MaxRuntimePerTrainingJobInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxAutoMLJobRuntimeInSeconds = maxAutoMLJobRuntimeInSeconds {
            try encodeContainer.encode(maxAutoMLJobRuntimeInSeconds, forKey: .maxAutoMLJobRuntimeInSeconds)
        }
        if let maxCandidates = maxCandidates {
            try encodeContainer.encode(maxCandidates, forKey: .maxCandidates)
        }
        if let maxRuntimePerTrainingJobInSeconds = maxRuntimePerTrainingJobInSeconds {
            try encodeContainer.encode(maxRuntimePerTrainingJobInSeconds, forKey: .maxRuntimePerTrainingJobInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxCandidatesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCandidates)
        maxCandidates = maxCandidatesDecoded
        let maxRuntimePerTrainingJobInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRuntimePerTrainingJobInSeconds)
        maxRuntimePerTrainingJobInSeconds = maxRuntimePerTrainingJobInSecondsDecoded
        let maxAutoMLJobRuntimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAutoMLJobRuntimeInSeconds)
        maxAutoMLJobRuntimeInSeconds = maxAutoMLJobRuntimeInSecondsDecoded
    }
}

extension SageMakerClientTypes {
    /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
    public struct AutoMLJobCompletionCriteria: Swift.Equatable {
        /// The maximum runtime, in seconds, an AutoML job has to complete. If an AutoML job exceeds the maximum runtime, the job is stopped automatically and its processing is ended gracefully. The AutoML job identifies the best model whose training was completed and marks it as the best-performing model. Any unfinished steps of the job, such as automatic one-click Autopilot model deployment, will not be completed.
        public var maxAutoMLJobRuntimeInSeconds: Swift.Int?
        /// The maximum number of times a training job is allowed to run.
        public var maxCandidates: Swift.Int?
        /// The maximum time, in seconds, that each training job is allowed to run as part of a hyperparameter tuning job. For more information, see the used by the action.
        public var maxRuntimePerTrainingJobInSeconds: Swift.Int?

        public init (
            maxAutoMLJobRuntimeInSeconds: Swift.Int? = nil,
            maxCandidates: Swift.Int? = nil,
            maxRuntimePerTrainingJobInSeconds: Swift.Int? = nil
        )
        {
            self.maxAutoMLJobRuntimeInSeconds = maxAutoMLJobRuntimeInSeconds
            self.maxCandidates = maxCandidates
            self.maxRuntimePerTrainingJobInSeconds = maxRuntimePerTrainingJobInSeconds
        }
    }

}

extension SageMakerClientTypes.AutoMLJobConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionCriteria = "CompletionCriteria"
        case securityConfig = "SecurityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionCriteria = completionCriteria {
            try encodeContainer.encode(completionCriteria, forKey: .completionCriteria)
        }
        if let securityConfig = securityConfig {
            try encodeContainer.encode(securityConfig, forKey: .securityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let completionCriteriaDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobCompletionCriteria.self, forKey: .completionCriteria)
        completionCriteria = completionCriteriaDecoded
        let securityConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLSecurityConfig.self, forKey: .securityConfig)
        securityConfig = securityConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// A collection of settings used for an AutoML job.
    public struct AutoMLJobConfig: Swift.Equatable {
        /// How long an AutoML job is allowed to run, or how many candidates a job is allowed to generate.
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?
        /// The security configuration for traffic encryption or Amazon VPC settings.
        public var securityConfig: SageMakerClientTypes.AutoMLSecurityConfig?

        public init (
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil,
            securityConfig: SageMakerClientTypes.AutoMLSecurityConfig? = nil
        )
        {
            self.completionCriteria = completionCriteria
            self.securityConfig = securityConfig
        }
    }

}

extension SageMakerClientTypes.AutoMLJobObjective: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLMetricEnum.self, forKey: .metricName)
        metricName = metricNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies a metric to minimize or maximize as the objective of a job.
    public struct AutoMLJobObjective: Swift.Equatable {
        /// The name of the objective metric used to measure the predictive quality of a machine learning system. This metric is optimized during training to provide the best estimate for model parameter values from data. Here are the options:
        ///
        /// * MSE: The mean squared error (MSE) is the average of the squared differences between the predicted and actual values. It is used for regression. MSE values are always positive: the better a model is at predicting the actual values, the smaller the MSE value is. When the data contains outliers, they tend to dominate the MSE, which might cause subpar prediction performance.
        ///
        /// * Accuracy: The ratio of the number of correctly classified items to the total number of (correctly and incorrectly) classified items. It is used for binary and multiclass classification. It measures how close the predicted class values are to the actual values. Accuracy values vary between zero and one: one indicates perfect accuracy and zero indicates perfect inaccuracy.
        ///
        /// * F1: The F1 score is the harmonic mean of the precision and recall. It is used for binary classification into classes traditionally referred to as positive and negative. Predictions are said to be true when they match their actual (correct) class and false when they do not. Precision is the ratio of the true positive predictions to all positive predictions (including the false positives) in a data set and measures the quality of the prediction when it predicts the positive class. Recall (or sensitivity) is the ratio of the true positive predictions to all actual positive instances and measures how completely a model predicts the actual class members in a data set. The standard F1 score weighs precision and recall equally. But which metric is paramount typically depends on specific aspects of a problem. F1 scores vary between zero and one: one indicates the best possible performance and zero the worst.
        ///
        /// * AUC: The area under the curve (AUC) metric is used to compare and evaluate binary classification by algorithms such as logistic regression that return probabilities. A threshold is needed to map the probabilities into classifications. The relevant curve is the receiver operating characteristic curve that plots the true positive rate (TPR) of predictions (or recall) against the false positive rate (FPR) as a function of the threshold value, above which a prediction is considered positive. Increasing the threshold results in fewer false positives but more false negatives. AUC is the area under this receiver operating characteristic curve and so provides an aggregated measure of the model performance across all possible classification thresholds. The AUC score can also be interpreted as the probability that a randomly selected positive data point is more likely to be predicted positive than a randomly selected negative example. AUC scores vary between zero and one: a score of one indicates perfect accuracy and a score of one half indicates that the prediction is not better than a random classifier. Values under one half predict less accurately than a random predictor. But such consistently bad predictors can simply be inverted to obtain better than random predictors.
        ///
        /// * F1macro: The F1macro score applies F1 scoring to multiclass classification. In this context, you have multiple classes to predict. You just calculate the precision and recall for each class as you did for the positive class in binary classification. Then, use these values to calculate the F1 score for each class and average them to obtain the F1macro score. F1macro scores vary between zero and one: one indicates the best possible performance and zero the worst.
        ///
        ///
        /// If you do not specify a metric explicitly, the default behavior is to automatically use:
        ///
        /// * MSE: for regression.
        ///
        /// * F1: for binary classification
        ///
        /// * Accuracy: for multiclass classification.
        /// This member is required.
        public var metricName: SageMakerClientTypes.AutoMLMetricEnum?

        public init (
            metricName: SageMakerClientTypes.AutoMLMetricEnum? = nil
        )
        {
            self.metricName = metricName
        }
    }

}

extension SageMakerClientTypes {
    public enum AutoMLJobObjectiveType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case maximize
        case minimize
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLJobObjectiveType] {
            return [
                .maximize,
                .minimize,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .maximize: return "Maximize"
            case .minimize: return "Minimize"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoMLJobObjectiveType(rawValue: rawValue) ?? AutoMLJobObjectiveType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum AutoMLJobSecondaryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case analyzingData
        case candidateDefinitionsGenerated
        case completed
        case deployingModel
        case explainabilityError
        case failed
        case featureEngineering
        case generatingExplainabilityReport
        case maxAutoMlJobRuntimeReached
        case maxCandidatesReached
        case modelDeploymentError
        case modelTuning
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLJobSecondaryStatus] {
            return [
                .analyzingData,
                .candidateDefinitionsGenerated,
                .completed,
                .deployingModel,
                .explainabilityError,
                .failed,
                .featureEngineering,
                .generatingExplainabilityReport,
                .maxAutoMlJobRuntimeReached,
                .maxCandidatesReached,
                .modelDeploymentError,
                .modelTuning,
                .starting,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .analyzingData: return "AnalyzingData"
            case .candidateDefinitionsGenerated: return "CandidateDefinitionsGenerated"
            case .completed: return "Completed"
            case .deployingModel: return "DeployingModel"
            case .explainabilityError: return "ExplainabilityError"
            case .failed: return "Failed"
            case .featureEngineering: return "FeatureEngineering"
            case .generatingExplainabilityReport: return "GeneratingExplainabilityReport"
            case .maxAutoMlJobRuntimeReached: return "MaxAutoMLJobRuntimeReached"
            case .maxCandidatesReached: return "MaxCandidatesReached"
            case .modelDeploymentError: return "ModelDeploymentError"
            case .modelTuning: return "ModelTuning"
            case .starting: return "Starting"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoMLJobSecondaryStatus(rawValue: rawValue) ?? AutoMLJobSecondaryStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum AutoMLJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoMLJobStatus(rawValue: rawValue) ?? AutoMLJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.AutoMLJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobArn = "AutoMLJobArn"
        case autoMLJobName = "AutoMLJobName"
        case autoMLJobSecondaryStatus = "AutoMLJobSecondaryStatus"
        case autoMLJobStatus = "AutoMLJobStatus"
        case creationTime = "CreationTime"
        case endTime = "EndTime"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case partialFailureReasons = "PartialFailureReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobArn = autoMLJobArn {
            try encodeContainer.encode(autoMLJobArn, forKey: .autoMLJobArn)
        }
        if let autoMLJobName = autoMLJobName {
            try encodeContainer.encode(autoMLJobName, forKey: .autoMLJobName)
        }
        if let autoMLJobSecondaryStatus = autoMLJobSecondaryStatus {
            try encodeContainer.encode(autoMLJobSecondaryStatus.rawValue, forKey: .autoMLJobSecondaryStatus)
        }
        if let autoMLJobStatus = autoMLJobStatus {
            try encodeContainer.encode(autoMLJobStatus.rawValue, forKey: .autoMLJobStatus)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let partialFailureReasons = partialFailureReasons {
            var partialFailureReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partialFailureReasons)
            for automlpartialfailurereasons0 in partialFailureReasons {
                try partialFailureReasonsContainer.encode(automlpartialfailurereasons0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobName)
        autoMLJobName = autoMLJobNameDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let autoMLJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobStatus.self, forKey: .autoMLJobStatus)
        autoMLJobStatus = autoMLJobStatusDecoded
        let autoMLJobSecondaryStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobSecondaryStatus.self, forKey: .autoMLJobSecondaryStatus)
        autoMLJobSecondaryStatus = autoMLJobSecondaryStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let partialFailureReasonsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AutoMLPartialFailureReason?].self, forKey: .partialFailureReasons)
        var partialFailureReasonsDecoded0:[SageMakerClientTypes.AutoMLPartialFailureReason]? = nil
        if let partialFailureReasonsContainer = partialFailureReasonsContainer {
            partialFailureReasonsDecoded0 = [SageMakerClientTypes.AutoMLPartialFailureReason]()
            for structure0 in partialFailureReasonsContainer {
                if let structure0 = structure0 {
                    partialFailureReasonsDecoded0?.append(structure0)
                }
            }
        }
        partialFailureReasons = partialFailureReasonsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Provides a summary about an AutoML job.
    public struct AutoMLJobSummary: Swift.Equatable {
        /// The ARN of the AutoML job.
        /// This member is required.
        public var autoMLJobArn: Swift.String?
        /// The name of the AutoML job you are requesting.
        /// This member is required.
        public var autoMLJobName: Swift.String?
        /// The secondary status of the AutoML job.
        /// This member is required.
        public var autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus?
        /// The status of the AutoML job.
        /// This member is required.
        public var autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus?
        /// When the AutoML job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The end time of an AutoML job.
        public var endTime: ClientRuntime.Date?
        /// The failure reason of an AutoML job.
        public var failureReason: Swift.String?
        /// When the AutoML job was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The list of reasons for partial failures within an AutoML job.
        public var partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]?

        public init (
            autoMLJobArn: Swift.String? = nil,
            autoMLJobName: Swift.String? = nil,
            autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus? = nil,
            autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus? = nil,
            creationTime: ClientRuntime.Date? = nil,
            endTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]? = nil
        )
        {
            self.autoMLJobArn = autoMLJobArn
            self.autoMLJobName = autoMLJobName
            self.autoMLJobSecondaryStatus = autoMLJobSecondaryStatus
            self.autoMLJobStatus = autoMLJobStatus
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.partialFailureReasons = partialFailureReasons
        }
    }

}

extension SageMakerClientTypes {
    public enum AutoMLMetricEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accuracy
        case auc
        case f1
        case f1Macro
        case mse
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLMetricEnum] {
            return [
                .accuracy,
                .auc,
                .f1,
                .f1Macro,
                .mse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accuracy: return "Accuracy"
            case .auc: return "AUC"
            case .f1: return "F1"
            case .f1Macro: return "F1macro"
            case .mse: return "MSE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoMLMetricEnum(rawValue: rawValue) ?? AutoMLMetricEnum.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.AutoMLOutputDataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
    }
}

extension SageMakerClientTypes {
    /// The output data configuration.
    public struct AutoMLOutputDataConfig: Swift.Equatable {
        /// The Amazon Web Services KMS encryption key ID.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 output path. Must be 128 characters or less.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes.AutoMLPartialFailureReason: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partialFailureMessage = "PartialFailureMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let partialFailureMessage = partialFailureMessage {
            try encodeContainer.encode(partialFailureMessage, forKey: .partialFailureMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partialFailureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partialFailureMessage)
        partialFailureMessage = partialFailureMessageDecoded
    }
}

extension SageMakerClientTypes {
    /// The reason for a partial failure of an AutoML job.
    public struct AutoMLPartialFailureReason: Swift.Equatable {
        /// The message containing the reason for a partial failure of an AutoML job.
        public var partialFailureMessage: Swift.String?

        public init (
            partialFailureMessage: Swift.String? = nil
        )
        {
            self.partialFailureMessage = partialFailureMessage
        }
    }

}

extension SageMakerClientTypes.AutoMLS3DataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3DataType = "S3DataType"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3DataType = s3DataType {
            try encodeContainer.encode(s3DataType.rawValue, forKey: .s3DataType)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3DataTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLS3DataType.self, forKey: .s3DataType)
        s3DataType = s3DataTypeDecoded
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
    }
}

extension SageMakerClientTypes {
    /// The Amazon S3 data source.
    public struct AutoMLS3DataSource: Swift.Equatable {
        /// The data type.
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.AutoMLS3DataType?
        /// The URL to the Amazon S3 data source.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            s3DataType: SageMakerClientTypes.AutoMLS3DataType? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    public enum AutoMLS3DataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case manifestFile
        case s3Prefix
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLS3DataType] {
            return [
                .manifestFile,
                .s3Prefix,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .manifestFile: return "ManifestFile"
            case .s3Prefix: return "S3Prefix"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoMLS3DataType(rawValue: rawValue) ?? AutoMLS3DataType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.AutoMLSecurityConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if let volumeKmsKeyId = volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Security options.
    public struct AutoMLSecurityConfig: Swift.Equatable {
        /// Whether to use traffic encryption between the container layers.
        public var enableInterContainerTrafficEncryption: Swift.Bool
        /// The key used to encrypt stored data.
        public var volumeKmsKeyId: Swift.String?
        /// The VPC configuration.
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init (
            enableInterContainerTrafficEncryption: Swift.Bool = false,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {
    public enum AutoMLSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLSortBy] {
            return [
                .creationTime,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoMLSortBy(rawValue: rawValue) ?? AutoMLSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum AutoMLSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLSortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoMLSortOrder(rawValue: rawValue) ?? AutoMLSortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.AutoRollbackConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms = "Alarms"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarms = alarms {
            var alarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarms)
            for alarmlist0 in alarms {
                try alarmsContainer.encode(alarmlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Alarm?].self, forKey: .alarms)
        var alarmsDecoded0:[SageMakerClientTypes.Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [SageMakerClientTypes.Alarm]()
            for structure0 in alarmsContainer {
                if let structure0 = structure0 {
                    alarmsDecoded0?.append(structure0)
                }
            }
        }
        alarms = alarmsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Automatic rollback configuration for handling endpoint deployment failures and recovery.
    public struct AutoRollbackConfig: Swift.Equatable {
        /// List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment.
        public var alarms: [SageMakerClientTypes.Alarm]?

        public init (
            alarms: [SageMakerClientTypes.Alarm]? = nil
        )
        {
            self.alarms = alarms
        }
    }

}

extension SageMakerClientTypes {
    public enum AwsManagedHumanLoopRequestSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rekognitionDetectModerationLabelsImageV3
        case textractAnalyzeDocumentFormsV1
        case sdkUnknown(Swift.String)

        public static var allCases: [AwsManagedHumanLoopRequestSource] {
            return [
                .rekognitionDetectModerationLabelsImageV3,
                .textractAnalyzeDocumentFormsV1,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rekognitionDetectModerationLabelsImageV3: return "AWS/Rekognition/DetectModerationLabels/Image/V3"
            case .textractAnalyzeDocumentFormsV1: return "AWS/Textract/AnalyzeDocument/Forms/V1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AwsManagedHumanLoopRequestSource(rawValue: rawValue) ?? AwsManagedHumanLoopRequestSource.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.BatchDescribeModelPackageError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorResponse = "ErrorResponse"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorResponse = errorResponse {
            try encodeContainer.encode(errorResponse, forKey: .errorResponse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorResponseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorResponse)
        errorResponse = errorResponseDecoded
    }
}

extension SageMakerClientTypes {
    /// The error code and error description associated with the resource.
    public struct BatchDescribeModelPackageError: Swift.Equatable {
        ///
        /// This member is required.
        public var errorCode: Swift.String?
        ///
        /// This member is required.
        public var errorResponse: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorResponse: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorResponse = errorResponse
        }
    }

}

extension BatchDescribeModelPackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageArnList = "ModelPackageArnList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelPackageArnList = modelPackageArnList {
            var modelPackageArnListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .modelPackageArnList)
            for modelpackagearnlist0 in modelPackageArnList {
                try modelPackageArnListContainer.encode(modelpackagearnlist0)
            }
        }
    }
}

extension BatchDescribeModelPackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDescribeModelPackageInput: Swift.Equatable {
    /// The list of Amazon Resource Name (ARN) of the model package groups.
    /// This member is required.
    public var modelPackageArnList: [Swift.String]?

    public init (
        modelPackageArnList: [Swift.String]? = nil
    )
    {
        self.modelPackageArnList = modelPackageArnList
    }
}

struct BatchDescribeModelPackageInputBody: Swift.Equatable {
    let modelPackageArnList: [Swift.String]?
}

extension BatchDescribeModelPackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageArnList = "ModelPackageArnList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageArnListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .modelPackageArnList)
        var modelPackageArnListDecoded0:[Swift.String]? = nil
        if let modelPackageArnListContainer = modelPackageArnListContainer {
            modelPackageArnListDecoded0 = [Swift.String]()
            for string0 in modelPackageArnListContainer {
                if let string0 = string0 {
                    modelPackageArnListDecoded0?.append(string0)
                }
            }
        }
        modelPackageArnList = modelPackageArnListDecoded0
    }
}

extension BatchDescribeModelPackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDescribeModelPackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDescribeModelPackageOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDescribeModelPackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDescribeModelPackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchDescribeModelPackageErrorMap = output.batchDescribeModelPackageErrorMap
            self.modelPackageSummaries = output.modelPackageSummaries
        } else {
            self.batchDescribeModelPackageErrorMap = nil
            self.modelPackageSummaries = nil
        }
    }
}

public struct BatchDescribeModelPackageOutputResponse: Swift.Equatable {
    /// A map of the resource and BatchDescribeModelPackageError objects reporting the error associated with describing the model package.
    public var batchDescribeModelPackageErrorMap: [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageError]?
    /// The summaries for the model package versions
    public var modelPackageSummaries: [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageSummary]?

    public init (
        batchDescribeModelPackageErrorMap: [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageError]? = nil,
        modelPackageSummaries: [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageSummary]? = nil
    )
    {
        self.batchDescribeModelPackageErrorMap = batchDescribeModelPackageErrorMap
        self.modelPackageSummaries = modelPackageSummaries
    }
}

struct BatchDescribeModelPackageOutputResponseBody: Swift.Equatable {
    let modelPackageSummaries: [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageSummary]?
    let batchDescribeModelPackageErrorMap: [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageError]?
}

extension BatchDescribeModelPackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchDescribeModelPackageErrorMap = "BatchDescribeModelPackageErrorMap"
        case modelPackageSummaries = "ModelPackageSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageSummariesContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.BatchDescribeModelPackageSummary?].self, forKey: .modelPackageSummaries)
        var modelPackageSummariesDecoded0: [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageSummary]? = nil
        if let modelPackageSummariesContainer = modelPackageSummariesContainer {
            modelPackageSummariesDecoded0 = [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageSummary]()
            for (key0, batchdescribemodelpackagesummary0) in modelPackageSummariesContainer {
                if let batchdescribemodelpackagesummary0 = batchdescribemodelpackagesummary0 {
                    modelPackageSummariesDecoded0?[key0] = batchdescribemodelpackagesummary0
                }
            }
        }
        modelPackageSummaries = modelPackageSummariesDecoded0
        let batchDescribeModelPackageErrorMapContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.BatchDescribeModelPackageError?].self, forKey: .batchDescribeModelPackageErrorMap)
        var batchDescribeModelPackageErrorMapDecoded0: [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageError]? = nil
        if let batchDescribeModelPackageErrorMapContainer = batchDescribeModelPackageErrorMapContainer {
            batchDescribeModelPackageErrorMapDecoded0 = [Swift.String:SageMakerClientTypes.BatchDescribeModelPackageError]()
            for (key0, batchdescribemodelpackageerror0) in batchDescribeModelPackageErrorMapContainer {
                if let batchdescribemodelpackageerror0 = batchdescribemodelpackageerror0 {
                    batchDescribeModelPackageErrorMapDecoded0?[key0] = batchdescribemodelpackageerror0
                }
            }
        }
        batchDescribeModelPackageErrorMap = batchDescribeModelPackageErrorMapDecoded0
    }
}

extension SageMakerClientTypes.BatchDescribeModelPackageSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case inferenceSpecification = "InferenceSpecification"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelPackageArn = "ModelPackageArn"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageStatus = "ModelPackageStatus"
        case modelPackageVersion = "ModelPackageVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let inferenceSpecification = inferenceSpecification {
            try encodeContainer.encode(inferenceSpecification, forKey: .inferenceSpecification)
        }
        if let modelApprovalStatus = modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelPackageArn = modelPackageArn {
            try encodeContainer.encode(modelPackageArn, forKey: .modelPackageArn)
        }
        if let modelPackageDescription = modelPackageDescription {
            try encodeContainer.encode(modelPackageDescription, forKey: .modelPackageDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageStatus = modelPackageStatus {
            try encodeContainer.encode(modelPackageStatus.rawValue, forKey: .modelPackageStatus)
        }
        if let modelPackageVersion = modelPackageVersion {
            try encodeContainer.encode(modelPackageVersion, forKey: .modelPackageVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelPackageVersion)
        modelPackageVersion = modelPackageVersionDecoded
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
        let modelPackageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageDescription)
        modelPackageDescription = modelPackageDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let modelPackageStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageStatus.self, forKey: .modelPackageStatus)
        modelPackageStatus = modelPackageStatusDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about the model package.
    public struct BatchDescribeModelPackageSummary: Swift.Equatable {
        /// The creation time of the mortgage package summary.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// Defines how to perform inference generation after a training job is run.
        /// This member is required.
        public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
        /// The approval status of the model.
        public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
        /// The Amazon Resource Name (ARN) of the model package.
        /// This member is required.
        public var modelPackageArn: Swift.String?
        /// The description of the model package.
        public var modelPackageDescription: Swift.String?
        /// The group name for the model package
        /// This member is required.
        public var modelPackageGroupName: Swift.String?
        /// The status of the mortgage package.
        /// This member is required.
        public var modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
        /// The version number of a versioned model.
        public var modelPackageVersion: Swift.Int?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
            modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
            modelPackageArn: Swift.String? = nil,
            modelPackageDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageStatus: SageMakerClientTypes.ModelPackageStatus? = nil,
            modelPackageVersion: Swift.Int? = nil
        )
        {
            self.creationTime = creationTime
            self.inferenceSpecification = inferenceSpecification
            self.modelApprovalStatus = modelApprovalStatus
            self.modelPackageArn = modelPackageArn
            self.modelPackageDescription = modelPackageDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageStatus = modelPackageStatus
            self.modelPackageVersion = modelPackageVersion
        }
    }

}

extension SageMakerClientTypes {
    public enum BatchStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case multiRecord
        case singleRecord
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchStrategy] {
            return [
                .multiRecord,
                .singleRecord,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .multiRecord: return "MultiRecord"
            case .singleRecord: return "SingleRecord"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchStrategy(rawValue: rawValue) ?? BatchStrategy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.Bias: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case postTrainingReport = "PostTrainingReport"
        case preTrainingReport = "PreTrainingReport"
        case report = "Report"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let postTrainingReport = postTrainingReport {
            try encodeContainer.encode(postTrainingReport, forKey: .postTrainingReport)
        }
        if let preTrainingReport = preTrainingReport {
            try encodeContainer.encode(preTrainingReport, forKey: .preTrainingReport)
        }
        if let report = report {
            try encodeContainer.encode(report, forKey: .report)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .report)
        report = reportDecoded
        let preTrainingReportDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .preTrainingReport)
        preTrainingReport = preTrainingReportDecoded
        let postTrainingReportDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .postTrainingReport)
        postTrainingReport = postTrainingReportDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains bias metrics for a model.
    public struct Bias: Swift.Equatable {
        ///
        public var postTrainingReport: SageMakerClientTypes.MetricsSource?
        ///
        public var preTrainingReport: SageMakerClientTypes.MetricsSource?
        /// The bias report for a model
        public var report: SageMakerClientTypes.MetricsSource?

        public init (
            postTrainingReport: SageMakerClientTypes.MetricsSource? = nil,
            preTrainingReport: SageMakerClientTypes.MetricsSource? = nil,
            report: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.postTrainingReport = postTrainingReport
            self.preTrainingReport = preTrainingReport
            self.report = report
        }
    }

}

extension SageMakerClientTypes.BlueGreenUpdatePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumExecutionTimeoutInSeconds = "MaximumExecutionTimeoutInSeconds"
        case terminationWaitInSeconds = "TerminationWaitInSeconds"
        case trafficRoutingConfiguration = "TrafficRoutingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumExecutionTimeoutInSeconds = maximumExecutionTimeoutInSeconds {
            try encodeContainer.encode(maximumExecutionTimeoutInSeconds, forKey: .maximumExecutionTimeoutInSeconds)
        }
        if let terminationWaitInSeconds = terminationWaitInSeconds {
            try encodeContainer.encode(terminationWaitInSeconds, forKey: .terminationWaitInSeconds)
        }
        if let trafficRoutingConfiguration = trafficRoutingConfiguration {
            try encodeContainer.encode(trafficRoutingConfiguration, forKey: .trafficRoutingConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficRoutingConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrafficRoutingConfig.self, forKey: .trafficRoutingConfiguration)
        trafficRoutingConfiguration = trafficRoutingConfigurationDecoded
        let terminationWaitInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .terminationWaitInSeconds)
        terminationWaitInSeconds = terminationWaitInSecondsDecoded
        let maximumExecutionTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumExecutionTimeoutInSeconds)
        maximumExecutionTimeoutInSeconds = maximumExecutionTimeoutInSecondsDecoded
    }
}

extension SageMakerClientTypes {
    /// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
    public struct BlueGreenUpdatePolicy: Swift.Equatable {
        /// Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in TerminationWaitInSeconds and WaitIntervalInSeconds.
        public var maximumExecutionTimeoutInSeconds: Swift.Int?
        /// Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0.
        public var terminationWaitInSeconds: Swift.Int?
        /// Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment.
        /// This member is required.
        public var trafficRoutingConfiguration: SageMakerClientTypes.TrafficRoutingConfig?

        public init (
            maximumExecutionTimeoutInSeconds: Swift.Int? = nil,
            terminationWaitInSeconds: Swift.Int? = nil,
            trafficRoutingConfiguration: SageMakerClientTypes.TrafficRoutingConfig? = nil
        )
        {
            self.maximumExecutionTimeoutInSeconds = maximumExecutionTimeoutInSeconds
            self.terminationWaitInSeconds = terminationWaitInSeconds
            self.trafficRoutingConfiguration = trafficRoutingConfiguration
        }
    }

}

extension SageMakerClientTypes {
    public enum BooleanOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case and
        case or
        case sdkUnknown(Swift.String)

        public static var allCases: [BooleanOperator] {
            return [
                .and,
                .or,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .and: return "And"
            case .or: return "Or"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BooleanOperator(rawValue: rawValue) ?? BooleanOperator.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.CacheHitResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourcePipelineExecutionArn = "SourcePipelineExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourcePipelineExecutionArn = sourcePipelineExecutionArn {
            try encodeContainer.encode(sourcePipelineExecutionArn, forKey: .sourcePipelineExecutionArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourcePipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePipelineExecutionArn)
        sourcePipelineExecutionArn = sourcePipelineExecutionArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Details on the cache hit of a pipeline execution step.
    public struct CacheHitResult: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the pipeline execution.
        public var sourcePipelineExecutionArn: Swift.String?

        public init (
            sourcePipelineExecutionArn: Swift.String? = nil
        )
        {
            self.sourcePipelineExecutionArn = sourcePipelineExecutionArn
        }
    }

}

extension SageMakerClientTypes.CallbackStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callbackToken = "CallbackToken"
        case outputParameters = "OutputParameters"
        case sqsQueueUrl = "SqsQueueUrl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callbackToken = callbackToken {
            try encodeContainer.encode(callbackToken, forKey: .callbackToken)
        }
        if let outputParameters = outputParameters {
            var outputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputParameters)
            for outputparameterlist0 in outputParameters {
                try outputParametersContainer.encode(outputparameterlist0)
            }
        }
        if let sqsQueueUrl = sqsQueueUrl {
            try encodeContainer.encode(sqsQueueUrl, forKey: .sqsQueueUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callbackTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callbackToken)
        callbackToken = callbackTokenDecoded
        let sqsQueueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sqsQueueUrl)
        sqsQueueUrl = sqsQueueUrlDecoded
        let outputParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.OutputParameter?].self, forKey: .outputParameters)
        var outputParametersDecoded0:[SageMakerClientTypes.OutputParameter]? = nil
        if let outputParametersContainer = outputParametersContainer {
            outputParametersDecoded0 = [SageMakerClientTypes.OutputParameter]()
            for structure0 in outputParametersContainer {
                if let structure0 = structure0 {
                    outputParametersDecoded0?.append(structure0)
                }
            }
        }
        outputParameters = outputParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Metadata about a callback step.
    public struct CallbackStepMetadata: Swift.Equatable {
        /// The pipeline generated token from the Amazon SQS queue.
        public var callbackToken: Swift.String?
        /// A list of the output parameters of the callback step.
        public var outputParameters: [SageMakerClientTypes.OutputParameter]?
        /// The URL of the Amazon Simple Queue Service (Amazon SQS) queue used by the callback step.
        public var sqsQueueUrl: Swift.String?

        public init (
            callbackToken: Swift.String? = nil,
            outputParameters: [SageMakerClientTypes.OutputParameter]? = nil,
            sqsQueueUrl: Swift.String? = nil
        )
        {
            self.callbackToken = callbackToken
            self.outputParameters = outputParameters
            self.sqsQueueUrl = sqsQueueUrl
        }
    }

}

extension SageMakerClientTypes.CandidateArtifactLocations: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case explainability = "Explainability"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let explainability = explainability {
            try encodeContainer.encode(explainability, forKey: .explainability)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let explainabilityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .explainability)
        explainability = explainabilityDecoded
    }
}

extension SageMakerClientTypes {
    /// The location of artifacts for an AutoML candidate job.
    public struct CandidateArtifactLocations: Swift.Equatable {
        /// The Amazon S3 prefix to the explainability artifacts generated for the AutoML candidate.
        /// This member is required.
        public var explainability: Swift.String?

        public init (
            explainability: Swift.String? = nil
        )
        {
            self.explainability = explainability
        }
    }

}

extension SageMakerClientTypes.CandidateProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case candidateArtifactLocations = "CandidateArtifactLocations"
        case candidateMetrics = "CandidateMetrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let candidateArtifactLocations = candidateArtifactLocations {
            try encodeContainer.encode(candidateArtifactLocations, forKey: .candidateArtifactLocations)
        }
        if let candidateMetrics = candidateMetrics {
            var candidateMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .candidateMetrics)
            for metricdatalist0 in candidateMetrics {
                try candidateMetricsContainer.encode(metricdatalist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let candidateArtifactLocationsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CandidateArtifactLocations.self, forKey: .candidateArtifactLocations)
        candidateArtifactLocations = candidateArtifactLocationsDecoded
        let candidateMetricsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MetricDatum?].self, forKey: .candidateMetrics)
        var candidateMetricsDecoded0:[SageMakerClientTypes.MetricDatum]? = nil
        if let candidateMetricsContainer = candidateMetricsContainer {
            candidateMetricsDecoded0 = [SageMakerClientTypes.MetricDatum]()
            for structure0 in candidateMetricsContainer {
                if let structure0 = structure0 {
                    candidateMetricsDecoded0?.append(structure0)
                }
            }
        }
        candidateMetrics = candidateMetricsDecoded0
    }
}

extension SageMakerClientTypes {
    /// The properties of an AutoML candidate job.
    public struct CandidateProperties: Swift.Equatable {
        /// The Amazon S3 prefix to the artifacts generated for an AutoML candidate.
        public var candidateArtifactLocations: SageMakerClientTypes.CandidateArtifactLocations?
        /// Information about the candidate metrics for an AutoML job.
        public var candidateMetrics: [SageMakerClientTypes.MetricDatum]?

        public init (
            candidateArtifactLocations: SageMakerClientTypes.CandidateArtifactLocations? = nil,
            candidateMetrics: [SageMakerClientTypes.MetricDatum]? = nil
        )
        {
            self.candidateArtifactLocations = candidateArtifactLocations
            self.candidateMetrics = candidateMetrics
        }
    }

}

extension SageMakerClientTypes {
    public enum CandidateSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case finalobjectivemetricvalue
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [CandidateSortBy] {
            return [
                .creationtime,
                .finalobjectivemetricvalue,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .finalobjectivemetricvalue: return "FinalObjectiveMetricValue"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CandidateSortBy(rawValue: rawValue) ?? CandidateSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum CandidateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [CandidateStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CandidateStatus(rawValue: rawValue) ?? CandidateStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum CandidateStepType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case processing
        case training
        case transform
        case sdkUnknown(Swift.String)

        public static var allCases: [CandidateStepType] {
            return [
                .processing,
                .training,
                .transform,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .processing: return "AWS::SageMaker::ProcessingJob"
            case .training: return "AWS::SageMaker::TrainingJob"
            case .transform: return "AWS::SageMaker::TransformJob"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CandidateStepType(rawValue: rawValue) ?? CandidateStepType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.CapacitySize: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CapacitySizeType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the endpoint capacity to activate for production.
    public struct CapacitySize: Swift.Equatable {
        /// Specifies the endpoint capacity type.
        ///
        /// * INSTANCE_COUNT: The endpoint activates based on the number of instances.
        ///
        /// * CAPACITY_PERCENT: The endpoint activates based on the specified percentage of capacity.
        /// This member is required.
        public var type: SageMakerClientTypes.CapacitySizeType?
        /// Defines the capacity size, either as a number of instances or a capacity percentage.
        /// This member is required.
        public var value: Swift.Int?

        public init (
            type: SageMakerClientTypes.CapacitySizeType? = nil,
            value: Swift.Int? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    public enum CapacitySizeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case capacityPercent
        case instanceCount
        case sdkUnknown(Swift.String)

        public static var allCases: [CapacitySizeType] {
            return [
                .capacityPercent,
                .instanceCount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .capacityPercent: return "CAPACITY_PERCENT"
            case .instanceCount: return "INSTANCE_COUNT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CapacitySizeType(rawValue: rawValue) ?? CapacitySizeType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.CaptureContentTypeHeader: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csvContentTypes = "CsvContentTypes"
        case jsonContentTypes = "JsonContentTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let csvContentTypes = csvContentTypes {
            var csvContentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .csvContentTypes)
            for csvcontenttypes0 in csvContentTypes {
                try csvContentTypesContainer.encode(csvcontenttypes0)
            }
        }
        if let jsonContentTypes = jsonContentTypes {
            var jsonContentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jsonContentTypes)
            for jsoncontenttypes0 in jsonContentTypes {
                try jsonContentTypesContainer.encode(jsoncontenttypes0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let csvContentTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .csvContentTypes)
        var csvContentTypesDecoded0:[Swift.String]? = nil
        if let csvContentTypesContainer = csvContentTypesContainer {
            csvContentTypesDecoded0 = [Swift.String]()
            for string0 in csvContentTypesContainer {
                if let string0 = string0 {
                    csvContentTypesDecoded0?.append(string0)
                }
            }
        }
        csvContentTypes = csvContentTypesDecoded0
        let jsonContentTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jsonContentTypes)
        var jsonContentTypesDecoded0:[Swift.String]? = nil
        if let jsonContentTypesContainer = jsonContentTypesContainer {
            jsonContentTypesDecoded0 = [Swift.String]()
            for string0 in jsonContentTypesContainer {
                if let string0 = string0 {
                    jsonContentTypesDecoded0?.append(string0)
                }
            }
        }
        jsonContentTypes = jsonContentTypesDecoded0
    }
}

extension SageMakerClientTypes {
    ///
    public struct CaptureContentTypeHeader: Swift.Equatable {
        ///
        public var csvContentTypes: [Swift.String]?
        ///
        public var jsonContentTypes: [Swift.String]?

        public init (
            csvContentTypes: [Swift.String]? = nil,
            jsonContentTypes: [Swift.String]? = nil
        )
        {
            self.csvContentTypes = csvContentTypes
            self.jsonContentTypes = jsonContentTypes
        }
    }

}

extension SageMakerClientTypes {
    public enum CaptureMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case input
        case output
        case sdkUnknown(Swift.String)

        public static var allCases: [CaptureMode] {
            return [
                .input,
                .output,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .input: return "Input"
            case .output: return "Output"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CaptureMode(rawValue: rawValue) ?? CaptureMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.CaptureOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captureMode = "CaptureMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captureMode = captureMode {
            try encodeContainer.encode(captureMode.rawValue, forKey: .captureMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let captureModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CaptureMode.self, forKey: .captureMode)
        captureMode = captureModeDecoded
    }
}

extension SageMakerClientTypes {
    ///
    public struct CaptureOption: Swift.Equatable {
        ///
        /// This member is required.
        public var captureMode: SageMakerClientTypes.CaptureMode?

        public init (
            captureMode: SageMakerClientTypes.CaptureMode? = nil
        )
        {
            self.captureMode = captureMode
        }
    }

}

extension SageMakerClientTypes {
    public enum CaptureStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case started
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [CaptureStatus] {
            return [
                .started,
                .stopped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .started: return "Started"
            case .stopped: return "Stopped"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CaptureStatus(rawValue: rawValue) ?? CaptureStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.CategoricalParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            var valueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .value)
            for categoricalparameterrangevalues0 in value {
                try valueContainer.encode(categoricalparameterrangevalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .value)
        var valueDecoded0:[Swift.String]? = nil
        if let valueContainer = valueContainer {
            valueDecoded0 = [Swift.String]()
            for string0 in valueContainer {
                if let string0 = string0 {
                    valueDecoded0?.append(string0)
                }
            }
        }
        value = valueDecoded0
    }
}

extension SageMakerClientTypes {
    /// Environment parameters you want to benchmark your load test against.
    public struct CategoricalParameter: Swift.Equatable {
        /// The Name of the environment variable.
        /// This member is required.
        public var name: Swift.String?
        /// The list of values you can pass.
        /// This member is required.
        public var value: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            value: [Swift.String]? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SageMakerClientTypes.CategoricalParameterRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for parametervalues0 in values {
                try valuesContainer.encode(parametervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension SageMakerClientTypes {
    /// A list of categorical hyperparameters to tune.
    public struct CategoricalParameterRange: Swift.Equatable {
        /// The name of the categorical hyperparameter to tune.
        /// This member is required.
        public var name: Swift.String?
        /// A list of the categories for the hyperparameter.
        /// This member is required.
        public var values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension SageMakerClientTypes.CategoricalParameterRangeSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for parametervalues0 in values {
                try valuesContainer.encode(parametervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Defines the possible values for a categorical hyperparameter.
    public struct CategoricalParameterRangeSpecification: Swift.Equatable {
        /// The allowed categories for the hyperparameter.
        /// This member is required.
        public var values: [Swift.String]?

        public init (
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension SageMakerClientTypes.Channel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName = "ChannelName"
        case compressionType = "CompressionType"
        case contentType = "ContentType"
        case dataSource = "DataSource"
        case inputMode = "InputMode"
        case recordWrapperType = "RecordWrapperType"
        case shuffleConfig = "ShuffleConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelName = channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let compressionType = compressionType {
            try encodeContainer.encode(compressionType.rawValue, forKey: .compressionType)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
        if let dataSource = dataSource {
            try encodeContainer.encode(dataSource, forKey: .dataSource)
        }
        if let inputMode = inputMode {
            try encodeContainer.encode(inputMode.rawValue, forKey: .inputMode)
        }
        if let recordWrapperType = recordWrapperType {
            try encodeContainer.encode(recordWrapperType.rawValue, forKey: .recordWrapperType)
        }
        if let shuffleConfig = shuffleConfig {
            try encodeContainer.encode(shuffleConfig, forKey: .shuffleConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let contentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let compressionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CompressionType.self, forKey: .compressionType)
        compressionType = compressionTypeDecoded
        let recordWrapperTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecordWrapper.self, forKey: .recordWrapperType)
        recordWrapperType = recordWrapperTypeDecoded
        let inputModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingInputMode.self, forKey: .inputMode)
        inputMode = inputModeDecoded
        let shuffleConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ShuffleConfig.self, forKey: .shuffleConfig)
        shuffleConfig = shuffleConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// A channel is a named input source that training algorithms can consume.
    public struct Channel: Swift.Equatable {
        /// The name of the channel.
        /// This member is required.
        public var channelName: Swift.String?
        /// If training data is compressed, the compression type. The default value is None. CompressionType is used only in Pipe input mode. In File mode, leave this field unset or set it to None.
        public var compressionType: SageMakerClientTypes.CompressionType?
        /// The MIME type of the data.
        public var contentType: Swift.String?
        /// The location of the channel data.
        /// This member is required.
        public var dataSource: SageMakerClientTypes.DataSource?
        /// (Optional) The input mode to use for the data channel in a training job. If you don't set a value for InputMode, Amazon SageMaker uses the value set for TrainingInputMode. Use this parameter to override the TrainingInputMode setting in a [AlgorithmSpecification] request when you have a channel that needs a different input mode from the training job's general setting. To download the data from Amazon Simple Storage Service (Amazon S3) to the provisioned ML storage volume, and mount the directory to a Docker volume, use File input mode. To stream data directly from Amazon S3 to the container, choose Pipe input mode. To use a model for incremental training, choose File input model.
        public var inputMode: SageMakerClientTypes.TrainingInputMode?
        /// Specify RecordIO as the value when input data is in raw format but the training algorithm requires the RecordIO format. In this case, Amazon SageMaker wraps each individual S3 object in a RecordIO record. If the input data is already in RecordIO format, you don't need to set this attribute. For more information, see [Create a Dataset Using RecordIO](https://mxnet.apache.org/api/architecture/note_data_loading#data-format). In File mode, leave this field unset or set it to None.
        public var recordWrapperType: SageMakerClientTypes.RecordWrapper?
        /// A configuration for a shuffle option for input data in a channel. If you use S3Prefix for S3DataType, this shuffles the results of the S3 key prefix matches. If you use ManifestFile, the order of the S3 object references in the ManifestFile is shuffled. If you use AugmentedManifestFile, the order of the JSON lines in the AugmentedManifestFile is shuffled. The shuffling order is determined using the Seed value. For Pipe input mode, shuffling is done at the start of every epoch. With large datasets this ensures that the order of the training data is different for each epoch, it helps reduce bias and possible overfitting. In a multi-node training job when ShuffleConfig is combined with S3DataDistributionType of ShardedByS3Key, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.
        public var shuffleConfig: SageMakerClientTypes.ShuffleConfig?

        public init (
            channelName: Swift.String? = nil,
            compressionType: SageMakerClientTypes.CompressionType? = nil,
            contentType: Swift.String? = nil,
            dataSource: SageMakerClientTypes.DataSource? = nil,
            inputMode: SageMakerClientTypes.TrainingInputMode? = nil,
            recordWrapperType: SageMakerClientTypes.RecordWrapper? = nil,
            shuffleConfig: SageMakerClientTypes.ShuffleConfig? = nil
        )
        {
            self.channelName = channelName
            self.compressionType = compressionType
            self.contentType = contentType
            self.dataSource = dataSource
            self.inputMode = inputMode
            self.recordWrapperType = recordWrapperType
            self.shuffleConfig = shuffleConfig
        }
    }

}

extension SageMakerClientTypes.ChannelSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case isRequired = "IsRequired"
        case name = "Name"
        case supportedCompressionTypes = "SupportedCompressionTypes"
        case supportedContentTypes = "SupportedContentTypes"
        case supportedInputModes = "SupportedInputModes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if isRequired != false {
            try encodeContainer.encode(isRequired, forKey: .isRequired)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let supportedCompressionTypes = supportedCompressionTypes {
            var supportedCompressionTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedCompressionTypes)
            for compressiontypes0 in supportedCompressionTypes {
                try supportedCompressionTypesContainer.encode(compressiontypes0.rawValue)
            }
        }
        if let supportedContentTypes = supportedContentTypes {
            var supportedContentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedContentTypes)
            for contenttypes0 in supportedContentTypes {
                try supportedContentTypesContainer.encode(contenttypes0)
            }
        }
        if let supportedInputModes = supportedInputModes {
            var supportedInputModesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedInputModes)
            for inputmodes0 in supportedInputModes {
                try supportedInputModesContainer.encode(inputmodes0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isRequiredDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isRequired)
        isRequired = isRequiredDecoded
        let supportedContentTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedContentTypes)
        var supportedContentTypesDecoded0:[Swift.String]? = nil
        if let supportedContentTypesContainer = supportedContentTypesContainer {
            supportedContentTypesDecoded0 = [Swift.String]()
            for string0 in supportedContentTypesContainer {
                if let string0 = string0 {
                    supportedContentTypesDecoded0?.append(string0)
                }
            }
        }
        supportedContentTypes = supportedContentTypesDecoded0
        let supportedCompressionTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.CompressionType?].self, forKey: .supportedCompressionTypes)
        var supportedCompressionTypesDecoded0:[SageMakerClientTypes.CompressionType]? = nil
        if let supportedCompressionTypesContainer = supportedCompressionTypesContainer {
            supportedCompressionTypesDecoded0 = [SageMakerClientTypes.CompressionType]()
            for string0 in supportedCompressionTypesContainer {
                if let string0 = string0 {
                    supportedCompressionTypesDecoded0?.append(string0)
                }
            }
        }
        supportedCompressionTypes = supportedCompressionTypesDecoded0
        let supportedInputModesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrainingInputMode?].self, forKey: .supportedInputModes)
        var supportedInputModesDecoded0:[SageMakerClientTypes.TrainingInputMode]? = nil
        if let supportedInputModesContainer = supportedInputModesContainer {
            supportedInputModesDecoded0 = [SageMakerClientTypes.TrainingInputMode]()
            for string0 in supportedInputModesContainer {
                if let string0 = string0 {
                    supportedInputModesDecoded0?.append(string0)
                }
            }
        }
        supportedInputModes = supportedInputModesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Defines a named input source, called a channel, to be used by an algorithm.
    public struct ChannelSpecification: Swift.Equatable {
        /// A brief description of the channel.
        public var description: Swift.String?
        /// Indicates whether the channel is required by the algorithm.
        public var isRequired: Swift.Bool
        /// The name of the channel.
        /// This member is required.
        public var name: Swift.String?
        /// The allowed compression types, if data compression is used.
        public var supportedCompressionTypes: [SageMakerClientTypes.CompressionType]?
        /// The supported MIME types for the data.
        /// This member is required.
        public var supportedContentTypes: [Swift.String]?
        /// The allowed input mode, either FILE or PIPE. In FILE mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In PIPE mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.
        /// This member is required.
        public var supportedInputModes: [SageMakerClientTypes.TrainingInputMode]?

        public init (
            description: Swift.String? = nil,
            isRequired: Swift.Bool = false,
            name: Swift.String? = nil,
            supportedCompressionTypes: [SageMakerClientTypes.CompressionType]? = nil,
            supportedContentTypes: [Swift.String]? = nil,
            supportedInputModes: [SageMakerClientTypes.TrainingInputMode]? = nil
        )
        {
            self.description = description
            self.isRequired = isRequired
            self.name = name
            self.supportedCompressionTypes = supportedCompressionTypes
            self.supportedContentTypes = supportedContentTypes
            self.supportedInputModes = supportedInputModes
        }
    }

}

extension SageMakerClientTypes.CheckpointConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case localPath = "LocalPath"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains information about the output location for managed spot training checkpoint data.
    public struct CheckpointConfig: Swift.Equatable {
        /// (Optional) The local directory where checkpoints are written. The default directory is /opt/ml/checkpoints/.
        public var localPath: Swift.String?
        /// Identifies the S3 path where you want Amazon SageMaker to store checkpoints. For example, s3://bucket-name/key-name-prefix.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            localPath: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes.ClarifyCheckStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baselineUsedForDriftCheckConstraints = "BaselineUsedForDriftCheckConstraints"
        case calculatedBaselineConstraints = "CalculatedBaselineConstraints"
        case checkJobArn = "CheckJobArn"
        case checkType = "CheckType"
        case modelPackageGroupName = "ModelPackageGroupName"
        case registerNewBaseline = "RegisterNewBaseline"
        case skipCheck = "SkipCheck"
        case violationReport = "ViolationReport"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraints {
            try encodeContainer.encode(baselineUsedForDriftCheckConstraints, forKey: .baselineUsedForDriftCheckConstraints)
        }
        if let calculatedBaselineConstraints = calculatedBaselineConstraints {
            try encodeContainer.encode(calculatedBaselineConstraints, forKey: .calculatedBaselineConstraints)
        }
        if let checkJobArn = checkJobArn {
            try encodeContainer.encode(checkJobArn, forKey: .checkJobArn)
        }
        if let checkType = checkType {
            try encodeContainer.encode(checkType, forKey: .checkType)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if registerNewBaseline != false {
            try encodeContainer.encode(registerNewBaseline, forKey: .registerNewBaseline)
        }
        if skipCheck != false {
            try encodeContainer.encode(skipCheck, forKey: .skipCheck)
        }
        if let violationReport = violationReport {
            try encodeContainer.encode(violationReport, forKey: .violationReport)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkType)
        checkType = checkTypeDecoded
        let baselineUsedForDriftCheckConstraintsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baselineUsedForDriftCheckConstraints)
        baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraintsDecoded
        let calculatedBaselineConstraintsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .calculatedBaselineConstraints)
        calculatedBaselineConstraints = calculatedBaselineConstraintsDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let violationReportDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .violationReport)
        violationReport = violationReportDecoded
        let checkJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkJobArn)
        checkJobArn = checkJobArnDecoded
        let skipCheckDecoded = try containerValues.decode(Swift.Bool.self, forKey: .skipCheck)
        skipCheck = skipCheckDecoded
        let registerNewBaselineDecoded = try containerValues.decode(Swift.Bool.self, forKey: .registerNewBaseline)
        registerNewBaseline = registerNewBaselineDecoded
    }
}

extension SageMakerClientTypes {
    /// The container for the metadata for the ClarifyCheck step. For more information, see the topic on [ClarifyCheck step](https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check) in the Amazon SageMaker Developer Guide.
    public struct ClarifyCheckStepMetadata: Swift.Equatable {
        /// The Amazon S3 URI of baseline constraints file to be used for the drift check.
        public var baselineUsedForDriftCheckConstraints: Swift.String?
        /// The Amazon S3 URI of the newly calculated baseline constraints file.
        public var calculatedBaselineConstraints: Swift.String?
        /// The Amazon Resource Name (ARN) of the check processing job that was run by this step's execution.
        public var checkJobArn: Swift.String?
        /// The type of the Clarify Check step
        public var checkType: Swift.String?
        /// The model package group name.
        public var modelPackageGroupName: Swift.String?
        /// This flag indicates if a newly calculated baseline can be accessed through step properties BaselineUsedForDriftCheckConstraints and BaselineUsedForDriftCheckStatistics. If it is set to False, the previous baseline of the configured check type must also be available. These can be accessed through the BaselineUsedForDriftCheckConstraints property.
        public var registerNewBaseline: Swift.Bool
        /// This flag indicates if the drift check against the previous baseline will be skipped or not. If it is set to False, the previous baseline of the configured check type must be available.
        public var skipCheck: Swift.Bool
        /// The Amazon S3 URI of the violation report if violations are detected.
        public var violationReport: Swift.String?

        public init (
            baselineUsedForDriftCheckConstraints: Swift.String? = nil,
            calculatedBaselineConstraints: Swift.String? = nil,
            checkJobArn: Swift.String? = nil,
            checkType: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            registerNewBaseline: Swift.Bool = false,
            skipCheck: Swift.Bool = false,
            violationReport: Swift.String? = nil
        )
        {
            self.baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraints
            self.calculatedBaselineConstraints = calculatedBaselineConstraints
            self.checkJobArn = checkJobArn
            self.checkType = checkType
            self.modelPackageGroupName = modelPackageGroupName
            self.registerNewBaseline = registerNewBaseline
            self.skipCheck = skipCheck
            self.violationReport = violationReport
        }
    }

}

extension SageMakerClientTypes {
    public enum CodeRepositorySortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case lastModifiedTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [CodeRepositorySortBy] {
            return [
                .creationTime,
                .lastModifiedTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .lastModifiedTime: return "LastModifiedTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CodeRepositorySortBy(rawValue: rawValue) ?? CodeRepositorySortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum CodeRepositorySortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [CodeRepositorySortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CodeRepositorySortOrder(rawValue: rawValue) ?? CodeRepositorySortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.CodeRepositorySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryArn = "CodeRepositoryArn"
        case codeRepositoryName = "CodeRepositoryName"
        case creationTime = "CreationTime"
        case gitConfig = "GitConfig"
        case lastModifiedTime = "LastModifiedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeRepositoryArn = codeRepositoryArn {
            try encodeContainer.encode(codeRepositoryArn, forKey: .codeRepositoryArn)
        }
        if let codeRepositoryName = codeRepositoryName {
            try encodeContainer.encode(codeRepositoryName, forKey: .codeRepositoryName)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let gitConfig = gitConfig {
            try encodeContainer.encode(gitConfig, forKey: .gitConfig)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryName)
        codeRepositoryName = codeRepositoryNameDecoded
        let codeRepositoryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryArn)
        codeRepositoryArn = codeRepositoryArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let gitConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.GitConfig.self, forKey: .gitConfig)
        gitConfig = gitConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies summary information about a Git repository.
    public struct CodeRepositorySummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Git repository.
        /// This member is required.
        public var codeRepositoryArn: Swift.String?
        /// The name of the Git repository.
        /// This member is required.
        public var codeRepositoryName: Swift.String?
        /// The date and time that the Git repository was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// Configuration details for the Git repository, including the URL where it is located and the ARN of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository.
        public var gitConfig: SageMakerClientTypes.GitConfig?
        /// The date and time that the Git repository was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?

        public init (
            codeRepositoryArn: Swift.String? = nil,
            codeRepositoryName: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            gitConfig: SageMakerClientTypes.GitConfig? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.codeRepositoryArn = codeRepositoryArn
            self.codeRepositoryName = codeRepositoryName
            self.creationTime = creationTime
            self.gitConfig = gitConfig
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes.CognitoConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userPool = "UserPool"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let userPool = userPool {
            try encodeContainer.encode(userPool, forKey: .userPool)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPool)
        userPool = userPoolDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Use this parameter to configure your Amazon Cognito workforce. A single Cognito workforce is created using and corresponds to a single [ Amazon Cognito user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
    public struct CognitoConfig: Swift.Equatable {
        /// The client ID for your Amazon Cognito user pool.
        /// This member is required.
        public var clientId: Swift.String?
        /// A [ user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html) is a user directory in Amazon Cognito. With a user pool, your users can sign in to your web or mobile app through Amazon Cognito. Your users can also sign in through social identity providers like Google, Facebook, Amazon, or Apple, and through SAML identity providers.
        /// This member is required.
        public var userPool: Swift.String?

        public init (
            clientId: Swift.String? = nil,
            userPool: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.userPool = userPool
        }
    }

}

extension SageMakerClientTypes.CognitoMemberDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userGroup = "UserGroup"
        case userPool = "UserPool"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let userGroup = userGroup {
            try encodeContainer.encode(userGroup, forKey: .userGroup)
        }
        if let userPool = userPool {
            try encodeContainer.encode(userPool, forKey: .userPool)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPool)
        userPool = userPoolDecoded
        let userGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userGroup)
        userGroup = userGroupDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Identifies a Amazon Cognito user group. A user group can be used in on or more work teams.
    public struct CognitoMemberDefinition: Swift.Equatable {
        /// An identifier for an application client. You must create the app client ID using Amazon Cognito.
        /// This member is required.
        public var clientId: Swift.String?
        /// An identifier for a user group.
        /// This member is required.
        public var userGroup: Swift.String?
        /// An identifier for a user pool. The user pool must be in the same region as the service that you are calling.
        /// This member is required.
        public var userPool: Swift.String?

        public init (
            clientId: Swift.String? = nil,
            userGroup: Swift.String? = nil,
            userPool: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.userGroup = userGroup
            self.userPool = userPool
        }
    }

}

extension SageMakerClientTypes.CollectionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionName = "CollectionName"
        case collectionParameters = "CollectionParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionName = collectionName {
            try encodeContainer.encode(collectionName, forKey: .collectionName)
        }
        if let collectionParameters = collectionParameters {
            var collectionParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .collectionParameters)
            for (dictKey0, collectionparameters0) in collectionParameters {
                try collectionParametersContainer.encode(collectionparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionName)
        collectionName = collectionNameDecoded
        let collectionParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .collectionParameters)
        var collectionParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let collectionParametersContainer = collectionParametersContainer {
            collectionParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, configvalue0) in collectionParametersContainer {
                if let configvalue0 = configvalue0 {
                    collectionParametersDecoded0?[key0] = configvalue0
                }
            }
        }
        collectionParameters = collectionParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Configuration information for the Debugger output tensor collections.
    public struct CollectionConfiguration: Swift.Equatable {
        /// The name of the tensor collection. The name must be unique relative to other rule configuration names.
        public var collectionName: Swift.String?
        /// Parameter values for the tensor collection. The allowed parameters are "name", "include_regex", "reduction_config", "save_config", "tensor_names", and "save_histogram".
        public var collectionParameters: [Swift.String:Swift.String]?

        public init (
            collectionName: Swift.String? = nil,
            collectionParameters: [Swift.String:Swift.String]? = nil
        )
        {
            self.collectionName = collectionName
            self.collectionParameters = collectionParameters
        }
    }

}

extension SageMakerClientTypes {
    public enum CompilationJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inprogress
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [CompilationJobStatus] {
            return [
                .completed,
                .failed,
                .inprogress,
                .starting,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CompilationJobStatus(rawValue: rawValue) ?? CompilationJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.CompilationJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationEndTime = "CompilationEndTime"
        case compilationJobArn = "CompilationJobArn"
        case compilationJobName = "CompilationJobName"
        case compilationJobStatus = "CompilationJobStatus"
        case compilationStartTime = "CompilationStartTime"
        case compilationTargetDevice = "CompilationTargetDevice"
        case compilationTargetPlatformAccelerator = "CompilationTargetPlatformAccelerator"
        case compilationTargetPlatformArch = "CompilationTargetPlatformArch"
        case compilationTargetPlatformOs = "CompilationTargetPlatformOs"
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compilationEndTime = compilationEndTime {
            try encodeContainer.encode(compilationEndTime.timeIntervalSince1970, forKey: .compilationEndTime)
        }
        if let compilationJobArn = compilationJobArn {
            try encodeContainer.encode(compilationJobArn, forKey: .compilationJobArn)
        }
        if let compilationJobName = compilationJobName {
            try encodeContainer.encode(compilationJobName, forKey: .compilationJobName)
        }
        if let compilationJobStatus = compilationJobStatus {
            try encodeContainer.encode(compilationJobStatus.rawValue, forKey: .compilationJobStatus)
        }
        if let compilationStartTime = compilationStartTime {
            try encodeContainer.encode(compilationStartTime.timeIntervalSince1970, forKey: .compilationStartTime)
        }
        if let compilationTargetDevice = compilationTargetDevice {
            try encodeContainer.encode(compilationTargetDevice.rawValue, forKey: .compilationTargetDevice)
        }
        if let compilationTargetPlatformAccelerator = compilationTargetPlatformAccelerator {
            try encodeContainer.encode(compilationTargetPlatformAccelerator.rawValue, forKey: .compilationTargetPlatformAccelerator)
        }
        if let compilationTargetPlatformArch = compilationTargetPlatformArch {
            try encodeContainer.encode(compilationTargetPlatformArch.rawValue, forKey: .compilationTargetPlatformArch)
        }
        if let compilationTargetPlatformOs = compilationTargetPlatformOs {
            try encodeContainer.encode(compilationTargetPlatformOs.rawValue, forKey: .compilationTargetPlatformOs)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
        let compilationJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobArn)
        compilationJobArn = compilationJobArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let compilationStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .compilationStartTime)
        compilationStartTime = compilationStartTimeDecoded
        let compilationEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .compilationEndTime)
        compilationEndTime = compilationEndTimeDecoded
        let compilationTargetDeviceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TargetDevice.self, forKey: .compilationTargetDevice)
        compilationTargetDevice = compilationTargetDeviceDecoded
        let compilationTargetPlatformOsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TargetPlatformOs.self, forKey: .compilationTargetPlatformOs)
        compilationTargetPlatformOs = compilationTargetPlatformOsDecoded
        let compilationTargetPlatformArchDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TargetPlatformArch.self, forKey: .compilationTargetPlatformArch)
        compilationTargetPlatformArch = compilationTargetPlatformArchDecoded
        let compilationTargetPlatformAcceleratorDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TargetPlatformAccelerator.self, forKey: .compilationTargetPlatformAccelerator)
        compilationTargetPlatformAccelerator = compilationTargetPlatformAcceleratorDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let compilationJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CompilationJobStatus.self, forKey: .compilationJobStatus)
        compilationJobStatus = compilationJobStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// A summary of a model compilation job.
    public struct CompilationJobSummary: Swift.Equatable {
        /// The time when the model compilation job completed.
        public var compilationEndTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the model compilation job.
        /// This member is required.
        public var compilationJobArn: Swift.String?
        /// The name of the model compilation job that you want a summary for.
        /// This member is required.
        public var compilationJobName: Swift.String?
        /// The status of the model compilation job.
        /// This member is required.
        public var compilationJobStatus: SageMakerClientTypes.CompilationJobStatus?
        /// The time when the model compilation job started.
        public var compilationStartTime: ClientRuntime.Date?
        /// The type of device that the model will run on after the compilation job has completed.
        public var compilationTargetDevice: SageMakerClientTypes.TargetDevice?
        /// The type of accelerator that the model will run on after the compilation job has completed.
        public var compilationTargetPlatformAccelerator: SageMakerClientTypes.TargetPlatformAccelerator?
        /// The type of architecture that the model will run on after the compilation job has completed.
        public var compilationTargetPlatformArch: SageMakerClientTypes.TargetPlatformArch?
        /// The type of OS that the model will run on after the compilation job has completed.
        public var compilationTargetPlatformOs: SageMakerClientTypes.TargetPlatformOs?
        /// The time when the model compilation job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The time when the model compilation job was last modified.
        public var lastModifiedTime: ClientRuntime.Date?

        public init (
            compilationEndTime: ClientRuntime.Date? = nil,
            compilationJobArn: Swift.String? = nil,
            compilationJobName: Swift.String? = nil,
            compilationJobStatus: SageMakerClientTypes.CompilationJobStatus? = nil,
            compilationStartTime: ClientRuntime.Date? = nil,
            compilationTargetDevice: SageMakerClientTypes.TargetDevice? = nil,
            compilationTargetPlatformAccelerator: SageMakerClientTypes.TargetPlatformAccelerator? = nil,
            compilationTargetPlatformArch: SageMakerClientTypes.TargetPlatformArch? = nil,
            compilationTargetPlatformOs: SageMakerClientTypes.TargetPlatformOs? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.compilationEndTime = compilationEndTime
            self.compilationJobArn = compilationJobArn
            self.compilationJobName = compilationJobName
            self.compilationJobStatus = compilationJobStatus
            self.compilationStartTime = compilationStartTime
            self.compilationTargetDevice = compilationTargetDevice
            self.compilationTargetPlatformAccelerator = compilationTargetPlatformAccelerator
            self.compilationTargetPlatformArch = compilationTargetPlatformArch
            self.compilationTargetPlatformOs = compilationTargetPlatformOs
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {
    public enum CompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [CompressionType] {
            return [
                .gzip,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "Gzip"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CompressionType(rawValue: rawValue) ?? CompressionType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ConditionOutcome: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `false`
        case `true`
        case sdkUnknown(Swift.String)

        public static var allCases: [ConditionOutcome] {
            return [
                .false,
                .true,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .false: return "False"
            case .true: return "True"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConditionOutcome(rawValue: rawValue) ?? ConditionOutcome.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ConditionStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outcome = "Outcome"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outcome = outcome {
            try encodeContainer.encode(outcome.rawValue, forKey: .outcome)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outcomeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ConditionOutcome.self, forKey: .outcome)
        outcome = outcomeDecoded
    }
}

extension SageMakerClientTypes {
    /// Metadata for a Condition step.
    public struct ConditionStepMetadata: Swift.Equatable {
        /// The outcome of the Condition step evaluation.
        public var outcome: SageMakerClientTypes.ConditionOutcome?

        public init (
            outcome: SageMakerClientTypes.ConditionOutcome? = nil
        )
        {
            self.outcome = outcome
        }
    }

}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There was a conflict when you attempted to modify a SageMaker entity such as an Experiment or Artifact.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SageMakerClientTypes.ContainerDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerHostname = "ContainerHostname"
        case environment = "Environment"
        case image = "Image"
        case imageConfig = "ImageConfig"
        case inferenceSpecificationName = "InferenceSpecificationName"
        case mode = "Mode"
        case modelDataUrl = "ModelDataUrl"
        case modelPackageName = "ModelPackageName"
        case multiModelConfig = "MultiModelConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerHostname = containerHostname {
            try encodeContainer.encode(containerHostname, forKey: .containerHostname)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, environmentmap0) in environment {
                try environmentContainer.encode(environmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imageConfig = imageConfig {
            try encodeContainer.encode(imageConfig, forKey: .imageConfig)
        }
        if let inferenceSpecificationName = inferenceSpecificationName {
            try encodeContainer.encode(inferenceSpecificationName, forKey: .inferenceSpecificationName)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let modelDataUrl = modelDataUrl {
            try encodeContainer.encode(modelDataUrl, forKey: .modelDataUrl)
        }
        if let modelPackageName = modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
        if let multiModelConfig = multiModelConfig {
            try encodeContainer.encode(multiModelConfig, forKey: .multiModelConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerHostname)
        containerHostname = containerHostnameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let imageConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageConfig.self, forKey: .imageConfig)
        imageConfig = imageConfigDecoded
        let modeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ContainerMode.self, forKey: .mode)
        mode = modeDecoded
        let modelDataUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelDataUrl)
        modelDataUrl = modelDataUrlDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, environmentvalue0) in environmentContainer {
                if let environmentvalue0 = environmentvalue0 {
                    environmentDecoded0?[key0] = environmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let inferenceSpecificationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSpecificationName)
        inferenceSpecificationName = inferenceSpecificationNameDecoded
        let multiModelConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MultiModelConfig.self, forKey: .multiModelConfig)
        multiModelConfig = multiModelConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the container, as part of model definition.
    public struct ContainerDefinition: Swift.Equatable {
        /// This parameter is ignored for models that contain only a PrimaryContainer. When a ContainerDefinition is part of an inference pipeline, the value of the parameter uniquely identifies the container for the purposes of logging and metrics. For information, see [Use Logs and Metrics to Monitor an Inference Pipeline](https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-logs-metrics.html). If you don't specify a value for this parameter for a ContainerDefinition that is part of an inference pipeline, a unique name is automatically assigned based on the position of the ContainerDefinition in the pipeline. If you specify a value for the ContainerHostName for any ContainerDefinition that is part of an inference pipeline, you must specify a value for the ContainerHostName parameter of every ContainerDefinition in that pipeline.
        public var containerHostname: Swift.String?
        /// The environment variables to set in the Docker container. Each key and value in the Environment string to string map can have length of up to 1024. We support up to 16 entries in the map.
        public var environment: [Swift.String:Swift.String]?
        /// The path where inference code is stored. This can be either in Amazon EC2 Container Registry or in a Docker registry that is accessible from the same VPC that you configure for your endpoint. If you are using your own custom algorithm instead of an algorithm provided by Amazon SageMaker, the inference code must meet Amazon SageMaker requirements. Amazon SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html)
        public var image: Swift.String?
        /// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For information about storing containers in a private Docker registry, see [Use a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html)
        public var imageConfig: SageMakerClientTypes.ImageConfig?
        /// The inference specification name in the model package version.
        public var inferenceSpecificationName: Swift.String?
        /// Whether the container hosts a single model or multiple models.
        public var mode: SageMakerClientTypes.ContainerMode?
        /// The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The S3 path is required for Amazon SageMaker built-in algorithms, but not if you use your own algorithms. For more information on built-in algorithms, see [Common Parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html). The model artifacts must be in an S3 bucket that is in the same region as the model or endpoint you are creating. If you provide a value for this parameter, Amazon SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provide. Amazon Web Services STS is activated in your IAM user account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see [Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html) in the Amazon Web Services Identity and Access Management User Guide. If you use a built-in algorithm to create a model, Amazon SageMaker requires that you provide a S3 path to the model artifacts in ModelDataUrl.
        public var modelDataUrl: Swift.String?
        /// The name or Amazon Resource Name (ARN) of the model package to use to create the model.
        public var modelPackageName: Swift.String?
        /// Specifies additional configuration for multi-model endpoints.
        public var multiModelConfig: SageMakerClientTypes.MultiModelConfig?

        public init (
            containerHostname: Swift.String? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            image: Swift.String? = nil,
            imageConfig: SageMakerClientTypes.ImageConfig? = nil,
            inferenceSpecificationName: Swift.String? = nil,
            mode: SageMakerClientTypes.ContainerMode? = nil,
            modelDataUrl: Swift.String? = nil,
            modelPackageName: Swift.String? = nil,
            multiModelConfig: SageMakerClientTypes.MultiModelConfig? = nil
        )
        {
            self.containerHostname = containerHostname
            self.environment = environment
            self.image = image
            self.imageConfig = imageConfig
            self.inferenceSpecificationName = inferenceSpecificationName
            self.mode = mode
            self.modelDataUrl = modelDataUrl
            self.modelPackageName = modelPackageName
            self.multiModelConfig = multiModelConfig
        }
    }

}

extension SageMakerClientTypes {
    public enum ContainerMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case multiModel
        case singleModel
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerMode] {
            return [
                .multiModel,
                .singleModel,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .multiModel: return "MultiModel"
            case .singleModel: return "SingleModel"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerMode(rawValue: rawValue) ?? ContainerMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ContentClassifier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case freeOfAdultContent
        case freeOfPersonallyIdentifiableInformation
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentClassifier] {
            return [
                .freeOfAdultContent,
                .freeOfPersonallyIdentifiableInformation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .freeOfAdultContent: return "FreeOfAdultContent"
            case .freeOfPersonallyIdentifiableInformation: return "FreeOfPersonallyIdentifiableInformation"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContentClassifier(rawValue: rawValue) ?? ContentClassifier.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ContextSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceId = "SourceId"
        case sourceType = "SourceType"
        case sourceUri = "SourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceId = sourceId {
            try encodeContainer.encode(sourceId, forKey: .sourceId)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
        if let sourceUri = sourceUri {
            try encodeContainer.encode(sourceUri, forKey: .sourceUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUri)
        sourceUri = sourceUriDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let sourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
    }
}

extension SageMakerClientTypes {
    /// A structure describing the source of a context.
    public struct ContextSource: Swift.Equatable {
        /// The ID of the source.
        public var sourceId: Swift.String?
        /// The type of the source.
        public var sourceType: Swift.String?
        /// The URI of the source.
        /// This member is required.
        public var sourceUri: Swift.String?

        public init (
            sourceId: Swift.String? = nil,
            sourceType: Swift.String? = nil,
            sourceUri: Swift.String? = nil
        )
        {
            self.sourceId = sourceId
            self.sourceType = sourceType
            self.sourceUri = sourceUri
        }
    }

}

extension SageMakerClientTypes.ContextSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextArn = "ContextArn"
        case contextName = "ContextName"
        case contextType = "ContextType"
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contextArn = contextArn {
            try encodeContainer.encode(contextArn, forKey: .contextArn)
        }
        if let contextName = contextName {
            try encodeContainer.encode(contextName, forKey: .contextName)
        }
        if let contextType = contextType {
            try encodeContainer.encode(contextType, forKey: .contextType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextArn)
        contextArn = contextArnDecoded
        let contextNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextName)
        contextName = contextNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ContextSource.self, forKey: .source)
        source = sourceDecoded
        let contextTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextType)
        contextType = contextTypeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of a context. A context provides a logical grouping of other entities.
    public struct ContextSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the context.
        public var contextArn: Swift.String?
        /// The name of the context.
        public var contextName: Swift.String?
        /// The type of the context.
        public var contextType: Swift.String?
        /// When the context was created.
        public var creationTime: ClientRuntime.Date?
        /// When the context was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The source of the context.
        public var source: SageMakerClientTypes.ContextSource?

        public init (
            contextArn: Swift.String? = nil,
            contextName: Swift.String? = nil,
            contextType: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            source: SageMakerClientTypes.ContextSource? = nil
        )
        {
            self.contextArn = contextArn
            self.contextName = contextName
            self.contextType = contextType
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.source = source
        }
    }

}

extension SageMakerClientTypes.ContinuousParameterRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxValue = "MaxValue"
        case minValue = "MinValue"
        case name = "Name"
        case scalingType = "ScalingType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxValue = maxValue {
            try encodeContainer.encode(maxValue, forKey: .maxValue)
        }
        if let minValue = minValue {
            try encodeContainer.encode(minValue, forKey: .minValue)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scalingType = scalingType {
            try encodeContainer.encode(scalingType.rawValue, forKey: .scalingType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let minValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minValue)
        minValue = minValueDecoded
        let maxValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxValue)
        maxValue = maxValueDecoded
        let scalingTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterScalingType.self, forKey: .scalingType)
        scalingType = scalingTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// A list of continuous hyperparameters to tune.
    public struct ContinuousParameterRange: Swift.Equatable {
        /// The maximum value for the hyperparameter. The tuning job uses floating-point values between MinValue value and this value for tuning.
        /// This member is required.
        public var maxValue: Swift.String?
        /// The minimum value for the hyperparameter. The tuning job uses floating-point values between this value and MaxValuefor tuning.
        /// This member is required.
        public var minValue: Swift.String?
        /// The name of the continuous hyperparameter to tune.
        /// This member is required.
        public var name: Swift.String?
        /// The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see [Hyperparameter Scaling](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type). One of the following values: Auto Amazon SageMaker hyperparameter tuning chooses the best scale for the hyperparameter. Linear Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale. Logarithmic Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale. Logarithmic scaling works only for ranges that have only values greater than 0. ReverseLogarithmic Hyperparameter tuning searches the values in the hyperparameter range by using a reverse logarithmic scale. Reverse logarithmic scaling works only for ranges that are entirely within the range 0<=x<1.0.
        public var scalingType: SageMakerClientTypes.HyperParameterScalingType?

        public init (
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil,
            name: Swift.String? = nil,
            scalingType: SageMakerClientTypes.HyperParameterScalingType? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
            self.name = name
            self.scalingType = scalingType
        }
    }

}

extension SageMakerClientTypes.ContinuousParameterRangeSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxValue = "MaxValue"
        case minValue = "MinValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxValue = maxValue {
            try encodeContainer.encode(maxValue, forKey: .maxValue)
        }
        if let minValue = minValue {
            try encodeContainer.encode(minValue, forKey: .minValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minValue)
        minValue = minValueDecoded
        let maxValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxValue)
        maxValue = maxValueDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the possible values for a continuous hyperparameter.
    public struct ContinuousParameterRangeSpecification: Swift.Equatable {
        /// The maximum floating-point value allowed.
        /// This member is required.
        public var maxValue: Swift.String?
        /// The minimum floating-point value allowed.
        /// This member is required.
        public var minValue: Swift.String?

        public init (
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
        }
    }

}

extension CreateActionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
        case actionType = "ActionType"
        case description = "Description"
        case metadataProperties = "MetadataProperties"
        case properties = "Properties"
        case source = "Source"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let actionType = actionType {
            try encodeContainer.encode(actionType, forKey: .actionType)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, lineageentityparameters0) in properties {
                try propertiesContainer.encode(lineageentityparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateActionInput: Swift.Equatable {
    /// The name of the action. Must be unique to your account in an Amazon Web Services Region.
    /// This member is required.
    public var actionName: Swift.String?
    /// The action type.
    /// This member is required.
    public var actionType: Swift.String?
    /// The description of the action.
    public var description: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of properties to add to the action.
    public var properties: [Swift.String:Swift.String]?
    /// The source type, ID, and URI.
    /// This member is required.
    public var source: SageMakerClientTypes.ActionSource?
    /// The status of the action.
    public var status: SageMakerClientTypes.ActionStatus?
    /// A list of tags to apply to the action.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        actionName: Swift.String? = nil,
        actionType: Swift.String? = nil,
        description: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        properties: [Swift.String:Swift.String]? = nil,
        source: SageMakerClientTypes.ActionSource? = nil,
        status: SageMakerClientTypes.ActionStatus? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.actionName = actionName
        self.actionType = actionType
        self.description = description
        self.metadataProperties = metadataProperties
        self.properties = properties
        self.source = source
        self.status = status
        self.tags = tags
    }
}

struct CreateActionInputBody: Swift.Equatable {
    let actionName: Swift.String?
    let source: SageMakerClientTypes.ActionSource?
    let actionType: Swift.String?
    let description: Swift.String?
    let status: SageMakerClientTypes.ActionStatus?
    let properties: [Swift.String:Swift.String]?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
        case actionType = "ActionType"
        case description = "Description"
        case metadataProperties = "MetadataProperties"
        case properties = "Properties"
        case source = "Source"
        case status = "Status"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ActionSource.self, forKey: .source)
        source = sourceDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ActionStatus.self, forKey: .status)
        status = statusDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateActionOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionArn = output.actionArn
        } else {
            self.actionArn = nil
        }
    }
}

public struct CreateActionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the action.
    public var actionArn: Swift.String?

    public init (
        actionArn: Swift.String? = nil
    )
    {
        self.actionArn = actionArn
    }
}

struct CreateActionOutputResponseBody: Swift.Equatable {
    let actionArn: Swift.String?
}

extension CreateActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionArn = "ActionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionArn)
        actionArn = actionArnDecoded
    }
}

extension CreateAlgorithmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case certifyForMarketplace = "CertifyForMarketplace"
        case inferenceSpecification = "InferenceSpecification"
        case tags = "Tags"
        case trainingSpecification = "TrainingSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmDescription = algorithmDescription {
            try encodeContainer.encode(algorithmDescription, forKey: .algorithmDescription)
        }
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if certifyForMarketplace != false {
            try encodeContainer.encode(certifyForMarketplace, forKey: .certifyForMarketplace)
        }
        if let inferenceSpecification = inferenceSpecification {
            try encodeContainer.encode(inferenceSpecification, forKey: .inferenceSpecification)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingSpecification = trainingSpecification {
            try encodeContainer.encode(trainingSpecification, forKey: .trainingSpecification)
        }
        if let validationSpecification = validationSpecification {
            try encodeContainer.encode(validationSpecification, forKey: .validationSpecification)
        }
    }
}

extension CreateAlgorithmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAlgorithmInput: Swift.Equatable {
    /// A description of the algorithm.
    public var algorithmDescription: Swift.String?
    /// The name of the algorithm.
    /// This member is required.
    public var algorithmName: Swift.String?
    /// Whether to certify the algorithm so that it can be listed in Amazon Web Services Marketplace.
    public var certifyForMarketplace: Swift.Bool
    /// Specifies details about inference jobs that the algorithm runs, including the following:
    ///
    /// * The Amazon ECR paths of containers that contain the inference code and model artifacts.
    ///
    /// * The instance types that the algorithm supports for transform jobs and real-time endpoints used for inference.
    ///
    /// * The input and output content formats that the algorithm supports for inference.
    public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// Specifies details about training jobs run by this algorithm, including the following:
    ///
    /// * The Amazon ECR path of the container and the version digest of the algorithm.
    ///
    /// * The hyperparameters that the algorithm supports.
    ///
    /// * The instance types that the algorithm supports for training.
    ///
    /// * Whether the algorithm supports distributed training.
    ///
    /// * The metrics that the algorithm emits to Amazon CloudWatch.
    ///
    /// * Which metrics that the algorithm emits can be used as the objective metric for hyperparameter tuning jobs.
    ///
    /// * The input channels that the algorithm supports for training data. For example, an algorithm might support train, validation, and test channels.
    /// This member is required.
    public var trainingSpecification: SageMakerClientTypes.TrainingSpecification?
    /// Specifies configurations for one or more training jobs and that Amazon SageMaker runs to test the algorithm's training code and, optionally, one or more batch transform jobs that Amazon SageMaker runs to test the algorithm's inference code.
    public var validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification?

    public init (
        algorithmDescription: Swift.String? = nil,
        algorithmName: Swift.String? = nil,
        certifyForMarketplace: Swift.Bool = false,
        inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        trainingSpecification: SageMakerClientTypes.TrainingSpecification? = nil,
        validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification? = nil
    )
    {
        self.algorithmDescription = algorithmDescription
        self.algorithmName = algorithmName
        self.certifyForMarketplace = certifyForMarketplace
        self.inferenceSpecification = inferenceSpecification
        self.tags = tags
        self.trainingSpecification = trainingSpecification
        self.validationSpecification = validationSpecification
    }
}

struct CreateAlgorithmInputBody: Swift.Equatable {
    let algorithmName: Swift.String?
    let algorithmDescription: Swift.String?
    let trainingSpecification: SageMakerClientTypes.TrainingSpecification?
    let inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    let validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification?
    let certifyForMarketplace: Swift.Bool
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateAlgorithmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case certifyForMarketplace = "CertifyForMarketplace"
        case inferenceSpecification = "InferenceSpecification"
        case tags = "Tags"
        case trainingSpecification = "TrainingSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let algorithmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmDescription)
        algorithmDescription = algorithmDescriptionDecoded
        let trainingSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingSpecification.self, forKey: .trainingSpecification)
        trainingSpecification = trainingSpecificationDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Swift.Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateAlgorithmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAlgorithmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAlgorithmOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAlgorithmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateAlgorithmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.algorithmArn = output.algorithmArn
        } else {
            self.algorithmArn = nil
        }
    }
}

public struct CreateAlgorithmOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the new algorithm.
    /// This member is required.
    public var algorithmArn: Swift.String?

    public init (
        algorithmArn: Swift.String? = nil
    )
    {
        self.algorithmArn = algorithmArn
    }
}

struct CreateAlgorithmOutputResponseBody: Swift.Equatable {
    let algorithmArn: Swift.String?
}

extension CreateAlgorithmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmArn = "AlgorithmArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmArn)
        algorithmArn = algorithmArnDecoded
    }
}

extension CreateAppImageConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigName = "AppImageConfigName"
        case kernelGatewayImageConfig = "KernelGatewayImageConfig"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appImageConfigName = appImageConfigName {
            try encodeContainer.encode(appImageConfigName, forKey: .appImageConfigName)
        }
        if let kernelGatewayImageConfig = kernelGatewayImageConfig {
            try encodeContainer.encode(kernelGatewayImageConfig, forKey: .kernelGatewayImageConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateAppImageConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAppImageConfigInput: Swift.Equatable {
    /// The name of the AppImageConfig. Must be unique to your account.
    /// This member is required.
    public var appImageConfigName: Swift.String?
    /// The KernelGatewayImageConfig.
    public var kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?
    /// A list of tags to apply to the AppImageConfig.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        appImageConfigName: Swift.String? = nil,
        kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.appImageConfigName = appImageConfigName
        self.kernelGatewayImageConfig = kernelGatewayImageConfig
        self.tags = tags
    }
}

struct CreateAppImageConfigInputBody: Swift.Equatable {
    let appImageConfigName: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?
}

extension CreateAppImageConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigName = "AppImageConfigName"
        case kernelGatewayImageConfig = "KernelGatewayImageConfig"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appImageConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigName)
        appImageConfigName = appImageConfigNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let kernelGatewayImageConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.KernelGatewayImageConfig.self, forKey: .kernelGatewayImageConfig)
        kernelGatewayImageConfig = kernelGatewayImageConfigDecoded
    }
}

extension CreateAppImageConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAppImageConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAppImageConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAppImageConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateAppImageConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appImageConfigArn = output.appImageConfigArn
        } else {
            self.appImageConfigArn = nil
        }
    }
}

public struct CreateAppImageConfigOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the AppImageConfig.
    public var appImageConfigArn: Swift.String?

    public init (
        appImageConfigArn: Swift.String? = nil
    )
    {
        self.appImageConfigArn = appImageConfigArn
    }
}

struct CreateAppImageConfigOutputResponseBody: Swift.Equatable {
    let appImageConfigArn: Swift.String?
}

extension CreateAppImageConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigArn = "AppImageConfigArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appImageConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigArn)
        appImageConfigArn = appImageConfigArnDecoded
    }
}

extension CreateAppInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case domainId = "DomainId"
        case resourceSpec = "ResourceSpec"
        case tags = "Tags"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appName = appName {
            try encodeContainer.encode(appName, forKey: .appName)
        }
        if let appType = appType {
            try encodeContainer.encode(appType.rawValue, forKey: .appType)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let resourceSpec = resourceSpec {
            try encodeContainer.encode(resourceSpec, forKey: .resourceSpec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }
}

extension CreateAppInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAppInput: Swift.Equatable {
    /// The name of the app.
    /// This member is required.
    public var appName: Swift.String?
    /// The type of app. Supported apps are JupyterServer and KernelGateway. TensorBoard is not supported.
    /// This member is required.
    public var appType: SageMakerClientTypes.AppType?
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    public var resourceSpec: SageMakerClientTypes.ResourceSpec?
    /// Each tag consists of a key and an optional value. Tag keys must be unique per resource.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The user profile name.
    /// This member is required.
    public var userProfileName: Swift.String?

    public init (
        appName: Swift.String? = nil,
        appType: SageMakerClientTypes.AppType? = nil,
        domainId: Swift.String? = nil,
        resourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.appName = appName
        self.appType = appType
        self.domainId = domainId
        self.resourceSpec = resourceSpec
        self.tags = tags
        self.userProfileName = userProfileName
    }
}

struct CreateAppInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileName: Swift.String?
    let appType: SageMakerClientTypes.AppType?
    let appName: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let resourceSpec: SageMakerClientTypes.ResourceSpec?
}

extension CreateAppInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case domainId = "DomainId"
        case resourceSpec = "ResourceSpec"
        case tags = "Tags"
        case userProfileName = "UserProfileName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let appTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppType.self, forKey: .appType)
        appType = appTypeDecoded
        let appNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appName)
        appName = appNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let resourceSpecDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceSpec.self, forKey: .resourceSpec)
        resourceSpec = resourceSpecDecoded
    }
}

extension CreateAppOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAppOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAppOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAppOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateAppOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appArn = output.appArn
        } else {
            self.appArn = nil
        }
    }
}

public struct CreateAppOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the app.
    public var appArn: Swift.String?

    public init (
        appArn: Swift.String? = nil
    )
    {
        self.appArn = appArn
    }
}

struct CreateAppOutputResponseBody: Swift.Equatable {
    let appArn: Swift.String?
}

extension CreateAppOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appArn = "AppArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appArn)
        appArn = appArnDecoded
    }
}

extension CreateArtifactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactName = "ArtifactName"
        case artifactType = "ArtifactType"
        case metadataProperties = "MetadataProperties"
        case properties = "Properties"
        case source = "Source"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactName = artifactName {
            try encodeContainer.encode(artifactName, forKey: .artifactName)
        }
        if let artifactType = artifactType {
            try encodeContainer.encode(artifactType, forKey: .artifactType)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, lineageentityparameters0) in properties {
                try propertiesContainer.encode(lineageentityparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateArtifactInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateArtifactInput: Swift.Equatable {
    /// The name of the artifact. Must be unique to your account in an Amazon Web Services Region.
    public var artifactName: Swift.String?
    /// The artifact type.
    /// This member is required.
    public var artifactType: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of properties to add to the artifact.
    public var properties: [Swift.String:Swift.String]?
    /// The ID, ID type, and URI of the source.
    /// This member is required.
    public var source: SageMakerClientTypes.ArtifactSource?
    /// A list of tags to apply to the artifact.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        artifactName: Swift.String? = nil,
        artifactType: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        properties: [Swift.String:Swift.String]? = nil,
        source: SageMakerClientTypes.ArtifactSource? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.artifactName = artifactName
        self.artifactType = artifactType
        self.metadataProperties = metadataProperties
        self.properties = properties
        self.source = source
        self.tags = tags
    }
}

struct CreateArtifactInputBody: Swift.Equatable {
    let artifactName: Swift.String?
    let source: SageMakerClientTypes.ArtifactSource?
    let artifactType: Swift.String?
    let properties: [Swift.String:Swift.String]?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateArtifactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactName = "ArtifactName"
        case artifactType = "ArtifactType"
        case metadataProperties = "MetadataProperties"
        case properties = "Properties"
        case source = "Source"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactName)
        artifactName = artifactNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ArtifactSource.self, forKey: .source)
        source = sourceDecoded
        let artifactTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactType)
        artifactType = artifactTypeDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateArtifactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateArtifactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateArtifactOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateArtifactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateArtifactOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.artifactArn = output.artifactArn
        } else {
            self.artifactArn = nil
        }
    }
}

public struct CreateArtifactOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the artifact.
    public var artifactArn: Swift.String?

    public init (
        artifactArn: Swift.String? = nil
    )
    {
        self.artifactArn = artifactArn
    }
}

struct CreateArtifactOutputResponseBody: Swift.Equatable {
    let artifactArn: Swift.String?
}

extension CreateArtifactOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactArn)
        artifactArn = artifactArnDecoded
    }
}

extension CreateAutoMLJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobConfig = "AutoMLJobConfig"
        case autoMLJobName = "AutoMLJobName"
        case autoMLJobObjective = "AutoMLJobObjective"
        case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
        case inputDataConfig = "InputDataConfig"
        case modelDeployConfig = "ModelDeployConfig"
        case outputDataConfig = "OutputDataConfig"
        case problemType = "ProblemType"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobConfig = autoMLJobConfig {
            try encodeContainer.encode(autoMLJobConfig, forKey: .autoMLJobConfig)
        }
        if let autoMLJobName = autoMLJobName {
            try encodeContainer.encode(autoMLJobName, forKey: .autoMLJobName)
        }
        if let autoMLJobObjective = autoMLJobObjective {
            try encodeContainer.encode(autoMLJobObjective, forKey: .autoMLJobObjective)
        }
        if generateCandidateDefinitionsOnly != false {
            try encodeContainer.encode(generateCandidateDefinitionsOnly, forKey: .generateCandidateDefinitionsOnly)
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for automlinputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(automlinputdataconfig0)
            }
        }
        if let modelDeployConfig = modelDeployConfig {
            try encodeContainer.encode(modelDeployConfig, forKey: .modelDeployConfig)
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let problemType = problemType {
            try encodeContainer.encode(problemType.rawValue, forKey: .problemType)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateAutoMLJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAutoMLJobInput: Swift.Equatable {
    /// Contains CompletionCriteria and SecurityConfig settings for the AutoML job.
    public var autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig?
    /// Identifies an Autopilot job. The name must be unique to your account and is case-insensitive.
    /// This member is required.
    public var autoMLJobName: Swift.String?
    /// Defines the objective metric used to measure the predictive quality of an AutoML job. You provide an [AutoMLJobObjective$MetricName] and Autopilot infers whether to minimize or maximize it.
    public var autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
    /// Generates possible candidates without training the models. A candidate is a combination of data preprocessors, algorithms, and algorithm parameter settings.
    public var generateCandidateDefinitionsOnly: Swift.Bool
    /// An array of channel objects that describes the input data and its location. Each channel is a named input source. Similar to InputDataConfig supported by . Format(s) supported: CSV. Minimum of 500 rows.
    /// This member is required.
    public var inputDataConfig: [SageMakerClientTypes.AutoMLChannel]?
    /// Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.
    public var modelDeployConfig: SageMakerClientTypes.ModelDeployConfig?
    /// Provides information about encryption and the Amazon S3 output path needed to store artifacts from an AutoML job. Format(s) supported: CSV.
    /// This member is required.
    public var outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig?
    /// Defines the type of supervised learning available for the candidates. Options include: BinaryClassification, MulticlassClassification, and Regression. For more information, see [ Amazon SageMaker Autopilot problem types and algorithm support](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-problem-types.html).
    public var problemType: SageMakerClientTypes.ProblemType?
    /// The ARN of the role that is used to access the data.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Each tag consists of a key and an optional value. Tag keys must be unique per resource.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig? = nil,
        autoMLJobName: Swift.String? = nil,
        autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective? = nil,
        generateCandidateDefinitionsOnly: Swift.Bool = false,
        inputDataConfig: [SageMakerClientTypes.AutoMLChannel]? = nil,
        modelDeployConfig: SageMakerClientTypes.ModelDeployConfig? = nil,
        outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig? = nil,
        problemType: SageMakerClientTypes.ProblemType? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.autoMLJobConfig = autoMLJobConfig
        self.autoMLJobName = autoMLJobName
        self.autoMLJobObjective = autoMLJobObjective
        self.generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnly
        self.inputDataConfig = inputDataConfig
        self.modelDeployConfig = modelDeployConfig
        self.outputDataConfig = outputDataConfig
        self.problemType = problemType
        self.roleArn = roleArn
        self.tags = tags
    }
}

struct CreateAutoMLJobInputBody: Swift.Equatable {
    let autoMLJobName: Swift.String?
    let inputDataConfig: [SageMakerClientTypes.AutoMLChannel]?
    let outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig?
    let problemType: SageMakerClientTypes.ProblemType?
    let autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
    let autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig?
    let roleArn: Swift.String?
    let generateCandidateDefinitionsOnly: Swift.Bool
    let tags: [SageMakerClientTypes.Tag]?
    let modelDeployConfig: SageMakerClientTypes.ModelDeployConfig?
}

extension CreateAutoMLJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobConfig = "AutoMLJobConfig"
        case autoMLJobName = "AutoMLJobName"
        case autoMLJobObjective = "AutoMLJobObjective"
        case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
        case inputDataConfig = "InputDataConfig"
        case modelDeployConfig = "ModelDeployConfig"
        case outputDataConfig = "OutputDataConfig"
        case problemType = "ProblemType"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobName)
        autoMLJobName = autoMLJobNameDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AutoMLChannel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.AutoMLChannel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.AutoMLChannel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let problemTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProblemType.self, forKey: .problemType)
        problemType = problemTypeDecoded
        let autoMLJobObjectiveDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobObjective.self, forKey: .autoMLJobObjective)
        autoMLJobObjective = autoMLJobObjectiveDecoded
        let autoMLJobConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobConfig.self, forKey: .autoMLJobConfig)
        autoMLJobConfig = autoMLJobConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let generateCandidateDefinitionsOnlyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .generateCandidateDefinitionsOnly)
        generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnlyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let modelDeployConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelDeployConfig.self, forKey: .modelDeployConfig)
        modelDeployConfig = modelDeployConfigDecoded
    }
}

extension CreateAutoMLJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAutoMLJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAutoMLJobOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAutoMLJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateAutoMLJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoMLJobArn = output.autoMLJobArn
        } else {
            self.autoMLJobArn = nil
        }
    }
}

public struct CreateAutoMLJobOutputResponse: Swift.Equatable {
    /// The unique ARN assigned to the AutoML job when it is created.
    /// This member is required.
    public var autoMLJobArn: Swift.String?

    public init (
        autoMLJobArn: Swift.String? = nil
    )
    {
        self.autoMLJobArn = autoMLJobArn
    }
}

struct CreateAutoMLJobOutputResponseBody: Swift.Equatable {
    let autoMLJobArn: Swift.String?
}

extension CreateAutoMLJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobArn = "AutoMLJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
    }
}

extension CreateCodeRepositoryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryName = "CodeRepositoryName"
        case gitConfig = "GitConfig"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeRepositoryName = codeRepositoryName {
            try encodeContainer.encode(codeRepositoryName, forKey: .codeRepositoryName)
        }
        if let gitConfig = gitConfig {
            try encodeContainer.encode(gitConfig, forKey: .gitConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateCodeRepositoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateCodeRepositoryInput: Swift.Equatable {
    /// The name of the Git repository. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
    /// This member is required.
    public var codeRepositoryName: Swift.String?
    /// Specifies details about the repository, including the URL where the repository is located, the default branch, and credentials to use to access the repository.
    /// This member is required.
    public var gitConfig: SageMakerClientTypes.GitConfig?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        codeRepositoryName: Swift.String? = nil,
        gitConfig: SageMakerClientTypes.GitConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.codeRepositoryName = codeRepositoryName
        self.gitConfig = gitConfig
        self.tags = tags
    }
}

struct CreateCodeRepositoryInputBody: Swift.Equatable {
    let codeRepositoryName: Swift.String?
    let gitConfig: SageMakerClientTypes.GitConfig?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateCodeRepositoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryName = "CodeRepositoryName"
        case gitConfig = "GitConfig"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryName)
        codeRepositoryName = codeRepositoryNameDecoded
        let gitConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.GitConfig.self, forKey: .gitConfig)
        gitConfig = gitConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateCodeRepositoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCodeRepositoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCodeRepositoryOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCodeRepositoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCodeRepositoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeRepositoryArn = output.codeRepositoryArn
        } else {
            self.codeRepositoryArn = nil
        }
    }
}

public struct CreateCodeRepositoryOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the new repository.
    /// This member is required.
    public var codeRepositoryArn: Swift.String?

    public init (
        codeRepositoryArn: Swift.String? = nil
    )
    {
        self.codeRepositoryArn = codeRepositoryArn
    }
}

struct CreateCodeRepositoryOutputResponseBody: Swift.Equatable {
    let codeRepositoryArn: Swift.String?
}

extension CreateCodeRepositoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryArn = "CodeRepositoryArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositoryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryArn)
        codeRepositoryArn = codeRepositoryArnDecoded
    }
}

extension CreateCompilationJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
        case inputConfig = "InputConfig"
        case modelPackageVersionArn = "ModelPackageVersionArn"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compilationJobName = compilationJobName {
            try encodeContainer.encode(compilationJobName, forKey: .compilationJobName)
        }
        if let inputConfig = inputConfig {
            try encodeContainer.encode(inputConfig, forKey: .inputConfig)
        }
        if let modelPackageVersionArn = modelPackageVersionArn {
            try encodeContainer.encode(modelPackageVersionArn, forKey: .modelPackageVersionArn)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension CreateCompilationJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateCompilationJobInput: Swift.Equatable {
    /// A name for the model compilation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account.
    /// This member is required.
    public var compilationJobName: Swift.String?
    /// Provides information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
    public var inputConfig: SageMakerClientTypes.InputConfig?
    /// The Amazon Resource Name (ARN) of a versioned model package. Provide either a ModelPackageVersionArn or an InputConfig object in the request syntax. The presence of both objects in the CreateCompilationJob request will return an exception.
    public var modelPackageVersionArn: Swift.String?
    /// Provides information about the output location for the compiled model and the target device the model runs on.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.OutputConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf. During model compilation, Amazon SageMaker needs your permission to:
    ///
    /// * Read input data from an S3 bucket
    ///
    /// * Write model artifacts to an S3 bucket
    ///
    /// * Write logs to Amazon CloudWatch Logs
    ///
    /// * Publish metrics to Amazon CloudWatch
    ///
    ///
    /// You grant permissions for all of these tasks to an IAM role. To pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission. For more information, see [Amazon SageMaker Roles.](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html)
    /// This member is required.
    public var roleArn: Swift.String?
    /// Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// A [VpcConfig] object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see [Protect Compilation Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html).
    public var vpcConfig: SageMakerClientTypes.NeoVpcConfig?

    public init (
        compilationJobName: Swift.String? = nil,
        inputConfig: SageMakerClientTypes.InputConfig? = nil,
        modelPackageVersionArn: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.OutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcConfig: SageMakerClientTypes.NeoVpcConfig? = nil
    )
    {
        self.compilationJobName = compilationJobName
        self.inputConfig = inputConfig
        self.modelPackageVersionArn = modelPackageVersionArn
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

struct CreateCompilationJobInputBody: Swift.Equatable {
    let compilationJobName: Swift.String?
    let roleArn: Swift.String?
    let modelPackageVersionArn: Swift.String?
    let inputConfig: SageMakerClientTypes.InputConfig?
    let outputConfig: SageMakerClientTypes.OutputConfig?
    let vpcConfig: SageMakerClientTypes.NeoVpcConfig?
    let stoppingCondition: SageMakerClientTypes.StoppingCondition?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateCompilationJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
        case inputConfig = "InputConfig"
        case modelPackageVersionArn = "ModelPackageVersionArn"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let modelPackageVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageVersionArn)
        modelPackageVersionArn = modelPackageVersionArnDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NeoVpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateCompilationJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCompilationJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCompilationJobOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCompilationJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCompilationJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compilationJobArn = output.compilationJobArn
        } else {
            self.compilationJobArn = nil
        }
    }
}

public struct CreateCompilationJobOutputResponse: Swift.Equatable {
    /// If the action is successful, the service sends back an HTTP 200 response. Amazon SageMaker returns the following data in JSON format:
    ///
    /// * CompilationJobArn: The Amazon Resource Name (ARN) of the compiled job.
    /// This member is required.
    public var compilationJobArn: Swift.String?

    public init (
        compilationJobArn: Swift.String? = nil
    )
    {
        self.compilationJobArn = compilationJobArn
    }
}

struct CreateCompilationJobOutputResponseBody: Swift.Equatable {
    let compilationJobArn: Swift.String?
}

extension CreateCompilationJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobArn = "CompilationJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compilationJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobArn)
        compilationJobArn = compilationJobArnDecoded
    }
}

extension CreateContextInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextName = "ContextName"
        case contextType = "ContextType"
        case description = "Description"
        case properties = "Properties"
        case source = "Source"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contextName = contextName {
            try encodeContainer.encode(contextName, forKey: .contextName)
        }
        if let contextType = contextType {
            try encodeContainer.encode(contextType, forKey: .contextType)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, lineageentityparameters0) in properties {
                try propertiesContainer.encode(lineageentityparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateContextInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateContextInput: Swift.Equatable {
    /// The name of the context. Must be unique to your account in an Amazon Web Services Region.
    /// This member is required.
    public var contextName: Swift.String?
    /// The context type.
    /// This member is required.
    public var contextType: Swift.String?
    /// The description of the context.
    public var description: Swift.String?
    /// A list of properties to add to the context.
    public var properties: [Swift.String:Swift.String]?
    /// The source type, ID, and URI.
    /// This member is required.
    public var source: SageMakerClientTypes.ContextSource?
    /// A list of tags to apply to the context.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        contextName: Swift.String? = nil,
        contextType: Swift.String? = nil,
        description: Swift.String? = nil,
        properties: [Swift.String:Swift.String]? = nil,
        source: SageMakerClientTypes.ContextSource? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.contextName = contextName
        self.contextType = contextType
        self.description = description
        self.properties = properties
        self.source = source
        self.tags = tags
    }
}

struct CreateContextInputBody: Swift.Equatable {
    let contextName: Swift.String?
    let source: SageMakerClientTypes.ContextSource?
    let contextType: Swift.String?
    let description: Swift.String?
    let properties: [Swift.String:Swift.String]?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateContextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextName = "ContextName"
        case contextType = "ContextType"
        case description = "Description"
        case properties = "Properties"
        case source = "Source"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextName)
        contextName = contextNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ContextSource.self, forKey: .source)
        source = sourceDecoded
        let contextTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextType)
        contextType = contextTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateContextOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContextOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateContextOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContextOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateContextOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contextArn = output.contextArn
        } else {
            self.contextArn = nil
        }
    }
}

public struct CreateContextOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the context.
    public var contextArn: Swift.String?

    public init (
        contextArn: Swift.String? = nil
    )
    {
        self.contextArn = contextArn
    }
}

struct CreateContextOutputResponseBody: Swift.Equatable {
    let contextArn: Swift.String?
}

extension CreateContextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextArn = "ContextArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextArn)
        contextArn = contextArnDecoded
    }
}

extension CreateDataQualityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataQualityAppSpecification = "DataQualityAppSpecification"
        case dataQualityBaselineConfig = "DataQualityBaselineConfig"
        case dataQualityJobInput = "DataQualityJobInput"
        case dataQualityJobOutputConfig = "DataQualityJobOutputConfig"
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataQualityAppSpecification = dataQualityAppSpecification {
            try encodeContainer.encode(dataQualityAppSpecification, forKey: .dataQualityAppSpecification)
        }
        if let dataQualityBaselineConfig = dataQualityBaselineConfig {
            try encodeContainer.encode(dataQualityBaselineConfig, forKey: .dataQualityBaselineConfig)
        }
        if let dataQualityJobInput = dataQualityJobInput {
            try encodeContainer.encode(dataQualityJobInput, forKey: .dataQualityJobInput)
        }
        if let dataQualityJobOutputConfig = dataQualityJobOutputConfig {
            try encodeContainer.encode(dataQualityJobOutputConfig, forKey: .dataQualityJobOutputConfig)
        }
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let jobResources = jobResources {
            try encodeContainer.encode(jobResources, forKey: .jobResources)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateDataQualityJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDataQualityJobDefinitionInput: Swift.Equatable {
    /// Specifies the container that runs the monitoring job.
    /// This member is required.
    public var dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification?
    /// Configures the constraints and baselines for the monitoring job.
    public var dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig?
    /// A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.
    /// This member is required.
    public var dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// The name for the monitoring job definition.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Specifies networking configuration for the monitoring job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification? = nil,
        dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig? = nil,
        dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput? = nil,
        dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.dataQualityAppSpecification = dataQualityAppSpecification
        self.dataQualityBaselineConfig = dataQualityBaselineConfig
        self.dataQualityJobInput = dataQualityJobInput
        self.dataQualityJobOutputConfig = dataQualityJobOutputConfig
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

struct CreateDataQualityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
    let dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig?
    let dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification?
    let dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput?
    let dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateDataQualityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataQualityAppSpecification = "DataQualityAppSpecification"
        case dataQualityBaselineConfig = "DataQualityBaselineConfig"
        case dataQualityJobInput = "DataQualityJobInput"
        case dataQualityJobOutputConfig = "DataQualityJobOutputConfig"
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let dataQualityBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataQualityBaselineConfig.self, forKey: .dataQualityBaselineConfig)
        dataQualityBaselineConfig = dataQualityBaselineConfigDecoded
        let dataQualityAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataQualityAppSpecification.self, forKey: .dataQualityAppSpecification)
        dataQualityAppSpecification = dataQualityAppSpecificationDecoded
        let dataQualityJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataQualityJobInput.self, forKey: .dataQualityJobInput)
        dataQualityJobInput = dataQualityJobInputDecoded
        let dataQualityJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .dataQualityJobOutputConfig)
        dataQualityJobOutputConfig = dataQualityJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDataQualityJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataQualityJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDataQualityJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataQualityJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDataQualityJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionArn = output.jobDefinitionArn
        } else {
            self.jobDefinitionArn = nil
        }
    }
}

public struct CreateDataQualityJobDefinitionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the job definition.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?

    public init (
        jobDefinitionArn: Swift.String? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
    }
}

struct CreateDataQualityJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionArn: Swift.String?
}

extension CreateDataQualityJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionArn = "JobDefinitionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
    }
}

extension CreateDeviceFleetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case deviceFleetName = "DeviceFleetName"
        case enableIotRoleAlias = "EnableIotRoleAlias"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let enableIotRoleAlias = enableIotRoleAlias {
            try encodeContainer.encode(enableIotRoleAlias, forKey: .enableIotRoleAlias)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateDeviceFleetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDeviceFleetInput: Swift.Equatable {
    /// A description of the fleet.
    public var description: Swift.String?
    /// The name of the fleet that the device belongs to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}". For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".
    public var enableIotRoleAlias: Swift.Bool?
    /// The output configuration for storing sample data collected by the fleet.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).
    public var roleArn: Swift.String?
    /// Creates tags for the specified fleet.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        enableIotRoleAlias: Swift.Bool? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.deviceFleetName = deviceFleetName
        self.enableIotRoleAlias = enableIotRoleAlias
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.tags = tags
    }
}

struct CreateDeviceFleetInputBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
    let roleArn: Swift.String?
    let description: Swift.String?
    let outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    let tags: [SageMakerClientTypes.Tag]?
    let enableIotRoleAlias: Swift.Bool?
}

extension CreateDeviceFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case deviceFleetName = "DeviceFleetName"
        case enableIotRoleAlias = "EnableIotRoleAlias"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgeOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let enableIotRoleAliasDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableIotRoleAlias)
        enableIotRoleAlias = enableIotRoleAliasDecoded
    }
}

extension CreateDeviceFleetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeviceFleetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDeviceFleetOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeviceFleetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateDeviceFleetOutputResponse: Swift.Equatable {

}

extension CreateDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appNetworkAccessType = "AppNetworkAccessType"
        case appSecurityGroupManagement = "AppSecurityGroupManagement"
        case authMode = "AuthMode"
        case defaultUserSettings = "DefaultUserSettings"
        case domainName = "DomainName"
        case domainSettings = "DomainSettings"
        case homeEfsFileSystemKmsKeyId = "HomeEfsFileSystemKmsKeyId"
        case kmsKeyId = "KmsKeyId"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appNetworkAccessType = appNetworkAccessType {
            try encodeContainer.encode(appNetworkAccessType.rawValue, forKey: .appNetworkAccessType)
        }
        if let appSecurityGroupManagement = appSecurityGroupManagement {
            try encodeContainer.encode(appSecurityGroupManagement.rawValue, forKey: .appSecurityGroupManagement)
        }
        if let authMode = authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let defaultUserSettings = defaultUserSettings {
            try encodeContainer.encode(defaultUserSettings, forKey: .defaultUserSettings)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainSettings = domainSettings {
            try encodeContainer.encode(domainSettings, forKey: .domainSettings)
        }
        if let homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyId {
            try encodeContainer.encode(homeEfsFileSystemKmsKeyId, forKey: .homeEfsFileSystemKmsKeyId)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnets0 in subnetIds {
                try subnetIdsContainer.encode(subnets0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }
}

extension CreateDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDomainInput: Swift.Equatable {
    /// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
    ///
    /// * PublicInternetOnly - Non-EFS traffic is through a VPC managed by Amazon SageMaker, which allows direct internet access
    ///
    /// * VpcOnly - All Studio traffic is through the specified VPC and subnets
    public var appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType?
    /// The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required when CreateDomain.AppNetworkAccessType is VPCOnly and DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided.
    public var appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement?
    /// The mode of authentication that members use to access the domain.
    /// This member is required.
    public var authMode: SageMakerClientTypes.AuthMode?
    /// The default settings to use to create a user profile when UserSettings isn't specified in the call to the CreateUserProfile API. SecurityGroups is aggregated when specified in both calls. For all other settings in UserSettings, the values specified in CreateUserProfile take precedence over those specified in CreateDomain.
    /// This member is required.
    public var defaultUserSettings: SageMakerClientTypes.UserSettings?
    /// A name for the domain.
    /// This member is required.
    public var domainName: Swift.String?
    /// A collection of Domain settings.
    public var domainSettings: SageMakerClientTypes.DomainSettings?
    /// This member is deprecated and replaced with KmsKeyId.
    @available(*, deprecated, message: "This property is deprecated, use KmsKeyId instead.")
    public var homeEfsFileSystemKmsKeyId: Swift.String?
    /// SageMaker uses Amazon Web Services KMS to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, specify a customer managed key.
    public var kmsKeyId: Swift.String?
    /// The VPC subnets that Studio uses for communication.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// Tags to associated with the Domain. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API. Tags that you specify for the Domain are also added to all Apps that the Domain launches.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
    /// This member is required.
    public var vpcId: Swift.String?

    public init (
        appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType? = nil,
        appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement? = nil,
        authMode: SageMakerClientTypes.AuthMode? = nil,
        defaultUserSettings: SageMakerClientTypes.UserSettings? = nil,
        domainName: Swift.String? = nil,
        domainSettings: SageMakerClientTypes.DomainSettings? = nil,
        homeEfsFileSystemKmsKeyId: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.appNetworkAccessType = appNetworkAccessType
        self.appSecurityGroupManagement = appSecurityGroupManagement
        self.authMode = authMode
        self.defaultUserSettings = defaultUserSettings
        self.domainName = domainName
        self.domainSettings = domainSettings
        self.homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyId
        self.kmsKeyId = kmsKeyId
        self.subnetIds = subnetIds
        self.tags = tags
        self.vpcId = vpcId
    }
}

struct CreateDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let authMode: SageMakerClientTypes.AuthMode?
    let defaultUserSettings: SageMakerClientTypes.UserSettings?
    let subnetIds: [Swift.String]?
    let vpcId: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType?
    let homeEfsFileSystemKmsKeyId: Swift.String?
    let kmsKeyId: Swift.String?
    let appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement?
    let domainSettings: SageMakerClientTypes.DomainSettings?
}

extension CreateDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appNetworkAccessType = "AppNetworkAccessType"
        case appSecurityGroupManagement = "AppSecurityGroupManagement"
        case authMode = "AuthMode"
        case defaultUserSettings = "DefaultUserSettings"
        case domainName = "DomainName"
        case domainSettings = "DomainSettings"
        case homeEfsFileSystemKmsKeyId = "HomeEfsFileSystemKmsKeyId"
        case kmsKeyId = "KmsKeyId"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let defaultUserSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserSettings.self, forKey: .defaultUserSettings)
        defaultUserSettings = defaultUserSettingsDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let appNetworkAccessTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppNetworkAccessType.self, forKey: .appNetworkAccessType)
        appNetworkAccessType = appNetworkAccessTypeDecoded
        let homeEfsFileSystemKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeEfsFileSystemKmsKeyId)
        homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyIdDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let appSecurityGroupManagementDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppSecurityGroupManagement.self, forKey: .appSecurityGroupManagement)
        appSecurityGroupManagement = appSecurityGroupManagementDecoded
        let domainSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DomainSettings.self, forKey: .domainSettings)
        domainSettings = domainSettingsDecoded
    }
}

extension CreateDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDomainOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainArn = output.domainArn
            self.url = output.url
        } else {
            self.domainArn = nil
            self.url = nil
        }
    }
}

public struct CreateDomainOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the created domain.
    public var domainArn: Swift.String?
    /// The URL to the created domain.
    public var url: Swift.String?

    public init (
        domainArn: Swift.String? = nil,
        url: Swift.String? = nil
    )
    {
        self.domainArn = domainArn
        self.url = url
    }
}

struct CreateDomainOutputResponseBody: Swift.Equatable {
    let domainArn: Swift.String?
    let url: Swift.String?
}

extension CreateDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainArn = "DomainArn"
        case url = "Url"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension CreateEdgePackagingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
        case edgePackagingJobName = "EdgePackagingJobName"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
        case outputConfig = "OutputConfig"
        case resourceKey = "ResourceKey"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compilationJobName = compilationJobName {
            try encodeContainer.encode(compilationJobName, forKey: .compilationJobName)
        }
        if let edgePackagingJobName = edgePackagingJobName {
            try encodeContainer.encode(edgePackagingJobName, forKey: .edgePackagingJobName)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let resourceKey = resourceKey {
            try encodeContainer.encode(resourceKey, forKey: .resourceKey)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateEdgePackagingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateEdgePackagingJobInput: Swift.Equatable {
    /// The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.
    /// This member is required.
    public var compilationJobName: Swift.String?
    /// The name of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobName: Swift.String?
    /// The name of the model.
    /// This member is required.
    public var modelName: Swift.String?
    /// The version of the model.
    /// This member is required.
    public var modelVersion: Swift.String?
    /// Provides information about the output location for the packaged model.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.
    public var resourceKey: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Creates tags for the packaging job.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        compilationJobName: Swift.String? = nil,
        edgePackagingJobName: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelVersion: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        resourceKey: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.compilationJobName = compilationJobName
        self.edgePackagingJobName = edgePackagingJobName
        self.modelName = modelName
        self.modelVersion = modelVersion
        self.outputConfig = outputConfig
        self.resourceKey = resourceKey
        self.roleArn = roleArn
        self.tags = tags
    }
}

struct CreateEdgePackagingJobInputBody: Swift.Equatable {
    let edgePackagingJobName: Swift.String?
    let compilationJobName: Swift.String?
    let modelName: Swift.String?
    let modelVersion: Swift.String?
    let roleArn: Swift.String?
    let outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    let resourceKey: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateEdgePackagingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
        case edgePackagingJobName = "EdgePackagingJobName"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
        case outputConfig = "OutputConfig"
        case resourceKey = "ResourceKey"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgePackagingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobName)
        edgePackagingJobName = edgePackagingJobNameDecoded
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgeOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let resourceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceKey)
        resourceKey = resourceKeyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateEdgePackagingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEdgePackagingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateEdgePackagingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEdgePackagingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateEdgePackagingJobOutputResponse: Swift.Equatable {

}

extension CreateEndpointConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asyncInferenceConfig = "AsyncInferenceConfig"
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointConfigName = "EndpointConfigName"
        case kmsKeyId = "KmsKeyId"
        case productionVariants = "ProductionVariants"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let asyncInferenceConfig = asyncInferenceConfig {
            try encodeContainer.encode(asyncInferenceConfig, forKey: .asyncInferenceConfig)
        }
        if let dataCaptureConfig = dataCaptureConfig {
            try encodeContainer.encode(dataCaptureConfig, forKey: .dataCaptureConfig)
        }
        if let endpointConfigName = endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let productionVariants = productionVariants {
            var productionVariantsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productionVariants)
            for productionvariantlist0 in productionVariants {
                try productionVariantsContainer.encode(productionvariantlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateEndpointConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateEndpointConfigInput: Swift.Equatable {
    /// Specifies configuration for how an endpoint performs asynchronous inference. This is a required field in order for your Endpoint to be invoked using [InvokeEndpointAsync](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html).
    public var asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
    ///
    public var dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig?
    /// The name of the endpoint configuration. You specify this name in a [CreateEndpoint] request.
    /// This member is required.
    public var endpointConfigName: Swift.String?
    /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. The KmsKeyId can be any of the following formats:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// The KMS key policy must grant permission to the IAM role that you specify in your CreateEndpoint, UpdateEndpoint requests. For more information, refer to the Amazon Web Services Key Management Service section[ Using Key Policies in Amazon Web Services KMS ](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a KmsKeyId when using an instance type with local storage. If any of the models that you specify in the ProductionVariants parameter use nitro-based instances with local storage, do not specify a value for the KmsKeyId parameter. If you specify a value for KmsKeyId when using any nitro-based instances with local storage, the call to CreateEndpointConfig fails. For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes). For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html).
    public var kmsKeyId: Swift.String?
    /// An list of ProductionVariant objects, one for each model that you want to host at this endpoint.
    /// This member is required.
    public var productionVariants: [SageMakerClientTypes.ProductionVariant]?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig? = nil,
        dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig? = nil,
        endpointConfigName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        productionVariants: [SageMakerClientTypes.ProductionVariant]? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.asyncInferenceConfig = asyncInferenceConfig
        self.dataCaptureConfig = dataCaptureConfig
        self.endpointConfigName = endpointConfigName
        self.kmsKeyId = kmsKeyId
        self.productionVariants = productionVariants
        self.tags = tags
    }
}

struct CreateEndpointConfigInputBody: Swift.Equatable {
    let endpointConfigName: Swift.String?
    let productionVariants: [SageMakerClientTypes.ProductionVariant]?
    let dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig?
    let tags: [SageMakerClientTypes.Tag]?
    let kmsKeyId: Swift.String?
    let asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
}

extension CreateEndpointConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asyncInferenceConfig = "AsyncInferenceConfig"
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointConfigName = "EndpointConfigName"
        case kmsKeyId = "KmsKeyId"
        case productionVariants = "ProductionVariants"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariant?].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[SageMakerClientTypes.ProductionVariant]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [SageMakerClientTypes.ProductionVariant]()
            for structure0 in productionVariantsContainer {
                if let structure0 = structure0 {
                    productionVariantsDecoded0?.append(structure0)
                }
            }
        }
        productionVariants = productionVariantsDecoded0
        let dataCaptureConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataCaptureConfig.self, forKey: .dataCaptureConfig)
        dataCaptureConfig = dataCaptureConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let asyncInferenceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AsyncInferenceConfig.self, forKey: .asyncInferenceConfig)
        asyncInferenceConfig = asyncInferenceConfigDecoded
    }
}

extension CreateEndpointConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEndpointConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateEndpointConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEndpointConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateEndpointConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpointConfigArn = output.endpointConfigArn
        } else {
            self.endpointConfigArn = nil
        }
    }
}

public struct CreateEndpointConfigOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the endpoint configuration.
    /// This member is required.
    public var endpointConfigArn: Swift.String?

    public init (
        endpointConfigArn: Swift.String? = nil
    )
    {
        self.endpointConfigArn = endpointConfigArn
    }
}

struct CreateEndpointConfigOutputResponseBody: Swift.Equatable {
    let endpointConfigArn: Swift.String?
}

extension CreateEndpointConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointConfigArn = "EndpointConfigArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigArn)
        endpointConfigArn = endpointConfigArnDecoded
    }
}

extension CreateEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfig = "DeploymentConfig"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentConfig = deploymentConfig {
            try encodeContainer.encode(deploymentConfig, forKey: .deploymentConfig)
        }
        if let endpointConfigName = endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateEndpointInput: Swift.Equatable {
    /// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
    public var deploymentConfig: SageMakerClientTypes.DeploymentConfig?
    /// The name of an endpoint configuration. For more information, see [CreateEndpointConfig].
    /// This member is required.
    public var endpointConfigName: Swift.String?
    /// The name of the endpoint.The name must be unique within an Amazon Web Services Region in your Amazon Web Services account. The name is case-insensitive in CreateEndpoint, but the case is preserved and must be matched in .
    /// This member is required.
    public var endpointName: Swift.String?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        deploymentConfig: SageMakerClientTypes.DeploymentConfig? = nil,
        endpointConfigName: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.deploymentConfig = deploymentConfig
        self.endpointConfigName = endpointConfigName
        self.endpointName = endpointName
        self.tags = tags
    }
}

struct CreateEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let endpointConfigName: Swift.String?
    let deploymentConfig: SageMakerClientTypes.DeploymentConfig?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfig = "DeploymentConfig"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let deploymentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DeploymentConfig.self, forKey: .deploymentConfig)
        deploymentConfig = deploymentConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateEndpointOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpointArn = output.endpointArn
        } else {
            self.endpointArn = nil
        }
    }
}

public struct CreateEndpointOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the endpoint.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init (
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

struct CreateEndpointOutputResponseBody: Swift.Equatable {
    let endpointArn: Swift.String?
}

extension CreateEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointArn = "EndpointArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
    }
}

extension CreateExperimentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayName = "DisplayName"
        case experimentName = "ExperimentName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateExperimentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateExperimentInput: Swift.Equatable {
    /// The description of the experiment.
    public var description: Swift.String?
    /// The name of the experiment as displayed. The name doesn't need to be unique. If you don't specify DisplayName, the value in ExperimentName is displayed.
    public var displayName: Swift.String?
    /// The name of the experiment. The name must be unique in your Amazon Web Services account and is not case-sensitive.
    /// This member is required.
    public var experimentName: Swift.String?
    /// A list of tags to associate with the experiment. You can use [Search] API to search on the tags.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        experimentName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.experimentName = experimentName
        self.tags = tags
    }
}

struct CreateExperimentInputBody: Swift.Equatable {
    let experimentName: Swift.String?
    let displayName: Swift.String?
    let description: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateExperimentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayName = "DisplayName"
        case experimentName = "ExperimentName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateExperimentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateExperimentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateExperimentOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateExperimentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateExperimentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.experimentArn = output.experimentArn
        } else {
            self.experimentArn = nil
        }
    }
}

public struct CreateExperimentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the experiment.
    public var experimentArn: Swift.String?

    public init (
        experimentArn: Swift.String? = nil
    )
    {
        self.experimentArn = experimentArn
    }
}

struct CreateExperimentOutputResponseBody: Swift.Equatable {
    let experimentArn: Swift.String?
}

extension CreateExperimentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentArn = "ExperimentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentArn)
        experimentArn = experimentArnDecoded
    }
}

extension CreateFeatureGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case eventTimeFeatureName = "EventTimeFeatureName"
        case featureDefinitions = "FeatureDefinitions"
        case featureGroupName = "FeatureGroupName"
        case offlineStoreConfig = "OfflineStoreConfig"
        case onlineStoreConfig = "OnlineStoreConfig"
        case recordIdentifierFeatureName = "RecordIdentifierFeatureName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventTimeFeatureName = eventTimeFeatureName {
            try encodeContainer.encode(eventTimeFeatureName, forKey: .eventTimeFeatureName)
        }
        if let featureDefinitions = featureDefinitions {
            var featureDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureDefinitions)
            for featuredefinitions0 in featureDefinitions {
                try featureDefinitionsContainer.encode(featuredefinitions0)
            }
        }
        if let featureGroupName = featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
        if let offlineStoreConfig = offlineStoreConfig {
            try encodeContainer.encode(offlineStoreConfig, forKey: .offlineStoreConfig)
        }
        if let onlineStoreConfig = onlineStoreConfig {
            try encodeContainer.encode(onlineStoreConfig, forKey: .onlineStoreConfig)
        }
        if let recordIdentifierFeatureName = recordIdentifierFeatureName {
            try encodeContainer.encode(recordIdentifierFeatureName, forKey: .recordIdentifierFeatureName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateFeatureGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateFeatureGroupInput: Swift.Equatable {
    /// A free-form description of a FeatureGroup.
    public var description: Swift.String?
    /// The name of the feature that stores the EventTime of a Record in a FeatureGroup. An EventTime is a point in time when a new event occurs that corresponds to the creation or update of a Record in a FeatureGroup. All Records in the FeatureGroup must have a corresponding EventTime. An EventTime can be a String or Fractional.
    ///
    /// * Fractional: EventTime feature values must be a Unix timestamp in seconds.
    ///
    /// * String: EventTime feature values must be an ISO-8601 string in the format. The following formats are supported yyyy-MM-dd'T'HH:mm:ssZ and yyyy-MM-dd'T'HH:mm:ss.SSSZ where yyyy, MM, and dd represent the year, month, and day respectively and HH, mm, ss, and if applicable, SSS represent the hour, month, second and milliseconds respsectively. 'T' and Z are constants.
    /// This member is required.
    public var eventTimeFeatureName: Swift.String?
    /// A list of Feature names and types. Name and Type is compulsory per Feature. Valid feature FeatureTypes are Integral, Fractional and String. FeatureNames cannot be any of the following: is_deleted, write_time, api_invocation_time You can create up to 2,500 FeatureDefinitions per FeatureGroup.
    /// This member is required.
    public var featureDefinitions: [SageMakerClientTypes.FeatureDefinition]?
    /// The name of the FeatureGroup. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. The name:
    ///
    /// * Must start and end with an alphanumeric character.
    ///
    /// * Can only contain alphanumeric character and hyphens. Spaces are not allowed.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// Use this to configure an OfflineFeatureStore. This parameter allows you to specify:
    ///
    /// * The Amazon Simple Storage Service (Amazon S3) location of an OfflineStore.
    ///
    /// * A configuration for an Amazon Web Services Glue or Amazon Web Services Hive data catalog.
    ///
    /// * An KMS encryption key to encrypt the Amazon S3 location used for OfflineStore. If KMS encryption key is not specified, by default we encrypt all data at rest using Amazon Web Services KMS key. By defining your [bucket-level key](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-key.html) for SSE, you can reduce Amazon Web Services KMS requests costs by up to 99 percent.
    ///
    ///
    /// To learn more about this parameter, see [OfflineStoreConfig].
    public var offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig?
    /// You can turn the OnlineStore on or off by specifying True for the EnableOnlineStore flag in OnlineStoreConfig; the default value is False. You can also include an Amazon Web Services KMS key ID (KMSKeyId) for at-rest encryption of the OnlineStore.
    public var onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig?
    /// The name of the Feature whose value uniquely identifies a Record defined in the FeatureStore. Only the latest record per identifier value will be stored in the OnlineStore. RecordIdentifierFeatureName must be one of feature definitions' names. You use the RecordIdentifierFeatureName to access data in a FeatureStore. This name:
    ///
    /// * Must start and end with an alphanumeric character.
    ///
    /// * Can only contains alphanumeric characters, hyphens, underscores. Spaces are not allowed.
    /// This member is required.
    public var recordIdentifierFeatureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the OfflineStore if an OfflineStoreConfig is provided.
    public var roleArn: Swift.String?
    /// Tags used to identify Features in each FeatureGroup.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        eventTimeFeatureName: Swift.String? = nil,
        featureDefinitions: [SageMakerClientTypes.FeatureDefinition]? = nil,
        featureGroupName: Swift.String? = nil,
        offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig? = nil,
        onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig? = nil,
        recordIdentifierFeatureName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.eventTimeFeatureName = eventTimeFeatureName
        self.featureDefinitions = featureDefinitions
        self.featureGroupName = featureGroupName
        self.offlineStoreConfig = offlineStoreConfig
        self.onlineStoreConfig = onlineStoreConfig
        self.recordIdentifierFeatureName = recordIdentifierFeatureName
        self.roleArn = roleArn
        self.tags = tags
    }
}

struct CreateFeatureGroupInputBody: Swift.Equatable {
    let featureGroupName: Swift.String?
    let recordIdentifierFeatureName: Swift.String?
    let eventTimeFeatureName: Swift.String?
    let featureDefinitions: [SageMakerClientTypes.FeatureDefinition]?
    let onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig?
    let offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig?
    let roleArn: Swift.String?
    let description: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateFeatureGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case eventTimeFeatureName = "EventTimeFeatureName"
        case featureDefinitions = "FeatureDefinitions"
        case featureGroupName = "FeatureGroupName"
        case offlineStoreConfig = "OfflineStoreConfig"
        case onlineStoreConfig = "OnlineStoreConfig"
        case recordIdentifierFeatureName = "RecordIdentifierFeatureName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
        let recordIdentifierFeatureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordIdentifierFeatureName)
        recordIdentifierFeatureName = recordIdentifierFeatureNameDecoded
        let eventTimeFeatureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTimeFeatureName)
        eventTimeFeatureName = eventTimeFeatureNameDecoded
        let featureDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.FeatureDefinition?].self, forKey: .featureDefinitions)
        var featureDefinitionsDecoded0:[SageMakerClientTypes.FeatureDefinition]? = nil
        if let featureDefinitionsContainer = featureDefinitionsContainer {
            featureDefinitionsDecoded0 = [SageMakerClientTypes.FeatureDefinition]()
            for structure0 in featureDefinitionsContainer {
                if let structure0 = structure0 {
                    featureDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        featureDefinitions = featureDefinitionsDecoded0
        let onlineStoreConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OnlineStoreConfig.self, forKey: .onlineStoreConfig)
        onlineStoreConfig = onlineStoreConfigDecoded
        let offlineStoreConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OfflineStoreConfig.self, forKey: .offlineStoreConfig)
        offlineStoreConfig = offlineStoreConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateFeatureGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFeatureGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateFeatureGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFeatureGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateFeatureGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.featureGroupArn = output.featureGroupArn
        } else {
            self.featureGroupArn = nil
        }
    }
}

public struct CreateFeatureGroupOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the FeatureGroup. This is a unique identifier for the feature group.
    /// This member is required.
    public var featureGroupArn: Swift.String?

    public init (
        featureGroupArn: Swift.String? = nil
    )
    {
        self.featureGroupArn = featureGroupArn
    }
}

struct CreateFeatureGroupOutputResponseBody: Swift.Equatable {
    let featureGroupArn: Swift.String?
}

extension CreateFeatureGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureGroupArn = "FeatureGroupArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupArn)
        featureGroupArn = featureGroupArnDecoded
    }
}

extension CreateFlowDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowDefinitionName = "FlowDefinitionName"
        case humanLoopActivationConfig = "HumanLoopActivationConfig"
        case humanLoopConfig = "HumanLoopConfig"
        case humanLoopRequestSource = "HumanLoopRequestSource"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flowDefinitionName = flowDefinitionName {
            try encodeContainer.encode(flowDefinitionName, forKey: .flowDefinitionName)
        }
        if let humanLoopActivationConfig = humanLoopActivationConfig {
            try encodeContainer.encode(humanLoopActivationConfig, forKey: .humanLoopActivationConfig)
        }
        if let humanLoopConfig = humanLoopConfig {
            try encodeContainer.encode(humanLoopConfig, forKey: .humanLoopConfig)
        }
        if let humanLoopRequestSource = humanLoopRequestSource {
            try encodeContainer.encode(humanLoopRequestSource, forKey: .humanLoopRequestSource)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateFlowDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateFlowDefinitionInput: Swift.Equatable {
    /// The name of your flow definition.
    /// This member is required.
    public var flowDefinitionName: Swift.String?
    /// An object containing information about the events that trigger a human workflow.
    public var humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig?
    /// An object containing information about the tasks the human reviewers will perform.
    /// This member is required.
    public var humanLoopConfig: SageMakerClientTypes.HumanLoopConfig?
    /// Container for configuring the source of human task requests. Use to specify if Amazon Rekognition or Amazon Textract is used as an integration source.
    public var humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource?
    /// An object containing information about where the human review results will be uploaded.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig?
    /// The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298.
    /// This member is required.
    public var roleArn: Swift.String?
    /// An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        flowDefinitionName: Swift.String? = nil,
        humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig? = nil,
        humanLoopConfig: SageMakerClientTypes.HumanLoopConfig? = nil,
        humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource? = nil,
        outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.flowDefinitionName = flowDefinitionName
        self.humanLoopActivationConfig = humanLoopActivationConfig
        self.humanLoopConfig = humanLoopConfig
        self.humanLoopRequestSource = humanLoopRequestSource
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.tags = tags
    }
}

struct CreateFlowDefinitionInputBody: Swift.Equatable {
    let flowDefinitionName: Swift.String?
    let humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource?
    let humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig?
    let humanLoopConfig: SageMakerClientTypes.HumanLoopConfig?
    let outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig?
    let roleArn: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateFlowDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowDefinitionName = "FlowDefinitionName"
        case humanLoopActivationConfig = "HumanLoopActivationConfig"
        case humanLoopConfig = "HumanLoopConfig"
        case humanLoopRequestSource = "HumanLoopRequestSource"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionName)
        flowDefinitionName = flowDefinitionNameDecoded
        let humanLoopRequestSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanLoopRequestSource.self, forKey: .humanLoopRequestSource)
        humanLoopRequestSource = humanLoopRequestSourceDecoded
        let humanLoopActivationConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanLoopActivationConfig.self, forKey: .humanLoopActivationConfig)
        humanLoopActivationConfig = humanLoopActivationConfigDecoded
        let humanLoopConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanLoopConfig.self, forKey: .humanLoopConfig)
        humanLoopConfig = humanLoopConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FlowDefinitionOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateFlowDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFlowDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateFlowDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFlowDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateFlowDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.flowDefinitionArn = output.flowDefinitionArn
        } else {
            self.flowDefinitionArn = nil
        }
    }
}

public struct CreateFlowDefinitionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the flow definition you create.
    /// This member is required.
    public var flowDefinitionArn: Swift.String?

    public init (
        flowDefinitionArn: Swift.String? = nil
    )
    {
        self.flowDefinitionArn = flowDefinitionArn
    }
}

struct CreateFlowDefinitionOutputResponseBody: Swift.Equatable {
    let flowDefinitionArn: Swift.String?
}

extension CreateFlowDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowDefinitionArn = "FlowDefinitionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionArn)
        flowDefinitionArn = flowDefinitionArnDecoded
    }
}

extension CreateHumanTaskUiInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiName = "HumanTaskUiName"
        case tags = "Tags"
        case uiTemplate = "UiTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskUiName = humanTaskUiName {
            try encodeContainer.encode(humanTaskUiName, forKey: .humanTaskUiName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let uiTemplate = uiTemplate {
            try encodeContainer.encode(uiTemplate, forKey: .uiTemplate)
        }
    }
}

extension CreateHumanTaskUiInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateHumanTaskUiInput: Swift.Equatable {
    /// The name of the user interface you are creating.
    /// This member is required.
    public var humanTaskUiName: Swift.String?
    /// An array of key-value pairs that contain metadata to help you categorize and organize a human review workflow user interface. Each tag consists of a key and a value, both of which you define.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The Liquid template for the worker user interface.
    /// This member is required.
    public var uiTemplate: SageMakerClientTypes.UiTemplate?

    public init (
        humanTaskUiName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        uiTemplate: SageMakerClientTypes.UiTemplate? = nil
    )
    {
        self.humanTaskUiName = humanTaskUiName
        self.tags = tags
        self.uiTemplate = uiTemplate
    }
}

struct CreateHumanTaskUiInputBody: Swift.Equatable {
    let humanTaskUiName: Swift.String?
    let uiTemplate: SageMakerClientTypes.UiTemplate?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateHumanTaskUiInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiName = "HumanTaskUiName"
        case tags = "Tags"
        case uiTemplate = "UiTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanTaskUiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiName)
        humanTaskUiName = humanTaskUiNameDecoded
        let uiTemplateDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UiTemplate.self, forKey: .uiTemplate)
        uiTemplate = uiTemplateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateHumanTaskUiOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateHumanTaskUiOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateHumanTaskUiOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateHumanTaskUiOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateHumanTaskUiOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.humanTaskUiArn = output.humanTaskUiArn
        } else {
            self.humanTaskUiArn = nil
        }
    }
}

public struct CreateHumanTaskUiOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the human review workflow user interface you create.
    /// This member is required.
    public var humanTaskUiArn: Swift.String?

    public init (
        humanTaskUiArn: Swift.String? = nil
    )
    {
        self.humanTaskUiArn = humanTaskUiArn
    }
}

struct CreateHumanTaskUiOutputResponseBody: Swift.Equatable {
    let humanTaskUiArn: Swift.String?
}

extension CreateHumanTaskUiOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiArn = "HumanTaskUiArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanTaskUiArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiArn)
        humanTaskUiArn = humanTaskUiArnDecoded
    }
}

extension CreateHyperParameterTuningJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobConfig = "HyperParameterTuningJobConfig"
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case tags = "Tags"
        case trainingJobDefinition = "TrainingJobDefinition"
        case trainingJobDefinitions = "TrainingJobDefinitions"
        case warmStartConfig = "WarmStartConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hyperParameterTuningJobConfig = hyperParameterTuningJobConfig {
            try encodeContainer.encode(hyperParameterTuningJobConfig, forKey: .hyperParameterTuningJobConfig)
        }
        if let hyperParameterTuningJobName = hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingJobDefinition = trainingJobDefinition {
            try encodeContainer.encode(trainingJobDefinition, forKey: .trainingJobDefinition)
        }
        if let trainingJobDefinitions = trainingJobDefinitions {
            var trainingJobDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trainingJobDefinitions)
            for hyperparametertrainingjobdefinitions0 in trainingJobDefinitions {
                try trainingJobDefinitionsContainer.encode(hyperparametertrainingjobdefinitions0)
            }
        }
        if let warmStartConfig = warmStartConfig {
            try encodeContainer.encode(warmStartConfig, forKey: .warmStartConfig)
        }
    }
}

extension CreateHyperParameterTuningJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateHyperParameterTuningJobInput: Swift.Equatable {
    /// The [HyperParameterTuningJobConfig] object that describes the tuning job, including the search strategy, the objective metric used to evaluate training jobs, ranges of parameters to search, and resource limits for the tuning job. For more information, see [How Hyperparameter Tuning Works](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html).
    /// This member is required.
    public var hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig?
    /// The name of the tuning job. This name is the prefix for the names of all training jobs that this tuning job launches. The name must be unique within the same Amazon Web Services account and Amazon Web Services Region. The name must have 1 to 32 characters. Valid characters are a-z, A-Z, 0-9, and : + = @ _ % - (hyphen). The name is not case sensitive.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). Tags that you specify for the tuning job are also added to all training jobs that the tuning job launches.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The [HyperParameterTrainingJobDefinition] object that describes the training jobs that this tuning job launches, including static hyperparameters, input data configuration, output data configuration, resource configuration, and stopping condition.
    public var trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition?
    /// A list of the [HyperParameterTrainingJobDefinition] objects launched for this tuning job.
    public var trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]?
    /// Specifies the configuration for starting the hyperparameter tuning job using one or more previous tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job. All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric. If you specify IDENTICAL_DATA_AND_ALGORITHM as the WarmStartType value for the warm start configuration, the training job that performs the best in the new tuning job is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job. All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.
    public var warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig?

    public init (
        hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig? = nil,
        hyperParameterTuningJobName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition? = nil,
        trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]? = nil,
        warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig? = nil
    )
    {
        self.hyperParameterTuningJobConfig = hyperParameterTuningJobConfig
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
        self.tags = tags
        self.trainingJobDefinition = trainingJobDefinition
        self.trainingJobDefinitions = trainingJobDefinitions
        self.warmStartConfig = warmStartConfig
    }
}

struct CreateHyperParameterTuningJobInputBody: Swift.Equatable {
    let hyperParameterTuningJobName: Swift.String?
    let hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig?
    let trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition?
    let trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]?
    let warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateHyperParameterTuningJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobConfig = "HyperParameterTuningJobConfig"
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case tags = "Tags"
        case trainingJobDefinition = "TrainingJobDefinition"
        case trainingJobDefinitions = "TrainingJobDefinitions"
        case warmStartConfig = "WarmStartConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
        let hyperParameterTuningJobConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobConfig.self, forKey: .hyperParameterTuningJobConfig)
        hyperParameterTuningJobConfig = hyperParameterTuningJobConfigDecoded
        let trainingJobDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobDefinition.self, forKey: .trainingJobDefinition)
        trainingJobDefinition = trainingJobDefinitionDecoded
        let trainingJobDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterTrainingJobDefinition?].self, forKey: .trainingJobDefinitions)
        var trainingJobDefinitionsDecoded0:[SageMakerClientTypes.HyperParameterTrainingJobDefinition]? = nil
        if let trainingJobDefinitionsContainer = trainingJobDefinitionsContainer {
            trainingJobDefinitionsDecoded0 = [SageMakerClientTypes.HyperParameterTrainingJobDefinition]()
            for structure0 in trainingJobDefinitionsContainer {
                if let structure0 = structure0 {
                    trainingJobDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        trainingJobDefinitions = trainingJobDefinitionsDecoded0
        let warmStartConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig.self, forKey: .warmStartConfig)
        warmStartConfig = warmStartConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateHyperParameterTuningJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateHyperParameterTuningJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateHyperParameterTuningJobOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateHyperParameterTuningJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateHyperParameterTuningJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hyperParameterTuningJobArn = output.hyperParameterTuningJobArn
        } else {
            self.hyperParameterTuningJobArn = nil
        }
    }
}

public struct CreateHyperParameterTuningJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the tuning job. Amazon SageMaker assigns an ARN to a hyperparameter tuning job when you create it.
    /// This member is required.
    public var hyperParameterTuningJobArn: Swift.String?

    public init (
        hyperParameterTuningJobArn: Swift.String? = nil
    )
    {
        self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
    }
}

struct CreateHyperParameterTuningJobOutputResponseBody: Swift.Equatable {
    let hyperParameterTuningJobArn: Swift.String?
}

extension CreateHyperParameterTuningJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobArn = "HyperParameterTuningJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobArn)
        hyperParameterTuningJobArn = hyperParameterTuningJobArnDecoded
    }
}

extension CreateImageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayName = "DisplayName"
        case imageName = "ImageName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateImageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateImageInput: Swift.Equatable {
    /// The description of the image.
    public var description: Swift.String?
    /// The display name of the image. If not provided, ImageName is displayed.
    public var displayName: Swift.String?
    /// The name of the image. Must be unique to your account.
    /// This member is required.
    public var imageName: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A list of tags to apply to the image.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        imageName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.imageName = imageName
        self.roleArn = roleArn
        self.tags = tags
    }
}

struct CreateImageInputBody: Swift.Equatable {
    let description: Swift.String?
    let displayName: Swift.String?
    let imageName: Swift.String?
    let roleArn: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayName = "DisplayName"
        case imageName = "ImageName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateImageOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateImageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.imageArn = output.imageArn
        } else {
            self.imageArn = nil
        }
    }
}

public struct CreateImageOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the image.
    public var imageArn: Swift.String?

    public init (
        imageArn: Swift.String? = nil
    )
    {
        self.imageArn = imageArn
    }
}

struct CreateImageOutputResponseBody: Swift.Equatable {
    let imageArn: Swift.String?
}

extension CreateImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageArn = "ImageArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageArn)
        imageArn = imageArnDecoded
    }
}

extension CreateImageVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseImage = "BaseImage"
        case clientToken = "ClientToken"
        case imageName = "ImageName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseImage = baseImage {
            try encodeContainer.encode(baseImage, forKey: .baseImage)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
    }
}

extension CreateImageVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateImageVersionInput: Swift.Equatable {
    /// The registry path of the container image to use as the starting point for this version. The path is an Amazon Container Registry (ECR) URI in the following format: .dkr.ecr..amazonaws.com/
    /// This member is required.
    public var baseImage: Swift.String?
    /// A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web Services SDKs, such as the SDK for Python (Boto3), add a unique value to the call.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The ImageName of the Image to create a version of.
    /// This member is required.
    public var imageName: Swift.String?

    public init (
        baseImage: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        imageName: Swift.String? = nil
    )
    {
        self.baseImage = baseImage
        self.clientToken = clientToken
        self.imageName = imageName
    }
}

struct CreateImageVersionInputBody: Swift.Equatable {
    let baseImage: Swift.String?
    let clientToken: Swift.String?
    let imageName: Swift.String?
}

extension CreateImageVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseImage = "BaseImage"
        case clientToken = "ClientToken"
        case imageName = "ImageName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseImage)
        baseImage = baseImageDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
    }
}

extension CreateImageVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateImageVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateImageVersionOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateImageVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateImageVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.imageVersionArn = output.imageVersionArn
        } else {
            self.imageVersionArn = nil
        }
    }
}

public struct CreateImageVersionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the image version.
    public var imageVersionArn: Swift.String?

    public init (
        imageVersionArn: Swift.String? = nil
    )
    {
        self.imageVersionArn = imageVersionArn
    }
}

struct CreateImageVersionOutputResponseBody: Swift.Equatable {
    let imageVersionArn: Swift.String?
}

extension CreateImageVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageVersionArn = "ImageVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageVersionArn)
        imageVersionArn = imageVersionArnDecoded
    }
}

extension CreateInferenceRecommendationsJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputConfig = "InputConfig"
        case jobDescription = "JobDescription"
        case jobName = "JobName"
        case jobType = "JobType"
        case roleArn = "RoleArn"
        case stoppingConditions = "StoppingConditions"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputConfig = inputConfig {
            try encodeContainer.encode(inputConfig, forKey: .inputConfig)
        }
        if let jobDescription = jobDescription {
            try encodeContainer.encode(jobDescription, forKey: .jobDescription)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobType = jobType {
            try encodeContainer.encode(jobType.rawValue, forKey: .jobType)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingConditions = stoppingConditions {
            try encodeContainer.encode(stoppingConditions, forKey: .stoppingConditions)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateInferenceRecommendationsJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateInferenceRecommendationsJobInput: Swift.Equatable {
    /// Provides information about the versioned model package Amazon Resource Name (ARN), the traffic pattern, and endpoint configurations.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.RecommendationJobInputConfig?
    /// Description of the recommendation job.
    public var jobDescription: Swift.String?
    /// A name for the recommendation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account.
    /// This member is required.
    public var jobName: Swift.String?
    /// Defines the type of recommendation job. Specify Default to initiate an instance recommendation and Advanced to initiate a load test. If left unspecified, Amazon SageMaker Inference Recommender will run an instance recommendation (DEFAULT) job.
    /// This member is required.
    public var jobType: SageMakerClientTypes.RecommendationJobType?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A set of conditions for stopping a recommendation job. If any of the conditions are met, the job is automatically stopped.
    public var stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions?
    /// The metadata that you apply to Amazon Web Services resources to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        inputConfig: SageMakerClientTypes.RecommendationJobInputConfig? = nil,
        jobDescription: Swift.String? = nil,
        jobName: Swift.String? = nil,
        jobType: SageMakerClientTypes.RecommendationJobType? = nil,
        roleArn: Swift.String? = nil,
        stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.inputConfig = inputConfig
        self.jobDescription = jobDescription
        self.jobName = jobName
        self.jobType = jobType
        self.roleArn = roleArn
        self.stoppingConditions = stoppingConditions
        self.tags = tags
    }
}

struct CreateInferenceRecommendationsJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let jobType: SageMakerClientTypes.RecommendationJobType?
    let roleArn: Swift.String?
    let inputConfig: SageMakerClientTypes.RecommendationJobInputConfig?
    let jobDescription: Swift.String?
    let stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateInferenceRecommendationsJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputConfig = "InputConfig"
        case jobDescription = "JobDescription"
        case jobName = "JobName"
        case jobType = "JobType"
        case roleArn = "RoleArn"
        case stoppingConditions = "StoppingConditions"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobInputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let jobDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDescription)
        jobDescription = jobDescriptionDecoded
        let stoppingConditionsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobStoppingConditions.self, forKey: .stoppingConditions)
        stoppingConditions = stoppingConditionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateInferenceRecommendationsJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInferenceRecommendationsJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInferenceRecommendationsJobOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInferenceRecommendationsJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateInferenceRecommendationsJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
        } else {
            self.jobArn = nil
        }
    }
}

public struct CreateInferenceRecommendationsJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the recommendation job.
    /// This member is required.
    public var jobArn: Swift.String?

    public init (
        jobArn: Swift.String? = nil
    )
    {
        self.jobArn = jobArn
    }
}

struct CreateInferenceRecommendationsJobOutputResponseBody: Swift.Equatable {
    let jobArn: Swift.String?
}

extension CreateInferenceRecommendationsJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
    }
}

extension CreateLabelingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskConfig = "HumanTaskConfig"
        case inputConfig = "InputConfig"
        case labelAttributeName = "LabelAttributeName"
        case labelCategoryConfigS3Uri = "LabelCategoryConfigS3Uri"
        case labelingJobAlgorithmsConfig = "LabelingJobAlgorithmsConfig"
        case labelingJobName = "LabelingJobName"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingConditions = "StoppingConditions"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskConfig = humanTaskConfig {
            try encodeContainer.encode(humanTaskConfig, forKey: .humanTaskConfig)
        }
        if let inputConfig = inputConfig {
            try encodeContainer.encode(inputConfig, forKey: .inputConfig)
        }
        if let labelAttributeName = labelAttributeName {
            try encodeContainer.encode(labelAttributeName, forKey: .labelAttributeName)
        }
        if let labelCategoryConfigS3Uri = labelCategoryConfigS3Uri {
            try encodeContainer.encode(labelCategoryConfigS3Uri, forKey: .labelCategoryConfigS3Uri)
        }
        if let labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfig {
            try encodeContainer.encode(labelingJobAlgorithmsConfig, forKey: .labelingJobAlgorithmsConfig)
        }
        if let labelingJobName = labelingJobName {
            try encodeContainer.encode(labelingJobName, forKey: .labelingJobName)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingConditions = stoppingConditions {
            try encodeContainer.encode(stoppingConditions, forKey: .stoppingConditions)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateLabelingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLabelingJobInput: Swift.Equatable {
    /// Configures the labeling task and how it is presented to workers; including, but not limited to price, keywords, and batch size (task count).
    /// This member is required.
    public var humanTaskConfig: SageMakerClientTypes.HumanTaskConfig?
    /// Input data for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects. You must specify at least one of the following: S3DataSource or SnsDataSource.
    ///
    /// * Use SnsDataSource to specify an SNS input topic for a streaming labeling job. If you do not specify and SNS input topic ARN, Ground Truth will create a one-time labeling job that stops after all data objects in the input manifest file have been labeled.
    ///
    /// * Use S3DataSource to specify an input manifest file for both streaming and one-time labeling jobs. Adding an S3DataSource is optional if you use SnsDataSource to create a streaming labeling job.
    ///
    ///
    /// If you use the Amazon Mechanical Turk workforce, your input data should not include confidential information, personal information or protected health information. Use ContentClassifiers to specify that your data is free of personally identifiable information and adult content.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.LabelingJobInputConfig?
    /// The attribute name to use for the label in the output manifest file. This is the key for the key/value pair formed with the label that a worker assigns to the object. The LabelAttributeName must meet the following requirements.
    ///
    /// * The name can't end with "-metadata".
    ///
    /// * If you are using one of the following [built-in task types](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html), the attribute name must end with "-ref". If the task type you are using is not listed below, the attribute name must not end with "-ref".
    ///
    /// * Image semantic segmentation (SemanticSegmentation), and adjustment (AdjustmentSemanticSegmentation) and verification (VerificationSemanticSegmentation) labeling jobs for this task type.
    ///
    /// * Video frame object detection (VideoObjectDetection), and adjustment and verification (AdjustmentVideoObjectDetection) labeling jobs for this task type.
    ///
    /// * Video frame object tracking (VideoObjectTracking), and adjustment and verification (AdjustmentVideoObjectTracking) labeling jobs for this task type.
    ///
    /// * 3D point cloud semantic segmentation (3DPointCloudSemanticSegmentation), and adjustment and verification (Adjustment3DPointCloudSemanticSegmentation) labeling jobs for this task type.
    ///
    /// * 3D point cloud object tracking (3DPointCloudObjectTracking), and adjustment and verification (Adjustment3DPointCloudObjectTracking) labeling jobs for this task type.
    ///
    ///
    ///
    ///
    ///
    /// If you are creating an adjustment or verification labeling job, you must use a different LabelAttributeName than the one used in the original labeling job. The original labeling job is the Ground Truth labeling job that produced the labels that you want verified or adjusted. To learn more about adjustment and verification labeling jobs, see [Verify and Adjust Labels](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html).
    /// This member is required.
    public var labelAttributeName: Swift.String?
    /// The S3 URI of the file, referred to as a label category configuration file, that defines the categories used to label the data objects. For 3D point cloud and video frame task types, you can add label category attributes and frame attributes to your label category configuration file. To learn how, see [Create a Labeling Category Configuration File for 3D Point Cloud Labeling Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html). For named entity recognition jobs, in addition to "labels", you must provide worker instructions in the label category configuration file using the "instructions" parameter: "instructions": {"shortInstruction":"
    /// Add header
    ///
    ///
    ///     Add Instructions
    ///
    /// ", "fullInstruction":"Add additional instructions."}. For details and an example, see [Create a Named Entity Recognition Labeling Job (API) ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-named-entity-recg.html#sms-creating-ner-api). For all other [built-in task types](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html) and [custom tasks](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html), your label category configuration file must be a JSON file in the following format. Identify the labels you want to use by replacing label_1, label_2,...,label_n with your label categories. {
    ///     "document-version": "2018-11-28",
    ///
    ///
    ///     "labels": [{"label": "label_1"},{"label": "label_2"},...{"label": "label_n"}]
    ///
    /// } Note the following about the label category configuration file:
    ///
    /// * For image classification and text classification (single and multi-label) you must specify at least two label categories. For all other task types, the minimum number of label categories required is one.
    ///
    /// * Each label category must be unique, you cannot specify duplicate label categories.
    ///
    /// * If you create a 3D point cloud or video frame adjustment or verification labeling job, you must include auditLabelAttributeName in the label category configuration. Use this parameter to enter the [LabelAttributeName](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName) of the labeling job you want to adjust or verify annotations of.
    public var labelCategoryConfigS3Uri: Swift.String?
    /// Configures the information required to perform automated data labeling.
    public var labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig?
    /// The name of the labeling job. This name is used to identify the job in a list of labeling jobs. Labeling job names must be unique within an Amazon Web Services account and region. LabelingJobName is not case sensitive. For example, Example-job and example-job are considered the same labeling job name by Ground Truth.
    /// This member is required.
    public var labelingJobName: Swift.String?
    /// The location of the output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.LabelingJobOutputConfig?
    /// The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform tasks on your behalf during data labeling. You must grant this role the necessary permissions so that Amazon SageMaker can successfully complete data labeling.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A set of conditions for stopping the labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling.
    public var stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions?
    /// An array of key/value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        humanTaskConfig: SageMakerClientTypes.HumanTaskConfig? = nil,
        inputConfig: SageMakerClientTypes.LabelingJobInputConfig? = nil,
        labelAttributeName: Swift.String? = nil,
        labelCategoryConfigS3Uri: Swift.String? = nil,
        labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig? = nil,
        labelingJobName: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.LabelingJobOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.humanTaskConfig = humanTaskConfig
        self.inputConfig = inputConfig
        self.labelAttributeName = labelAttributeName
        self.labelCategoryConfigS3Uri = labelCategoryConfigS3Uri
        self.labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfig
        self.labelingJobName = labelingJobName
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingConditions = stoppingConditions
        self.tags = tags
    }
}

struct CreateLabelingJobInputBody: Swift.Equatable {
    let labelingJobName: Swift.String?
    let labelAttributeName: Swift.String?
    let inputConfig: SageMakerClientTypes.LabelingJobInputConfig?
    let outputConfig: SageMakerClientTypes.LabelingJobOutputConfig?
    let roleArn: Swift.String?
    let labelCategoryConfigS3Uri: Swift.String?
    let stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions?
    let labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig?
    let humanTaskConfig: SageMakerClientTypes.HumanTaskConfig?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateLabelingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskConfig = "HumanTaskConfig"
        case inputConfig = "InputConfig"
        case labelAttributeName = "LabelAttributeName"
        case labelCategoryConfigS3Uri = "LabelCategoryConfigS3Uri"
        case labelingJobAlgorithmsConfig = "LabelingJobAlgorithmsConfig"
        case labelingJobName = "LabelingJobName"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingConditions = "StoppingConditions"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobName)
        labelingJobName = labelingJobNameDecoded
        let labelAttributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelAttributeName)
        labelAttributeName = labelAttributeNameDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobInputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let labelCategoryConfigS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelCategoryConfigS3Uri)
        labelCategoryConfigS3Uri = labelCategoryConfigS3UriDecoded
        let stoppingConditionsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobStoppingConditions.self, forKey: .stoppingConditions)
        stoppingConditions = stoppingConditionsDecoded
        let labelingJobAlgorithmsConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobAlgorithmsConfig.self, forKey: .labelingJobAlgorithmsConfig)
        labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfigDecoded
        let humanTaskConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanTaskConfig.self, forKey: .humanTaskConfig)
        humanTaskConfig = humanTaskConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLabelingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLabelingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLabelingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLabelingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLabelingJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.labelingJobArn = output.labelingJobArn
        } else {
            self.labelingJobArn = nil
        }
    }
}

public struct CreateLabelingJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the labeling job. You use this ARN to identify the labeling job.
    /// This member is required.
    public var labelingJobArn: Swift.String?

    public init (
        labelingJobArn: Swift.String? = nil
    )
    {
        self.labelingJobArn = labelingJobArn
    }
}

struct CreateLabelingJobOutputResponseBody: Swift.Equatable {
    let labelingJobArn: Swift.String?
}

extension CreateLabelingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelingJobArn = "LabelingJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
    }
}

extension CreateModelBiasJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelBiasAppSpecification = "ModelBiasAppSpecification"
        case modelBiasBaselineConfig = "ModelBiasBaselineConfig"
        case modelBiasJobInput = "ModelBiasJobInput"
        case modelBiasJobOutputConfig = "ModelBiasJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let jobResources = jobResources {
            try encodeContainer.encode(jobResources, forKey: .jobResources)
        }
        if let modelBiasAppSpecification = modelBiasAppSpecification {
            try encodeContainer.encode(modelBiasAppSpecification, forKey: .modelBiasAppSpecification)
        }
        if let modelBiasBaselineConfig = modelBiasBaselineConfig {
            try encodeContainer.encode(modelBiasBaselineConfig, forKey: .modelBiasBaselineConfig)
        }
        if let modelBiasJobInput = modelBiasJobInput {
            try encodeContainer.encode(modelBiasJobInput, forKey: .modelBiasJobInput)
        }
        if let modelBiasJobOutputConfig = modelBiasJobOutputConfig {
            try encodeContainer.encode(modelBiasJobOutputConfig, forKey: .modelBiasJobOutputConfig)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateModelBiasJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateModelBiasJobDefinitionInput: Swift.Equatable {
    /// The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model bias job to run a specified Docker container image.
    /// This member is required.
    public var modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification?
    /// The baseline configuration for a model bias job.
    public var modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig?
    /// Inputs for the model bias job.
    /// This member is required.
    public var modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model bias job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification? = nil,
        modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig? = nil,
        modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput? = nil,
        modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelBiasAppSpecification = modelBiasAppSpecification
        self.modelBiasBaselineConfig = modelBiasBaselineConfig
        self.modelBiasJobInput = modelBiasJobInput
        self.modelBiasJobOutputConfig = modelBiasJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

struct CreateModelBiasJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
    let modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig?
    let modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification?
    let modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput?
    let modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateModelBiasJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelBiasAppSpecification = "ModelBiasAppSpecification"
        case modelBiasBaselineConfig = "ModelBiasBaselineConfig"
        case modelBiasJobInput = "ModelBiasJobInput"
        case modelBiasJobOutputConfig = "ModelBiasJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let modelBiasBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelBiasBaselineConfig.self, forKey: .modelBiasBaselineConfig)
        modelBiasBaselineConfig = modelBiasBaselineConfigDecoded
        let modelBiasAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelBiasAppSpecification.self, forKey: .modelBiasAppSpecification)
        modelBiasAppSpecification = modelBiasAppSpecificationDecoded
        let modelBiasJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelBiasJobInput.self, forKey: .modelBiasJobInput)
        modelBiasJobInput = modelBiasJobInputDecoded
        let modelBiasJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .modelBiasJobOutputConfig)
        modelBiasJobOutputConfig = modelBiasJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateModelBiasJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateModelBiasJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateModelBiasJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateModelBiasJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateModelBiasJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionArn = output.jobDefinitionArn
        } else {
            self.jobDefinitionArn = nil
        }
    }
}

public struct CreateModelBiasJobDefinitionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model bias job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?

    public init (
        jobDefinitionArn: Swift.String? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
    }
}

struct CreateModelBiasJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionArn: Swift.String?
}

extension CreateModelBiasJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionArn = "JobDefinitionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
    }
}

extension CreateModelExplainabilityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelExplainabilityAppSpecification = "ModelExplainabilityAppSpecification"
        case modelExplainabilityBaselineConfig = "ModelExplainabilityBaselineConfig"
        case modelExplainabilityJobInput = "ModelExplainabilityJobInput"
        case modelExplainabilityJobOutputConfig = "ModelExplainabilityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let jobResources = jobResources {
            try encodeContainer.encode(jobResources, forKey: .jobResources)
        }
        if let modelExplainabilityAppSpecification = modelExplainabilityAppSpecification {
            try encodeContainer.encode(modelExplainabilityAppSpecification, forKey: .modelExplainabilityAppSpecification)
        }
        if let modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfig {
            try encodeContainer.encode(modelExplainabilityBaselineConfig, forKey: .modelExplainabilityBaselineConfig)
        }
        if let modelExplainabilityJobInput = modelExplainabilityJobInput {
            try encodeContainer.encode(modelExplainabilityJobInput, forKey: .modelExplainabilityJobInput)
        }
        if let modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfig {
            try encodeContainer.encode(modelExplainabilityJobOutputConfig, forKey: .modelExplainabilityJobOutputConfig)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateModelExplainabilityJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateModelExplainabilityJobDefinitionInput: Swift.Equatable {
    /// The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model explainability job to run a specified Docker container image.
    /// This member is required.
    public var modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification?
    /// The baseline configuration for a model explainability job.
    public var modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig?
    /// Inputs for the model explainability job.
    /// This member is required.
    public var modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model explainability job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification? = nil,
        modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig? = nil,
        modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput? = nil,
        modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelExplainabilityAppSpecification = modelExplainabilityAppSpecification
        self.modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfig
        self.modelExplainabilityJobInput = modelExplainabilityJobInput
        self.modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

struct CreateModelExplainabilityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
    let modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig?
    let modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification?
    let modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput?
    let modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateModelExplainabilityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelExplainabilityAppSpecification = "ModelExplainabilityAppSpecification"
        case modelExplainabilityBaselineConfig = "ModelExplainabilityBaselineConfig"
        case modelExplainabilityJobInput = "ModelExplainabilityJobInput"
        case modelExplainabilityJobOutputConfig = "ModelExplainabilityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let modelExplainabilityBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelExplainabilityBaselineConfig.self, forKey: .modelExplainabilityBaselineConfig)
        modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfigDecoded
        let modelExplainabilityAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelExplainabilityAppSpecification.self, forKey: .modelExplainabilityAppSpecification)
        modelExplainabilityAppSpecification = modelExplainabilityAppSpecificationDecoded
        let modelExplainabilityJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelExplainabilityJobInput.self, forKey: .modelExplainabilityJobInput)
        modelExplainabilityJobInput = modelExplainabilityJobInputDecoded
        let modelExplainabilityJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .modelExplainabilityJobOutputConfig)
        modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateModelExplainabilityJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateModelExplainabilityJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateModelExplainabilityJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateModelExplainabilityJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateModelExplainabilityJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionArn = output.jobDefinitionArn
        } else {
            self.jobDefinitionArn = nil
        }
    }
}

public struct CreateModelExplainabilityJobDefinitionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model explainability job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?

    public init (
        jobDefinitionArn: Swift.String? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
    }
}

struct CreateModelExplainabilityJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionArn: Swift.String?
}

extension CreateModelExplainabilityJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionArn = "JobDefinitionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
    }
}

extension CreateModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers = "Containers"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case executionRoleArn = "ExecutionRoleArn"
        case inferenceExecutionConfig = "InferenceExecutionConfig"
        case modelName = "ModelName"
        case primaryContainer = "PrimaryContainer"
        case tags = "Tags"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for containerdefinitionlist0 in containers {
                try containersContainer.encode(containerdefinitionlist0)
            }
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let executionRoleArn = executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let inferenceExecutionConfig = inferenceExecutionConfig {
            try encodeContainer.encode(inferenceExecutionConfig, forKey: .inferenceExecutionConfig)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let primaryContainer = primaryContainer {
            try encodeContainer.encode(primaryContainer, forKey: .primaryContainer)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension CreateModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateModelInput: Swift.Equatable {
    /// Specifies the containers in the inference pipeline.
    public var containers: [SageMakerClientTypes.ContainerDefinition]?
    /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
    public var enableNetworkIsolation: Swift.Bool
    /// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs. Deploying on ML compute instances is part of model hosting. For more information, see [Amazon SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// Specifies details of how containers in a multi-container endpoint are called.
    public var inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig?
    /// The name of the new model.
    /// This member is required.
    public var modelName: Swift.String?
    /// The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions.
    public var primaryContainer: SageMakerClientTypes.ContainerDefinition?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// A [VpcConfig] object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. VpcConfig is used in hosting services and in batch transform. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init (
        containers: [SageMakerClientTypes.ContainerDefinition]? = nil,
        enableNetworkIsolation: Swift.Bool = false,
        executionRoleArn: Swift.String? = nil,
        inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig? = nil,
        modelName: Swift.String? = nil,
        primaryContainer: SageMakerClientTypes.ContainerDefinition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.containers = containers
        self.enableNetworkIsolation = enableNetworkIsolation
        self.executionRoleArn = executionRoleArn
        self.inferenceExecutionConfig = inferenceExecutionConfig
        self.modelName = modelName
        self.primaryContainer = primaryContainer
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

struct CreateModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let primaryContainer: SageMakerClientTypes.ContainerDefinition?
    let containers: [SageMakerClientTypes.ContainerDefinition]?
    let inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig?
    let executionRoleArn: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let vpcConfig: SageMakerClientTypes.VpcConfig?
    let enableNetworkIsolation: Swift.Bool
}

extension CreateModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers = "Containers"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case executionRoleArn = "ExecutionRoleArn"
        case inferenceExecutionConfig = "InferenceExecutionConfig"
        case modelName = "ModelName"
        case primaryContainer = "PrimaryContainer"
        case tags = "Tags"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let primaryContainerDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ContainerDefinition.self, forKey: .primaryContainer)
        primaryContainer = primaryContainerDecoded
        let containersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ContainerDefinition?].self, forKey: .containers)
        var containersDecoded0:[SageMakerClientTypes.ContainerDefinition]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [SageMakerClientTypes.ContainerDefinition]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let inferenceExecutionConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceExecutionConfig.self, forKey: .inferenceExecutionConfig)
        inferenceExecutionConfig = inferenceExecutionConfigDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let enableNetworkIsolationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
    }
}

extension CreateModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateModelOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelArn = output.modelArn
        } else {
            self.modelArn = nil
        }
    }
}

public struct CreateModelOutputResponse: Swift.Equatable {
    /// The ARN of the model created in Amazon SageMaker.
    /// This member is required.
    public var modelArn: Swift.String?

    public init (
        modelArn: Swift.String? = nil
    )
    {
        self.modelArn = modelArn
    }
}

struct CreateModelOutputResponseBody: Swift.Equatable {
    let modelArn: Swift.String?
}

extension CreateModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelArn = "ModelArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
    }
}

extension CreateModelPackageGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupDescription = "ModelPackageGroupDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelPackageGroupDescription = modelPackageGroupDescription {
            try encodeContainer.encode(modelPackageGroupDescription, forKey: .modelPackageGroupDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateModelPackageGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateModelPackageGroupInput: Swift.Equatable {
    /// A description for the model group.
    public var modelPackageGroupDescription: Swift.String?
    /// The name of the model group.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?
    /// A list of key value pairs associated with the model group. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        modelPackageGroupDescription: Swift.String? = nil,
        modelPackageGroupName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.modelPackageGroupDescription = modelPackageGroupDescription
        self.modelPackageGroupName = modelPackageGroupName
        self.tags = tags
    }
}

struct CreateModelPackageGroupInputBody: Swift.Equatable {
    let modelPackageGroupName: Swift.String?
    let modelPackageGroupDescription: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateModelPackageGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupDescription = "ModelPackageGroupDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupDescription)
        modelPackageGroupDescription = modelPackageGroupDescriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateModelPackageGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateModelPackageGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateModelPackageGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateModelPackageGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateModelPackageGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelPackageGroupArn = output.modelPackageGroupArn
        } else {
            self.modelPackageGroupArn = nil
        }
    }
}

public struct CreateModelPackageGroupOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model group.
    /// This member is required.
    public var modelPackageGroupArn: Swift.String?

    public init (
        modelPackageGroupArn: Swift.String? = nil
    )
    {
        self.modelPackageGroupArn = modelPackageGroupArn
    }
}

struct CreateModelPackageGroupOutputResponseBody: Swift.Equatable {
    let modelPackageGroupArn: Swift.String?
}

extension CreateModelPackageGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupArn = "ModelPackageGroupArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupArn)
        modelPackageGroupArn = modelPackageGroupArnDecoded
    }
}

extension CreateModelPackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecifications = "AdditionalInferenceSpecifications"
        case certifyForMarketplace = "CertifyForMarketplace"
        case clientToken = "ClientToken"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case domain = "Domain"
        case driftCheckBaselines = "DriftCheckBaselines"
        case inferenceSpecification = "InferenceSpecification"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case samplePayloadUrl = "SamplePayloadUrl"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case tags = "Tags"
        case task = "Task"
        case validationSpecification = "ValidationSpecification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInferenceSpecifications = additionalInferenceSpecifications {
            var additionalInferenceSpecificationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalInferenceSpecifications)
            for additionalinferencespecifications0 in additionalInferenceSpecifications {
                try additionalInferenceSpecificationsContainer.encode(additionalinferencespecifications0)
            }
        }
        if certifyForMarketplace != false {
            try encodeContainer.encode(certifyForMarketplace, forKey: .certifyForMarketplace)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let customerMetadataProperties = customerMetadataProperties {
            var customerMetadataPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customerMetadataProperties)
            for (dictKey0, customermetadatamap0) in customerMetadataProperties {
                try customerMetadataPropertiesContainer.encode(customermetadatamap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let driftCheckBaselines = driftCheckBaselines {
            try encodeContainer.encode(driftCheckBaselines, forKey: .driftCheckBaselines)
        }
        if let inferenceSpecification = inferenceSpecification {
            try encodeContainer.encode(inferenceSpecification, forKey: .inferenceSpecification)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let modelApprovalStatus = modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelMetrics = modelMetrics {
            try encodeContainer.encode(modelMetrics, forKey: .modelMetrics)
        }
        if let modelPackageDescription = modelPackageDescription {
            try encodeContainer.encode(modelPackageDescription, forKey: .modelPackageDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageName = modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
        if let samplePayloadUrl = samplePayloadUrl {
            try encodeContainer.encode(samplePayloadUrl, forKey: .samplePayloadUrl)
        }
        if let sourceAlgorithmSpecification = sourceAlgorithmSpecification {
            try encodeContainer.encode(sourceAlgorithmSpecification, forKey: .sourceAlgorithmSpecification)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let task = task {
            try encodeContainer.encode(task, forKey: .task)
        }
        if let validationSpecification = validationSpecification {
            try encodeContainer.encode(validationSpecification, forKey: .validationSpecification)
        }
    }
}

extension CreateModelPackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateModelPackageInput: Swift.Equatable {
    /// An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.
    public var additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
    /// Whether to certify the model package for listing on Amazon Web Services Marketplace. This parameter is optional for unversioned models, and does not apply to versioned models.
    public var certifyForMarketplace: Swift.Bool
    /// A unique token that guarantees that the call to this API is idempotent.
    public var clientToken: Swift.String?
    /// The metadata properties associated with the model package versions.
    public var customerMetadataProperties: [Swift.String:Swift.String]?
    /// The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.
    public var domain: Swift.String?
    /// Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on [Drift Detection against Previous Baselines in SageMaker Pipelines](https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection) in the Amazon SageMaker Developer Guide.
    public var driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines?
    /// Specifies details about inference jobs that can be run with models based on this model package, including the following:
    ///
    /// * The Amazon ECR paths of containers that contain the inference code and model artifacts.
    ///
    /// * The instance types that the model package supports for transform jobs and real-time endpoints used for inference.
    ///
    /// * The input and output content formats that the model package supports for inference.
    public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// Whether the model is approved for deployment. This parameter is optional for versioned models, and does not apply to unversioned models. For versioned models, the value of this parameter must be set to Approved to deploy the model.
    public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    /// A structure that contains model metrics reports.
    public var modelMetrics: SageMakerClientTypes.ModelMetrics?
    /// A description of the model package.
    public var modelPackageDescription: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to. This parameter is required for versioned models, and does not apply to unversioned models.
    public var modelPackageGroupName: Swift.String?
    /// The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen). This parameter is required for unversioned models. It is not applicable to versioned models.
    public var modelPackageName: Swift.String?
    /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
    public var samplePayloadUrl: Swift.String?
    /// Details about the algorithm that was used to create the model package.
    public var sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification?
    /// A list of key value pairs associated with the model. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification.
    public var task: Swift.String?
    /// Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
    public var validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification?

    public init (
        additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil,
        certifyForMarketplace: Swift.Bool = false,
        clientToken: Swift.String? = nil,
        customerMetadataProperties: [Swift.String:Swift.String]? = nil,
        domain: Swift.String? = nil,
        driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines? = nil,
        inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
        modelMetrics: SageMakerClientTypes.ModelMetrics? = nil,
        modelPackageDescription: Swift.String? = nil,
        modelPackageGroupName: Swift.String? = nil,
        modelPackageName: Swift.String? = nil,
        samplePayloadUrl: Swift.String? = nil,
        sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        task: Swift.String? = nil,
        validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification? = nil
    )
    {
        self.additionalInferenceSpecifications = additionalInferenceSpecifications
        self.certifyForMarketplace = certifyForMarketplace
        self.clientToken = clientToken
        self.customerMetadataProperties = customerMetadataProperties
        self.domain = domain
        self.driftCheckBaselines = driftCheckBaselines
        self.inferenceSpecification = inferenceSpecification
        self.metadataProperties = metadataProperties
        self.modelApprovalStatus = modelApprovalStatus
        self.modelMetrics = modelMetrics
        self.modelPackageDescription = modelPackageDescription
        self.modelPackageGroupName = modelPackageGroupName
        self.modelPackageName = modelPackageName
        self.samplePayloadUrl = samplePayloadUrl
        self.sourceAlgorithmSpecification = sourceAlgorithmSpecification
        self.tags = tags
        self.task = task
        self.validationSpecification = validationSpecification
    }
}

struct CreateModelPackageInputBody: Swift.Equatable {
    let modelPackageName: Swift.String?
    let modelPackageGroupName: Swift.String?
    let modelPackageDescription: Swift.String?
    let inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    let validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification?
    let sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification?
    let certifyForMarketplace: Swift.Bool
    let tags: [SageMakerClientTypes.Tag]?
    let modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let modelMetrics: SageMakerClientTypes.ModelMetrics?
    let clientToken: Swift.String?
    let customerMetadataProperties: [Swift.String:Swift.String]?
    let driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines?
    let domain: Swift.String?
    let task: Swift.String?
    let samplePayloadUrl: Swift.String?
    let additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
}

extension CreateModelPackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecifications = "AdditionalInferenceSpecifications"
        case certifyForMarketplace = "CertifyForMarketplace"
        case clientToken = "ClientToken"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case domain = "Domain"
        case driftCheckBaselines = "DriftCheckBaselines"
        case inferenceSpecification = "InferenceSpecification"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case samplePayloadUrl = "SamplePayloadUrl"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case tags = "Tags"
        case task = "Task"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageDescription)
        modelPackageDescription = modelPackageDescriptionDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let sourceAlgorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SourceAlgorithmSpecification.self, forKey: .sourceAlgorithmSpecification)
        sourceAlgorithmSpecification = sourceAlgorithmSpecificationDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Swift.Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelMetrics.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let customerMetadataPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customerMetadataProperties)
        var customerMetadataPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let customerMetadataPropertiesContainer = customerMetadataPropertiesContainer {
            customerMetadataPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, customermetadatavalue0) in customerMetadataPropertiesContainer {
                if let customermetadatavalue0 = customermetadatavalue0 {
                    customerMetadataPropertiesDecoded0?[key0] = customermetadatavalue0
                }
            }
        }
        customerMetadataProperties = customerMetadataPropertiesDecoded0
        let driftCheckBaselinesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DriftCheckBaselines.self, forKey: .driftCheckBaselines)
        driftCheckBaselines = driftCheckBaselinesDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .task)
        task = taskDecoded
        let samplePayloadUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .samplePayloadUrl)
        samplePayloadUrl = samplePayloadUrlDecoded
        let additionalInferenceSpecificationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AdditionalInferenceSpecificationDefinition?].self, forKey: .additionalInferenceSpecifications)
        var additionalInferenceSpecificationsDecoded0:[SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil
        if let additionalInferenceSpecificationsContainer = additionalInferenceSpecificationsContainer {
            additionalInferenceSpecificationsDecoded0 = [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]()
            for structure0 in additionalInferenceSpecificationsContainer {
                if let structure0 = structure0 {
                    additionalInferenceSpecificationsDecoded0?.append(structure0)
                }
            }
        }
        additionalInferenceSpecifications = additionalInferenceSpecificationsDecoded0
    }
}

extension CreateModelPackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateModelPackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateModelPackageOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateModelPackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateModelPackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelPackageArn = output.modelPackageArn
        } else {
            self.modelPackageArn = nil
        }
    }
}

public struct CreateModelPackageOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the new model package.
    /// This member is required.
    public var modelPackageArn: Swift.String?

    public init (
        modelPackageArn: Swift.String? = nil
    )
    {
        self.modelPackageArn = modelPackageArn
    }
}

struct CreateModelPackageOutputResponseBody: Swift.Equatable {
    let modelPackageArn: Swift.String?
}

extension CreateModelPackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageArn = "ModelPackageArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
    }
}

extension CreateModelQualityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelQualityAppSpecification = "ModelQualityAppSpecification"
        case modelQualityBaselineConfig = "ModelQualityBaselineConfig"
        case modelQualityJobInput = "ModelQualityJobInput"
        case modelQualityJobOutputConfig = "ModelQualityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let jobResources = jobResources {
            try encodeContainer.encode(jobResources, forKey: .jobResources)
        }
        if let modelQualityAppSpecification = modelQualityAppSpecification {
            try encodeContainer.encode(modelQualityAppSpecification, forKey: .modelQualityAppSpecification)
        }
        if let modelQualityBaselineConfig = modelQualityBaselineConfig {
            try encodeContainer.encode(modelQualityBaselineConfig, forKey: .modelQualityBaselineConfig)
        }
        if let modelQualityJobInput = modelQualityJobInput {
            try encodeContainer.encode(modelQualityJobInput, forKey: .modelQualityJobInput)
        }
        if let modelQualityJobOutputConfig = modelQualityJobOutputConfig {
            try encodeContainer.encode(modelQualityJobOutputConfig, forKey: .modelQualityJobOutputConfig)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateModelQualityJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateModelQualityJobDefinitionInput: Swift.Equatable {
    /// The name of the monitoring job definition.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// The container that runs the monitoring job.
    /// This member is required.
    public var modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification?
    /// Specifies the constraints and baselines for the monitoring job.
    public var modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig?
    /// A list of the inputs that are monitored. Currently endpoints are supported.
    /// This member is required.
    public var modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Specifies the network configuration for the monitoring job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification? = nil,
        modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig? = nil,
        modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput? = nil,
        modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelQualityAppSpecification = modelQualityAppSpecification
        self.modelQualityBaselineConfig = modelQualityBaselineConfig
        self.modelQualityJobInput = modelQualityJobInput
        self.modelQualityJobOutputConfig = modelQualityJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

struct CreateModelQualityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
    let modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig?
    let modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification?
    let modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput?
    let modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateModelQualityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelQualityAppSpecification = "ModelQualityAppSpecification"
        case modelQualityBaselineConfig = "ModelQualityBaselineConfig"
        case modelQualityJobInput = "ModelQualityJobInput"
        case modelQualityJobOutputConfig = "ModelQualityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let modelQualityBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQualityBaselineConfig.self, forKey: .modelQualityBaselineConfig)
        modelQualityBaselineConfig = modelQualityBaselineConfigDecoded
        let modelQualityAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQualityAppSpecification.self, forKey: .modelQualityAppSpecification)
        modelQualityAppSpecification = modelQualityAppSpecificationDecoded
        let modelQualityJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQualityJobInput.self, forKey: .modelQualityJobInput)
        modelQualityJobInput = modelQualityJobInputDecoded
        let modelQualityJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .modelQualityJobOutputConfig)
        modelQualityJobOutputConfig = modelQualityJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateModelQualityJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateModelQualityJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateModelQualityJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateModelQualityJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateModelQualityJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionArn = output.jobDefinitionArn
        } else {
            self.jobDefinitionArn = nil
        }
    }
}

public struct CreateModelQualityJobDefinitionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model quality monitoring job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?

    public init (
        jobDefinitionArn: Swift.String? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
    }
}

struct CreateModelQualityJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionArn: Swift.String?
}

extension CreateModelQualityJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionArn = "JobDefinitionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
    }
}

extension CreateMonitoringScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleConfig = "MonitoringScheduleConfig"
        case monitoringScheduleName = "MonitoringScheduleName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monitoringScheduleConfig = monitoringScheduleConfig {
            try encodeContainer.encode(monitoringScheduleConfig, forKey: .monitoringScheduleConfig)
        }
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateMonitoringScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateMonitoringScheduleInput: Swift.Equatable {
    /// The configuration object that specifies the monitoring schedule and defines the monitoring job.
    /// This member is required.
    public var monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
    /// The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig? = nil,
        monitoringScheduleName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.monitoringScheduleConfig = monitoringScheduleConfig
        self.monitoringScheduleName = monitoringScheduleName
        self.tags = tags
    }
}

struct CreateMonitoringScheduleInputBody: Swift.Equatable {
    let monitoringScheduleName: Swift.String?
    let monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateMonitoringScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleConfig = "MonitoringScheduleConfig"
        case monitoringScheduleName = "MonitoringScheduleName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let monitoringScheduleConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringScheduleConfig.self, forKey: .monitoringScheduleConfig)
        monitoringScheduleConfig = monitoringScheduleConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMonitoringScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMonitoringScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMonitoringScheduleOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMonitoringScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateMonitoringScheduleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.monitoringScheduleArn = output.monitoringScheduleArn
        } else {
            self.monitoringScheduleArn = nil
        }
    }
}

public struct CreateMonitoringScheduleOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the monitoring schedule.
    /// This member is required.
    public var monitoringScheduleArn: Swift.String?

    public init (
        monitoringScheduleArn: Swift.String? = nil
    )
    {
        self.monitoringScheduleArn = monitoringScheduleArn
    }
}

struct CreateMonitoringScheduleOutputResponseBody: Swift.Equatable {
    let monitoringScheduleArn: Swift.String?
}

extension CreateMonitoringScheduleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleArn = "MonitoringScheduleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
    }
}

extension CreateNotebookInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorTypes = "AcceleratorTypes"
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case defaultCodeRepository = "DefaultCodeRepository"
        case directInternetAccess = "DirectInternetAccess"
        case instanceType = "InstanceType"
        case kmsKeyId = "KmsKeyId"
        case lifecycleConfigName = "LifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case platformIdentifier = "PlatformIdentifier"
        case roleArn = "RoleArn"
        case rootAccess = "RootAccess"
        case securityGroupIds = "SecurityGroupIds"
        case subnetId = "SubnetId"
        case tags = "Tags"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorTypes = acceleratorTypes {
            var acceleratorTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .acceleratorTypes)
            for notebookinstanceacceleratortypes0 in acceleratorTypes {
                try acceleratorTypesContainer.encode(notebookinstanceacceleratortypes0.rawValue)
            }
        }
        if let additionalCodeRepositories = additionalCodeRepositories {
            var additionalCodeRepositoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalCodeRepositories)
            for additionalcoderepositorynamesorurls0 in additionalCodeRepositories {
                try additionalCodeRepositoriesContainer.encode(additionalcoderepositorynamesorurls0)
            }
        }
        if let defaultCodeRepository = defaultCodeRepository {
            try encodeContainer.encode(defaultCodeRepository, forKey: .defaultCodeRepository)
        }
        if let directInternetAccess = directInternetAccess {
            try encodeContainer.encode(directInternetAccess.rawValue, forKey: .directInternetAccess)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lifecycleConfigName = lifecycleConfigName {
            try encodeContainer.encode(lifecycleConfigName, forKey: .lifecycleConfigName)
        }
        if let notebookInstanceName = notebookInstanceName {
            try encodeContainer.encode(notebookInstanceName, forKey: .notebookInstanceName)
        }
        if let platformIdentifier = platformIdentifier {
            try encodeContainer.encode(platformIdentifier, forKey: .platformIdentifier)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let rootAccess = rootAccess {
            try encodeContainer.encode(rootAccess.rawValue, forKey: .rootAccess)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupids0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupids0)
            }
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let volumeSizeInGB = volumeSizeInGB {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }
}

extension CreateNotebookInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateNotebookInstanceInput: Swift.Equatable {
    /// A list of Elastic Inference (EI) instance types to associate with this notebook instance. Currently, only one instance type can be associated with a notebook instance. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
    public var acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    /// An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with Amazon SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var additionalCodeRepositories: [Swift.String]?
    /// A Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with Amazon SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var defaultCodeRepository: Swift.String?
    /// Sets whether Amazon SageMaker provides internet access to the notebook instance. If you set this to Disabled this notebook instance is able to access resources only in your VPC, and is not be able to connect to Amazon SageMaker training and endpoint services unless you configure a NAT Gateway in your VPC. For more information, see [Notebook Instances Are Internet-Enabled by Default](https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access). You can set the value of this parameter to Disabled only if you set a value for the SubnetId parameter.
    public var directInternetAccess: SageMakerClientTypes.DirectInternetAccess?
    /// The type of ML compute instance to launch for the notebook instance.
    /// This member is required.
    public var instanceType: SageMakerClientTypes.InstanceType?
    /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt data on the storage volume attached to your notebook instance. The KMS key you provide must be enabled. For information, see [Enabling and Disabling Keys](https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html) in the Amazon Web Services Key Management Service Developer Guide.
    public var kmsKeyId: Swift.String?
    /// The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
    public var lifecycleConfigName: Swift.String?
    /// The name of the new notebook instance.
    /// This member is required.
    public var notebookInstanceName: Swift.String?
    /// The platform identifier of the notebook instance runtime environment.
    public var platformIdentifier: Swift.String?
    /// When you send any requests to Amazon Web Services resources from the notebook instance, Amazon SageMaker assumes this role to perform tasks on your behalf. You must grant this role necessary permissions so Amazon SageMaker can perform these tasks. The policy must allow the Amazon SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see [Amazon SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Whether root access is enabled or disabled for users of the notebook instance. The default value is Enabled. Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.
    public var rootAccess: SageMakerClientTypes.RootAccess?
    /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.
    public var securityGroupIds: [Swift.String]?
    /// The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.
    public var subnetId: Swift.String?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB.
    public var volumeSizeInGB: Swift.Int?

    public init (
        acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [Swift.String]? = nil,
        defaultCodeRepository: Swift.String? = nil,
        directInternetAccess: SageMakerClientTypes.DirectInternetAccess? = nil,
        instanceType: SageMakerClientTypes.InstanceType? = nil,
        kmsKeyId: Swift.String? = nil,
        lifecycleConfigName: Swift.String? = nil,
        notebookInstanceName: Swift.String? = nil,
        platformIdentifier: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        rootAccess: SageMakerClientTypes.RootAccess? = nil,
        securityGroupIds: [Swift.String]? = nil,
        subnetId: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        volumeSizeInGB: Swift.Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.defaultCodeRepository = defaultCodeRepository
        self.directInternetAccess = directInternetAccess
        self.instanceType = instanceType
        self.kmsKeyId = kmsKeyId
        self.lifecycleConfigName = lifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.platformIdentifier = platformIdentifier
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.securityGroupIds = securityGroupIds
        self.subnetId = subnetId
        self.tags = tags
        self.volumeSizeInGB = volumeSizeInGB
    }
}

struct CreateNotebookInstanceInputBody: Swift.Equatable {
    let notebookInstanceName: Swift.String?
    let instanceType: SageMakerClientTypes.InstanceType?
    let subnetId: Swift.String?
    let securityGroupIds: [Swift.String]?
    let roleArn: Swift.String?
    let kmsKeyId: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let lifecycleConfigName: Swift.String?
    let directInternetAccess: SageMakerClientTypes.DirectInternetAccess?
    let volumeSizeInGB: Swift.Int?
    let acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    let defaultCodeRepository: Swift.String?
    let additionalCodeRepositories: [Swift.String]?
    let rootAccess: SageMakerClientTypes.RootAccess?
    let platformIdentifier: Swift.String?
}

extension CreateNotebookInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorTypes = "AcceleratorTypes"
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case defaultCodeRepository = "DefaultCodeRepository"
        case directInternetAccess = "DirectInternetAccess"
        case instanceType = "InstanceType"
        case kmsKeyId = "KmsKeyId"
        case lifecycleConfigName = "LifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case platformIdentifier = "PlatformIdentifier"
        case roleArn = "RoleArn"
        case rootAccess = "RootAccess"
        case securityGroupIds = "SecurityGroupIds"
        case subnetId = "SubnetId"
        case tags = "Tags"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let lifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleConfigName)
        lifecycleConfigName = lifecycleConfigNameDecoded
        let directInternetAccessDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DirectInternetAccess.self, forKey: .directInternetAccess)
        directInternetAccess = directInternetAccessDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let acceleratorTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceAcceleratorType?].self, forKey: .acceleratorTypes)
        var acceleratorTypesDecoded0:[SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil
        if let acceleratorTypesContainer = acceleratorTypesContainer {
            acceleratorTypesDecoded0 = [SageMakerClientTypes.NotebookInstanceAcceleratorType]()
            for string0 in acceleratorTypesContainer {
                if let string0 = string0 {
                    acceleratorTypesDecoded0?.append(string0)
                }
            }
        }
        acceleratorTypes = acceleratorTypesDecoded0
        let defaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultCodeRepository)
        defaultCodeRepository = defaultCodeRepositoryDecoded
        let additionalCodeRepositoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalCodeRepositories)
        var additionalCodeRepositoriesDecoded0:[Swift.String]? = nil
        if let additionalCodeRepositoriesContainer = additionalCodeRepositoriesContainer {
            additionalCodeRepositoriesDecoded0 = [Swift.String]()
            for string0 in additionalCodeRepositoriesContainer {
                if let string0 = string0 {
                    additionalCodeRepositoriesDecoded0?.append(string0)
                }
            }
        }
        additionalCodeRepositories = additionalCodeRepositoriesDecoded0
        let rootAccessDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RootAccess.self, forKey: .rootAccess)
        rootAccess = rootAccessDecoded
        let platformIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformIdentifier)
        platformIdentifier = platformIdentifierDecoded
    }
}

extension CreateNotebookInstanceLifecycleConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case onCreate = "OnCreate"
        case onStart = "OnStart"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName {
            try encodeContainer.encode(notebookInstanceLifecycleConfigName, forKey: .notebookInstanceLifecycleConfigName)
        }
        if let onCreate = onCreate {
            var onCreateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onCreate)
            for notebookinstancelifecycleconfiglist0 in onCreate {
                try onCreateContainer.encode(notebookinstancelifecycleconfiglist0)
            }
        }
        if let onStart = onStart {
            var onStartContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onStart)
            for notebookinstancelifecycleconfiglist0 in onStart {
                try onStartContainer.encode(notebookinstancelifecycleconfiglist0)
            }
        }
    }
}

extension CreateNotebookInstanceLifecycleConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateNotebookInstanceLifecycleConfigInput: Swift.Equatable {
    /// The name of the lifecycle configuration.
    /// This member is required.
    public var notebookInstanceLifecycleConfigName: Swift.String?
    /// A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.
    public var onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    /// A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.
    public var onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?

    public init (
        notebookInstanceLifecycleConfigName: Swift.String? = nil,
        onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil,
        onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
    )
    {
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.onCreate = onCreate
        self.onStart = onStart
    }
}

struct CreateNotebookInstanceLifecycleConfigInputBody: Swift.Equatable {
    let notebookInstanceLifecycleConfigName: Swift.String?
    let onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    let onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
}

extension CreateNotebookInstanceLifecycleConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case onCreate = "OnCreate"
        case onStart = "OnStart"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let onCreateContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceLifecycleHook?].self, forKey: .onCreate)
        var onCreateDecoded0:[SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
        if let onCreateContainer = onCreateContainer {
            onCreateDecoded0 = [SageMakerClientTypes.NotebookInstanceLifecycleHook]()
            for structure0 in onCreateContainer {
                if let structure0 = structure0 {
                    onCreateDecoded0?.append(structure0)
                }
            }
        }
        onCreate = onCreateDecoded0
        let onStartContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceLifecycleHook?].self, forKey: .onStart)
        var onStartDecoded0:[SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
        if let onStartContainer = onStartContainer {
            onStartDecoded0 = [SageMakerClientTypes.NotebookInstanceLifecycleHook]()
            for structure0 in onStartContainer {
                if let structure0 = structure0 {
                    onStartDecoded0?.append(structure0)
                }
            }
        }
        onStart = onStartDecoded0
    }
}

extension CreateNotebookInstanceLifecycleConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateNotebookInstanceLifecycleConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateNotebookInstanceLifecycleConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateNotebookInstanceLifecycleConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateNotebookInstanceLifecycleConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.notebookInstanceLifecycleConfigArn = output.notebookInstanceLifecycleConfigArn
        } else {
            self.notebookInstanceLifecycleConfigArn = nil
        }
    }
}

public struct CreateNotebookInstanceLifecycleConfigOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the lifecycle configuration.
    public var notebookInstanceLifecycleConfigArn: Swift.String?

    public init (
        notebookInstanceLifecycleConfigArn: Swift.String? = nil
    )
    {
        self.notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn
    }
}

struct CreateNotebookInstanceLifecycleConfigOutputResponseBody: Swift.Equatable {
    let notebookInstanceLifecycleConfigArn: Swift.String?
}

extension CreateNotebookInstanceLifecycleConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigArn = "NotebookInstanceLifecycleConfigArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigArn)
        notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArnDecoded
    }
}

extension CreateNotebookInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateNotebookInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateNotebookInstanceOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateNotebookInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateNotebookInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.notebookInstanceArn = output.notebookInstanceArn
        } else {
            self.notebookInstanceArn = nil
        }
    }
}

public struct CreateNotebookInstanceOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the notebook instance.
    public var notebookInstanceArn: Swift.String?

    public init (
        notebookInstanceArn: Swift.String? = nil
    )
    {
        self.notebookInstanceArn = notebookInstanceArn
    }
}

struct CreateNotebookInstanceOutputResponseBody: Swift.Equatable {
    let notebookInstanceArn: Swift.String?
}

extension CreateNotebookInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceArn = "NotebookInstanceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceArn)
        notebookInstanceArn = notebookInstanceArnDecoded
    }
}

extension CreatePipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineDefinition = "PipelineDefinition"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let pipelineDefinition = pipelineDefinition {
            try encodeContainer.encode(pipelineDefinition, forKey: .pipelineDefinition)
        }
        if let pipelineDescription = pipelineDescription {
            try encodeContainer.encode(pipelineDescription, forKey: .pipelineDescription)
        }
        if let pipelineDisplayName = pipelineDisplayName {
            try encodeContainer.encode(pipelineDisplayName, forKey: .pipelineDisplayName)
        }
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreatePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePipelineInput: Swift.Equatable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The JSON pipeline definition of the pipeline.
    /// This member is required.
    public var pipelineDefinition: Swift.String?
    /// A description of the pipeline.
    public var pipelineDescription: Swift.String?
    /// The display name of the pipeline.
    public var pipelineDisplayName: Swift.String?
    /// The name of the pipeline.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A list of tags to apply to the created pipeline.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        clientRequestToken: Swift.String? = nil,
        pipelineDefinition: Swift.String? = nil,
        pipelineDescription: Swift.String? = nil,
        pipelineDisplayName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.pipelineDefinition = pipelineDefinition
        self.pipelineDescription = pipelineDescription
        self.pipelineDisplayName = pipelineDisplayName
        self.pipelineName = pipelineName
        self.roleArn = roleArn
        self.tags = tags
    }
}

struct CreatePipelineInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineDisplayName: Swift.String?
    let pipelineDefinition: Swift.String?
    let pipelineDescription: Swift.String?
    let clientRequestToken: Swift.String?
    let roleArn: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineDefinition = "PipelineDefinition"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDisplayName)
        pipelineDisplayName = pipelineDisplayNameDecoded
        let pipelineDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDefinition)
        pipelineDefinition = pipelineDefinitionDecoded
        let pipelineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDescription)
        pipelineDescription = pipelineDescriptionDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePipelineOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineArn = output.pipelineArn
        } else {
            self.pipelineArn = nil
        }
    }
}

public struct CreatePipelineOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the created pipeline.
    public var pipelineArn: Swift.String?

    public init (
        pipelineArn: Swift.String? = nil
    )
    {
        self.pipelineArn = pipelineArn
    }
}

struct CreatePipelineOutputResponseBody: Swift.Equatable {
    let pipelineArn: Swift.String?
}

extension CreatePipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineArn = "PipelineArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
    }
}

extension CreatePresignedDomainUrlInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case expiresInSeconds = "ExpiresInSeconds"
        case sessionExpirationDurationInSeconds = "SessionExpirationDurationInSeconds"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let expiresInSeconds = expiresInSeconds {
            try encodeContainer.encode(expiresInSeconds, forKey: .expiresInSeconds)
        }
        if let sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds {
            try encodeContainer.encode(sessionExpirationDurationInSeconds, forKey: .sessionExpirationDurationInSeconds)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }
}

extension CreatePresignedDomainUrlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePresignedDomainUrlInput: Swift.Equatable {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The number of seconds until the pre-signed URL expires. This value defaults to 300.
    public var expiresInSeconds: Swift.Int?
    /// The session expiration duration in seconds. This value defaults to 43200.
    public var sessionExpirationDurationInSeconds: Swift.Int?
    /// The name of the UserProfile to sign-in as.
    /// This member is required.
    public var userProfileName: Swift.String?

    public init (
        domainId: Swift.String? = nil,
        expiresInSeconds: Swift.Int? = nil,
        sessionExpirationDurationInSeconds: Swift.Int? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.domainId = domainId
        self.expiresInSeconds = expiresInSeconds
        self.sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds
        self.userProfileName = userProfileName
    }
}

struct CreatePresignedDomainUrlInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileName: Swift.String?
    let sessionExpirationDurationInSeconds: Swift.Int?
    let expiresInSeconds: Swift.Int?
}

extension CreatePresignedDomainUrlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case expiresInSeconds = "ExpiresInSeconds"
        case sessionExpirationDurationInSeconds = "SessionExpirationDurationInSeconds"
        case userProfileName = "UserProfileName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let sessionExpirationDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionExpirationDurationInSeconds)
        sessionExpirationDurationInSeconds = sessionExpirationDurationInSecondsDecoded
        let expiresInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expiresInSeconds)
        expiresInSeconds = expiresInSecondsDecoded
    }
}

extension CreatePresignedDomainUrlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePresignedDomainUrlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePresignedDomainUrlOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePresignedDomainUrlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePresignedDomainUrlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizedUrl = output.authorizedUrl
        } else {
            self.authorizedUrl = nil
        }
    }
}

public struct CreatePresignedDomainUrlOutputResponse: Swift.Equatable {
    /// The presigned URL.
    public var authorizedUrl: Swift.String?

    public init (
        authorizedUrl: Swift.String? = nil
    )
    {
        self.authorizedUrl = authorizedUrl
    }
}

struct CreatePresignedDomainUrlOutputResponseBody: Swift.Equatable {
    let authorizedUrl: Swift.String?
}

extension CreatePresignedDomainUrlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedUrl = "AuthorizedUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizedUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizedUrl)
        authorizedUrl = authorizedUrlDecoded
    }
}

extension CreatePresignedNotebookInstanceUrlInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
        case sessionExpirationDurationInSeconds = "SessionExpirationDurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookInstanceName = notebookInstanceName {
            try encodeContainer.encode(notebookInstanceName, forKey: .notebookInstanceName)
        }
        if let sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds {
            try encodeContainer.encode(sessionExpirationDurationInSeconds, forKey: .sessionExpirationDurationInSeconds)
        }
    }
}

extension CreatePresignedNotebookInstanceUrlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePresignedNotebookInstanceUrlInput: Swift.Equatable {
    /// The name of the notebook instance.
    /// This member is required.
    public var notebookInstanceName: Swift.String?
    /// The duration of the session, in seconds. The default is 12 hours.
    public var sessionExpirationDurationInSeconds: Swift.Int?

    public init (
        notebookInstanceName: Swift.String? = nil,
        sessionExpirationDurationInSeconds: Swift.Int? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
        self.sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds
    }
}

struct CreatePresignedNotebookInstanceUrlInputBody: Swift.Equatable {
    let notebookInstanceName: Swift.String?
    let sessionExpirationDurationInSeconds: Swift.Int?
}

extension CreatePresignedNotebookInstanceUrlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
        case sessionExpirationDurationInSeconds = "SessionExpirationDurationInSeconds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let sessionExpirationDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionExpirationDurationInSeconds)
        sessionExpirationDurationInSeconds = sessionExpirationDurationInSecondsDecoded
    }
}

extension CreatePresignedNotebookInstanceUrlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePresignedNotebookInstanceUrlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePresignedNotebookInstanceUrlOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePresignedNotebookInstanceUrlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePresignedNotebookInstanceUrlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizedUrl = output.authorizedUrl
        } else {
            self.authorizedUrl = nil
        }
    }
}

public struct CreatePresignedNotebookInstanceUrlOutputResponse: Swift.Equatable {
    /// A JSON object that contains the URL string.
    public var authorizedUrl: Swift.String?

    public init (
        authorizedUrl: Swift.String? = nil
    )
    {
        self.authorizedUrl = authorizedUrl
    }
}

struct CreatePresignedNotebookInstanceUrlOutputResponseBody: Swift.Equatable {
    let authorizedUrl: Swift.String?
}

extension CreatePresignedNotebookInstanceUrlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedUrl = "AuthorizedUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizedUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizedUrl)
        authorizedUrl = authorizedUrlDecoded
    }
}

extension CreateProcessingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appSpecification = "AppSpecification"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case networkConfig = "NetworkConfig"
        case processingInputs = "ProcessingInputs"
        case processingJobName = "ProcessingJobName"
        case processingOutputConfig = "ProcessingOutputConfig"
        case processingResources = "ProcessingResources"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appSpecification = appSpecification {
            try encodeContainer.encode(appSpecification, forKey: .appSpecification)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, processingenvironmentmap0) in environment {
                try environmentContainer.encode(processingenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let processingInputs = processingInputs {
            var processingInputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processingInputs)
            for processinginputs0 in processingInputs {
                try processingInputsContainer.encode(processinginputs0)
            }
        }
        if let processingJobName = processingJobName {
            try encodeContainer.encode(processingJobName, forKey: .processingJobName)
        }
        if let processingOutputConfig = processingOutputConfig {
            try encodeContainer.encode(processingOutputConfig, forKey: .processingOutputConfig)
        }
        if let processingResources = processingResources {
            try encodeContainer.encode(processingResources, forKey: .processingResources)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateProcessingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateProcessingJobInput: Swift.Equatable {
    /// Configures the processing job to run a specified Docker container image.
    /// This member is required.
    public var appSpecification: SageMakerClientTypes.AppSpecification?
    /// The environment variables to set in the Docker container. Up to 100 key and values entries in the map are supported.
    public var environment: [Swift.String:Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob]
    ///
    /// * [CreateTrainingJob]
    ///
    /// * [CreateTransformJob]
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// Networking options for a processing job, such as whether to allow inbound and outbound network calls to and from processing containers, and the VPC subnets and security groups to use for VPC-enabled processing jobs.
    public var networkConfig: SageMakerClientTypes.NetworkConfig?
    /// An array of inputs configuring the data to download into the processing container.
    public var processingInputs: [SageMakerClientTypes.ProcessingInput]?
    /// The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var processingJobName: Swift.String?
    /// Output configuration for the processing job.
    public var processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig?
    /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
    /// This member is required.
    public var processingResources: SageMakerClientTypes.ProcessingResources?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The time limit for how long the processing job is allowed to run.
    public var stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        appSpecification: SageMakerClientTypes.AppSpecification? = nil,
        environment: [Swift.String:Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        networkConfig: SageMakerClientTypes.NetworkConfig? = nil,
        processingInputs: [SageMakerClientTypes.ProcessingInput]? = nil,
        processingJobName: Swift.String? = nil,
        processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig? = nil,
        processingResources: SageMakerClientTypes.ProcessingResources? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.appSpecification = appSpecification
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.networkConfig = networkConfig
        self.processingInputs = processingInputs
        self.processingJobName = processingJobName
        self.processingOutputConfig = processingOutputConfig
        self.processingResources = processingResources
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

struct CreateProcessingJobInputBody: Swift.Equatable {
    let processingInputs: [SageMakerClientTypes.ProcessingInput]?
    let processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig?
    let processingJobName: Swift.String?
    let processingResources: SageMakerClientTypes.ProcessingResources?
    let stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition?
    let appSpecification: SageMakerClientTypes.AppSpecification?
    let environment: [Swift.String:Swift.String]?
    let networkConfig: SageMakerClientTypes.NetworkConfig?
    let roleArn: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
}

extension CreateProcessingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appSpecification = "AppSpecification"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case networkConfig = "NetworkConfig"
        case processingInputs = "ProcessingInputs"
        case processingJobName = "ProcessingJobName"
        case processingOutputConfig = "ProcessingOutputConfig"
        case processingResources = "ProcessingResources"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingInputsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProcessingInput?].self, forKey: .processingInputs)
        var processingInputsDecoded0:[SageMakerClientTypes.ProcessingInput]? = nil
        if let processingInputsContainer = processingInputsContainer {
            processingInputsDecoded0 = [SageMakerClientTypes.ProcessingInput]()
            for structure0 in processingInputsContainer {
                if let structure0 = structure0 {
                    processingInputsDecoded0?.append(structure0)
                }
            }
        }
        processingInputs = processingInputsDecoded0
        let processingOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingOutputConfig.self, forKey: .processingOutputConfig)
        processingOutputConfig = processingOutputConfigDecoded
        let processingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
        let processingResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingResources.self, forKey: .processingResources)
        processingResources = processingResourcesDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let appSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppSpecification.self, forKey: .appSpecification)
        appSpecification = appSpecificationDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
    }
}

extension CreateProcessingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProcessingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateProcessingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProcessingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateProcessingJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.processingJobArn = output.processingJobArn
        } else {
            self.processingJobArn = nil
        }
    }
}

public struct CreateProcessingJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the processing job.
    /// This member is required.
    public var processingJobArn: Swift.String?

    public init (
        processingJobArn: Swift.String? = nil
    )
    {
        self.processingJobArn = processingJobArn
    }
}

struct CreateProcessingJobOutputResponseBody: Swift.Equatable {
    let processingJobArn: Swift.String?
}

extension CreateProcessingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processingJobArn = "ProcessingJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
    }
}

extension CreateProjectInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectDescription = "ProjectDescription"
        case projectName = "ProjectName"
        case serviceCatalogProvisioningDetails = "ServiceCatalogProvisioningDetails"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectDescription = projectDescription {
            try encodeContainer.encode(projectDescription, forKey: .projectDescription)
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetails {
            try encodeContainer.encode(serviceCatalogProvisioningDetails, forKey: .serviceCatalogProvisioningDetails)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateProjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateProjectInput: Swift.Equatable {
    /// A description for the project.
    public var projectDescription: Swift.String?
    /// The name of the project.
    /// This member is required.
    public var projectName: Swift.String?
    /// The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    /// This member is required.
    public var serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails?
    /// An array of key-value pairs that you want to use to organize and track your Amazon Web Services resource costs. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        projectDescription: Swift.String? = nil,
        projectName: Swift.String? = nil,
        serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.projectDescription = projectDescription
        self.projectName = projectName
        self.serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetails
        self.tags = tags
    }
}

struct CreateProjectInputBody: Swift.Equatable {
    let projectName: Swift.String?
    let projectDescription: Swift.String?
    let serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectDescription = "ProjectDescription"
        case projectName = "ProjectName"
        case serviceCatalogProvisioningDetails = "ServiceCatalogProvisioningDetails"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let projectDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectDescription)
        projectDescription = projectDescriptionDecoded
        let serviceCatalogProvisioningDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ServiceCatalogProvisioningDetails.self, forKey: .serviceCatalogProvisioningDetails)
        serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetailsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateProjectOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateProjectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.projectArn = output.projectArn
            self.projectId = output.projectId
        } else {
            self.projectArn = nil
            self.projectId = nil
        }
    }
}

public struct CreateProjectOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the project.
    /// This member is required.
    public var projectArn: Swift.String?
    /// The ID of the new project.
    /// This member is required.
    public var projectId: Swift.String?

    public init (
        projectArn: Swift.String? = nil,
        projectId: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
        self.projectId = projectId
    }
}

struct CreateProjectOutputResponseBody: Swift.Equatable {
    let projectArn: Swift.String?
    let projectId: Swift.String?
}

extension CreateProjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectArn = "ProjectArn"
        case projectId = "ProjectId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let projectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectId)
        projectId = projectIdDecoded
    }
}

extension CreateStudioLifecycleConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioLifecycleConfigAppType = "StudioLifecycleConfigAppType"
        case studioLifecycleConfigContent = "StudioLifecycleConfigContent"
        case studioLifecycleConfigName = "StudioLifecycleConfigName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let studioLifecycleConfigAppType = studioLifecycleConfigAppType {
            try encodeContainer.encode(studioLifecycleConfigAppType.rawValue, forKey: .studioLifecycleConfigAppType)
        }
        if let studioLifecycleConfigContent = studioLifecycleConfigContent {
            try encodeContainer.encode(studioLifecycleConfigContent, forKey: .studioLifecycleConfigContent)
        }
        if let studioLifecycleConfigName = studioLifecycleConfigName {
            try encodeContainer.encode(studioLifecycleConfigName, forKey: .studioLifecycleConfigName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension CreateStudioLifecycleConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateStudioLifecycleConfigInput: Swift.Equatable {
    /// The App type that the Lifecycle Configuration is attached to.
    /// This member is required.
    public var studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType?
    /// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
    /// This member is required.
    public var studioLifecycleConfigContent: Swift.String?
    /// The name of the Studio Lifecycle Configuration to create.
    /// This member is required.
    public var studioLifecycleConfigName: Swift.String?
    /// Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType? = nil,
        studioLifecycleConfigContent: Swift.String? = nil,
        studioLifecycleConfigName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.studioLifecycleConfigAppType = studioLifecycleConfigAppType
        self.studioLifecycleConfigContent = studioLifecycleConfigContent
        self.studioLifecycleConfigName = studioLifecycleConfigName
        self.tags = tags
    }
}

struct CreateStudioLifecycleConfigInputBody: Swift.Equatable {
    let studioLifecycleConfigName: Swift.String?
    let studioLifecycleConfigContent: Swift.String?
    let studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateStudioLifecycleConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioLifecycleConfigAppType = "StudioLifecycleConfigAppType"
        case studioLifecycleConfigContent = "StudioLifecycleConfigContent"
        case studioLifecycleConfigName = "StudioLifecycleConfigName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigName)
        studioLifecycleConfigName = studioLifecycleConfigNameDecoded
        let studioLifecycleConfigContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigContent)
        studioLifecycleConfigContent = studioLifecycleConfigContentDecoded
        let studioLifecycleConfigAppTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StudioLifecycleConfigAppType.self, forKey: .studioLifecycleConfigAppType)
        studioLifecycleConfigAppType = studioLifecycleConfigAppTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateStudioLifecycleConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateStudioLifecycleConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateStudioLifecycleConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStudioLifecycleConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateStudioLifecycleConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.studioLifecycleConfigArn = output.studioLifecycleConfigArn
        } else {
            self.studioLifecycleConfigArn = nil
        }
    }
}

public struct CreateStudioLifecycleConfigOutputResponse: Swift.Equatable {
    /// The ARN of your created Lifecycle Configuration.
    public var studioLifecycleConfigArn: Swift.String?

    public init (
        studioLifecycleConfigArn: Swift.String? = nil
    )
    {
        self.studioLifecycleConfigArn = studioLifecycleConfigArn
    }
}

struct CreateStudioLifecycleConfigOutputResponseBody: Swift.Equatable {
    let studioLifecycleConfigArn: Swift.String?
}

extension CreateStudioLifecycleConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioLifecycleConfigArn = "StudioLifecycleConfigArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioLifecycleConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigArn)
        studioLifecycleConfigArn = studioLifecycleConfigArnDecoded
    }
}

extension CreateTrainingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case checkpointConfig = "CheckpointConfig"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case outputDataConfig = "OutputDataConfig"
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingJobName = "TrainingJobName"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmSpecification = algorithmSpecification {
            try encodeContainer.encode(algorithmSpecification, forKey: .algorithmSpecification)
        }
        if let checkpointConfig = checkpointConfig {
            try encodeContainer.encode(checkpointConfig, forKey: .checkpointConfig)
        }
        if let debugHookConfig = debugHookConfig {
            try encodeContainer.encode(debugHookConfig, forKey: .debugHookConfig)
        }
        if let debugRuleConfigurations = debugRuleConfigurations {
            var debugRuleConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .debugRuleConfigurations)
            for debugruleconfigurations0 in debugRuleConfigurations {
                try debugRuleConfigurationsContainer.encode(debugruleconfigurations0)
            }
        }
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if enableManagedSpotTraining != false {
            try encodeContainer.encode(enableManagedSpotTraining, forKey: .enableManagedSpotTraining)
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, trainingenvironmentmap0) in environment {
                try environmentContainer.encode(trainingenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let hyperParameters = hyperParameters {
            var hyperParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .hyperParameters)
            for (dictKey0, hyperparameters0) in hyperParameters {
                try hyperParametersContainer.encode(hyperparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for inputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(inputdataconfig0)
            }
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let profilerConfig = profilerConfig {
            try encodeContainer.encode(profilerConfig, forKey: .profilerConfig)
        }
        if let profilerRuleConfigurations = profilerRuleConfigurations {
            var profilerRuleConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .profilerRuleConfigurations)
            for profilerruleconfigurations0 in profilerRuleConfigurations {
                try profilerRuleConfigurationsContainer.encode(profilerruleconfigurations0)
            }
        }
        if let resourceConfig = resourceConfig {
            try encodeContainer.encode(resourceConfig, forKey: .resourceConfig)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let tensorBoardOutputConfig = tensorBoardOutputConfig {
            try encodeContainer.encode(tensorBoardOutputConfig, forKey: .tensorBoardOutputConfig)
        }
        if let trainingJobName = trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension CreateTrainingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateTrainingJobInput: Swift.Equatable {
    /// The registry path of the Docker image that contains the training algorithm and algorithm-specific metadata, including the input mode. For more information about algorithms provided by Amazon SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). For information about providing your own algorithms, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
    /// This member is required.
    public var algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
    /// Contains information about the output location for managed spot training checkpoint data.
    public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
    /// Configuration information for the Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
    public var debugHookConfig: SageMakerClientTypes.DebugHookConfig?
    /// Configuration information for Debugger rules for debugging output tensors.
    public var debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
    /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training. For more information, see [Protect Communications Between ML Compute Instances in a Distributed Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html).
    public var enableInterContainerTrafficEncryption: Swift.Bool
    /// To train models using managed spot training, choose True. Managed spot training provides a fully managed and scalable infrastructure for training machine learning models. this option is useful when training jobs can be interrupted and when there is flexibility when the training job is run. The complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be used as a starting point to train models incrementally. Amazon SageMaker provides metrics and logs in CloudWatch. They can be used to see when managed spot training jobs are running, interrupted, resumed, or completed.
    public var enableManagedSpotTraining: Swift.Bool
    /// Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If you enable network isolation for training jobs that are configured to use a VPC, Amazon SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
    public var enableNetworkIsolation: Swift.Bool
    /// The environment variables to set in the Docker container.
    public var environment: [Swift.String:Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob]
    ///
    /// * [CreateTrainingJob]
    ///
    /// * [CreateTransformJob]
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// Algorithm-specific parameters that influence the quality of the model. You set hyperparameters before you start the learning process. For a list of hyperparameters for each training algorithm provided by Amazon SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). You can specify a maximum of 100 hyperparameters. Each hyperparameter is a key-value pair. Each key and value is limited to 256 characters, as specified by the Length Constraint.
    public var hyperParameters: [Swift.String:Swift.String]?
    /// An array of Channel objects. Each channel is a named input source. InputDataConfig describes the input data and its location. Algorithms can accept input data from one or more channels. For example, an algorithm might have two channels of input data, training_data and validation_data. The configuration for each channel provides the S3, EFS, or FSx location where the input data is stored. It also provides information about the stored data: the MIME type, compression method, and whether the data is wrapped in RecordIO format. Depending on the input mode that the algorithm supports, Amazon SageMaker either copies input data files from an S3 bucket to a local directory in the Docker container, or makes it available as input streams. For example, if you specify an EFS location, input data files will be made available as input streams. They do not need to be downloaded.
    public var inputDataConfig: [SageMakerClientTypes.Channel]?
    /// Specifies the path to the S3 location where you want to store model artifacts. Amazon SageMaker creates subfolders for the artifacts.
    /// This member is required.
    public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
    /// Configuration information for Debugger system monitoring, framework profiling, and storage paths.
    public var profilerConfig: SageMakerClientTypes.ProfilerConfig?
    /// Configuration information for Debugger rules for profiling system and framework metrics.
    public var profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    /// The resources, including the ML compute instances and ML storage volumes, to use for model training. ML storage volumes store model artifacts and incremental states. Training algorithms might also use ML storage volumes for scratch space. If you want Amazon SageMaker to use the ML storage volume to store the training data, choose File as the TrainingInputMode in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.
    /// This member is required.
    public var resourceConfig: SageMakerClientTypes.ResourceConfig?
    /// The number of times to retry the job when the job fails due to an InternalServerError.
    public var retryStrategy: SageMakerClientTypes.RetryStrategy?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf. During model training, Amazon SageMaker needs your permission to read input data from an S3 bucket, download a Docker image that contains training code, write model artifacts to an S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant permissions for all of these tasks to an IAM role. For more information, see [Amazon SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// Configuration of storage locations for the Debugger TensorBoard output data.
    public var tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
    /// The name of the training job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.
    /// This member is required.
    public var trainingJobName: Swift.String?
    /// A [VpcConfig] object that specifies the VPC that you want your training job to connect to. Control access to and from your training container by configuring the VPC. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init (
        algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification? = nil,
        checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
        debugHookConfig: SageMakerClientTypes.DebugHookConfig? = nil,
        debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]? = nil,
        enableInterContainerTrafficEncryption: Swift.Bool = false,
        enableManagedSpotTraining: Swift.Bool = false,
        enableNetworkIsolation: Swift.Bool = false,
        environment: [Swift.String:Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        hyperParameters: [Swift.String:Swift.String]? = nil,
        inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
        outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
        profilerConfig: SageMakerClientTypes.ProfilerConfig? = nil,
        profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]? = nil,
        resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
        retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig? = nil,
        trainingJobName: Swift.String? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.algorithmSpecification = algorithmSpecification
        self.checkpointConfig = checkpointConfig
        self.debugHookConfig = debugHookConfig
        self.debugRuleConfigurations = debugRuleConfigurations
        self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
        self.enableManagedSpotTraining = enableManagedSpotTraining
        self.enableNetworkIsolation = enableNetworkIsolation
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.hyperParameters = hyperParameters
        self.inputDataConfig = inputDataConfig
        self.outputDataConfig = outputDataConfig
        self.profilerConfig = profilerConfig
        self.profilerRuleConfigurations = profilerRuleConfigurations
        self.resourceConfig = resourceConfig
        self.retryStrategy = retryStrategy
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
        self.tensorBoardOutputConfig = tensorBoardOutputConfig
        self.trainingJobName = trainingJobName
        self.vpcConfig = vpcConfig
    }
}

struct CreateTrainingJobInputBody: Swift.Equatable {
    let trainingJobName: Swift.String?
    let hyperParameters: [Swift.String:Swift.String]?
    let algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
    let roleArn: Swift.String?
    let inputDataConfig: [SageMakerClientTypes.Channel]?
    let outputDataConfig: SageMakerClientTypes.OutputDataConfig?
    let resourceConfig: SageMakerClientTypes.ResourceConfig?
    let vpcConfig: SageMakerClientTypes.VpcConfig?
    let stoppingCondition: SageMakerClientTypes.StoppingCondition?
    let tags: [SageMakerClientTypes.Tag]?
    let enableNetworkIsolation: Swift.Bool
    let enableInterContainerTrafficEncryption: Swift.Bool
    let enableManagedSpotTraining: Swift.Bool
    let checkpointConfig: SageMakerClientTypes.CheckpointConfig?
    let debugHookConfig: SageMakerClientTypes.DebugHookConfig?
    let debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
    let tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
    let profilerConfig: SageMakerClientTypes.ProfilerConfig?
    let profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    let environment: [Swift.String:Swift.String]?
    let retryStrategy: SageMakerClientTypes.RetryStrategy?
}

extension CreateTrainingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case checkpointConfig = "CheckpointConfig"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case outputDataConfig = "OutputDataConfig"
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingJobName = "TrainingJobName"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, hyperparametervalue0) in hyperParametersContainer {
                if let hyperparametervalue0 = hyperparametervalue0 {
                    hyperParametersDecoded0?[key0] = hyperparametervalue0
                }
            }
        }
        hyperParameters = hyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Channel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.Channel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let enableNetworkIsolationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableManagedSpotTraining)
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let debugHookConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DebugHookConfig.self, forKey: .debugHookConfig)
        debugHookConfig = debugHookConfigDecoded
        let debugRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DebugRuleConfiguration?].self, forKey: .debugRuleConfigurations)
        var debugRuleConfigurationsDecoded0:[SageMakerClientTypes.DebugRuleConfiguration]? = nil
        if let debugRuleConfigurationsContainer = debugRuleConfigurationsContainer {
            debugRuleConfigurationsDecoded0 = [SageMakerClientTypes.DebugRuleConfiguration]()
            for structure0 in debugRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    debugRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        debugRuleConfigurations = debugRuleConfigurationsDecoded0
        let tensorBoardOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TensorBoardOutputConfig.self, forKey: .tensorBoardOutputConfig)
        tensorBoardOutputConfig = tensorBoardOutputConfigDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let profilerConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProfilerConfig.self, forKey: .profilerConfig)
        profilerConfig = profilerConfigDecoded
        let profilerRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProfilerRuleConfiguration?].self, forKey: .profilerRuleConfigurations)
        var profilerRuleConfigurationsDecoded0:[SageMakerClientTypes.ProfilerRuleConfiguration]? = nil
        if let profilerRuleConfigurationsContainer = profilerRuleConfigurationsContainer {
            profilerRuleConfigurationsDecoded0 = [SageMakerClientTypes.ProfilerRuleConfiguration]()
            for structure0 in profilerRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    profilerRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        profilerRuleConfigurations = profilerRuleConfigurationsDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, trainingenvironmentvalue0) in environmentContainer {
                if let trainingenvironmentvalue0 = trainingenvironmentvalue0 {
                    environmentDecoded0?[key0] = trainingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let retryStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
    }
}

extension CreateTrainingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTrainingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTrainingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTrainingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTrainingJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trainingJobArn = output.trainingJobArn
        } else {
            self.trainingJobArn = nil
        }
    }
}

public struct CreateTrainingJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the training job.
    /// This member is required.
    public var trainingJobArn: Swift.String?

    public init (
        trainingJobArn: Swift.String? = nil
    )
    {
        self.trainingJobArn = trainingJobArn
    }
}

struct CreateTrainingJobOutputResponseBody: Swift.Equatable {
    let trainingJobArn: Swift.String?
}

extension CreateTrainingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trainingJobArn = "TrainingJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
    }
}

extension CreateTransformJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchStrategy = "BatchStrategy"
        case dataProcessing = "DataProcessing"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case modelClientConfig = "ModelClientConfig"
        case modelName = "ModelName"
        case tags = "Tags"
        case transformInput = "TransformInput"
        case transformJobName = "TransformJobName"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchStrategy = batchStrategy {
            try encodeContainer.encode(batchStrategy.rawValue, forKey: .batchStrategy)
        }
        if let dataProcessing = dataProcessing {
            try encodeContainer.encode(dataProcessing, forKey: .dataProcessing)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, transformenvironmentmap0) in environment {
                try environmentContainer.encode(transformenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let maxConcurrentTransforms = maxConcurrentTransforms {
            try encodeContainer.encode(maxConcurrentTransforms, forKey: .maxConcurrentTransforms)
        }
        if let maxPayloadInMB = maxPayloadInMB {
            try encodeContainer.encode(maxPayloadInMB, forKey: .maxPayloadInMB)
        }
        if let modelClientConfig = modelClientConfig {
            try encodeContainer.encode(modelClientConfig, forKey: .modelClientConfig)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let transformInput = transformInput {
            try encodeContainer.encode(transformInput, forKey: .transformInput)
        }
        if let transformJobName = transformJobName {
            try encodeContainer.encode(transformJobName, forKey: .transformJobName)
        }
        if let transformOutput = transformOutput {
            try encodeContainer.encode(transformOutput, forKey: .transformOutput)
        }
        if let transformResources = transformResources {
            try encodeContainer.encode(transformResources, forKey: .transformResources)
        }
    }
}

extension CreateTransformJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateTransformJobInput: Swift.Equatable {
    /// Specifies the number of records to include in a mini-batch for an HTTP inference request. A record is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record. To enable the batch strategy, you must set the SplitType property to Line, RecordIO, or TFRecord. To use only one record when making an HTTP invocation request to a container, set BatchStrategy to SingleRecord and SplitType to Line. To fit as many records in a mini-batch as can fit within the MaxPayloadInMB limit, set BatchStrategy to MultiRecord and SplitType to Line.
    public var batchStrategy: SageMakerClientTypes.BatchStrategy?
    /// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see [Associate Prediction Results with their Corresponding Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
    public var dataProcessing: SageMakerClientTypes.DataProcessing?
    /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
    public var environment: [Swift.String:Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob]
    ///
    /// * [CreateTrainingJob]
    ///
    /// * [CreateTransformJob]
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// The maximum number of parallel requests that can be sent to each instance in a transform job. If MaxConcurrentTransforms is set to 0 or left unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm. If the execution-parameters endpoint is not enabled, the default value is 1. For more information on execution-parameters, see [How Containers Serve Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests). For built-in algorithms, you don't need to set a value for MaxConcurrentTransforms.
    public var maxConcurrentTransforms: Swift.Int?
    /// The maximum allowed size of the payload, in MB. A payload is the data portion of a record (without metadata). The value in MaxPayloadInMB must be greater than, or equal to, the size of a single record. To estimate the size of a record in MB, divide the size of your dataset by the number of records. To ensure that the records fit within the maximum payload size, we recommend using a slightly larger value. The default value is 6 MB. For cases where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding, set the value to 0. This feature works only in supported algorithms. Currently, Amazon SageMaker built-in algorithms do not support HTTP chunked encoding.
    public var maxPayloadInMB: Swift.Int?
    /// Configures the timeout and maximum number of retries for processing a transform job invocation.
    public var modelClientConfig: SageMakerClientTypes.ModelClientConfig?
    /// The name of the model that you want to use for the transform job. ModelName must be the name of an existing Amazon SageMaker model within an Amazon Web Services Region in an Amazon Web Services account.
    /// This member is required.
    public var modelName: Swift.String?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?
    /// Describes the input source and the way the transform job consumes it.
    /// This member is required.
    public var transformInput: SageMakerClientTypes.TransformInput?
    /// The name of the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.
    /// This member is required.
    public var transformJobName: Swift.String?
    /// Describes the results of the transform job.
    /// This member is required.
    public var transformOutput: SageMakerClientTypes.TransformOutput?
    /// Describes the resources, including ML instance types and ML instance count, to use for the transform job.
    /// This member is required.
    public var transformResources: SageMakerClientTypes.TransformResources?

    public init (
        batchStrategy: SageMakerClientTypes.BatchStrategy? = nil,
        dataProcessing: SageMakerClientTypes.DataProcessing? = nil,
        environment: [Swift.String:Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        maxConcurrentTransforms: Swift.Int? = nil,
        maxPayloadInMB: Swift.Int? = nil,
        modelClientConfig: SageMakerClientTypes.ModelClientConfig? = nil,
        modelName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        transformInput: SageMakerClientTypes.TransformInput? = nil,
        transformJobName: Swift.String? = nil,
        transformOutput: SageMakerClientTypes.TransformOutput? = nil,
        transformResources: SageMakerClientTypes.TransformResources? = nil
    )
    {
        self.batchStrategy = batchStrategy
        self.dataProcessing = dataProcessing
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.maxConcurrentTransforms = maxConcurrentTransforms
        self.maxPayloadInMB = maxPayloadInMB
        self.modelClientConfig = modelClientConfig
        self.modelName = modelName
        self.tags = tags
        self.transformInput = transformInput
        self.transformJobName = transformJobName
        self.transformOutput = transformOutput
        self.transformResources = transformResources
    }
}

struct CreateTransformJobInputBody: Swift.Equatable {
    let transformJobName: Swift.String?
    let modelName: Swift.String?
    let maxConcurrentTransforms: Swift.Int?
    let modelClientConfig: SageMakerClientTypes.ModelClientConfig?
    let maxPayloadInMB: Swift.Int?
    let batchStrategy: SageMakerClientTypes.BatchStrategy?
    let environment: [Swift.String:Swift.String]?
    let transformInput: SageMakerClientTypes.TransformInput?
    let transformOutput: SageMakerClientTypes.TransformOutput?
    let transformResources: SageMakerClientTypes.TransformResources?
    let dataProcessing: SageMakerClientTypes.DataProcessing?
    let tags: [SageMakerClientTypes.Tag]?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
}

extension CreateTransformJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchStrategy = "BatchStrategy"
        case dataProcessing = "DataProcessing"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case modelClientConfig = "ModelClientConfig"
        case modelName = "ModelName"
        case tags = "Tags"
        case transformInput = "TransformInput"
        case transformJobName = "TransformJobName"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobName)
        transformJobName = transformJobNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let maxConcurrentTransformsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentTransforms)
        maxConcurrentTransforms = maxConcurrentTransformsDecoded
        let modelClientConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelClientConfig.self, forKey: .modelClientConfig)
        modelClientConfig = modelClientConfigDecoded
        let maxPayloadInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPayloadInMB)
        maxPayloadInMB = maxPayloadInMBDecoded
        let batchStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.BatchStrategy.self, forKey: .batchStrategy)
        batchStrategy = batchStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, transformenvironmentvalue0) in environmentContainer {
                if let transformenvironmentvalue0 = transformenvironmentvalue0 {
                    environmentDecoded0?[key0] = transformenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let transformInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformInput.self, forKey: .transformInput)
        transformInput = transformInputDecoded
        let transformOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformOutput.self, forKey: .transformOutput)
        transformOutput = transformOutputDecoded
        let transformResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformResources.self, forKey: .transformResources)
        transformResources = transformResourcesDecoded
        let dataProcessingDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataProcessing.self, forKey: .dataProcessing)
        dataProcessing = dataProcessingDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
    }
}

extension CreateTransformJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTransformJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTransformJobOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTransformJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTransformJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.transformJobArn = output.transformJobArn
        } else {
            self.transformJobArn = nil
        }
    }
}

public struct CreateTransformJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the transform job.
    /// This member is required.
    public var transformJobArn: Swift.String?

    public init (
        transformJobArn: Swift.String? = nil
    )
    {
        self.transformJobArn = transformJobArn
    }
}

struct CreateTransformJobOutputResponseBody: Swift.Equatable {
    let transformJobArn: Swift.String?
}

extension CreateTransformJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformJobArn = "TransformJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobArn)
        transformJobArn = transformJobArnDecoded
    }
}

extension CreateTrialComponentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case metadataProperties = "MetadataProperties"
        case outputArtifacts = "OutputArtifacts"
        case parameters = "Parameters"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
        case trialComponentName = "TrialComponentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .inputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in inputArtifacts {
                try inputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .outputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in outputArtifacts {
                try outputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, trialcomponentparameters0) in parameters {
                try parametersContainer.encode(trialcomponentparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
    }
}

extension CreateTrialComponentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateTrialComponentInput: Swift.Equatable {
    /// The name of the component as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialComponentName is displayed.
    public var displayName: Swift.String?
    /// When the component ended.
    public var endTime: ClientRuntime.Date?
    /// The input artifacts for the component. Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types.
    public var inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// The output artifacts for the component. Examples of output artifacts are metrics, snapshots, logs, and images.
    public var outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    /// The hyperparameters for the component.
    public var parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]?
    /// When the component started.
    public var startTime: ClientRuntime.Date?
    /// The status of the component. States include:
    ///
    /// * InProgress
    ///
    /// * Completed
    ///
    /// * Failed
    public var status: SageMakerClientTypes.TrialComponentStatus?
    /// A list of tags to associate with the component. You can use [Search] API to search on the tags.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The name of the component. The name must be unique in your Amazon Web Services account and is not case-sensitive.
    /// This member is required.
    public var trialComponentName: Swift.String?

    public init (
        displayName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil,
        parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil,
        startTime: ClientRuntime.Date? = nil,
        status: SageMakerClientTypes.TrialComponentStatus? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        trialComponentName: Swift.String? = nil
    )
    {
        self.displayName = displayName
        self.endTime = endTime
        self.inputArtifacts = inputArtifacts
        self.metadataProperties = metadataProperties
        self.outputArtifacts = outputArtifacts
        self.parameters = parameters
        self.startTime = startTime
        self.status = status
        self.tags = tags
        self.trialComponentName = trialComponentName
    }
}

struct CreateTrialComponentInputBody: Swift.Equatable {
    let trialComponentName: Swift.String?
    let displayName: Swift.String?
    let status: SageMakerClientTypes.TrialComponentStatus?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]?
    let inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    let outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateTrialComponentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case metadataProperties = "MetadataProperties"
        case outputArtifacts = "OutputArtifacts"
        case parameters = "Parameters"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
        case trialComponentName = "TrialComponentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentParameterValue?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]()
            for (key0, trialcomponentparametervalue0) in parametersContainer {
                if let trialcomponentparametervalue0 = trialcomponentparametervalue0 {
                    parametersDecoded0?[key0] = trialcomponentparametervalue0
                }
            }
        }
        parameters = parametersDecoded0
        let inputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in inputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    inputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in outputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    outputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateTrialComponentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTrialComponentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTrialComponentOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTrialComponentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTrialComponentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trialComponentArn = output.trialComponentArn
        } else {
            self.trialComponentArn = nil
        }
    }
}

public struct CreateTrialComponentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the trial component.
    public var trialComponentArn: Swift.String?

    public init (
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialComponentArn = trialComponentArn
    }
}

struct CreateTrialComponentOutputResponseBody: Swift.Equatable {
    let trialComponentArn: Swift.String?
}

extension CreateTrialComponentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentArn = "TrialComponentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
    }
}

extension CreateTrialInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case experimentName = "ExperimentName"
        case metadataProperties = "MetadataProperties"
        case tags = "Tags"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }
}

extension CreateTrialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateTrialInput: Swift.Equatable {
    /// The name of the trial as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialName is displayed.
    public var displayName: Swift.String?
    /// The name of the experiment to associate the trial with.
    /// This member is required.
    public var experimentName: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of tags to associate with the trial. You can use [Search] API to search on the tags.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The name of the trial. The name must be unique in your Amazon Web Services account and is not case-sensitive.
    /// This member is required.
    public var trialName: Swift.String?

    public init (
        displayName: Swift.String? = nil,
        experimentName: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.displayName = displayName
        self.experimentName = experimentName
        self.metadataProperties = metadataProperties
        self.tags = tags
        self.trialName = trialName
    }
}

struct CreateTrialInputBody: Swift.Equatable {
    let trialName: Swift.String?
    let displayName: Swift.String?
    let experimentName: Swift.String?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateTrialInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case experimentName = "ExperimentName"
        case metadataProperties = "MetadataProperties"
        case tags = "Tags"
        case trialName = "TrialName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateTrialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTrialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTrialOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTrialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTrialOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trialArn = output.trialArn
        } else {
            self.trialArn = nil
        }
    }
}

public struct CreateTrialOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?

    public init (
        trialArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
    }
}

struct CreateTrialOutputResponseBody: Swift.Equatable {
    let trialArn: Swift.String?
}

extension CreateTrialOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialArn = "TrialArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialArn)
        trialArn = trialArnDecoded
    }
}

extension CreateUserProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case singleSignOnUserIdentifier = "SingleSignOnUserIdentifier"
        case singleSignOnUserValue = "SingleSignOnUserValue"
        case tags = "Tags"
        case userProfileName = "UserProfileName"
        case userSettings = "UserSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let singleSignOnUserIdentifier = singleSignOnUserIdentifier {
            try encodeContainer.encode(singleSignOnUserIdentifier, forKey: .singleSignOnUserIdentifier)
        }
        if let singleSignOnUserValue = singleSignOnUserValue {
            try encodeContainer.encode(singleSignOnUserValue, forKey: .singleSignOnUserValue)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
        if let userSettings = userSettings {
            try encodeContainer.encode(userSettings, forKey: .userSettings)
        }
    }
}

extension CreateUserProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateUserProfileInput: Swift.Equatable {
    /// The ID of the associated Domain.
    /// This member is required.
    public var domainId: Swift.String?
    /// A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain's AuthMode is SSO, this field is required. If the Domain's AuthMode is not SSO, this field cannot be specified.
    public var singleSignOnUserIdentifier: Swift.String?
    /// The username of the associated Amazon Web Services Single Sign-On User for this UserProfile. If the Domain's AuthMode is SSO, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not SSO, this field cannot be specified.
    public var singleSignOnUserValue: Swift.String?
    /// Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags that you specify for the User Profile are also added to all Apps that the User Profile launches.
    public var tags: [SageMakerClientTypes.Tag]?
    /// A name for the UserProfile. This value is not case sensitive.
    /// This member is required.
    public var userProfileName: Swift.String?
    /// A collection of settings.
    public var userSettings: SageMakerClientTypes.UserSettings?

    public init (
        domainId: Swift.String? = nil,
        singleSignOnUserIdentifier: Swift.String? = nil,
        singleSignOnUserValue: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        userProfileName: Swift.String? = nil,
        userSettings: SageMakerClientTypes.UserSettings? = nil
    )
    {
        self.domainId = domainId
        self.singleSignOnUserIdentifier = singleSignOnUserIdentifier
        self.singleSignOnUserValue = singleSignOnUserValue
        self.tags = tags
        self.userProfileName = userProfileName
        self.userSettings = userSettings
    }
}

struct CreateUserProfileInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileName: Swift.String?
    let singleSignOnUserIdentifier: Swift.String?
    let singleSignOnUserValue: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let userSettings: SageMakerClientTypes.UserSettings?
}

extension CreateUserProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case singleSignOnUserIdentifier = "SingleSignOnUserIdentifier"
        case singleSignOnUserValue = "SingleSignOnUserValue"
        case tags = "Tags"
        case userProfileName = "UserProfileName"
        case userSettings = "UserSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let singleSignOnUserIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .singleSignOnUserIdentifier)
        singleSignOnUserIdentifier = singleSignOnUserIdentifierDecoded
        let singleSignOnUserValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .singleSignOnUserValue)
        singleSignOnUserValue = singleSignOnUserValueDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let userSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserSettings.self, forKey: .userSettings)
        userSettings = userSettingsDecoded
    }
}

extension CreateUserProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateUserProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUserProfileOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateUserProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userProfileArn = output.userProfileArn
        } else {
            self.userProfileArn = nil
        }
    }
}

public struct CreateUserProfileOutputResponse: Swift.Equatable {
    /// The user profile Amazon Resource Name (ARN).
    public var userProfileArn: Swift.String?

    public init (
        userProfileArn: Swift.String? = nil
    )
    {
        self.userProfileArn = userProfileArn
    }
}

struct CreateUserProfileOutputResponseBody: Swift.Equatable {
    let userProfileArn: Swift.String?
}

extension CreateUserProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userProfileArn = "UserProfileArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileArn)
        userProfileArn = userProfileArnDecoded
    }
}

extension CreateWorkforceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cognitoConfig = "CognitoConfig"
        case oidcConfig = "OidcConfig"
        case sourceIpConfig = "SourceIpConfig"
        case tags = "Tags"
        case workforceName = "WorkforceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cognitoConfig = cognitoConfig {
            try encodeContainer.encode(cognitoConfig, forKey: .cognitoConfig)
        }
        if let oidcConfig = oidcConfig {
            try encodeContainer.encode(oidcConfig, forKey: .oidcConfig)
        }
        if let sourceIpConfig = sourceIpConfig {
            try encodeContainer.encode(sourceIpConfig, forKey: .sourceIpConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let workforceName = workforceName {
            try encodeContainer.encode(workforceName, forKey: .workforceName)
        }
    }
}

extension CreateWorkforceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateWorkforceInput: Swift.Equatable {
    /// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single [ Amazon Cognito user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html). Do not use OidcConfig if you specify values for CognitoConfig.
    public var cognitoConfig: SageMakerClientTypes.CognitoConfig?
    /// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Do not use CognitoConfig if you specify values for OidcConfig.
    public var oidcConfig: SageMakerClientTypes.OidcConfig?
    /// A list of IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses.
    public var sourceIpConfig: SageMakerClientTypes.SourceIpConfig?
    /// An array of key-value pairs that contain metadata to help you categorize and organize our workforce. Each tag consists of a key and a value, both of which you define.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The name of the private workforce.
    /// This member is required.
    public var workforceName: Swift.String?

    public init (
        cognitoConfig: SageMakerClientTypes.CognitoConfig? = nil,
        oidcConfig: SageMakerClientTypes.OidcConfig? = nil,
        sourceIpConfig: SageMakerClientTypes.SourceIpConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        workforceName: Swift.String? = nil
    )
    {
        self.cognitoConfig = cognitoConfig
        self.oidcConfig = oidcConfig
        self.sourceIpConfig = sourceIpConfig
        self.tags = tags
        self.workforceName = workforceName
    }
}

struct CreateWorkforceInputBody: Swift.Equatable {
    let cognitoConfig: SageMakerClientTypes.CognitoConfig?
    let oidcConfig: SageMakerClientTypes.OidcConfig?
    let sourceIpConfig: SageMakerClientTypes.SourceIpConfig?
    let workforceName: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateWorkforceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cognitoConfig = "CognitoConfig"
        case oidcConfig = "OidcConfig"
        case sourceIpConfig = "SourceIpConfig"
        case tags = "Tags"
        case workforceName = "WorkforceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cognitoConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CognitoConfig.self, forKey: .cognitoConfig)
        cognitoConfig = cognitoConfigDecoded
        let oidcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OidcConfig.self, forKey: .oidcConfig)
        oidcConfig = oidcConfigDecoded
        let sourceIpConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SourceIpConfig.self, forKey: .sourceIpConfig)
        sourceIpConfig = sourceIpConfigDecoded
        let workforceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateWorkforceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateWorkforceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateWorkforceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateWorkforceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateWorkforceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.workforceArn = output.workforceArn
        } else {
            self.workforceArn = nil
        }
    }
}

public struct CreateWorkforceOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the workforce.
    /// This member is required.
    public var workforceArn: Swift.String?

    public init (
        workforceArn: Swift.String? = nil
    )
    {
        self.workforceArn = workforceArn
    }
}

struct CreateWorkforceOutputResponseBody: Swift.Equatable {
    let workforceArn: Swift.String?
}

extension CreateWorkforceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workforceArn = "WorkforceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceArn)
        workforceArn = workforceArnDecoded
    }
}

extension CreateWorkteamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case memberDefinitions = "MemberDefinitions"
        case notificationConfiguration = "NotificationConfiguration"
        case tags = "Tags"
        case workforceName = "WorkforceName"
        case workteamName = "WorkteamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let memberDefinitions = memberDefinitions {
            var memberDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memberDefinitions)
            for memberdefinitions0 in memberDefinitions {
                try memberDefinitionsContainer.encode(memberdefinitions0)
            }
        }
        if let notificationConfiguration = notificationConfiguration {
            try encodeContainer.encode(notificationConfiguration, forKey: .notificationConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let workforceName = workforceName {
            try encodeContainer.encode(workforceName, forKey: .workforceName)
        }
        if let workteamName = workteamName {
            try encodeContainer.encode(workteamName, forKey: .workteamName)
        }
    }
}

extension CreateWorkteamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateWorkteamInput: Swift.Equatable {
    /// A description of the work team.
    /// This member is required.
    public var description: Swift.String?
    /// A list of MemberDefinition objects that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition. Do not provide input for both of these parameters in a single request. For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito user groups within the user pool used to create a workforce. All of the CognitoMemberDefinition objects that make up the member definition must have the same ClientId and UserPool values. To add a Amazon Cognito user group to an existing worker pool, see [Adding groups to a User Pool]. For more information about user pools, see [Amazon Cognito User Pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html). For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in OidcMemberDefinition by listing those groups in Groups.
    /// This member is required.
    public var memberDefinitions: [SageMakerClientTypes.MemberDefinition]?
    /// Configures notification of workers regarding available or expiring work items.
    public var notificationConfiguration: SageMakerClientTypes.NotificationConfiguration?
    /// An array of key-value pairs. For more information, see [Resource Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) and [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The name of the workforce.
    public var workforceName: Swift.String?
    /// The name of the work team. Use this name to identify the work team.
    /// This member is required.
    public var workteamName: Swift.String?

    public init (
        description: Swift.String? = nil,
        memberDefinitions: [SageMakerClientTypes.MemberDefinition]? = nil,
        notificationConfiguration: SageMakerClientTypes.NotificationConfiguration? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        workforceName: Swift.String? = nil,
        workteamName: Swift.String? = nil
    )
    {
        self.description = description
        self.memberDefinitions = memberDefinitions
        self.notificationConfiguration = notificationConfiguration
        self.tags = tags
        self.workforceName = workforceName
        self.workteamName = workteamName
    }
}

struct CreateWorkteamInputBody: Swift.Equatable {
    let workteamName: Swift.String?
    let workforceName: Swift.String?
    let memberDefinitions: [SageMakerClientTypes.MemberDefinition]?
    let description: Swift.String?
    let notificationConfiguration: SageMakerClientTypes.NotificationConfiguration?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateWorkteamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case memberDefinitions = "MemberDefinitions"
        case notificationConfiguration = "NotificationConfiguration"
        case tags = "Tags"
        case workforceName = "WorkforceName"
        case workteamName = "WorkteamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamName)
        workteamName = workteamNameDecoded
        let workforceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
        let memberDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MemberDefinition?].self, forKey: .memberDefinitions)
        var memberDefinitionsDecoded0:[SageMakerClientTypes.MemberDefinition]? = nil
        if let memberDefinitionsContainer = memberDefinitionsContainer {
            memberDefinitionsDecoded0 = [SageMakerClientTypes.MemberDefinition]()
            for structure0 in memberDefinitionsContainer {
                if let structure0 = structure0 {
                    memberDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        memberDefinitions = memberDefinitionsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateWorkteamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateWorkteamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateWorkteamOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateWorkteamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateWorkteamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.workteamArn = output.workteamArn
        } else {
            self.workteamArn = nil
        }
    }
}

public struct CreateWorkteamOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the work team. You can use this ARN to identify the work team.
    public var workteamArn: Swift.String?

    public init (
        workteamArn: Swift.String? = nil
    )
    {
        self.workteamArn = workteamArn
    }
}

struct CreateWorkteamOutputResponseBody: Swift.Equatable {
    let workteamArn: Swift.String?
}

extension CreateWorkteamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workteamArn = "WorkteamArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
    }
}

extension SageMakerClientTypes.CustomImage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigName = "AppImageConfigName"
        case imageName = "ImageName"
        case imageVersionNumber = "ImageVersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appImageConfigName = appImageConfigName {
            try encodeContainer.encode(appImageConfigName, forKey: .appImageConfigName)
        }
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
        if let imageVersionNumber = imageVersionNumber {
            try encodeContainer.encode(imageVersionNumber, forKey: .imageVersionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let imageVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .imageVersionNumber)
        imageVersionNumber = imageVersionNumberDecoded
        let appImageConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigName)
        appImageConfigName = appImageConfigNameDecoded
    }
}

extension SageMakerClientTypes {
    /// A custom SageMaker image. For more information, see [Bring your own SageMaker image](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html).
    public struct CustomImage: Swift.Equatable {
        /// The name of the AppImageConfig.
        /// This member is required.
        public var appImageConfigName: Swift.String?
        /// The name of the CustomImage. Must be unique to your account.
        /// This member is required.
        public var imageName: Swift.String?
        /// The version number of the CustomImage.
        public var imageVersionNumber: Swift.Int?

        public init (
            appImageConfigName: Swift.String? = nil,
            imageName: Swift.String? = nil,
            imageVersionNumber: Swift.Int? = nil
        )
        {
            self.appImageConfigName = appImageConfigName
            self.imageName = imageName
            self.imageVersionNumber = imageVersionNumber
        }
    }

}

extension SageMakerClientTypes.DataCaptureConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captureContentTypeHeader = "CaptureContentTypeHeader"
        case captureOptions = "CaptureOptions"
        case destinationS3Uri = "DestinationS3Uri"
        case enableCapture = "EnableCapture"
        case initialSamplingPercentage = "InitialSamplingPercentage"
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captureContentTypeHeader = captureContentTypeHeader {
            try encodeContainer.encode(captureContentTypeHeader, forKey: .captureContentTypeHeader)
        }
        if let captureOptions = captureOptions {
            var captureOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captureOptions)
            for captureoptionlist0 in captureOptions {
                try captureOptionsContainer.encode(captureoptionlist0)
            }
        }
        if let destinationS3Uri = destinationS3Uri {
            try encodeContainer.encode(destinationS3Uri, forKey: .destinationS3Uri)
        }
        if enableCapture != false {
            try encodeContainer.encode(enableCapture, forKey: .enableCapture)
        }
        if let initialSamplingPercentage = initialSamplingPercentage {
            try encodeContainer.encode(initialSamplingPercentage, forKey: .initialSamplingPercentage)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enableCaptureDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableCapture)
        enableCapture = enableCaptureDecoded
        let initialSamplingPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initialSamplingPercentage)
        initialSamplingPercentage = initialSamplingPercentageDecoded
        let destinationS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationS3Uri)
        destinationS3Uri = destinationS3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let captureOptionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.CaptureOption?].self, forKey: .captureOptions)
        var captureOptionsDecoded0:[SageMakerClientTypes.CaptureOption]? = nil
        if let captureOptionsContainer = captureOptionsContainer {
            captureOptionsDecoded0 = [SageMakerClientTypes.CaptureOption]()
            for structure0 in captureOptionsContainer {
                if let structure0 = structure0 {
                    captureOptionsDecoded0?.append(structure0)
                }
            }
        }
        captureOptions = captureOptionsDecoded0
        let captureContentTypeHeaderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CaptureContentTypeHeader.self, forKey: .captureContentTypeHeader)
        captureContentTypeHeader = captureContentTypeHeaderDecoded
    }
}

extension SageMakerClientTypes {
    ///
    public struct DataCaptureConfig: Swift.Equatable {
        ///
        public var captureContentTypeHeader: SageMakerClientTypes.CaptureContentTypeHeader?
        ///
        /// This member is required.
        public var captureOptions: [SageMakerClientTypes.CaptureOption]?
        ///
        /// This member is required.
        public var destinationS3Uri: Swift.String?
        ///
        public var enableCapture: Swift.Bool
        ///
        /// This member is required.
        public var initialSamplingPercentage: Swift.Int?
        ///
        public var kmsKeyId: Swift.String?

        public init (
            captureContentTypeHeader: SageMakerClientTypes.CaptureContentTypeHeader? = nil,
            captureOptions: [SageMakerClientTypes.CaptureOption]? = nil,
            destinationS3Uri: Swift.String? = nil,
            enableCapture: Swift.Bool = false,
            initialSamplingPercentage: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.captureContentTypeHeader = captureContentTypeHeader
            self.captureOptions = captureOptions
            self.destinationS3Uri = destinationS3Uri
            self.enableCapture = enableCapture
            self.initialSamplingPercentage = initialSamplingPercentage
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes.DataCaptureConfigSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captureStatus = "CaptureStatus"
        case currentSamplingPercentage = "CurrentSamplingPercentage"
        case destinationS3Uri = "DestinationS3Uri"
        case enableCapture = "EnableCapture"
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captureStatus = captureStatus {
            try encodeContainer.encode(captureStatus.rawValue, forKey: .captureStatus)
        }
        if let currentSamplingPercentage = currentSamplingPercentage {
            try encodeContainer.encode(currentSamplingPercentage, forKey: .currentSamplingPercentage)
        }
        if let destinationS3Uri = destinationS3Uri {
            try encodeContainer.encode(destinationS3Uri, forKey: .destinationS3Uri)
        }
        if enableCapture != false {
            try encodeContainer.encode(enableCapture, forKey: .enableCapture)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enableCaptureDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableCapture)
        enableCapture = enableCaptureDecoded
        let captureStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CaptureStatus.self, forKey: .captureStatus)
        captureStatus = captureStatusDecoded
        let currentSamplingPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentSamplingPercentage)
        currentSamplingPercentage = currentSamplingPercentageDecoded
        let destinationS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationS3Uri)
        destinationS3Uri = destinationS3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    ///
    public struct DataCaptureConfigSummary: Swift.Equatable {
        ///
        /// This member is required.
        public var captureStatus: SageMakerClientTypes.CaptureStatus?
        ///
        /// This member is required.
        public var currentSamplingPercentage: Swift.Int?
        ///
        /// This member is required.
        public var destinationS3Uri: Swift.String?
        ///
        /// This member is required.
        public var enableCapture: Swift.Bool
        ///
        /// This member is required.
        public var kmsKeyId: Swift.String?

        public init (
            captureStatus: SageMakerClientTypes.CaptureStatus? = nil,
            currentSamplingPercentage: Swift.Int? = nil,
            destinationS3Uri: Swift.String? = nil,
            enableCapture: Swift.Bool = false,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.captureStatus = captureStatus
            self.currentSamplingPercentage = currentSamplingPercentage
            self.destinationS3Uri = destinationS3Uri
            self.enableCapture = enableCapture
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes.DataCatalogConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalog = "Catalog"
        case database = "Database"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalog = catalog {
            try encodeContainer.encode(catalog, forKey: .catalog)
        }
        if let database = database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let catalogDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalog)
        catalog = catalogDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .database)
        database = databaseDecoded
    }
}

extension SageMakerClientTypes {
    /// The meta data of the Glue table which serves as data catalog for the OfflineStore.
    public struct DataCatalogConfig: Swift.Equatable {
        /// The name of the Glue table catalog.
        /// This member is required.
        public var catalog: Swift.String?
        /// The name of the Glue table database.
        /// This member is required.
        public var database: Swift.String?
        /// The name of the Glue table.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            catalog: Swift.String? = nil,
            database: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.catalog = catalog
            self.database = database
            self.tableName = tableName
        }
    }

}

extension SageMakerClientTypes {
    public enum DataDistributionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullyreplicated
        case shardedbys3key
        case sdkUnknown(Swift.String)

        public static var allCases: [DataDistributionType] {
            return [
                .fullyreplicated,
                .shardedbys3key,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullyreplicated: return "FullyReplicated"
            case .shardedbys3key: return "ShardedByS3Key"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataDistributionType(rawValue: rawValue) ?? DataDistributionType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.DataProcessing: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputFilter = "InputFilter"
        case joinSource = "JoinSource"
        case outputFilter = "OutputFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputFilter = inputFilter {
            try encodeContainer.encode(inputFilter, forKey: .inputFilter)
        }
        if let joinSource = joinSource {
            try encodeContainer.encode(joinSource.rawValue, forKey: .joinSource)
        }
        if let outputFilter = outputFilter {
            try encodeContainer.encode(outputFilter, forKey: .outputFilter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputFilter)
        inputFilter = inputFilterDecoded
        let outputFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputFilter)
        outputFilter = outputFilterDecoded
        let joinSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.JoinSource.self, forKey: .joinSource)
        joinSource = joinSourceDecoded
    }
}

extension SageMakerClientTypes {
    /// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see [Associate Prediction Results with their Corresponding Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
    public struct DataProcessing: Swift.Equatable {
        /// A [JSONPath](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators) expression used to select a portion of the input data to pass to the algorithm. Use the InputFilter parameter to exclude fields, such as an ID column, from the input. If you want Amazon SageMaker to pass the entire input dataset to the algorithm, accept the default value $. Examples: "$", "$[1:]", "$.features"
        public var inputFilter: Swift.String?
        /// Specifies the source of the data to join with the transformed data. The valid values are None and Input. The default value is None, which specifies not to join the input with the transformed data. If you want the batch transform job to join the original input data with the transformed data, set JoinSource to Input. You can specify OutputFilter as an additional filter to select a portion of the joined dataset and store it in the output file. For JSON or JSONLines objects, such as a JSON array, SageMaker adds the transformed data to the input JSON object in an attribute called SageMakerOutput. The joined result for JSON must be a key-value pair object. If the input is not a key-value pair object, SageMaker creates a new JSON file. In the new JSON file, and the input data is stored under the SageMakerInput key and the results are stored in SageMakerOutput. For CSV data, SageMaker takes each row as a JSON array and joins the transformed data with the input by appending each transformed row to the end of the input. The joined data has the original input data followed by the transformed data and the output is a CSV file. For information on how joining in applied, see [Workflow for Associating Inferences with Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#batch-transform-data-processing-workflow).
        public var joinSource: SageMakerClientTypes.JoinSource?
        /// A [JSONPath](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators) expression used to select a portion of the joined dataset to save in the output file for a batch transform job. If you want Amazon SageMaker to store the entire input dataset in the output file, leave the default value, $. If you specify indexes that aren't within the dimension size of the joined dataset, you get an error. Examples: "$", "$[0,5:]", "$['id','SageMakerOutput']"
        public var outputFilter: Swift.String?

        public init (
            inputFilter: Swift.String? = nil,
            joinSource: SageMakerClientTypes.JoinSource? = nil,
            outputFilter: Swift.String? = nil
        )
        {
            self.inputFilter = inputFilter
            self.joinSource = joinSource
            self.outputFilter = outputFilter
        }
    }

}

extension SageMakerClientTypes.DataQualityAppSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerArguments = "ContainerArguments"
        case containerEntrypoint = "ContainerEntrypoint"
        case environment = "Environment"
        case imageUri = "ImageUri"
        case postAnalyticsProcessorSourceUri = "PostAnalyticsProcessorSourceUri"
        case recordPreprocessorSourceUri = "RecordPreprocessorSourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerArguments = containerArguments {
            var containerArgumentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerArguments)
            for monitoringcontainerarguments0 in containerArguments {
                try containerArgumentsContainer.encode(monitoringcontainerarguments0)
            }
        }
        if let containerEntrypoint = containerEntrypoint {
            var containerEntrypointContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerEntrypoint)
            for containerentrypoint0 in containerEntrypoint {
                try containerEntrypointContainer.encode(containerentrypoint0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, monitoringenvironmentmap0) in environment {
                try environmentContainer.encode(monitoringenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let imageUri = imageUri {
            try encodeContainer.encode(imageUri, forKey: .imageUri)
        }
        if let postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri {
            try encodeContainer.encode(postAnalyticsProcessorSourceUri, forKey: .postAnalyticsProcessorSourceUri)
        }
        if let recordPreprocessorSourceUri = recordPreprocessorSourceUri {
            try encodeContainer.encode(recordPreprocessorSourceUri, forKey: .recordPreprocessorSourceUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let containerEntrypointContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerEntrypoint)
        var containerEntrypointDecoded0:[Swift.String]? = nil
        if let containerEntrypointContainer = containerEntrypointContainer {
            containerEntrypointDecoded0 = [Swift.String]()
            for string0 in containerEntrypointContainer {
                if let string0 = string0 {
                    containerEntrypointDecoded0?.append(string0)
                }
            }
        }
        containerEntrypoint = containerEntrypointDecoded0
        let containerArgumentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerArguments)
        var containerArgumentsDecoded0:[Swift.String]? = nil
        if let containerArgumentsContainer = containerArgumentsContainer {
            containerArgumentsDecoded0 = [Swift.String]()
            for string0 in containerArgumentsContainer {
                if let string0 = string0 {
                    containerArgumentsDecoded0?.append(string0)
                }
            }
        }
        containerArguments = containerArgumentsDecoded0
        let recordPreprocessorSourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordPreprocessorSourceUri)
        recordPreprocessorSourceUri = recordPreprocessorSourceUriDecoded
        let postAnalyticsProcessorSourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postAnalyticsProcessorSourceUri)
        postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUriDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
    }
}

extension SageMakerClientTypes {
    /// Information about the container that a data quality monitoring job runs.
    public struct DataQualityAppSpecification: Swift.Equatable {
        /// The arguments to send to the container that the monitoring job runs.
        public var containerArguments: [Swift.String]?
        /// The entrypoint for a container used to run a monitoring job.
        public var containerEntrypoint: [Swift.String]?
        /// Sets the environment variables in the container that the monitoring job runs.
        public var environment: [Swift.String:Swift.String]?
        /// The container image that the data quality monitoring job runs.
        /// This member is required.
        public var imageUri: Swift.String?
        /// An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        public var postAnalyticsProcessorSourceUri: Swift.String?
        /// An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        public var recordPreprocessorSourceUri: Swift.String?

        public init (
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            imageUri: Swift.String? = nil,
            postAnalyticsProcessorSourceUri: Swift.String? = nil,
            recordPreprocessorSourceUri: Swift.String? = nil
        )
        {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.environment = environment
            self.imageUri = imageUri
            self.postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri
            self.recordPreprocessorSourceUri = recordPreprocessorSourceUri
        }
    }

}

extension SageMakerClientTypes.DataQualityBaselineConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseliningJobName = "BaseliningJobName"
        case constraintsResource = "ConstraintsResource"
        case statisticsResource = "StatisticsResource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseliningJobName = baseliningJobName {
            try encodeContainer.encode(baseliningJobName, forKey: .baseliningJobName)
        }
        if let constraintsResource = constraintsResource {
            try encodeContainer.encode(constraintsResource, forKey: .constraintsResource)
        }
        if let statisticsResource = statisticsResource {
            try encodeContainer.encode(statisticsResource, forKey: .statisticsResource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseliningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseliningJobName)
        baseliningJobName = baseliningJobNameDecoded
        let constraintsResourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringConstraintsResource.self, forKey: .constraintsResource)
        constraintsResource = constraintsResourceDecoded
        let statisticsResourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStatisticsResource.self, forKey: .statisticsResource)
        statisticsResource = statisticsResourceDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
    public struct DataQualityBaselineConfig: Swift.Equatable {
        /// The name of the job that performs baselining for the data quality monitoring job.
        public var baseliningJobName: Swift.String?
        /// The constraints resource for a monitoring job.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?
        /// The statistics resource for a monitoring job.
        public var statisticsResource: SageMakerClientTypes.MonitoringStatisticsResource?

        public init (
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil,
            statisticsResource: SageMakerClientTypes.MonitoringStatisticsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
            self.statisticsResource = statisticsResource
        }
    }

}

extension SageMakerClientTypes.DataQualityJobInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointInput = "EndpointInput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointInput = endpointInput {
            try encodeContainer.encode(endpointInput, forKey: .endpointInput)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointInput.self, forKey: .endpointInput)
        endpointInput = endpointInputDecoded
    }
}

extension SageMakerClientTypes {
    /// The input for the data quality monitoring job. Currently endpoints are supported for input.
    public struct DataQualityJobInput: Swift.Equatable {
        /// Input object for the endpoint
        /// This member is required.
        public var endpointInput: SageMakerClientTypes.EndpointInput?

        public init (
            endpointInput: SageMakerClientTypes.EndpointInput? = nil
        )
        {
            self.endpointInput = endpointInput
        }
    }

}

extension SageMakerClientTypes.DataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystemDataSource = "FileSystemDataSource"
        case s3DataSource = "S3DataSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileSystemDataSource = fileSystemDataSource {
            try encodeContainer.encode(fileSystemDataSource, forKey: .fileSystemDataSource)
        }
        if let s3DataSource = s3DataSource {
            try encodeContainer.encode(s3DataSource, forKey: .s3DataSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3DataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.S3DataSource.self, forKey: .s3DataSource)
        s3DataSource = s3DataSourceDecoded
        let fileSystemDataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FileSystemDataSource.self, forKey: .fileSystemDataSource)
        fileSystemDataSource = fileSystemDataSourceDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the location of the channel data.
    public struct DataSource: Swift.Equatable {
        /// The file system that is associated with a channel.
        public var fileSystemDataSource: SageMakerClientTypes.FileSystemDataSource?
        /// The S3 location of the data source that is associated with a channel.
        public var s3DataSource: SageMakerClientTypes.S3DataSource?

        public init (
            fileSystemDataSource: SageMakerClientTypes.FileSystemDataSource? = nil,
            s3DataSource: SageMakerClientTypes.S3DataSource? = nil
        )
        {
            self.fileSystemDataSource = fileSystemDataSource
            self.s3DataSource = s3DataSource
        }
    }

}

extension SageMakerClientTypes.DatasetDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case athenaDatasetDefinition = "AthenaDatasetDefinition"
        case dataDistributionType = "DataDistributionType"
        case inputMode = "InputMode"
        case localPath = "LocalPath"
        case redshiftDatasetDefinition = "RedshiftDatasetDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let athenaDatasetDefinition = athenaDatasetDefinition {
            try encodeContainer.encode(athenaDatasetDefinition, forKey: .athenaDatasetDefinition)
        }
        if let dataDistributionType = dataDistributionType {
            try encodeContainer.encode(dataDistributionType.rawValue, forKey: .dataDistributionType)
        }
        if let inputMode = inputMode {
            try encodeContainer.encode(inputMode.rawValue, forKey: .inputMode)
        }
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let redshiftDatasetDefinition = redshiftDatasetDefinition {
            try encodeContainer.encode(redshiftDatasetDefinition, forKey: .redshiftDatasetDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let athenaDatasetDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AthenaDatasetDefinition.self, forKey: .athenaDatasetDefinition)
        athenaDatasetDefinition = athenaDatasetDefinitionDecoded
        let redshiftDatasetDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RedshiftDatasetDefinition.self, forKey: .redshiftDatasetDefinition)
        redshiftDatasetDefinition = redshiftDatasetDefinitionDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let dataDistributionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataDistributionType.self, forKey: .dataDistributionType)
        dataDistributionType = dataDistributionTypeDecoded
        let inputModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InputMode.self, forKey: .inputMode)
        inputMode = inputModeDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for Dataset Definition inputs. The Dataset Definition input must specify exactly one of either AthenaDatasetDefinition or RedshiftDatasetDefinition types.
    public struct DatasetDefinition: Swift.Equatable {
        /// Configuration for Athena Dataset Definition input.
        public var athenaDatasetDefinition: SageMakerClientTypes.AthenaDatasetDefinition?
        /// Whether the generated dataset is FullyReplicated or ShardedByS3Key (default).
        public var dataDistributionType: SageMakerClientTypes.DataDistributionType?
        /// Whether to use File or Pipe input mode. In File (default) mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In Pipe mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.
        public var inputMode: SageMakerClientTypes.InputMode?
        /// The local path where you want Amazon SageMaker to download the Dataset Definition inputs to run a processing job. LocalPath is an absolute path to the input data. This is a required parameter when AppManaged is False (default).
        public var localPath: Swift.String?
        /// Configuration for Redshift Dataset Definition input.
        public var redshiftDatasetDefinition: SageMakerClientTypes.RedshiftDatasetDefinition?

        public init (
            athenaDatasetDefinition: SageMakerClientTypes.AthenaDatasetDefinition? = nil,
            dataDistributionType: SageMakerClientTypes.DataDistributionType? = nil,
            inputMode: SageMakerClientTypes.InputMode? = nil,
            localPath: Swift.String? = nil,
            redshiftDatasetDefinition: SageMakerClientTypes.RedshiftDatasetDefinition? = nil
        )
        {
            self.athenaDatasetDefinition = athenaDatasetDefinition
            self.dataDistributionType = dataDistributionType
            self.inputMode = inputMode
            self.localPath = localPath
            self.redshiftDatasetDefinition = redshiftDatasetDefinition
        }
    }

}

extension SageMakerClientTypes.DebugHookConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionConfigurations = "CollectionConfigurations"
        case hookParameters = "HookParameters"
        case localPath = "LocalPath"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionConfigurations = collectionConfigurations {
            var collectionConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .collectionConfigurations)
            for collectionconfigurations0 in collectionConfigurations {
                try collectionConfigurationsContainer.encode(collectionconfigurations0)
            }
        }
        if let hookParameters = hookParameters {
            var hookParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .hookParameters)
            for (dictKey0, hookparameters0) in hookParameters {
                try hookParametersContainer.encode(hookparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let hookParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hookParameters)
        var hookParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let hookParametersContainer = hookParametersContainer {
            hookParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, configvalue0) in hookParametersContainer {
                if let configvalue0 = configvalue0 {
                    hookParametersDecoded0?[key0] = configvalue0
                }
            }
        }
        hookParameters = hookParametersDecoded0
        let collectionConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.CollectionConfiguration?].self, forKey: .collectionConfigurations)
        var collectionConfigurationsDecoded0:[SageMakerClientTypes.CollectionConfiguration]? = nil
        if let collectionConfigurationsContainer = collectionConfigurationsContainer {
            collectionConfigurationsDecoded0 = [SageMakerClientTypes.CollectionConfiguration]()
            for structure0 in collectionConfigurationsContainer {
                if let structure0 = structure0 {
                    collectionConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        collectionConfigurations = collectionConfigurationsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Configuration information for the Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
    public struct DebugHookConfig: Swift.Equatable {
        /// Configuration information for Debugger tensor collections. To learn more about how to configure the CollectionConfiguration parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
        public var collectionConfigurations: [SageMakerClientTypes.CollectionConfiguration]?
        /// Configuration information for the Debugger hook parameters.
        public var hookParameters: [Swift.String:Swift.String]?
        /// Path to local storage location for metrics and tensors. Defaults to /opt/ml/output/tensors/.
        public var localPath: Swift.String?
        /// Path to Amazon S3 storage location for metrics and tensors.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init (
            collectionConfigurations: [SageMakerClientTypes.CollectionConfiguration]? = nil,
            hookParameters: [Swift.String:Swift.String]? = nil,
            localPath: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.collectionConfigurations = collectionConfigurations
            self.hookParameters = hookParameters
            self.localPath = localPath
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes.DebugRuleConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceType = "InstanceType"
        case localPath = "LocalPath"
        case ruleConfigurationName = "RuleConfigurationName"
        case ruleEvaluatorImage = "RuleEvaluatorImage"
        case ruleParameters = "RuleParameters"
        case s3OutputPath = "S3OutputPath"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let ruleConfigurationName = ruleConfigurationName {
            try encodeContainer.encode(ruleConfigurationName, forKey: .ruleConfigurationName)
        }
        if let ruleEvaluatorImage = ruleEvaluatorImage {
            try encodeContainer.encode(ruleEvaluatorImage, forKey: .ruleEvaluatorImage)
        }
        if let ruleParameters = ruleParameters {
            var ruleParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .ruleParameters)
            for (dictKey0, ruleparameters0) in ruleParameters {
                try ruleParametersContainer.encode(ruleparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
        if volumeSizeInGB != 0 {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleConfigurationName)
        ruleConfigurationName = ruleConfigurationNameDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let ruleEvaluatorImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleEvaluatorImage)
        ruleEvaluatorImage = ruleEvaluatorImageDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let volumeSizeInGBDecoded = try containerValues.decode(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let ruleParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .ruleParameters)
        var ruleParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let ruleParametersContainer = ruleParametersContainer {
            ruleParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, configvalue0) in ruleParametersContainer {
                if let configvalue0 = configvalue0 {
                    ruleParametersDecoded0?[key0] = configvalue0
                }
            }
        }
        ruleParameters = ruleParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Configuration information for SageMaker Debugger rules for debugging. To learn more about how to configure the DebugRuleConfiguration parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
    public struct DebugRuleConfiguration: Swift.Equatable {
        /// The instance type to deploy a Debugger custom rule for debugging a training job.
        public var instanceType: SageMakerClientTypes.ProcessingInstanceType?
        /// Path to local storage location for output of rules. Defaults to /opt/ml/processing/output/rule/.
        public var localPath: Swift.String?
        /// The name of the rule configuration. It must be unique relative to other rule configuration names.
        /// This member is required.
        public var ruleConfigurationName: Swift.String?
        /// The Amazon Elastic Container (ECR) Image for the managed rule evaluation.
        /// This member is required.
        public var ruleEvaluatorImage: Swift.String?
        /// Runtime configuration for rule container.
        public var ruleParameters: [Swift.String:Swift.String]?
        /// Path to Amazon S3 storage location for rules.
        public var s3OutputPath: Swift.String?
        /// The size, in GB, of the ML storage volume attached to the processing instance.
        public var volumeSizeInGB: Swift.Int

        public init (
            instanceType: SageMakerClientTypes.ProcessingInstanceType? = nil,
            localPath: Swift.String? = nil,
            ruleConfigurationName: Swift.String? = nil,
            ruleEvaluatorImage: Swift.String? = nil,
            ruleParameters: [Swift.String:Swift.String]? = nil,
            s3OutputPath: Swift.String? = nil,
            volumeSizeInGB: Swift.Int = 0
        )
        {
            self.instanceType = instanceType
            self.localPath = localPath
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluatorImage = ruleEvaluatorImage
            self.ruleParameters = ruleParameters
            self.s3OutputPath = s3OutputPath
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes.DebugRuleEvaluationStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastModifiedTime = "LastModifiedTime"
        case ruleConfigurationName = "RuleConfigurationName"
        case ruleEvaluationJobArn = "RuleEvaluationJobArn"
        case ruleEvaluationStatus = "RuleEvaluationStatus"
        case statusDetails = "StatusDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let ruleConfigurationName = ruleConfigurationName {
            try encodeContainer.encode(ruleConfigurationName, forKey: .ruleConfigurationName)
        }
        if let ruleEvaluationJobArn = ruleEvaluationJobArn {
            try encodeContainer.encode(ruleEvaluationJobArn, forKey: .ruleEvaluationJobArn)
        }
        if let ruleEvaluationStatus = ruleEvaluationStatus {
            try encodeContainer.encode(ruleEvaluationStatus.rawValue, forKey: .ruleEvaluationStatus)
        }
        if let statusDetails = statusDetails {
            try encodeContainer.encode(statusDetails, forKey: .statusDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleConfigurationName)
        ruleConfigurationName = ruleConfigurationNameDecoded
        let ruleEvaluationJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleEvaluationJobArn)
        ruleEvaluationJobArn = ruleEvaluationJobArnDecoded
        let ruleEvaluationStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RuleEvaluationStatus.self, forKey: .ruleEvaluationStatus)
        ruleEvaluationStatus = ruleEvaluationStatusDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Information about the status of the rule evaluation.
    public struct DebugRuleEvaluationStatus: Swift.Equatable {
        /// Timestamp when the rule evaluation status was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The name of the rule configuration.
        public var ruleConfigurationName: Swift.String?
        /// The Amazon Resource Name (ARN) of the rule evaluation job.
        public var ruleEvaluationJobArn: Swift.String?
        /// Status of the rule evaluation.
        public var ruleEvaluationStatus: SageMakerClientTypes.RuleEvaluationStatus?
        /// Details from the rule evaluation.
        public var statusDetails: Swift.String?

        public init (
            lastModifiedTime: ClientRuntime.Date? = nil,
            ruleConfigurationName: Swift.String? = nil,
            ruleEvaluationJobArn: Swift.String? = nil,
            ruleEvaluationStatus: SageMakerClientTypes.RuleEvaluationStatus? = nil,
            statusDetails: Swift.String? = nil
        )
        {
            self.lastModifiedTime = lastModifiedTime
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluationJobArn = ruleEvaluationJobArn
            self.ruleEvaluationStatus = ruleEvaluationStatus
            self.statusDetails = statusDetails
        }
    }

}

extension DeleteActionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
    }
}

extension DeleteActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteActionInput: Swift.Equatable {
    /// The name of the action to delete.
    /// This member is required.
    public var actionName: Swift.String?

    public init (
        actionName: Swift.String? = nil
    )
    {
        self.actionName = actionName
    }
}

struct DeleteActionInputBody: Swift.Equatable {
    let actionName: Swift.String?
}

extension DeleteActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
    }
}

extension DeleteActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteActionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionArn = output.actionArn
        } else {
            self.actionArn = nil
        }
    }
}

public struct DeleteActionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the action.
    public var actionArn: Swift.String?

    public init (
        actionArn: Swift.String? = nil
    )
    {
        self.actionArn = actionArn
    }
}

struct DeleteActionOutputResponseBody: Swift.Equatable {
    let actionArn: Swift.String?
}

extension DeleteActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionArn = "ActionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionArn)
        actionArn = actionArnDecoded
    }
}

extension DeleteAlgorithmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmName = "AlgorithmName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
    }
}

extension DeleteAlgorithmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAlgorithmInput: Swift.Equatable {
    /// The name of the algorithm to delete.
    /// This member is required.
    public var algorithmName: Swift.String?

    public init (
        algorithmName: Swift.String? = nil
    )
    {
        self.algorithmName = algorithmName
    }
}

struct DeleteAlgorithmInputBody: Swift.Equatable {
    let algorithmName: Swift.String?
}

extension DeleteAlgorithmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmName = "AlgorithmName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
    }
}

extension DeleteAlgorithmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAlgorithmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAlgorithmOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAlgorithmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAlgorithmOutputResponse: Swift.Equatable {

}

extension DeleteAppImageConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigName = "AppImageConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appImageConfigName = appImageConfigName {
            try encodeContainer.encode(appImageConfigName, forKey: .appImageConfigName)
        }
    }
}

extension DeleteAppImageConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAppImageConfigInput: Swift.Equatable {
    /// The name of the AppImageConfig to delete.
    /// This member is required.
    public var appImageConfigName: Swift.String?

    public init (
        appImageConfigName: Swift.String? = nil
    )
    {
        self.appImageConfigName = appImageConfigName
    }
}

struct DeleteAppImageConfigInputBody: Swift.Equatable {
    let appImageConfigName: Swift.String?
}

extension DeleteAppImageConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigName = "AppImageConfigName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appImageConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigName)
        appImageConfigName = appImageConfigNameDecoded
    }
}

extension DeleteAppImageConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAppImageConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAppImageConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAppImageConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAppImageConfigOutputResponse: Swift.Equatable {

}

extension DeleteAppInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appName = appName {
            try encodeContainer.encode(appName, forKey: .appName)
        }
        if let appType = appType {
            try encodeContainer.encode(appType.rawValue, forKey: .appType)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }
}

extension DeleteAppInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAppInput: Swift.Equatable {
    /// The name of the app.
    /// This member is required.
    public var appName: Swift.String?
    /// The type of app.
    /// This member is required.
    public var appType: SageMakerClientTypes.AppType?
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The user profile name.
    /// This member is required.
    public var userProfileName: Swift.String?

    public init (
        appName: Swift.String? = nil,
        appType: SageMakerClientTypes.AppType? = nil,
        domainId: Swift.String? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.appName = appName
        self.appType = appType
        self.domainId = domainId
        self.userProfileName = userProfileName
    }
}

struct DeleteAppInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileName: Swift.String?
    let appType: SageMakerClientTypes.AppType?
    let appName: Swift.String?
}

extension DeleteAppInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let appTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppType.self, forKey: .appType)
        appType = appTypeDecoded
        let appNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appName)
        appName = appNameDecoded
    }
}

extension DeleteAppOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAppOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAppOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAppOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAppOutputResponse: Swift.Equatable {

}

extension DeleteArtifactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactArn = artifactArn {
            try encodeContainer.encode(artifactArn, forKey: .artifactArn)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }
}

extension DeleteArtifactInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteArtifactInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the artifact to delete.
    public var artifactArn: Swift.String?
    /// The URI of the source.
    public var source: SageMakerClientTypes.ArtifactSource?

    public init (
        artifactArn: Swift.String? = nil,
        source: SageMakerClientTypes.ArtifactSource? = nil
    )
    {
        self.artifactArn = artifactArn
        self.source = source
    }
}

struct DeleteArtifactInputBody: Swift.Equatable {
    let artifactArn: Swift.String?
    let source: SageMakerClientTypes.ArtifactSource?
}

extension DeleteArtifactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
        case source = "Source"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactArn)
        artifactArn = artifactArnDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ArtifactSource.self, forKey: .source)
        source = sourceDecoded
    }
}

extension DeleteArtifactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteArtifactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteArtifactOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteArtifactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteArtifactOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.artifactArn = output.artifactArn
        } else {
            self.artifactArn = nil
        }
    }
}

public struct DeleteArtifactOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the artifact.
    public var artifactArn: Swift.String?

    public init (
        artifactArn: Swift.String? = nil
    )
    {
        self.artifactArn = artifactArn
    }
}

struct DeleteArtifactOutputResponseBody: Swift.Equatable {
    let artifactArn: Swift.String?
}

extension DeleteArtifactOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactArn)
        artifactArn = artifactArnDecoded
    }
}

extension DeleteAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn = "DestinationArn"
        case sourceArn = "SourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
    }
}

extension DeleteAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAssociationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the destination.
    /// This member is required.
    public var destinationArn: Swift.String?
    /// The ARN of the source.
    /// This member is required.
    public var sourceArn: Swift.String?

    public init (
        destinationArn: Swift.String? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.sourceArn = sourceArn
    }
}

struct DeleteAssociationInputBody: Swift.Equatable {
    let sourceArn: Swift.String?
    let destinationArn: Swift.String?
}

extension DeleteAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn = "DestinationArn"
        case sourceArn = "SourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
    }
}

extension DeleteAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAssociationOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.destinationArn = output.destinationArn
            self.sourceArn = output.sourceArn
        } else {
            self.destinationArn = nil
            self.sourceArn = nil
        }
    }
}

public struct DeleteAssociationOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the destination.
    public var destinationArn: Swift.String?
    /// The ARN of the source.
    public var sourceArn: Swift.String?

    public init (
        destinationArn: Swift.String? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.sourceArn = sourceArn
    }
}

struct DeleteAssociationOutputResponseBody: Swift.Equatable {
    let sourceArn: Swift.String?
    let destinationArn: Swift.String?
}

extension DeleteAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn = "DestinationArn"
        case sourceArn = "SourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
    }
}

extension DeleteCodeRepositoryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryName = "CodeRepositoryName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeRepositoryName = codeRepositoryName {
            try encodeContainer.encode(codeRepositoryName, forKey: .codeRepositoryName)
        }
    }
}

extension DeleteCodeRepositoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteCodeRepositoryInput: Swift.Equatable {
    /// The name of the Git repository to delete.
    /// This member is required.
    public var codeRepositoryName: Swift.String?

    public init (
        codeRepositoryName: Swift.String? = nil
    )
    {
        self.codeRepositoryName = codeRepositoryName
    }
}

struct DeleteCodeRepositoryInputBody: Swift.Equatable {
    let codeRepositoryName: Swift.String?
}

extension DeleteCodeRepositoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryName = "CodeRepositoryName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryName)
        codeRepositoryName = codeRepositoryNameDecoded
    }
}

extension DeleteCodeRepositoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCodeRepositoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCodeRepositoryOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCodeRepositoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCodeRepositoryOutputResponse: Swift.Equatable {

}

extension DeleteContextInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextName = "ContextName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contextName = contextName {
            try encodeContainer.encode(contextName, forKey: .contextName)
        }
    }
}

extension DeleteContextInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteContextInput: Swift.Equatable {
    /// The name of the context to delete.
    /// This member is required.
    public var contextName: Swift.String?

    public init (
        contextName: Swift.String? = nil
    )
    {
        self.contextName = contextName
    }
}

struct DeleteContextInputBody: Swift.Equatable {
    let contextName: Swift.String?
}

extension DeleteContextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextName = "ContextName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextName)
        contextName = contextNameDecoded
    }
}

extension DeleteContextOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContextOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteContextOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContextOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteContextOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contextArn = output.contextArn
        } else {
            self.contextArn = nil
        }
    }
}

public struct DeleteContextOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the context.
    public var contextArn: Swift.String?

    public init (
        contextArn: Swift.String? = nil
    )
    {
        self.contextArn = contextArn
    }
}

struct DeleteContextOutputResponseBody: Swift.Equatable {
    let contextArn: Swift.String?
}

extension DeleteContextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextArn = "ContextArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextArn)
        contextArn = contextArnDecoded
    }
}

extension DeleteDataQualityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
    }
}

extension DeleteDataQualityJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDataQualityJobDefinitionInput: Swift.Equatable {
    /// The name of the data quality monitoring job definition to delete.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

struct DeleteDataQualityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
}

extension DeleteDataQualityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
    }
}

extension DeleteDataQualityJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDataQualityJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDataQualityJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDataQualityJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDataQualityJobDefinitionOutputResponse: Swift.Equatable {

}

extension DeleteDeviceFleetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
    }
}

extension DeleteDeviceFleetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDeviceFleetInput: Swift.Equatable {
    /// The name of the fleet to delete.
    /// This member is required.
    public var deviceFleetName: Swift.String?

    public init (
        deviceFleetName: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
    }
}

struct DeleteDeviceFleetInputBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
}

extension DeleteDeviceFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
    }
}

extension DeleteDeviceFleetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDeviceFleetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDeviceFleetOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDeviceFleetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDeviceFleetOutputResponse: Swift.Equatable {

}

extension DeleteDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case retentionPolicy = "RetentionPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let retentionPolicy = retentionPolicy {
            try encodeContainer.encode(retentionPolicy, forKey: .retentionPolicy)
        }
    }
}

extension DeleteDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDomainInput: Swift.Equatable {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained (not automatically deleted).
    public var retentionPolicy: SageMakerClientTypes.RetentionPolicy?

    public init (
        domainId: Swift.String? = nil,
        retentionPolicy: SageMakerClientTypes.RetentionPolicy? = nil
    )
    {
        self.domainId = domainId
        self.retentionPolicy = retentionPolicy
    }
}

struct DeleteDomainInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let retentionPolicy: SageMakerClientTypes.RetentionPolicy?
}

extension DeleteDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case retentionPolicy = "RetentionPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let retentionPolicyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RetentionPolicy.self, forKey: .retentionPolicy)
        retentionPolicy = retentionPolicyDecoded
    }
}

extension DeleteDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDomainOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDomainOutputResponse: Swift.Equatable {

}

extension DeleteEndpointConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointConfigName = "EndpointConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointConfigName = endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
    }
}

extension DeleteEndpointConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteEndpointConfigInput: Swift.Equatable {
    /// The name of the endpoint configuration that you want to delete.
    /// This member is required.
    public var endpointConfigName: Swift.String?

    public init (
        endpointConfigName: Swift.String? = nil
    )
    {
        self.endpointConfigName = endpointConfigName
    }
}

struct DeleteEndpointConfigInputBody: Swift.Equatable {
    let endpointConfigName: Swift.String?
}

extension DeleteEndpointConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointConfigName = "EndpointConfigName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
    }
}

extension DeleteEndpointConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEndpointConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteEndpointConfigOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEndpointConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteEndpointConfigOutputResponse: Swift.Equatable {

}

extension DeleteEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
    }
}

extension DeleteEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteEndpointInput: Swift.Equatable {
    /// The name of the endpoint that you want to delete.
    /// This member is required.
    public var endpointName: Swift.String?

    public init (
        endpointName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
    }
}

struct DeleteEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
}

extension DeleteEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
    }
}

extension DeleteEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteEndpointOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteEndpointOutputResponse: Swift.Equatable {

}

extension DeleteExperimentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentName = "ExperimentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
    }
}

extension DeleteExperimentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteExperimentInput: Swift.Equatable {
    /// The name of the experiment to delete.
    /// This member is required.
    public var experimentName: Swift.String?

    public init (
        experimentName: Swift.String? = nil
    )
    {
        self.experimentName = experimentName
    }
}

struct DeleteExperimentInputBody: Swift.Equatable {
    let experimentName: Swift.String?
}

extension DeleteExperimentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentName = "ExperimentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
    }
}

extension DeleteExperimentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteExperimentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteExperimentOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteExperimentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteExperimentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.experimentArn = output.experimentArn
        } else {
            self.experimentArn = nil
        }
    }
}

public struct DeleteExperimentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the experiment that is being deleted.
    public var experimentArn: Swift.String?

    public init (
        experimentArn: Swift.String? = nil
    )
    {
        self.experimentArn = experimentArn
    }
}

struct DeleteExperimentOutputResponseBody: Swift.Equatable {
    let experimentArn: Swift.String?
}

extension DeleteExperimentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentArn = "ExperimentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentArn)
        experimentArn = experimentArnDecoded
    }
}

extension DeleteFeatureGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureGroupName = "FeatureGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let featureGroupName = featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
    }
}

extension DeleteFeatureGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFeatureGroupInput: Swift.Equatable {
    /// The name of the FeatureGroup you want to delete. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.
    /// This member is required.
    public var featureGroupName: Swift.String?

    public init (
        featureGroupName: Swift.String? = nil
    )
    {
        self.featureGroupName = featureGroupName
    }
}

struct DeleteFeatureGroupInputBody: Swift.Equatable {
    let featureGroupName: Swift.String?
}

extension DeleteFeatureGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureGroupName = "FeatureGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
    }
}

extension DeleteFeatureGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFeatureGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteFeatureGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFeatureGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteFeatureGroupOutputResponse: Swift.Equatable {

}

extension DeleteFlowDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowDefinitionName = "FlowDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flowDefinitionName = flowDefinitionName {
            try encodeContainer.encode(flowDefinitionName, forKey: .flowDefinitionName)
        }
    }
}

extension DeleteFlowDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFlowDefinitionInput: Swift.Equatable {
    /// The name of the flow definition you are deleting.
    /// This member is required.
    public var flowDefinitionName: Swift.String?

    public init (
        flowDefinitionName: Swift.String? = nil
    )
    {
        self.flowDefinitionName = flowDefinitionName
    }
}

struct DeleteFlowDefinitionInputBody: Swift.Equatable {
    let flowDefinitionName: Swift.String?
}

extension DeleteFlowDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowDefinitionName = "FlowDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionName)
        flowDefinitionName = flowDefinitionNameDecoded
    }
}

extension DeleteFlowDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFlowDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteFlowDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFlowDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteFlowDefinitionOutputResponse: Swift.Equatable {

}

extension DeleteHumanTaskUiInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiName = "HumanTaskUiName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskUiName = humanTaskUiName {
            try encodeContainer.encode(humanTaskUiName, forKey: .humanTaskUiName)
        }
    }
}

extension DeleteHumanTaskUiInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteHumanTaskUiInput: Swift.Equatable {
    /// The name of the human task user interface (work task template) you want to delete.
    /// This member is required.
    public var humanTaskUiName: Swift.String?

    public init (
        humanTaskUiName: Swift.String? = nil
    )
    {
        self.humanTaskUiName = humanTaskUiName
    }
}

struct DeleteHumanTaskUiInputBody: Swift.Equatable {
    let humanTaskUiName: Swift.String?
}

extension DeleteHumanTaskUiInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiName = "HumanTaskUiName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanTaskUiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiName)
        humanTaskUiName = humanTaskUiNameDecoded
    }
}

extension DeleteHumanTaskUiOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteHumanTaskUiOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteHumanTaskUiOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteHumanTaskUiOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteHumanTaskUiOutputResponse: Swift.Equatable {

}

extension DeleteImageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageName = "ImageName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
    }
}

extension DeleteImageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteImageInput: Swift.Equatable {
    /// The name of the image to delete.
    /// This member is required.
    public var imageName: Swift.String?

    public init (
        imageName: Swift.String? = nil
    )
    {
        self.imageName = imageName
    }
}

struct DeleteImageInputBody: Swift.Equatable {
    let imageName: Swift.String?
}

extension DeleteImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageName = "ImageName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
    }
}

extension DeleteImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteImageOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteImageOutputResponse: Swift.Equatable {

}

extension DeleteImageVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageName = "ImageName"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension DeleteImageVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteImageVersionInput: Swift.Equatable {
    /// The name of the image.
    /// This member is required.
    public var imageName: Swift.String?
    /// The version to delete.
    /// This member is required.
    public var version: Swift.Int?

    public init (
        imageName: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.imageName = imageName
        self.version = version
    }
}

struct DeleteImageVersionInputBody: Swift.Equatable {
    let imageName: Swift.String?
    let version: Swift.Int?
}

extension DeleteImageVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageName = "ImageName"
        case version = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension DeleteImageVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteImageVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteImageVersionOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteImageVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteImageVersionOutputResponse: Swift.Equatable {

}

extension DeleteModelBiasJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
    }
}

extension DeleteModelBiasJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteModelBiasJobDefinitionInput: Swift.Equatable {
    /// The name of the model bias job definition to delete.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

struct DeleteModelBiasJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
}

extension DeleteModelBiasJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
    }
}

extension DeleteModelBiasJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteModelBiasJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteModelBiasJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteModelBiasJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteModelBiasJobDefinitionOutputResponse: Swift.Equatable {

}

extension DeleteModelExplainabilityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
    }
}

extension DeleteModelExplainabilityJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteModelExplainabilityJobDefinitionInput: Swift.Equatable {
    /// The name of the model explainability job definition to delete.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

struct DeleteModelExplainabilityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
}

extension DeleteModelExplainabilityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
    }
}

extension DeleteModelExplainabilityJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteModelExplainabilityJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteModelExplainabilityJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteModelExplainabilityJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteModelExplainabilityJobDefinitionOutputResponse: Swift.Equatable {

}

extension DeleteModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension DeleteModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteModelInput: Swift.Equatable {
    /// The name of the model to delete.
    /// This member is required.
    public var modelName: Swift.String?

    public init (
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DeleteModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension DeleteModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DeleteModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteModelOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteModelOutputResponse: Swift.Equatable {

}

extension DeleteModelPackageGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
    }
}

extension DeleteModelPackageGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteModelPackageGroupInput: Swift.Equatable {
    /// The name of the model group to delete.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?

    public init (
        modelPackageGroupName: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
    }
}

struct DeleteModelPackageGroupInputBody: Swift.Equatable {
    let modelPackageGroupName: Swift.String?
}

extension DeleteModelPackageGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
    }
}

extension DeleteModelPackageGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteModelPackageGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteModelPackageGroupOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteModelPackageGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteModelPackageGroupOutputResponse: Swift.Equatable {

}

extension DeleteModelPackageGroupPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
    }
}

extension DeleteModelPackageGroupPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteModelPackageGroupPolicyInput: Swift.Equatable {
    /// The name of the model group for which to delete the policy.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?

    public init (
        modelPackageGroupName: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
    }
}

struct DeleteModelPackageGroupPolicyInputBody: Swift.Equatable {
    let modelPackageGroupName: Swift.String?
}

extension DeleteModelPackageGroupPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
    }
}

extension DeleteModelPackageGroupPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteModelPackageGroupPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteModelPackageGroupPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteModelPackageGroupPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteModelPackageGroupPolicyOutputResponse: Swift.Equatable {

}

extension DeleteModelPackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageName = "ModelPackageName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelPackageName = modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
    }
}

extension DeleteModelPackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteModelPackageInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the model package to delete. When you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
    /// This member is required.
    public var modelPackageName: Swift.String?

    public init (
        modelPackageName: Swift.String? = nil
    )
    {
        self.modelPackageName = modelPackageName
    }
}

struct DeleteModelPackageInputBody: Swift.Equatable {
    let modelPackageName: Swift.String?
}

extension DeleteModelPackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageName = "ModelPackageName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
    }
}

extension DeleteModelPackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteModelPackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteModelPackageOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteModelPackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteModelPackageOutputResponse: Swift.Equatable {

}

extension DeleteModelQualityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
    }
}

extension DeleteModelQualityJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteModelQualityJobDefinitionInput: Swift.Equatable {
    /// The name of the model quality monitoring job definition to delete.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

struct DeleteModelQualityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
}

extension DeleteModelQualityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
    }
}

extension DeleteModelQualityJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteModelQualityJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteModelQualityJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteModelQualityJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteModelQualityJobDefinitionOutputResponse: Swift.Equatable {

}

extension DeleteMonitoringScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
    }
}

extension DeleteMonitoringScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteMonitoringScheduleInput: Swift.Equatable {
    /// The name of the monitoring schedule to delete.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init (
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleName = monitoringScheduleName
    }
}

struct DeleteMonitoringScheduleInputBody: Swift.Equatable {
    let monitoringScheduleName: Swift.String?
}

extension DeleteMonitoringScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
    }
}

extension DeleteMonitoringScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMonitoringScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMonitoringScheduleOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMonitoringScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMonitoringScheduleOutputResponse: Swift.Equatable {

}

extension DeleteNotebookInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookInstanceName = notebookInstanceName {
            try encodeContainer.encode(notebookInstanceName, forKey: .notebookInstanceName)
        }
    }
}

extension DeleteNotebookInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteNotebookInstanceInput: Swift.Equatable {
    /// The name of the Amazon SageMaker notebook instance to delete.
    /// This member is required.
    public var notebookInstanceName: Swift.String?

    public init (
        notebookInstanceName: Swift.String? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
    }
}

struct DeleteNotebookInstanceInputBody: Swift.Equatable {
    let notebookInstanceName: Swift.String?
}

extension DeleteNotebookInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
    }
}

extension DeleteNotebookInstanceLifecycleConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName {
            try encodeContainer.encode(notebookInstanceLifecycleConfigName, forKey: .notebookInstanceLifecycleConfigName)
        }
    }
}

extension DeleteNotebookInstanceLifecycleConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteNotebookInstanceLifecycleConfigInput: Swift.Equatable {
    /// The name of the lifecycle configuration to delete.
    /// This member is required.
    public var notebookInstanceLifecycleConfigName: Swift.String?

    public init (
        notebookInstanceLifecycleConfigName: Swift.String? = nil
    )
    {
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
    }
}

struct DeleteNotebookInstanceLifecycleConfigInputBody: Swift.Equatable {
    let notebookInstanceLifecycleConfigName: Swift.String?
}

extension DeleteNotebookInstanceLifecycleConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
    }
}

extension DeleteNotebookInstanceLifecycleConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteNotebookInstanceLifecycleConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteNotebookInstanceLifecycleConfigOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteNotebookInstanceLifecycleConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteNotebookInstanceLifecycleConfigOutputResponse: Swift.Equatable {

}

extension DeleteNotebookInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteNotebookInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteNotebookInstanceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteNotebookInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteNotebookInstanceOutputResponse: Swift.Equatable {

}

extension DeletePipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineName = "PipelineName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
    }
}

extension DeletePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePipelineInput: Swift.Equatable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The name of the pipeline to delete.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.pipelineName = pipelineName
    }
}

struct DeletePipelineInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let clientRequestToken: Swift.String?
}

extension DeletePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineName = "PipelineName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension DeletePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePipelineOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeletePipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineArn = output.pipelineArn
        } else {
            self.pipelineArn = nil
        }
    }
}

public struct DeletePipelineOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the pipeline to delete.
    public var pipelineArn: Swift.String?

    public init (
        pipelineArn: Swift.String? = nil
    )
    {
        self.pipelineArn = pipelineArn
    }
}

struct DeletePipelineOutputResponseBody: Swift.Equatable {
    let pipelineArn: Swift.String?
}

extension DeletePipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineArn = "PipelineArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
    }
}

extension DeleteProjectInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName = "ProjectName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
    }
}

extension DeleteProjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteProjectInput: Swift.Equatable {
    /// The name of the project to delete.
    /// This member is required.
    public var projectName: Swift.String?

    public init (
        projectName: Swift.String? = nil
    )
    {
        self.projectName = projectName
    }
}

struct DeleteProjectInputBody: Swift.Equatable {
    let projectName: Swift.String?
}

extension DeleteProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName = "ProjectName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
    }
}

extension DeleteProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteProjectOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteProjectOutputResponse: Swift.Equatable {

}

extension DeleteStudioLifecycleConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioLifecycleConfigName = "StudioLifecycleConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let studioLifecycleConfigName = studioLifecycleConfigName {
            try encodeContainer.encode(studioLifecycleConfigName, forKey: .studioLifecycleConfigName)
        }
    }
}

extension DeleteStudioLifecycleConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteStudioLifecycleConfigInput: Swift.Equatable {
    /// The name of the Studio Lifecycle Configuration to delete.
    /// This member is required.
    public var studioLifecycleConfigName: Swift.String?

    public init (
        studioLifecycleConfigName: Swift.String? = nil
    )
    {
        self.studioLifecycleConfigName = studioLifecycleConfigName
    }
}

struct DeleteStudioLifecycleConfigInputBody: Swift.Equatable {
    let studioLifecycleConfigName: Swift.String?
}

extension DeleteStudioLifecycleConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioLifecycleConfigName = "StudioLifecycleConfigName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigName)
        studioLifecycleConfigName = studioLifecycleConfigNameDecoded
    }
}

extension DeleteStudioLifecycleConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStudioLifecycleConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteStudioLifecycleConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStudioLifecycleConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStudioLifecycleConfigOutputResponse: Swift.Equatable {

}

extension DeleteTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

extension DeleteTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource whose tags you want to delete.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An array or one or more tag keys to delete.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct DeleteTagsInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension DeleteTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension DeleteTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTagsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTagsOutputResponse: Swift.Equatable {

}

extension DeleteTrialComponentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentName = "TrialComponentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
    }
}

extension DeleteTrialComponentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteTrialComponentInput: Swift.Equatable {
    /// The name of the component to delete.
    /// This member is required.
    public var trialComponentName: Swift.String?

    public init (
        trialComponentName: Swift.String? = nil
    )
    {
        self.trialComponentName = trialComponentName
    }
}

struct DeleteTrialComponentInputBody: Swift.Equatable {
    let trialComponentName: Swift.String?
}

extension DeleteTrialComponentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentName = "TrialComponentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
    }
}

extension DeleteTrialComponentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTrialComponentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTrialComponentOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTrialComponentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteTrialComponentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trialComponentArn = output.trialComponentArn
        } else {
            self.trialComponentArn = nil
        }
    }
}

public struct DeleteTrialComponentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the component is being deleted.
    public var trialComponentArn: Swift.String?

    public init (
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialComponentArn = trialComponentArn
    }
}

struct DeleteTrialComponentOutputResponseBody: Swift.Equatable {
    let trialComponentArn: Swift.String?
}

extension DeleteTrialComponentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentArn = "TrialComponentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
    }
}

extension DeleteTrialInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }
}

extension DeleteTrialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteTrialInput: Swift.Equatable {
    /// The name of the trial to delete.
    /// This member is required.
    public var trialName: Swift.String?

    public init (
        trialName: Swift.String? = nil
    )
    {
        self.trialName = trialName
    }
}

struct DeleteTrialInputBody: Swift.Equatable {
    let trialName: Swift.String?
}

extension DeleteTrialInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialName = "TrialName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
    }
}

extension DeleteTrialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTrialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTrialOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTrialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteTrialOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trialArn = output.trialArn
        } else {
            self.trialArn = nil
        }
    }
}

public struct DeleteTrialOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the trial that is being deleted.
    public var trialArn: Swift.String?

    public init (
        trialArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
    }
}

struct DeleteTrialOutputResponseBody: Swift.Equatable {
    let trialArn: Swift.String?
}

extension DeleteTrialOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialArn = "TrialArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialArn)
        trialArn = trialArnDecoded
    }
}

extension DeleteUserProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }
}

extension DeleteUserProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteUserProfileInput: Swift.Equatable {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The user profile name.
    /// This member is required.
    public var userProfileName: Swift.String?

    public init (
        domainId: Swift.String? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.domainId = domainId
        self.userProfileName = userProfileName
    }
}

struct DeleteUserProfileInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileName: Swift.String?
}

extension DeleteUserProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
    }
}

extension DeleteUserProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserProfileOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserProfileOutputResponse: Swift.Equatable {

}

extension DeleteWorkforceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workforceName = "WorkforceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workforceName = workforceName {
            try encodeContainer.encode(workforceName, forKey: .workforceName)
        }
    }
}

extension DeleteWorkforceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteWorkforceInput: Swift.Equatable {
    /// The name of the workforce.
    /// This member is required.
    public var workforceName: Swift.String?

    public init (
        workforceName: Swift.String? = nil
    )
    {
        self.workforceName = workforceName
    }
}

struct DeleteWorkforceInputBody: Swift.Equatable {
    let workforceName: Swift.String?
}

extension DeleteWorkforceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workforceName = "WorkforceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
    }
}

extension DeleteWorkforceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteWorkforceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteWorkforceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWorkforceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteWorkforceOutputResponse: Swift.Equatable {

}

extension DeleteWorkteamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workteamName = "WorkteamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workteamName = workteamName {
            try encodeContainer.encode(workteamName, forKey: .workteamName)
        }
    }
}

extension DeleteWorkteamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteWorkteamInput: Swift.Equatable {
    /// The name of the work team to delete.
    /// This member is required.
    public var workteamName: Swift.String?

    public init (
        workteamName: Swift.String? = nil
    )
    {
        self.workteamName = workteamName
    }
}

struct DeleteWorkteamInputBody: Swift.Equatable {
    let workteamName: Swift.String?
}

extension DeleteWorkteamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workteamName = "WorkteamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamName)
        workteamName = workteamNameDecoded
    }
}

extension DeleteWorkteamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteWorkteamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteWorkteamOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWorkteamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteWorkteamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.success = output.success
        } else {
            self.success = false
        }
    }
}

public struct DeleteWorkteamOutputResponse: Swift.Equatable {
    /// Returns true if the work team was successfully deleted; otherwise, returns false.
    /// This member is required.
    public var success: Swift.Bool

    public init (
        success: Swift.Bool = false
    )
    {
        self.success = success
    }
}

struct DeleteWorkteamOutputResponseBody: Swift.Equatable {
    let success: Swift.Bool
}

extension DeleteWorkteamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case success = "Success"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successDecoded = try containerValues.decode(Swift.Bool.self, forKey: .success)
        success = successDecoded
    }
}

extension SageMakerClientTypes.DeployedImage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resolutionTime = "ResolutionTime"
        case resolvedImage = "ResolvedImage"
        case specifiedImage = "SpecifiedImage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resolutionTime = resolutionTime {
            try encodeContainer.encode(resolutionTime.timeIntervalSince1970, forKey: .resolutionTime)
        }
        if let resolvedImage = resolvedImage {
            try encodeContainer.encode(resolvedImage, forKey: .resolvedImage)
        }
        if let specifiedImage = specifiedImage {
            try encodeContainer.encode(specifiedImage, forKey: .specifiedImage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let specifiedImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .specifiedImage)
        specifiedImage = specifiedImageDecoded
        let resolvedImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolvedImage)
        resolvedImage = resolvedImageDecoded
        let resolutionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resolutionTime)
        resolutionTime = resolutionTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this [ProductionVariant]. If you used the registry/repository[:tag] form to specify the image path of the primary container when you created the model hosted in this ProductionVariant, the path resolves to a path of the form registry/repository[@digest]. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see [Pulling an Image](https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html) in the Amazon ECR User Guide.
    public struct DeployedImage: Swift.Equatable {
        /// The date and time when the image path for the model resolved to the ResolvedImage
        public var resolutionTime: ClientRuntime.Date?
        /// The specific digest path of the image hosted in this ProductionVariant.
        public var resolvedImage: Swift.String?
        /// The image path you specified when you created the model.
        public var specifiedImage: Swift.String?

        public init (
            resolutionTime: ClientRuntime.Date? = nil,
            resolvedImage: Swift.String? = nil,
            specifiedImage: Swift.String? = nil
        )
        {
            self.resolutionTime = resolutionTime
            self.resolvedImage = resolvedImage
            self.specifiedImage = specifiedImage
        }
    }

}

extension SageMakerClientTypes.DeploymentConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoRollbackConfiguration = "AutoRollbackConfiguration"
        case blueGreenUpdatePolicy = "BlueGreenUpdatePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoRollbackConfiguration = autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let blueGreenUpdatePolicy = blueGreenUpdatePolicy {
            try encodeContainer.encode(blueGreenUpdatePolicy, forKey: .blueGreenUpdatePolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueGreenUpdatePolicyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.BlueGreenUpdatePolicy.self, forKey: .blueGreenUpdatePolicy)
        blueGreenUpdatePolicy = blueGreenUpdatePolicyDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoRollbackConfig.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
    }
}

extension SageMakerClientTypes {
    /// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
    public struct DeploymentConfig: Swift.Equatable {
        /// Automatic rollback configuration for handling endpoint deployment failures and recovery.
        public var autoRollbackConfiguration: SageMakerClientTypes.AutoRollbackConfig?
        /// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
        /// This member is required.
        public var blueGreenUpdatePolicy: SageMakerClientTypes.BlueGreenUpdatePolicy?

        public init (
            autoRollbackConfiguration: SageMakerClientTypes.AutoRollbackConfig? = nil,
            blueGreenUpdatePolicy: SageMakerClientTypes.BlueGreenUpdatePolicy? = nil
        )
        {
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.blueGreenUpdatePolicy = blueGreenUpdatePolicy
        }
    }

}

extension DeregisterDevicesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case deviceNames = "DeviceNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let deviceNames = deviceNames {
            var deviceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deviceNames)
            for devicenames0 in deviceNames {
                try deviceNamesContainer.encode(devicenames0)
            }
        }
    }
}

extension DeregisterDevicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeregisterDevicesInput: Swift.Equatable {
    /// The name of the fleet the devices belong to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The unique IDs of the devices.
    /// This member is required.
    public var deviceNames: [Swift.String]?

    public init (
        deviceFleetName: Swift.String? = nil,
        deviceNames: [Swift.String]? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.deviceNames = deviceNames
    }
}

struct DeregisterDevicesInputBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
    let deviceNames: [Swift.String]?
}

extension DeregisterDevicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case deviceNames = "DeviceNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let deviceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deviceNames)
        var deviceNamesDecoded0:[Swift.String]? = nil
        if let deviceNamesContainer = deviceNamesContainer {
            deviceNamesDecoded0 = [Swift.String]()
            for string0 in deviceNamesContainer {
                if let string0 = string0 {
                    deviceNamesDecoded0?.append(string0)
                }
            }
        }
        deviceNames = deviceNamesDecoded0
    }
}

extension DeregisterDevicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterDevicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeregisterDevicesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterDevicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterDevicesOutputResponse: Swift.Equatable {

}

extension DescribeActionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
    }
}

extension DescribeActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeActionInput: Swift.Equatable {
    /// The name of the action to describe.
    /// This member is required.
    public var actionName: Swift.String?

    public init (
        actionName: Swift.String? = nil
    )
    {
        self.actionName = actionName
    }
}

struct DescribeActionInputBody: Swift.Equatable {
    let actionName: Swift.String?
}

extension DescribeActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
    }
}

extension DescribeActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeActionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionArn = output.actionArn
            self.actionName = output.actionName
            self.actionType = output.actionType
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.description = output.description
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.lineageGroupArn = output.lineageGroupArn
            self.metadataProperties = output.metadataProperties
            self.properties = output.properties
            self.source = output.source
            self.status = output.status
        } else {
            self.actionArn = nil
            self.actionName = nil
            self.actionType = nil
            self.createdBy = nil
            self.creationTime = nil
            self.description = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.lineageGroupArn = nil
            self.metadataProperties = nil
            self.properties = nil
            self.source = nil
            self.status = nil
        }
    }
}

public struct DescribeActionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the action.
    public var actionArn: Swift.String?
    /// The name of the action.
    public var actionName: Swift.String?
    /// The type of the action.
    public var actionType: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the action was created.
    public var creationTime: ClientRuntime.Date?
    /// The description of the action.
    public var description: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the action was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of the action's properties.
    public var properties: [Swift.String:Swift.String]?
    /// The source of the action.
    public var source: SageMakerClientTypes.ActionSource?
    /// The status of the action.
    public var status: SageMakerClientTypes.ActionStatus?

    public init (
        actionArn: Swift.String? = nil,
        actionName: Swift.String? = nil,
        actionType: Swift.String? = nil,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        properties: [Swift.String:Swift.String]? = nil,
        source: SageMakerClientTypes.ActionSource? = nil,
        status: SageMakerClientTypes.ActionStatus? = nil
    )
    {
        self.actionArn = actionArn
        self.actionName = actionName
        self.actionType = actionType
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.description = description
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.metadataProperties = metadataProperties
        self.properties = properties
        self.source = source
        self.status = status
    }
}

struct DescribeActionOutputResponseBody: Swift.Equatable {
    let actionName: Swift.String?
    let actionArn: Swift.String?
    let source: SageMakerClientTypes.ActionSource?
    let actionType: Swift.String?
    let description: Swift.String?
    let status: SageMakerClientTypes.ActionStatus?
    let properties: [Swift.String:Swift.String]?
    let creationTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let lineageGroupArn: Swift.String?
}

extension DescribeActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionArn = "ActionArn"
        case actionName = "ActionName"
        case actionType = "ActionType"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case description = "Description"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case metadataProperties = "MetadataProperties"
        case properties = "Properties"
        case source = "Source"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let actionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionArn)
        actionArn = actionArnDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ActionSource.self, forKey: .source)
        source = sourceDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ActionStatus.self, forKey: .status)
        status = statusDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
    }
}

extension DescribeAlgorithmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmName = "AlgorithmName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
    }
}

extension DescribeAlgorithmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAlgorithmInput: Swift.Equatable {
    /// The name of the algorithm to describe.
    /// This member is required.
    public var algorithmName: Swift.String?

    public init (
        algorithmName: Swift.String? = nil
    )
    {
        self.algorithmName = algorithmName
    }
}

struct DescribeAlgorithmInputBody: Swift.Equatable {
    let algorithmName: Swift.String?
}

extension DescribeAlgorithmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmName = "AlgorithmName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
    }
}

extension DescribeAlgorithmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAlgorithmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAlgorithmOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAlgorithmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAlgorithmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.algorithmArn = output.algorithmArn
            self.algorithmDescription = output.algorithmDescription
            self.algorithmName = output.algorithmName
            self.algorithmStatus = output.algorithmStatus
            self.algorithmStatusDetails = output.algorithmStatusDetails
            self.certifyForMarketplace = output.certifyForMarketplace
            self.creationTime = output.creationTime
            self.inferenceSpecification = output.inferenceSpecification
            self.productId = output.productId
            self.trainingSpecification = output.trainingSpecification
            self.validationSpecification = output.validationSpecification
        } else {
            self.algorithmArn = nil
            self.algorithmDescription = nil
            self.algorithmName = nil
            self.algorithmStatus = nil
            self.algorithmStatusDetails = nil
            self.certifyForMarketplace = false
            self.creationTime = nil
            self.inferenceSpecification = nil
            self.productId = nil
            self.trainingSpecification = nil
            self.validationSpecification = nil
        }
    }
}

public struct DescribeAlgorithmOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the algorithm.
    /// This member is required.
    public var algorithmArn: Swift.String?
    /// A brief summary about the algorithm.
    public var algorithmDescription: Swift.String?
    /// The name of the algorithm being described.
    /// This member is required.
    public var algorithmName: Swift.String?
    /// The current status of the algorithm.
    /// This member is required.
    public var algorithmStatus: SageMakerClientTypes.AlgorithmStatus?
    /// Details about the current status of the algorithm.
    /// This member is required.
    public var algorithmStatusDetails: SageMakerClientTypes.AlgorithmStatusDetails?
    /// Whether the algorithm is certified to be listed in Amazon Web Services Marketplace.
    public var certifyForMarketplace: Swift.Bool
    /// A timestamp specifying when the algorithm was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// Details about inference jobs that the algorithm runs.
    public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    /// The product identifier of the algorithm.
    public var productId: Swift.String?
    /// Details about training jobs run by this algorithm.
    /// This member is required.
    public var trainingSpecification: SageMakerClientTypes.TrainingSpecification?
    /// Details about configurations for one or more training jobs that Amazon SageMaker runs to test the algorithm.
    public var validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification?

    public init (
        algorithmArn: Swift.String? = nil,
        algorithmDescription: Swift.String? = nil,
        algorithmName: Swift.String? = nil,
        algorithmStatus: SageMakerClientTypes.AlgorithmStatus? = nil,
        algorithmStatusDetails: SageMakerClientTypes.AlgorithmStatusDetails? = nil,
        certifyForMarketplace: Swift.Bool = false,
        creationTime: ClientRuntime.Date? = nil,
        inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
        productId: Swift.String? = nil,
        trainingSpecification: SageMakerClientTypes.TrainingSpecification? = nil,
        validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification? = nil
    )
    {
        self.algorithmArn = algorithmArn
        self.algorithmDescription = algorithmDescription
        self.algorithmName = algorithmName
        self.algorithmStatus = algorithmStatus
        self.algorithmStatusDetails = algorithmStatusDetails
        self.certifyForMarketplace = certifyForMarketplace
        self.creationTime = creationTime
        self.inferenceSpecification = inferenceSpecification
        self.productId = productId
        self.trainingSpecification = trainingSpecification
        self.validationSpecification = validationSpecification
    }
}

struct DescribeAlgorithmOutputResponseBody: Swift.Equatable {
    let algorithmName: Swift.String?
    let algorithmArn: Swift.String?
    let algorithmDescription: Swift.String?
    let creationTime: ClientRuntime.Date?
    let trainingSpecification: SageMakerClientTypes.TrainingSpecification?
    let inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    let validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification?
    let algorithmStatus: SageMakerClientTypes.AlgorithmStatus?
    let algorithmStatusDetails: SageMakerClientTypes.AlgorithmStatusDetails?
    let productId: Swift.String?
    let certifyForMarketplace: Swift.Bool
}

extension DescribeAlgorithmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmArn = "AlgorithmArn"
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case algorithmStatus = "AlgorithmStatus"
        case algorithmStatusDetails = "AlgorithmStatusDetails"
        case certifyForMarketplace = "CertifyForMarketplace"
        case creationTime = "CreationTime"
        case inferenceSpecification = "InferenceSpecification"
        case productId = "ProductId"
        case trainingSpecification = "TrainingSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let algorithmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmArn)
        algorithmArn = algorithmArnDecoded
        let algorithmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmDescription)
        algorithmDescription = algorithmDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingSpecification.self, forKey: .trainingSpecification)
        trainingSpecification = trainingSpecificationDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let algorithmStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmStatus.self, forKey: .algorithmStatus)
        algorithmStatus = algorithmStatusDecoded
        let algorithmStatusDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmStatusDetails.self, forKey: .algorithmStatusDetails)
        algorithmStatusDetails = algorithmStatusDetailsDecoded
        let productIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productId)
        productId = productIdDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Swift.Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
    }
}

extension DescribeAppImageConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigName = "AppImageConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appImageConfigName = appImageConfigName {
            try encodeContainer.encode(appImageConfigName, forKey: .appImageConfigName)
        }
    }
}

extension DescribeAppImageConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAppImageConfigInput: Swift.Equatable {
    /// The name of the AppImageConfig to describe.
    /// This member is required.
    public var appImageConfigName: Swift.String?

    public init (
        appImageConfigName: Swift.String? = nil
    )
    {
        self.appImageConfigName = appImageConfigName
    }
}

struct DescribeAppImageConfigInputBody: Swift.Equatable {
    let appImageConfigName: Swift.String?
}

extension DescribeAppImageConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigName = "AppImageConfigName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appImageConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigName)
        appImageConfigName = appImageConfigNameDecoded
    }
}

extension DescribeAppImageConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAppImageConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAppImageConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAppImageConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAppImageConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appImageConfigArn = output.appImageConfigArn
            self.appImageConfigName = output.appImageConfigName
            self.creationTime = output.creationTime
            self.kernelGatewayImageConfig = output.kernelGatewayImageConfig
            self.lastModifiedTime = output.lastModifiedTime
        } else {
            self.appImageConfigArn = nil
            self.appImageConfigName = nil
            self.creationTime = nil
            self.kernelGatewayImageConfig = nil
            self.lastModifiedTime = nil
        }
    }
}

public struct DescribeAppImageConfigOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the AppImageConfig.
    public var appImageConfigArn: Swift.String?
    /// The name of the AppImageConfig.
    public var appImageConfigName: Swift.String?
    /// When the AppImageConfig was created.
    public var creationTime: ClientRuntime.Date?
    /// The configuration of a KernelGateway app.
    public var kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?
    /// When the AppImageConfig was last modified.
    public var lastModifiedTime: ClientRuntime.Date?

    public init (
        appImageConfigArn: Swift.String? = nil,
        appImageConfigName: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil
    )
    {
        self.appImageConfigArn = appImageConfigArn
        self.appImageConfigName = appImageConfigName
        self.creationTime = creationTime
        self.kernelGatewayImageConfig = kernelGatewayImageConfig
        self.lastModifiedTime = lastModifiedTime
    }
}

struct DescribeAppImageConfigOutputResponseBody: Swift.Equatable {
    let appImageConfigArn: Swift.String?
    let appImageConfigName: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?
}

extension DescribeAppImageConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigArn = "AppImageConfigArn"
        case appImageConfigName = "AppImageConfigName"
        case creationTime = "CreationTime"
        case kernelGatewayImageConfig = "KernelGatewayImageConfig"
        case lastModifiedTime = "LastModifiedTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appImageConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigArn)
        appImageConfigArn = appImageConfigArnDecoded
        let appImageConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigName)
        appImageConfigName = appImageConfigNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let kernelGatewayImageConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.KernelGatewayImageConfig.self, forKey: .kernelGatewayImageConfig)
        kernelGatewayImageConfig = kernelGatewayImageConfigDecoded
    }
}

extension DescribeAppInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appName = appName {
            try encodeContainer.encode(appName, forKey: .appName)
        }
        if let appType = appType {
            try encodeContainer.encode(appType.rawValue, forKey: .appType)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }
}

extension DescribeAppInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAppInput: Swift.Equatable {
    /// The name of the app.
    /// This member is required.
    public var appName: Swift.String?
    /// The type of app.
    /// This member is required.
    public var appType: SageMakerClientTypes.AppType?
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The user profile name.
    /// This member is required.
    public var userProfileName: Swift.String?

    public init (
        appName: Swift.String? = nil,
        appType: SageMakerClientTypes.AppType? = nil,
        domainId: Swift.String? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.appName = appName
        self.appType = appType
        self.domainId = domainId
        self.userProfileName = userProfileName
    }
}

struct DescribeAppInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileName: Swift.String?
    let appType: SageMakerClientTypes.AppType?
    let appName: Swift.String?
}

extension DescribeAppInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let appTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppType.self, forKey: .appType)
        appType = appTypeDecoded
        let appNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appName)
        appName = appNameDecoded
    }
}

extension DescribeAppOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAppOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAppOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAppOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAppOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appArn = output.appArn
            self.appName = output.appName
            self.appType = output.appType
            self.creationTime = output.creationTime
            self.domainId = output.domainId
            self.failureReason = output.failureReason
            self.lastHealthCheckTimestamp = output.lastHealthCheckTimestamp
            self.lastUserActivityTimestamp = output.lastUserActivityTimestamp
            self.resourceSpec = output.resourceSpec
            self.status = output.status
            self.userProfileName = output.userProfileName
        } else {
            self.appArn = nil
            self.appName = nil
            self.appType = nil
            self.creationTime = nil
            self.domainId = nil
            self.failureReason = nil
            self.lastHealthCheckTimestamp = nil
            self.lastUserActivityTimestamp = nil
            self.resourceSpec = nil
            self.status = nil
            self.userProfileName = nil
        }
    }
}

public struct DescribeAppOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the app.
    public var appArn: Swift.String?
    /// The name of the app.
    public var appName: Swift.String?
    /// The type of app.
    public var appType: SageMakerClientTypes.AppType?
    /// The creation time.
    public var creationTime: ClientRuntime.Date?
    /// The domain ID.
    public var domainId: Swift.String?
    /// The failure reason.
    public var failureReason: Swift.String?
    /// The timestamp of the last health check.
    public var lastHealthCheckTimestamp: ClientRuntime.Date?
    /// The timestamp of the last user's activity. LastUserActivityTimestamp is also updated when SageMaker performs health checks without user activity. As a result, this value is set to the same value as LastHealthCheckTimestamp.
    public var lastUserActivityTimestamp: ClientRuntime.Date?
    /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    public var resourceSpec: SageMakerClientTypes.ResourceSpec?
    /// The status.
    public var status: SageMakerClientTypes.AppStatus?
    /// The user profile name.
    public var userProfileName: Swift.String?

    public init (
        appArn: Swift.String? = nil,
        appName: Swift.String? = nil,
        appType: SageMakerClientTypes.AppType? = nil,
        creationTime: ClientRuntime.Date? = nil,
        domainId: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        lastHealthCheckTimestamp: ClientRuntime.Date? = nil,
        lastUserActivityTimestamp: ClientRuntime.Date? = nil,
        resourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
        status: SageMakerClientTypes.AppStatus? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appName = appName
        self.appType = appType
        self.creationTime = creationTime
        self.domainId = domainId
        self.failureReason = failureReason
        self.lastHealthCheckTimestamp = lastHealthCheckTimestamp
        self.lastUserActivityTimestamp = lastUserActivityTimestamp
        self.resourceSpec = resourceSpec
        self.status = status
        self.userProfileName = userProfileName
    }
}

struct DescribeAppOutputResponseBody: Swift.Equatable {
    let appArn: Swift.String?
    let appType: SageMakerClientTypes.AppType?
    let appName: Swift.String?
    let domainId: Swift.String?
    let userProfileName: Swift.String?
    let status: SageMakerClientTypes.AppStatus?
    let lastHealthCheckTimestamp: ClientRuntime.Date?
    let lastUserActivityTimestamp: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let resourceSpec: SageMakerClientTypes.ResourceSpec?
}

extension DescribeAppOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appArn = "AppArn"
        case appName = "AppName"
        case appType = "AppType"
        case creationTime = "CreationTime"
        case domainId = "DomainId"
        case failureReason = "FailureReason"
        case lastHealthCheckTimestamp = "LastHealthCheckTimestamp"
        case lastUserActivityTimestamp = "LastUserActivityTimestamp"
        case resourceSpec = "ResourceSpec"
        case status = "Status"
        case userProfileName = "UserProfileName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appArn)
        appArn = appArnDecoded
        let appTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppType.self, forKey: .appType)
        appType = appTypeDecoded
        let appNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appName)
        appName = appNameDecoded
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppStatus.self, forKey: .status)
        status = statusDecoded
        let lastHealthCheckTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastHealthCheckTimestamp)
        lastHealthCheckTimestamp = lastHealthCheckTimestampDecoded
        let lastUserActivityTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUserActivityTimestamp)
        lastUserActivityTimestamp = lastUserActivityTimestampDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let resourceSpecDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceSpec.self, forKey: .resourceSpec)
        resourceSpec = resourceSpecDecoded
    }
}

extension DescribeArtifactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactArn = artifactArn {
            try encodeContainer.encode(artifactArn, forKey: .artifactArn)
        }
    }
}

extension DescribeArtifactInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeArtifactInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the artifact to describe.
    /// This member is required.
    public var artifactArn: Swift.String?

    public init (
        artifactArn: Swift.String? = nil
    )
    {
        self.artifactArn = artifactArn
    }
}

struct DescribeArtifactInputBody: Swift.Equatable {
    let artifactArn: Swift.String?
}

extension DescribeArtifactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactArn)
        artifactArn = artifactArnDecoded
    }
}

extension DescribeArtifactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeArtifactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeArtifactOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeArtifactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeArtifactOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.artifactArn = output.artifactArn
            self.artifactName = output.artifactName
            self.artifactType = output.artifactType
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.lineageGroupArn = output.lineageGroupArn
            self.metadataProperties = output.metadataProperties
            self.properties = output.properties
            self.source = output.source
        } else {
            self.artifactArn = nil
            self.artifactName = nil
            self.artifactType = nil
            self.createdBy = nil
            self.creationTime = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.lineageGroupArn = nil
            self.metadataProperties = nil
            self.properties = nil
            self.source = nil
        }
    }
}

public struct DescribeArtifactOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the artifact.
    public var artifactArn: Swift.String?
    /// The name of the artifact.
    public var artifactName: Swift.String?
    /// The type of the artifact.
    public var artifactType: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the artifact was created.
    public var creationTime: ClientRuntime.Date?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the artifact was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of the artifact's properties.
    public var properties: [Swift.String:Swift.String]?
    /// The source of the artifact.
    public var source: SageMakerClientTypes.ArtifactSource?

    public init (
        artifactArn: Swift.String? = nil,
        artifactName: Swift.String? = nil,
        artifactType: Swift.String? = nil,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        properties: [Swift.String:Swift.String]? = nil,
        source: SageMakerClientTypes.ArtifactSource? = nil
    )
    {
        self.artifactArn = artifactArn
        self.artifactName = artifactName
        self.artifactType = artifactType
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.metadataProperties = metadataProperties
        self.properties = properties
        self.source = source
    }
}

struct DescribeArtifactOutputResponseBody: Swift.Equatable {
    let artifactName: Swift.String?
    let artifactArn: Swift.String?
    let source: SageMakerClientTypes.ArtifactSource?
    let artifactType: Swift.String?
    let properties: [Swift.String:Swift.String]?
    let creationTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let lineageGroupArn: Swift.String?
}

extension DescribeArtifactOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
        case artifactName = "ArtifactName"
        case artifactType = "ArtifactType"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case metadataProperties = "MetadataProperties"
        case properties = "Properties"
        case source = "Source"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactName)
        artifactName = artifactNameDecoded
        let artifactArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactArn)
        artifactArn = artifactArnDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ArtifactSource.self, forKey: .source)
        source = sourceDecoded
        let artifactTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactType)
        artifactType = artifactTypeDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
    }
}

extension DescribeAutoMLJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobName = "AutoMLJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobName = autoMLJobName {
            try encodeContainer.encode(autoMLJobName, forKey: .autoMLJobName)
        }
    }
}

extension DescribeAutoMLJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAutoMLJobInput: Swift.Equatable {
    /// Requests information about an AutoML job using its unique name.
    /// This member is required.
    public var autoMLJobName: Swift.String?

    public init (
        autoMLJobName: Swift.String? = nil
    )
    {
        self.autoMLJobName = autoMLJobName
    }
}

struct DescribeAutoMLJobInputBody: Swift.Equatable {
    let autoMLJobName: Swift.String?
}

extension DescribeAutoMLJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobName = "AutoMLJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobName)
        autoMLJobName = autoMLJobNameDecoded
    }
}

extension DescribeAutoMLJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAutoMLJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAutoMLJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoMLJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAutoMLJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoMLJobArn = output.autoMLJobArn
            self.autoMLJobArtifacts = output.autoMLJobArtifacts
            self.autoMLJobConfig = output.autoMLJobConfig
            self.autoMLJobName = output.autoMLJobName
            self.autoMLJobObjective = output.autoMLJobObjective
            self.autoMLJobSecondaryStatus = output.autoMLJobSecondaryStatus
            self.autoMLJobStatus = output.autoMLJobStatus
            self.bestCandidate = output.bestCandidate
            self.creationTime = output.creationTime
            self.endTime = output.endTime
            self.failureReason = output.failureReason
            self.generateCandidateDefinitionsOnly = output.generateCandidateDefinitionsOnly
            self.inputDataConfig = output.inputDataConfig
            self.lastModifiedTime = output.lastModifiedTime
            self.modelDeployConfig = output.modelDeployConfig
            self.modelDeployResult = output.modelDeployResult
            self.outputDataConfig = output.outputDataConfig
            self.partialFailureReasons = output.partialFailureReasons
            self.problemType = output.problemType
            self.resolvedAttributes = output.resolvedAttributes
            self.roleArn = output.roleArn
        } else {
            self.autoMLJobArn = nil
            self.autoMLJobArtifacts = nil
            self.autoMLJobConfig = nil
            self.autoMLJobName = nil
            self.autoMLJobObjective = nil
            self.autoMLJobSecondaryStatus = nil
            self.autoMLJobStatus = nil
            self.bestCandidate = nil
            self.creationTime = nil
            self.endTime = nil
            self.failureReason = nil
            self.generateCandidateDefinitionsOnly = false
            self.inputDataConfig = nil
            self.lastModifiedTime = nil
            self.modelDeployConfig = nil
            self.modelDeployResult = nil
            self.outputDataConfig = nil
            self.partialFailureReasons = nil
            self.problemType = nil
            self.resolvedAttributes = nil
            self.roleArn = nil
        }
    }
}

public struct DescribeAutoMLJobOutputResponse: Swift.Equatable {
    /// Returns the ARN of the AutoML job.
    /// This member is required.
    public var autoMLJobArn: Swift.String?
    /// Returns information on the job's artifacts found in AutoMLJobArtifacts.
    public var autoMLJobArtifacts: SageMakerClientTypes.AutoMLJobArtifacts?
    /// Returns the configuration for the AutoML job.
    public var autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig?
    /// Returns the name of the AutoML job.
    /// This member is required.
    public var autoMLJobName: Swift.String?
    /// Returns the job's objective.
    public var autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
    /// Returns the secondary status of the AutoML job.
    /// This member is required.
    public var autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus?
    /// Returns the status of the AutoML job.
    /// This member is required.
    public var autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus?
    /// Returns the job's best AutoMLCandidate.
    public var bestCandidate: SageMakerClientTypes.AutoMLCandidate?
    /// Returns the creation time of the AutoML job.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// Returns the end time of the AutoML job.
    public var endTime: ClientRuntime.Date?
    /// Returns the failure reason for an AutoML job, when applicable.
    public var failureReason: Swift.String?
    /// Indicates whether the output for an AutoML job generates candidate definitions only.
    public var generateCandidateDefinitionsOnly: Swift.Bool
    /// Returns the input data configuration for the AutoML job..
    /// This member is required.
    public var inputDataConfig: [SageMakerClientTypes.AutoMLChannel]?
    /// Returns the job's last modified time.
    /// This member is required.
    public var lastModifiedTime: ClientRuntime.Date?
    /// Indicates whether the model was deployed automatically to an endpoint and the name of that endpoint if deployed automatically.
    public var modelDeployConfig: SageMakerClientTypes.ModelDeployConfig?
    /// Provides information about endpoint for the model deployment.
    public var modelDeployResult: SageMakerClientTypes.ModelDeployResult?
    /// Returns the job's output data config.
    /// This member is required.
    public var outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig?
    /// Returns a list of reasons for partial failures within an AutoML job.
    public var partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]?
    /// Returns the job's problem type.
    public var problemType: SageMakerClientTypes.ProblemType?
    /// This contains ProblemType, AutoMLJobObjective, and CompletionCriteria. If you do not provide these values, they are auto-inferred. If you do provide them, the values used are the ones you provide.
    public var resolvedAttributes: SageMakerClientTypes.ResolvedAttributes?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that has read permission to the input data location and write permission to the output data location in Amazon S3.
    /// This member is required.
    public var roleArn: Swift.String?

    public init (
        autoMLJobArn: Swift.String? = nil,
        autoMLJobArtifacts: SageMakerClientTypes.AutoMLJobArtifacts? = nil,
        autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig? = nil,
        autoMLJobName: Swift.String? = nil,
        autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective? = nil,
        autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus? = nil,
        autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus? = nil,
        bestCandidate: SageMakerClientTypes.AutoMLCandidate? = nil,
        creationTime: ClientRuntime.Date? = nil,
        endTime: ClientRuntime.Date? = nil,
        failureReason: Swift.String? = nil,
        generateCandidateDefinitionsOnly: Swift.Bool = false,
        inputDataConfig: [SageMakerClientTypes.AutoMLChannel]? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        modelDeployConfig: SageMakerClientTypes.ModelDeployConfig? = nil,
        modelDeployResult: SageMakerClientTypes.ModelDeployResult? = nil,
        outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig? = nil,
        partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]? = nil,
        problemType: SageMakerClientTypes.ProblemType? = nil,
        resolvedAttributes: SageMakerClientTypes.ResolvedAttributes? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.autoMLJobArn = autoMLJobArn
        self.autoMLJobArtifacts = autoMLJobArtifacts
        self.autoMLJobConfig = autoMLJobConfig
        self.autoMLJobName = autoMLJobName
        self.autoMLJobObjective = autoMLJobObjective
        self.autoMLJobSecondaryStatus = autoMLJobSecondaryStatus
        self.autoMLJobStatus = autoMLJobStatus
        self.bestCandidate = bestCandidate
        self.creationTime = creationTime
        self.endTime = endTime
        self.failureReason = failureReason
        self.generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnly
        self.inputDataConfig = inputDataConfig
        self.lastModifiedTime = lastModifiedTime
        self.modelDeployConfig = modelDeployConfig
        self.modelDeployResult = modelDeployResult
        self.outputDataConfig = outputDataConfig
        self.partialFailureReasons = partialFailureReasons
        self.problemType = problemType
        self.resolvedAttributes = resolvedAttributes
        self.roleArn = roleArn
    }
}

struct DescribeAutoMLJobOutputResponseBody: Swift.Equatable {
    let autoMLJobName: Swift.String?
    let autoMLJobArn: Swift.String?
    let inputDataConfig: [SageMakerClientTypes.AutoMLChannel]?
    let outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig?
    let roleArn: Swift.String?
    let autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
    let problemType: SageMakerClientTypes.ProblemType?
    let autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig?
    let creationTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]?
    let bestCandidate: SageMakerClientTypes.AutoMLCandidate?
    let autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus?
    let autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus?
    let generateCandidateDefinitionsOnly: Swift.Bool
    let autoMLJobArtifacts: SageMakerClientTypes.AutoMLJobArtifacts?
    let resolvedAttributes: SageMakerClientTypes.ResolvedAttributes?
    let modelDeployConfig: SageMakerClientTypes.ModelDeployConfig?
    let modelDeployResult: SageMakerClientTypes.ModelDeployResult?
}

extension DescribeAutoMLJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobArn = "AutoMLJobArn"
        case autoMLJobArtifacts = "AutoMLJobArtifacts"
        case autoMLJobConfig = "AutoMLJobConfig"
        case autoMLJobName = "AutoMLJobName"
        case autoMLJobObjective = "AutoMLJobObjective"
        case autoMLJobSecondaryStatus = "AutoMLJobSecondaryStatus"
        case autoMLJobStatus = "AutoMLJobStatus"
        case bestCandidate = "BestCandidate"
        case creationTime = "CreationTime"
        case endTime = "EndTime"
        case failureReason = "FailureReason"
        case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
        case inputDataConfig = "InputDataConfig"
        case lastModifiedTime = "LastModifiedTime"
        case modelDeployConfig = "ModelDeployConfig"
        case modelDeployResult = "ModelDeployResult"
        case outputDataConfig = "OutputDataConfig"
        case partialFailureReasons = "PartialFailureReasons"
        case problemType = "ProblemType"
        case resolvedAttributes = "ResolvedAttributes"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobName)
        autoMLJobName = autoMLJobNameDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AutoMLChannel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.AutoMLChannel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.AutoMLChannel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let autoMLJobObjectiveDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobObjective.self, forKey: .autoMLJobObjective)
        autoMLJobObjective = autoMLJobObjectiveDecoded
        let problemTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProblemType.self, forKey: .problemType)
        problemType = problemTypeDecoded
        let autoMLJobConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobConfig.self, forKey: .autoMLJobConfig)
        autoMLJobConfig = autoMLJobConfigDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let partialFailureReasonsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AutoMLPartialFailureReason?].self, forKey: .partialFailureReasons)
        var partialFailureReasonsDecoded0:[SageMakerClientTypes.AutoMLPartialFailureReason]? = nil
        if let partialFailureReasonsContainer = partialFailureReasonsContainer {
            partialFailureReasonsDecoded0 = [SageMakerClientTypes.AutoMLPartialFailureReason]()
            for structure0 in partialFailureReasonsContainer {
                if let structure0 = structure0 {
                    partialFailureReasonsDecoded0?.append(structure0)
                }
            }
        }
        partialFailureReasons = partialFailureReasonsDecoded0
        let bestCandidateDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLCandidate.self, forKey: .bestCandidate)
        bestCandidate = bestCandidateDecoded
        let autoMLJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobStatus.self, forKey: .autoMLJobStatus)
        autoMLJobStatus = autoMLJobStatusDecoded
        let autoMLJobSecondaryStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobSecondaryStatus.self, forKey: .autoMLJobSecondaryStatus)
        autoMLJobSecondaryStatus = autoMLJobSecondaryStatusDecoded
        let generateCandidateDefinitionsOnlyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .generateCandidateDefinitionsOnly)
        generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnlyDecoded
        let autoMLJobArtifactsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobArtifacts.self, forKey: .autoMLJobArtifacts)
        autoMLJobArtifacts = autoMLJobArtifactsDecoded
        let resolvedAttributesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResolvedAttributes.self, forKey: .resolvedAttributes)
        resolvedAttributes = resolvedAttributesDecoded
        let modelDeployConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelDeployConfig.self, forKey: .modelDeployConfig)
        modelDeployConfig = modelDeployConfigDecoded
        let modelDeployResultDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelDeployResult.self, forKey: .modelDeployResult)
        modelDeployResult = modelDeployResultDecoded
    }
}

extension DescribeCodeRepositoryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryName = "CodeRepositoryName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeRepositoryName = codeRepositoryName {
            try encodeContainer.encode(codeRepositoryName, forKey: .codeRepositoryName)
        }
    }
}

extension DescribeCodeRepositoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeCodeRepositoryInput: Swift.Equatable {
    /// The name of the Git repository to describe.
    /// This member is required.
    public var codeRepositoryName: Swift.String?

    public init (
        codeRepositoryName: Swift.String? = nil
    )
    {
        self.codeRepositoryName = codeRepositoryName
    }
}

struct DescribeCodeRepositoryInputBody: Swift.Equatable {
    let codeRepositoryName: Swift.String?
}

extension DescribeCodeRepositoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryName = "CodeRepositoryName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryName)
        codeRepositoryName = codeRepositoryNameDecoded
    }
}

extension DescribeCodeRepositoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCodeRepositoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCodeRepositoryOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCodeRepositoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCodeRepositoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeRepositoryArn = output.codeRepositoryArn
            self.codeRepositoryName = output.codeRepositoryName
            self.creationTime = output.creationTime
            self.gitConfig = output.gitConfig
            self.lastModifiedTime = output.lastModifiedTime
        } else {
            self.codeRepositoryArn = nil
            self.codeRepositoryName = nil
            self.creationTime = nil
            self.gitConfig = nil
            self.lastModifiedTime = nil
        }
    }
}

public struct DescribeCodeRepositoryOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Git repository.
    /// This member is required.
    public var codeRepositoryArn: Swift.String?
    /// The name of the Git repository.
    /// This member is required.
    public var codeRepositoryName: Swift.String?
    /// The date and time that the repository was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// Configuration details about the repository, including the URL where the repository is located, the default branch, and the Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository.
    public var gitConfig: SageMakerClientTypes.GitConfig?
    /// The date and time that the repository was last changed.
    /// This member is required.
    public var lastModifiedTime: ClientRuntime.Date?

    public init (
        codeRepositoryArn: Swift.String? = nil,
        codeRepositoryName: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        gitConfig: SageMakerClientTypes.GitConfig? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil
    )
    {
        self.codeRepositoryArn = codeRepositoryArn
        self.codeRepositoryName = codeRepositoryName
        self.creationTime = creationTime
        self.gitConfig = gitConfig
        self.lastModifiedTime = lastModifiedTime
    }
}

struct DescribeCodeRepositoryOutputResponseBody: Swift.Equatable {
    let codeRepositoryName: Swift.String?
    let codeRepositoryArn: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let gitConfig: SageMakerClientTypes.GitConfig?
}

extension DescribeCodeRepositoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryArn = "CodeRepositoryArn"
        case codeRepositoryName = "CodeRepositoryName"
        case creationTime = "CreationTime"
        case gitConfig = "GitConfig"
        case lastModifiedTime = "LastModifiedTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryName)
        codeRepositoryName = codeRepositoryNameDecoded
        let codeRepositoryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryArn)
        codeRepositoryArn = codeRepositoryArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let gitConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.GitConfig.self, forKey: .gitConfig)
        gitConfig = gitConfigDecoded
    }
}

extension DescribeCompilationJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compilationJobName = compilationJobName {
            try encodeContainer.encode(compilationJobName, forKey: .compilationJobName)
        }
    }
}

extension DescribeCompilationJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeCompilationJobInput: Swift.Equatable {
    /// The name of the model compilation job that you want information about.
    /// This member is required.
    public var compilationJobName: Swift.String?

    public init (
        compilationJobName: Swift.String? = nil
    )
    {
        self.compilationJobName = compilationJobName
    }
}

struct DescribeCompilationJobInputBody: Swift.Equatable {
    let compilationJobName: Swift.String?
}

extension DescribeCompilationJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
    }
}

extension DescribeCompilationJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCompilationJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCompilationJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCompilationJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCompilationJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compilationEndTime = output.compilationEndTime
            self.compilationJobArn = output.compilationJobArn
            self.compilationJobName = output.compilationJobName
            self.compilationJobStatus = output.compilationJobStatus
            self.compilationStartTime = output.compilationStartTime
            self.creationTime = output.creationTime
            self.failureReason = output.failureReason
            self.inferenceImage = output.inferenceImage
            self.inputConfig = output.inputConfig
            self.lastModifiedTime = output.lastModifiedTime
            self.modelArtifacts = output.modelArtifacts
            self.modelDigests = output.modelDigests
            self.modelPackageVersionArn = output.modelPackageVersionArn
            self.outputConfig = output.outputConfig
            self.roleArn = output.roleArn
            self.stoppingCondition = output.stoppingCondition
            self.vpcConfig = output.vpcConfig
        } else {
            self.compilationEndTime = nil
            self.compilationJobArn = nil
            self.compilationJobName = nil
            self.compilationJobStatus = nil
            self.compilationStartTime = nil
            self.creationTime = nil
            self.failureReason = nil
            self.inferenceImage = nil
            self.inputConfig = nil
            self.lastModifiedTime = nil
            self.modelArtifacts = nil
            self.modelDigests = nil
            self.modelPackageVersionArn = nil
            self.outputConfig = nil
            self.roleArn = nil
            self.stoppingCondition = nil
            self.vpcConfig = nil
        }
    }
}

public struct DescribeCompilationJobOutputResponse: Swift.Equatable {
    /// The time when the model compilation job on a compilation job instance ended. For a successful or stopped job, this is when the job's model artifacts have finished uploading. For a failed job, this is when Amazon SageMaker detected that the job failed.
    public var compilationEndTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the model compilation job.
    /// This member is required.
    public var compilationJobArn: Swift.String?
    /// The name of the model compilation job.
    /// This member is required.
    public var compilationJobName: Swift.String?
    /// The status of the model compilation job.
    /// This member is required.
    public var compilationJobStatus: SageMakerClientTypes.CompilationJobStatus?
    /// The time when the model compilation job started the CompilationJob instances. You are billed for the time between this timestamp and the timestamp in the [DescribeCompilationJobResponse$CompilationEndTime] field. In Amazon CloudWatch Logs, the start time might be later than this time. That's because it takes time to download the compilation job, which depends on the size of the compilation job container.
    public var compilationStartTime: ClientRuntime.Date?
    /// The time that the model compilation job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// If a model compilation job failed, the reason it failed.
    /// This member is required.
    public var failureReason: Swift.String?
    /// The inference image to use when compiling a model. Specify an image only if the target device is a cloud instance.
    public var inferenceImage: Swift.String?
    /// Information about the location in Amazon S3 of the input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.InputConfig?
    /// The time that the status of the model compilation job was last modified.
    /// This member is required.
    public var lastModifiedTime: ClientRuntime.Date?
    /// Information about the location in Amazon S3 that has been configured for storing the model artifacts used in the compilation job.
    /// This member is required.
    public var modelArtifacts: SageMakerClientTypes.ModelArtifacts?
    /// Provides a BLAKE2 hash value that identifies the compiled model artifacts in Amazon S3.
    public var modelDigests: SageMakerClientTypes.ModelDigests?
    /// The Amazon Resource Name (ARN) of the versioned model package that was provided to SageMaker Neo when you initiated a compilation job.
    public var modelPackageVersionArn: Swift.String?
    /// Information about the output location for the compiled model and the target device that the model runs on.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.OutputConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes to perform the model compilation job.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// A [VpcConfig] object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see [Protect Compilation Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html).
    public var vpcConfig: SageMakerClientTypes.NeoVpcConfig?

    public init (
        compilationEndTime: ClientRuntime.Date? = nil,
        compilationJobArn: Swift.String? = nil,
        compilationJobName: Swift.String? = nil,
        compilationJobStatus: SageMakerClientTypes.CompilationJobStatus? = nil,
        compilationStartTime: ClientRuntime.Date? = nil,
        creationTime: ClientRuntime.Date? = nil,
        failureReason: Swift.String? = nil,
        inferenceImage: Swift.String? = nil,
        inputConfig: SageMakerClientTypes.InputConfig? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        modelArtifacts: SageMakerClientTypes.ModelArtifacts? = nil,
        modelDigests: SageMakerClientTypes.ModelDigests? = nil,
        modelPackageVersionArn: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.OutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        vpcConfig: SageMakerClientTypes.NeoVpcConfig? = nil
    )
    {
        self.compilationEndTime = compilationEndTime
        self.compilationJobArn = compilationJobArn
        self.compilationJobName = compilationJobName
        self.compilationJobStatus = compilationJobStatus
        self.compilationStartTime = compilationStartTime
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.inferenceImage = inferenceImage
        self.inputConfig = inputConfig
        self.lastModifiedTime = lastModifiedTime
        self.modelArtifacts = modelArtifacts
        self.modelDigests = modelDigests
        self.modelPackageVersionArn = modelPackageVersionArn
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.vpcConfig = vpcConfig
    }
}

struct DescribeCompilationJobOutputResponseBody: Swift.Equatable {
    let compilationJobName: Swift.String?
    let compilationJobArn: Swift.String?
    let compilationJobStatus: SageMakerClientTypes.CompilationJobStatus?
    let compilationStartTime: ClientRuntime.Date?
    let compilationEndTime: ClientRuntime.Date?
    let stoppingCondition: SageMakerClientTypes.StoppingCondition?
    let inferenceImage: Swift.String?
    let modelPackageVersionArn: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let modelArtifacts: SageMakerClientTypes.ModelArtifacts?
    let modelDigests: SageMakerClientTypes.ModelDigests?
    let roleArn: Swift.String?
    let inputConfig: SageMakerClientTypes.InputConfig?
    let outputConfig: SageMakerClientTypes.OutputConfig?
    let vpcConfig: SageMakerClientTypes.NeoVpcConfig?
}

extension DescribeCompilationJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationEndTime = "CompilationEndTime"
        case compilationJobArn = "CompilationJobArn"
        case compilationJobName = "CompilationJobName"
        case compilationJobStatus = "CompilationJobStatus"
        case compilationStartTime = "CompilationStartTime"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case inferenceImage = "InferenceImage"
        case inputConfig = "InputConfig"
        case lastModifiedTime = "LastModifiedTime"
        case modelArtifacts = "ModelArtifacts"
        case modelDigests = "ModelDigests"
        case modelPackageVersionArn = "ModelPackageVersionArn"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
        let compilationJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobArn)
        compilationJobArn = compilationJobArnDecoded
        let compilationJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CompilationJobStatus.self, forKey: .compilationJobStatus)
        compilationJobStatus = compilationJobStatusDecoded
        let compilationStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .compilationStartTime)
        compilationStartTime = compilationStartTimeDecoded
        let compilationEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .compilationEndTime)
        compilationEndTime = compilationEndTimeDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let inferenceImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceImage)
        inferenceImage = inferenceImageDecoded
        let modelPackageVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageVersionArn)
        modelPackageVersionArn = modelPackageVersionArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let modelArtifactsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelArtifacts.self, forKey: .modelArtifacts)
        modelArtifacts = modelArtifactsDecoded
        let modelDigestsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelDigests.self, forKey: .modelDigests)
        modelDigests = modelDigestsDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NeoVpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension DescribeContextInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextName = "ContextName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contextName = contextName {
            try encodeContainer.encode(contextName, forKey: .contextName)
        }
    }
}

extension DescribeContextInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeContextInput: Swift.Equatable {
    /// The name of the context to describe.
    /// This member is required.
    public var contextName: Swift.String?

    public init (
        contextName: Swift.String? = nil
    )
    {
        self.contextName = contextName
    }
}

struct DescribeContextInputBody: Swift.Equatable {
    let contextName: Swift.String?
}

extension DescribeContextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextName = "ContextName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextName)
        contextName = contextNameDecoded
    }
}

extension DescribeContextOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeContextOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeContextOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeContextOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeContextOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contextArn = output.contextArn
            self.contextName = output.contextName
            self.contextType = output.contextType
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.description = output.description
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.lineageGroupArn = output.lineageGroupArn
            self.properties = output.properties
            self.source = output.source
        } else {
            self.contextArn = nil
            self.contextName = nil
            self.contextType = nil
            self.createdBy = nil
            self.creationTime = nil
            self.description = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.lineageGroupArn = nil
            self.properties = nil
            self.source = nil
        }
    }
}

public struct DescribeContextOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the context.
    public var contextArn: Swift.String?
    /// The name of the context.
    public var contextName: Swift.String?
    /// The type of the context.
    public var contextType: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the context was created.
    public var creationTime: ClientRuntime.Date?
    /// The description of the context.
    public var description: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the context was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// A list of the context's properties.
    public var properties: [Swift.String:Swift.String]?
    /// The source of the context.
    public var source: SageMakerClientTypes.ContextSource?

    public init (
        contextArn: Swift.String? = nil,
        contextName: Swift.String? = nil,
        contextType: Swift.String? = nil,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        properties: [Swift.String:Swift.String]? = nil,
        source: SageMakerClientTypes.ContextSource? = nil
    )
    {
        self.contextArn = contextArn
        self.contextName = contextName
        self.contextType = contextType
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.description = description
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.properties = properties
        self.source = source
    }
}

struct DescribeContextOutputResponseBody: Swift.Equatable {
    let contextName: Swift.String?
    let contextArn: Swift.String?
    let source: SageMakerClientTypes.ContextSource?
    let contextType: Swift.String?
    let description: Swift.String?
    let properties: [Swift.String:Swift.String]?
    let creationTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
    let lineageGroupArn: Swift.String?
}

extension DescribeContextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextArn = "ContextArn"
        case contextName = "ContextName"
        case contextType = "ContextType"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case description = "Description"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case properties = "Properties"
        case source = "Source"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextName)
        contextName = contextNameDecoded
        let contextArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextArn)
        contextArn = contextArnDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ContextSource.self, forKey: .source)
        source = sourceDecoded
        let contextTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextType)
        contextType = contextTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
    }
}

extension DescribeDataQualityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
    }
}

extension DescribeDataQualityJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataQualityJobDefinitionInput: Swift.Equatable {
    /// The name of the data quality monitoring job definition to describe.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

struct DescribeDataQualityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
}

extension DescribeDataQualityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
    }
}

extension DescribeDataQualityJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDataQualityJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDataQualityJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDataQualityJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDataQualityJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.dataQualityAppSpecification = output.dataQualityAppSpecification
            self.dataQualityBaselineConfig = output.dataQualityBaselineConfig
            self.dataQualityJobInput = output.dataQualityJobInput
            self.dataQualityJobOutputConfig = output.dataQualityJobOutputConfig
            self.jobDefinitionArn = output.jobDefinitionArn
            self.jobDefinitionName = output.jobDefinitionName
            self.jobResources = output.jobResources
            self.networkConfig = output.networkConfig
            self.roleArn = output.roleArn
            self.stoppingCondition = output.stoppingCondition
        } else {
            self.creationTime = nil
            self.dataQualityAppSpecification = nil
            self.dataQualityBaselineConfig = nil
            self.dataQualityJobInput = nil
            self.dataQualityJobOutputConfig = nil
            self.jobDefinitionArn = nil
            self.jobDefinitionName = nil
            self.jobResources = nil
            self.networkConfig = nil
            self.roleArn = nil
            self.stoppingCondition = nil
        }
    }
}

public struct DescribeDataQualityJobDefinitionOutputResponse: Swift.Equatable {
    /// The time that the data quality monitoring job definition was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// Information about the container that runs the data quality monitoring job.
    /// This member is required.
    public var dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification?
    /// The constraints and baselines for the data quality monitoring job definition.
    public var dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig?
    /// The list of inputs for the data quality monitoring job. Currently endpoints are supported.
    /// This member is required.
    public var dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// The Amazon Resource Name (ARN) of the data quality monitoring job definition.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the data quality monitoring job definition.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// The networking configuration for the data quality monitoring job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification? = nil,
        dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig? = nil,
        dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput? = nil,
        dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
    )
    {
        self.creationTime = creationTime
        self.dataQualityAppSpecification = dataQualityAppSpecification
        self.dataQualityBaselineConfig = dataQualityBaselineConfig
        self.dataQualityJobInput = dataQualityJobInput
        self.dataQualityJobOutputConfig = dataQualityJobOutputConfig
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
    }
}

struct DescribeDataQualityJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionArn: Swift.String?
    let jobDefinitionName: Swift.String?
    let creationTime: ClientRuntime.Date?
    let dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig?
    let dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification?
    let dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput?
    let dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
}

extension DescribeDataQualityJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case dataQualityAppSpecification = "DataQualityAppSpecification"
        case dataQualityBaselineConfig = "DataQualityBaselineConfig"
        case dataQualityJobInput = "DataQualityJobInput"
        case dataQualityJobOutputConfig = "DataQualityJobOutputConfig"
        case jobDefinitionArn = "JobDefinitionArn"
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let dataQualityBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataQualityBaselineConfig.self, forKey: .dataQualityBaselineConfig)
        dataQualityBaselineConfig = dataQualityBaselineConfigDecoded
        let dataQualityAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataQualityAppSpecification.self, forKey: .dataQualityAppSpecification)
        dataQualityAppSpecification = dataQualityAppSpecificationDecoded
        let dataQualityJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataQualityJobInput.self, forKey: .dataQualityJobInput)
        dataQualityJobInput = dataQualityJobInputDecoded
        let dataQualityJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .dataQualityJobOutputConfig)
        dataQualityJobOutputConfig = dataQualityJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
    }
}

extension DescribeDeviceFleetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
    }
}

extension DescribeDeviceFleetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDeviceFleetInput: Swift.Equatable {
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?

    public init (
        deviceFleetName: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
    }
}

struct DescribeDeviceFleetInputBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
}

extension DescribeDeviceFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
    }
}

extension DescribeDeviceFleetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDeviceFleetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDeviceFleetOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDeviceFleetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDeviceFleetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.description = output.description
            self.deviceFleetArn = output.deviceFleetArn
            self.deviceFleetName = output.deviceFleetName
            self.iotRoleAlias = output.iotRoleAlias
            self.lastModifiedTime = output.lastModifiedTime
            self.outputConfig = output.outputConfig
            self.roleArn = output.roleArn
        } else {
            self.creationTime = nil
            self.description = nil
            self.deviceFleetArn = nil
            self.deviceFleetName = nil
            self.iotRoleAlias = nil
            self.lastModifiedTime = nil
            self.outputConfig = nil
            self.roleArn = nil
        }
    }
}

public struct DescribeDeviceFleetOutputResponse: Swift.Equatable {
    /// Timestamp of when the device fleet was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// A description of the fleet.
    public var description: Swift.String?
    /// The The Amazon Resource Name (ARN) of the fleet.
    /// This member is required.
    public var deviceFleetArn: Swift.String?
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The Amazon Resource Name (ARN) alias created in Amazon Web Services Internet of Things (IoT).
    public var iotRoleAlias: Swift.String?
    /// Timestamp of when the device fleet was last updated.
    /// This member is required.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The output configuration for storing sampled data.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).
    public var roleArn: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        deviceFleetArn: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        iotRoleAlias: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.deviceFleetArn = deviceFleetArn
        self.deviceFleetName = deviceFleetName
        self.iotRoleAlias = iotRoleAlias
        self.lastModifiedTime = lastModifiedTime
        self.outputConfig = outputConfig
        self.roleArn = roleArn
    }
}

struct DescribeDeviceFleetOutputResponseBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
    let deviceFleetArn: Swift.String?
    let outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    let description: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let roleArn: Swift.String?
    let iotRoleAlias: Swift.String?
}

extension DescribeDeviceFleetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case description = "Description"
        case deviceFleetArn = "DeviceFleetArn"
        case deviceFleetName = "DeviceFleetName"
        case iotRoleAlias = "IotRoleAlias"
        case lastModifiedTime = "LastModifiedTime"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let deviceFleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetArn)
        deviceFleetArn = deviceFleetArnDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgeOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let iotRoleAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iotRoleAlias)
        iotRoleAlias = iotRoleAliasDecoded
    }
}

extension DescribeDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case deviceName = "DeviceName"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let deviceName = deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDeviceInput: Swift.Equatable {
    /// The name of the fleet the devices belong to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The unique ID of the device.
    /// This member is required.
    public var deviceName: Swift.String?
    /// Next token of device description.
    public var nextToken: Swift.String?

    public init (
        deviceFleetName: Swift.String? = nil,
        deviceName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.deviceName = deviceName
        self.nextToken = nextToken
    }
}

struct DescribeDeviceInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let deviceName: Swift.String?
    let deviceFleetName: Swift.String?
}

extension DescribeDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case deviceName = "DeviceName"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
    }
}

extension DescribeDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDeviceOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDeviceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentVersion = output.agentVersion
            self.description = output.description
            self.deviceArn = output.deviceArn
            self.deviceFleetName = output.deviceFleetName
            self.deviceName = output.deviceName
            self.iotThingName = output.iotThingName
            self.latestHeartbeat = output.latestHeartbeat
            self.maxModels = output.maxModels
            self.models = output.models
            self.nextToken = output.nextToken
            self.registrationTime = output.registrationTime
        } else {
            self.agentVersion = nil
            self.description = nil
            self.deviceArn = nil
            self.deviceFleetName = nil
            self.deviceName = nil
            self.iotThingName = nil
            self.latestHeartbeat = nil
            self.maxModels = 0
            self.models = nil
            self.nextToken = nil
            self.registrationTime = nil
        }
    }
}

public struct DescribeDeviceOutputResponse: Swift.Equatable {
    /// Edge Manager agent version.
    public var agentVersion: Swift.String?
    /// A description of the device.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the device.
    public var deviceArn: Swift.String?
    /// The name of the fleet the device belongs to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The unique identifier of the device.
    /// This member is required.
    public var deviceName: Swift.String?
    /// The Amazon Web Services Internet of Things (IoT) object thing name associated with the device.
    public var iotThingName: Swift.String?
    /// The last heartbeat received from the device.
    public var latestHeartbeat: ClientRuntime.Date?
    /// The maximum number of models.
    public var maxModels: Swift.Int
    /// Models on the device.
    public var models: [SageMakerClientTypes.EdgeModel]?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?
    /// The timestamp of the last registration or de-reregistration.
    /// This member is required.
    public var registrationTime: ClientRuntime.Date?

    public init (
        agentVersion: Swift.String? = nil,
        description: Swift.String? = nil,
        deviceArn: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        deviceName: Swift.String? = nil,
        iotThingName: Swift.String? = nil,
        latestHeartbeat: ClientRuntime.Date? = nil,
        maxModels: Swift.Int = 0,
        models: [SageMakerClientTypes.EdgeModel]? = nil,
        nextToken: Swift.String? = nil,
        registrationTime: ClientRuntime.Date? = nil
    )
    {
        self.agentVersion = agentVersion
        self.description = description
        self.deviceArn = deviceArn
        self.deviceFleetName = deviceFleetName
        self.deviceName = deviceName
        self.iotThingName = iotThingName
        self.latestHeartbeat = latestHeartbeat
        self.maxModels = maxModels
        self.models = models
        self.nextToken = nextToken
        self.registrationTime = registrationTime
    }
}

struct DescribeDeviceOutputResponseBody: Swift.Equatable {
    let deviceArn: Swift.String?
    let deviceName: Swift.String?
    let description: Swift.String?
    let deviceFleetName: Swift.String?
    let iotThingName: Swift.String?
    let registrationTime: ClientRuntime.Date?
    let latestHeartbeat: ClientRuntime.Date?
    let models: [SageMakerClientTypes.EdgeModel]?
    let maxModels: Swift.Int
    let nextToken: Swift.String?
    let agentVersion: Swift.String?
}

extension DescribeDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentVersion = "AgentVersion"
        case description = "Description"
        case deviceArn = "DeviceArn"
        case deviceFleetName = "DeviceFleetName"
        case deviceName = "DeviceName"
        case iotThingName = "IotThingName"
        case latestHeartbeat = "LatestHeartbeat"
        case maxModels = "MaxModels"
        case models = "Models"
        case nextToken = "NextToken"
        case registrationTime = "RegistrationTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let iotThingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iotThingName)
        iotThingName = iotThingNameDecoded
        let registrationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registrationTime)
        registrationTime = registrationTimeDecoded
        let latestHeartbeatDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .latestHeartbeat)
        latestHeartbeat = latestHeartbeatDecoded
        let modelsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EdgeModel?].self, forKey: .models)
        var modelsDecoded0:[SageMakerClientTypes.EdgeModel]? = nil
        if let modelsContainer = modelsContainer {
            modelsDecoded0 = [SageMakerClientTypes.EdgeModel]()
            for structure0 in modelsContainer {
                if let structure0 = structure0 {
                    modelsDecoded0?.append(structure0)
                }
            }
        }
        models = modelsDecoded0
        let maxModelsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxModels)
        maxModels = maxModelsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let agentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
    }
}

extension DescribeDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
    }
}

extension DescribeDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDomainInput: Swift.Equatable {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?

    public init (
        domainId: Swift.String? = nil
    )
    {
        self.domainId = domainId
    }
}

struct DescribeDomainInputBody: Swift.Equatable {
    let domainId: Swift.String?
}

extension DescribeDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
    }
}

extension DescribeDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDomainOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appNetworkAccessType = output.appNetworkAccessType
            self.appSecurityGroupManagement = output.appSecurityGroupManagement
            self.authMode = output.authMode
            self.creationTime = output.creationTime
            self.defaultUserSettings = output.defaultUserSettings
            self.domainArn = output.domainArn
            self.domainId = output.domainId
            self.domainName = output.domainName
            self.domainSettings = output.domainSettings
            self.failureReason = output.failureReason
            self.homeEfsFileSystemId = output.homeEfsFileSystemId
            self.homeEfsFileSystemKmsKeyId = output.homeEfsFileSystemKmsKeyId
            self.kmsKeyId = output.kmsKeyId
            self.lastModifiedTime = output.lastModifiedTime
            self.securityGroupIdForDomainBoundary = output.securityGroupIdForDomainBoundary
            self.singleSignOnManagedApplicationInstanceId = output.singleSignOnManagedApplicationInstanceId
            self.status = output.status
            self.subnetIds = output.subnetIds
            self.url = output.url
            self.vpcId = output.vpcId
        } else {
            self.appNetworkAccessType = nil
            self.appSecurityGroupManagement = nil
            self.authMode = nil
            self.creationTime = nil
            self.defaultUserSettings = nil
            self.domainArn = nil
            self.domainId = nil
            self.domainName = nil
            self.domainSettings = nil
            self.failureReason = nil
            self.homeEfsFileSystemId = nil
            self.homeEfsFileSystemKmsKeyId = nil
            self.kmsKeyId = nil
            self.lastModifiedTime = nil
            self.securityGroupIdForDomainBoundary = nil
            self.singleSignOnManagedApplicationInstanceId = nil
            self.status = nil
            self.subnetIds = nil
            self.url = nil
            self.vpcId = nil
        }
    }
}

public struct DescribeDomainOutputResponse: Swift.Equatable {
    /// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
    ///
    /// * PublicInternetOnly - Non-EFS traffic is through a VPC managed by Amazon SageMaker, which allows direct internet access
    ///
    /// * VpcOnly - All Studio traffic is through the specified VPC and subnets
    public var appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType?
    /// The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required when CreateDomain.AppNetworkAccessType is VPCOnly and DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided.
    public var appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement?
    /// The domain's authentication mode.
    public var authMode: SageMakerClientTypes.AuthMode?
    /// The creation time.
    public var creationTime: ClientRuntime.Date?
    /// Settings which are applied to UserProfiles in this domain if settings are not explicitly specified in a given UserProfile.
    public var defaultUserSettings: SageMakerClientTypes.UserSettings?
    /// The domain's Amazon Resource Name (ARN).
    public var domainArn: Swift.String?
    /// The domain ID.
    public var domainId: Swift.String?
    /// The domain name.
    public var domainName: Swift.String?
    /// A collection of Domain settings.
    public var domainSettings: SageMakerClientTypes.DomainSettings?
    /// The failure reason.
    public var failureReason: Swift.String?
    /// The ID of the Amazon Elastic File System (EFS) managed by this Domain.
    public var homeEfsFileSystemId: Swift.String?
    /// This member is deprecated and replaced with KmsKeyId.
    @available(*, deprecated, message: "This property is deprecated, use KmsKeyId instead.")
    public var homeEfsFileSystemKmsKeyId: Swift.String?
    /// The Amazon Web Services KMS customer managed key used to encrypt the EFS volume attached to the domain.
    public var kmsKeyId: Swift.String?
    /// The last modified time.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The ID of the security group that authorizes traffic between the RSessionGateway apps and the RStudioServerPro app.
    public var securityGroupIdForDomainBoundary: Swift.String?
    /// The SSO managed application instance ID.
    public var singleSignOnManagedApplicationInstanceId: Swift.String?
    /// The status.
    public var status: SageMakerClientTypes.DomainStatus?
    /// The VPC subnets that Studio uses for communication.
    public var subnetIds: [Swift.String]?
    /// The domain's URL.
    public var url: Swift.String?
    /// The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
    public var vpcId: Swift.String?

    public init (
        appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType? = nil,
        appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement? = nil,
        authMode: SageMakerClientTypes.AuthMode? = nil,
        creationTime: ClientRuntime.Date? = nil,
        defaultUserSettings: SageMakerClientTypes.UserSettings? = nil,
        domainArn: Swift.String? = nil,
        domainId: Swift.String? = nil,
        domainName: Swift.String? = nil,
        domainSettings: SageMakerClientTypes.DomainSettings? = nil,
        failureReason: Swift.String? = nil,
        homeEfsFileSystemId: Swift.String? = nil,
        homeEfsFileSystemKmsKeyId: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        securityGroupIdForDomainBoundary: Swift.String? = nil,
        singleSignOnManagedApplicationInstanceId: Swift.String? = nil,
        status: SageMakerClientTypes.DomainStatus? = nil,
        subnetIds: [Swift.String]? = nil,
        url: Swift.String? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.appNetworkAccessType = appNetworkAccessType
        self.appSecurityGroupManagement = appSecurityGroupManagement
        self.authMode = authMode
        self.creationTime = creationTime
        self.defaultUserSettings = defaultUserSettings
        self.domainArn = domainArn
        self.domainId = domainId
        self.domainName = domainName
        self.domainSettings = domainSettings
        self.failureReason = failureReason
        self.homeEfsFileSystemId = homeEfsFileSystemId
        self.homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyId
        self.kmsKeyId = kmsKeyId
        self.lastModifiedTime = lastModifiedTime
        self.securityGroupIdForDomainBoundary = securityGroupIdForDomainBoundary
        self.singleSignOnManagedApplicationInstanceId = singleSignOnManagedApplicationInstanceId
        self.status = status
        self.subnetIds = subnetIds
        self.url = url
        self.vpcId = vpcId
    }
}

struct DescribeDomainOutputResponseBody: Swift.Equatable {
    let domainArn: Swift.String?
    let domainId: Swift.String?
    let domainName: Swift.String?
    let homeEfsFileSystemId: Swift.String?
    let singleSignOnManagedApplicationInstanceId: Swift.String?
    let status: SageMakerClientTypes.DomainStatus?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let authMode: SageMakerClientTypes.AuthMode?
    let defaultUserSettings: SageMakerClientTypes.UserSettings?
    let appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType?
    let homeEfsFileSystemKmsKeyId: Swift.String?
    let subnetIds: [Swift.String]?
    let url: Swift.String?
    let vpcId: Swift.String?
    let kmsKeyId: Swift.String?
    let domainSettings: SageMakerClientTypes.DomainSettings?
    let appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement?
    let securityGroupIdForDomainBoundary: Swift.String?
}

extension DescribeDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appNetworkAccessType = "AppNetworkAccessType"
        case appSecurityGroupManagement = "AppSecurityGroupManagement"
        case authMode = "AuthMode"
        case creationTime = "CreationTime"
        case defaultUserSettings = "DefaultUserSettings"
        case domainArn = "DomainArn"
        case domainId = "DomainId"
        case domainName = "DomainName"
        case domainSettings = "DomainSettings"
        case failureReason = "FailureReason"
        case homeEfsFileSystemId = "HomeEfsFileSystemId"
        case homeEfsFileSystemKmsKeyId = "HomeEfsFileSystemKmsKeyId"
        case kmsKeyId = "KmsKeyId"
        case lastModifiedTime = "LastModifiedTime"
        case securityGroupIdForDomainBoundary = "SecurityGroupIdForDomainBoundary"
        case singleSignOnManagedApplicationInstanceId = "SingleSignOnManagedApplicationInstanceId"
        case status = "Status"
        case subnetIds = "SubnetIds"
        case url = "Url"
        case vpcId = "VpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let homeEfsFileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeEfsFileSystemId)
        homeEfsFileSystemId = homeEfsFileSystemIdDecoded
        let singleSignOnManagedApplicationInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .singleSignOnManagedApplicationInstanceId)
        singleSignOnManagedApplicationInstanceId = singleSignOnManagedApplicationInstanceIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DomainStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let defaultUserSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserSettings.self, forKey: .defaultUserSettings)
        defaultUserSettings = defaultUserSettingsDecoded
        let appNetworkAccessTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppNetworkAccessType.self, forKey: .appNetworkAccessType)
        appNetworkAccessType = appNetworkAccessTypeDecoded
        let homeEfsFileSystemKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeEfsFileSystemKmsKeyId)
        homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let domainSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DomainSettings.self, forKey: .domainSettings)
        domainSettings = domainSettingsDecoded
        let appSecurityGroupManagementDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppSecurityGroupManagement.self, forKey: .appSecurityGroupManagement)
        appSecurityGroupManagement = appSecurityGroupManagementDecoded
        let securityGroupIdForDomainBoundaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityGroupIdForDomainBoundary)
        securityGroupIdForDomainBoundary = securityGroupIdForDomainBoundaryDecoded
    }
}

extension DescribeEdgePackagingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edgePackagingJobName = "EdgePackagingJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let edgePackagingJobName = edgePackagingJobName {
            try encodeContainer.encode(edgePackagingJobName, forKey: .edgePackagingJobName)
        }
    }
}

extension DescribeEdgePackagingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEdgePackagingJobInput: Swift.Equatable {
    /// The name of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobName: Swift.String?

    public init (
        edgePackagingJobName: Swift.String? = nil
    )
    {
        self.edgePackagingJobName = edgePackagingJobName
    }
}

struct DescribeEdgePackagingJobInputBody: Swift.Equatable {
    let edgePackagingJobName: Swift.String?
}

extension DescribeEdgePackagingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edgePackagingJobName = "EdgePackagingJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgePackagingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobName)
        edgePackagingJobName = edgePackagingJobNameDecoded
    }
}

extension DescribeEdgePackagingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEdgePackagingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEdgePackagingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEdgePackagingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeEdgePackagingJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compilationJobName = output.compilationJobName
            self.creationTime = output.creationTime
            self.edgePackagingJobArn = output.edgePackagingJobArn
            self.edgePackagingJobName = output.edgePackagingJobName
            self.edgePackagingJobStatus = output.edgePackagingJobStatus
            self.edgePackagingJobStatusMessage = output.edgePackagingJobStatusMessage
            self.lastModifiedTime = output.lastModifiedTime
            self.modelArtifact = output.modelArtifact
            self.modelName = output.modelName
            self.modelSignature = output.modelSignature
            self.modelVersion = output.modelVersion
            self.outputConfig = output.outputConfig
            self.presetDeploymentOutput = output.presetDeploymentOutput
            self.resourceKey = output.resourceKey
            self.roleArn = output.roleArn
        } else {
            self.compilationJobName = nil
            self.creationTime = nil
            self.edgePackagingJobArn = nil
            self.edgePackagingJobName = nil
            self.edgePackagingJobStatus = nil
            self.edgePackagingJobStatusMessage = nil
            self.lastModifiedTime = nil
            self.modelArtifact = nil
            self.modelName = nil
            self.modelSignature = nil
            self.modelVersion = nil
            self.outputConfig = nil
            self.presetDeploymentOutput = nil
            self.resourceKey = nil
            self.roleArn = nil
        }
    }
}

public struct DescribeEdgePackagingJobOutputResponse: Swift.Equatable {
    /// The name of the SageMaker Neo compilation job that is used to locate model artifacts that are being packaged.
    public var compilationJobName: Swift.String?
    /// The timestamp of when the packaging job was created.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobArn: Swift.String?
    /// The name of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobName: Swift.String?
    /// The current status of the packaging job.
    /// This member is required.
    public var edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus?
    /// Returns a message describing the job status and error messages.
    public var edgePackagingJobStatusMessage: Swift.String?
    /// The timestamp of when the job was last updated.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Simple Storage (S3) URI where model artifacts ares stored.
    public var modelArtifact: Swift.String?
    /// The name of the model.
    public var modelName: Swift.String?
    /// The signature document of files in the model artifact.
    public var modelSignature: Swift.String?
    /// The version of the model.
    public var modelVersion: Swift.String?
    /// The output configuration for the edge packaging job.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The output of a SageMaker Edge Manager deployable resource.
    public var presetDeploymentOutput: SageMakerClientTypes.EdgePresetDeploymentOutput?
    /// The Amazon Web Services KMS key to use when encrypting the EBS volume the job run on.
    public var resourceKey: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact Neo.
    public var roleArn: Swift.String?

    public init (
        compilationJobName: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        edgePackagingJobArn: Swift.String? = nil,
        edgePackagingJobName: Swift.String? = nil,
        edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus? = nil,
        edgePackagingJobStatusMessage: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        modelArtifact: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelSignature: Swift.String? = nil,
        modelVersion: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        presetDeploymentOutput: SageMakerClientTypes.EdgePresetDeploymentOutput? = nil,
        resourceKey: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.compilationJobName = compilationJobName
        self.creationTime = creationTime
        self.edgePackagingJobArn = edgePackagingJobArn
        self.edgePackagingJobName = edgePackagingJobName
        self.edgePackagingJobStatus = edgePackagingJobStatus
        self.edgePackagingJobStatusMessage = edgePackagingJobStatusMessage
        self.lastModifiedTime = lastModifiedTime
        self.modelArtifact = modelArtifact
        self.modelName = modelName
        self.modelSignature = modelSignature
        self.modelVersion = modelVersion
        self.outputConfig = outputConfig
        self.presetDeploymentOutput = presetDeploymentOutput
        self.resourceKey = resourceKey
        self.roleArn = roleArn
    }
}

struct DescribeEdgePackagingJobOutputResponseBody: Swift.Equatable {
    let edgePackagingJobArn: Swift.String?
    let edgePackagingJobName: Swift.String?
    let compilationJobName: Swift.String?
    let modelName: Swift.String?
    let modelVersion: Swift.String?
    let roleArn: Swift.String?
    let outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    let resourceKey: Swift.String?
    let edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus?
    let edgePackagingJobStatusMessage: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let modelArtifact: Swift.String?
    let modelSignature: Swift.String?
    let presetDeploymentOutput: SageMakerClientTypes.EdgePresetDeploymentOutput?
}

extension DescribeEdgePackagingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
        case creationTime = "CreationTime"
        case edgePackagingJobArn = "EdgePackagingJobArn"
        case edgePackagingJobName = "EdgePackagingJobName"
        case edgePackagingJobStatus = "EdgePackagingJobStatus"
        case edgePackagingJobStatusMessage = "EdgePackagingJobStatusMessage"
        case lastModifiedTime = "LastModifiedTime"
        case modelArtifact = "ModelArtifact"
        case modelName = "ModelName"
        case modelSignature = "ModelSignature"
        case modelVersion = "ModelVersion"
        case outputConfig = "OutputConfig"
        case presetDeploymentOutput = "PresetDeploymentOutput"
        case resourceKey = "ResourceKey"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgePackagingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobArn)
        edgePackagingJobArn = edgePackagingJobArnDecoded
        let edgePackagingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobName)
        edgePackagingJobName = edgePackagingJobNameDecoded
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgeOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let resourceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceKey)
        resourceKey = resourceKeyDecoded
        let edgePackagingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgePackagingJobStatus.self, forKey: .edgePackagingJobStatus)
        edgePackagingJobStatus = edgePackagingJobStatusDecoded
        let edgePackagingJobStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobStatusMessage)
        edgePackagingJobStatusMessage = edgePackagingJobStatusMessageDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let modelArtifactDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArtifact)
        modelArtifact = modelArtifactDecoded
        let modelSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelSignature)
        modelSignature = modelSignatureDecoded
        let presetDeploymentOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgePresetDeploymentOutput.self, forKey: .presetDeploymentOutput)
        presetDeploymentOutput = presetDeploymentOutputDecoded
    }
}

extension DescribeEndpointConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointConfigName = "EndpointConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointConfigName = endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
    }
}

extension DescribeEndpointConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEndpointConfigInput: Swift.Equatable {
    /// The name of the endpoint configuration.
    /// This member is required.
    public var endpointConfigName: Swift.String?

    public init (
        endpointConfigName: Swift.String? = nil
    )
    {
        self.endpointConfigName = endpointConfigName
    }
}

struct DescribeEndpointConfigInputBody: Swift.Equatable {
    let endpointConfigName: Swift.String?
}

extension DescribeEndpointConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointConfigName = "EndpointConfigName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
    }
}

extension DescribeEndpointConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEndpointConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEndpointConfigOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEndpointConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeEndpointConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.asyncInferenceConfig = output.asyncInferenceConfig
            self.creationTime = output.creationTime
            self.dataCaptureConfig = output.dataCaptureConfig
            self.endpointConfigArn = output.endpointConfigArn
            self.endpointConfigName = output.endpointConfigName
            self.kmsKeyId = output.kmsKeyId
            self.productionVariants = output.productionVariants
        } else {
            self.asyncInferenceConfig = nil
            self.creationTime = nil
            self.dataCaptureConfig = nil
            self.endpointConfigArn = nil
            self.endpointConfigName = nil
            self.kmsKeyId = nil
            self.productionVariants = nil
        }
    }
}

public struct DescribeEndpointConfigOutputResponse: Swift.Equatable {
    /// Returns the description of an endpoint configuration created using the [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html) API.
    public var asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
    /// A timestamp that shows when the endpoint configuration was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    ///
    public var dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig?
    /// The Amazon Resource Name (ARN) of the endpoint configuration.
    /// This member is required.
    public var endpointConfigArn: Swift.String?
    /// Name of the Amazon SageMaker endpoint configuration.
    /// This member is required.
    public var endpointConfigName: Swift.String?
    /// Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.
    public var kmsKeyId: Swift.String?
    /// An array of ProductionVariant objects, one for each model that you want to host at this endpoint.
    /// This member is required.
    public var productionVariants: [SageMakerClientTypes.ProductionVariant]?

    public init (
        asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig? = nil,
        creationTime: ClientRuntime.Date? = nil,
        dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig? = nil,
        endpointConfigArn: Swift.String? = nil,
        endpointConfigName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        productionVariants: [SageMakerClientTypes.ProductionVariant]? = nil
    )
    {
        self.asyncInferenceConfig = asyncInferenceConfig
        self.creationTime = creationTime
        self.dataCaptureConfig = dataCaptureConfig
        self.endpointConfigArn = endpointConfigArn
        self.endpointConfigName = endpointConfigName
        self.kmsKeyId = kmsKeyId
        self.productionVariants = productionVariants
    }
}

struct DescribeEndpointConfigOutputResponseBody: Swift.Equatable {
    let endpointConfigName: Swift.String?
    let endpointConfigArn: Swift.String?
    let productionVariants: [SageMakerClientTypes.ProductionVariant]?
    let dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig?
    let kmsKeyId: Swift.String?
    let creationTime: ClientRuntime.Date?
    let asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
}

extension DescribeEndpointConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asyncInferenceConfig = "AsyncInferenceConfig"
        case creationTime = "CreationTime"
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointConfigArn = "EndpointConfigArn"
        case endpointConfigName = "EndpointConfigName"
        case kmsKeyId = "KmsKeyId"
        case productionVariants = "ProductionVariants"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let endpointConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigArn)
        endpointConfigArn = endpointConfigArnDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariant?].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[SageMakerClientTypes.ProductionVariant]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [SageMakerClientTypes.ProductionVariant]()
            for structure0 in productionVariantsContainer {
                if let structure0 = structure0 {
                    productionVariantsDecoded0?.append(structure0)
                }
            }
        }
        productionVariants = productionVariantsDecoded0
        let dataCaptureConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataCaptureConfig.self, forKey: .dataCaptureConfig)
        dataCaptureConfig = dataCaptureConfigDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let asyncInferenceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AsyncInferenceConfig.self, forKey: .asyncInferenceConfig)
        asyncInferenceConfig = asyncInferenceConfigDecoded
    }
}

extension DescribeEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
    }
}

extension DescribeEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEndpointInput: Swift.Equatable {
    /// The name of the endpoint.
    /// This member is required.
    public var endpointName: Swift.String?

    public init (
        endpointName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
    }
}

struct DescribeEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
}

extension DescribeEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
    }
}

extension DescribeEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEndpointOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.asyncInferenceConfig = output.asyncInferenceConfig
            self.creationTime = output.creationTime
            self.dataCaptureConfig = output.dataCaptureConfig
            self.endpointArn = output.endpointArn
            self.endpointConfigName = output.endpointConfigName
            self.endpointName = output.endpointName
            self.endpointStatus = output.endpointStatus
            self.failureReason = output.failureReason
            self.lastDeploymentConfig = output.lastDeploymentConfig
            self.lastModifiedTime = output.lastModifiedTime
            self.pendingDeploymentSummary = output.pendingDeploymentSummary
            self.productionVariants = output.productionVariants
        } else {
            self.asyncInferenceConfig = nil
            self.creationTime = nil
            self.dataCaptureConfig = nil
            self.endpointArn = nil
            self.endpointConfigName = nil
            self.endpointName = nil
            self.endpointStatus = nil
            self.failureReason = nil
            self.lastDeploymentConfig = nil
            self.lastModifiedTime = nil
            self.pendingDeploymentSummary = nil
            self.productionVariants = nil
        }
    }
}

public struct DescribeEndpointOutputResponse: Swift.Equatable {
    /// Returns the description of an endpoint configuration created using the [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html) API.
    public var asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
    /// A timestamp that shows when the endpoint was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    ///
    public var dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary?
    /// The Amazon Resource Name (ARN) of the endpoint.
    /// This member is required.
    public var endpointArn: Swift.String?
    /// The name of the endpoint configuration associated with this endpoint.
    /// This member is required.
    public var endpointConfigName: Swift.String?
    /// Name of the endpoint.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    ///
    /// * OutOfService: Endpoint is not available to take incoming requests.
    ///
    /// * Creating: [CreateEndpoint] is executing.
    ///
    /// * Updating: [UpdateEndpoint] or [UpdateEndpointWeightsAndCapacities] is executing.
    ///
    /// * SystemUpdating: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.
    ///
    /// * RollingBack: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an InService status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an [UpdateEndpointWeightsAndCapacities] call or when the [UpdateEndpointWeightsAndCapacities] operation is called explicitly.
    ///
    /// * InService: Endpoint is available to process incoming requests.
    ///
    /// * Deleting: [DeleteEndpoint] is executing.
    ///
    /// * Failed: Endpoint could not be created, updated, or re-scaled. Use [DescribeEndpointOutput$FailureReason] for information about the failure. [DeleteEndpoint] is the only operation that can be performed on a failed endpoint.
    /// This member is required.
    public var endpointStatus: SageMakerClientTypes.EndpointStatus?
    /// If the status of the endpoint is Failed, the reason why it failed.
    public var failureReason: Swift.String?
    /// The most recent deployment configuration for the endpoint.
    public var lastDeploymentConfig: SageMakerClientTypes.DeploymentConfig?
    /// A timestamp that shows when the endpoint was last modified.
    /// This member is required.
    public var lastModifiedTime: ClientRuntime.Date?
    /// Returns the summary of an in-progress deployment. This field is only returned when the endpoint is creating or updating with a new endpoint configuration.
    public var pendingDeploymentSummary: SageMakerClientTypes.PendingDeploymentSummary?
    /// An array of [ProductionVariantSummary] objects, one for each model hosted behind this endpoint.
    public var productionVariants: [SageMakerClientTypes.ProductionVariantSummary]?

    public init (
        asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig? = nil,
        creationTime: ClientRuntime.Date? = nil,
        dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary? = nil,
        endpointArn: Swift.String? = nil,
        endpointConfigName: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: SageMakerClientTypes.EndpointStatus? = nil,
        failureReason: Swift.String? = nil,
        lastDeploymentConfig: SageMakerClientTypes.DeploymentConfig? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        pendingDeploymentSummary: SageMakerClientTypes.PendingDeploymentSummary? = nil,
        productionVariants: [SageMakerClientTypes.ProductionVariantSummary]? = nil
    )
    {
        self.asyncInferenceConfig = asyncInferenceConfig
        self.creationTime = creationTime
        self.dataCaptureConfig = dataCaptureConfig
        self.endpointArn = endpointArn
        self.endpointConfigName = endpointConfigName
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.failureReason = failureReason
        self.lastDeploymentConfig = lastDeploymentConfig
        self.lastModifiedTime = lastModifiedTime
        self.pendingDeploymentSummary = pendingDeploymentSummary
        self.productionVariants = productionVariants
    }
}

struct DescribeEndpointOutputResponseBody: Swift.Equatable {
    let endpointName: Swift.String?
    let endpointArn: Swift.String?
    let endpointConfigName: Swift.String?
    let productionVariants: [SageMakerClientTypes.ProductionVariantSummary]?
    let dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary?
    let endpointStatus: SageMakerClientTypes.EndpointStatus?
    let failureReason: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let lastDeploymentConfig: SageMakerClientTypes.DeploymentConfig?
    let asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
    let pendingDeploymentSummary: SageMakerClientTypes.PendingDeploymentSummary?
}

extension DescribeEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asyncInferenceConfig = "AsyncInferenceConfig"
        case creationTime = "CreationTime"
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointArn = "EndpointArn"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case failureReason = "FailureReason"
        case lastDeploymentConfig = "LastDeploymentConfig"
        case lastModifiedTime = "LastModifiedTime"
        case pendingDeploymentSummary = "PendingDeploymentSummary"
        case productionVariants = "ProductionVariants"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariantSummary?].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[SageMakerClientTypes.ProductionVariantSummary]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [SageMakerClientTypes.ProductionVariantSummary]()
            for structure0 in productionVariantsContainer {
                if let structure0 = structure0 {
                    productionVariantsDecoded0?.append(structure0)
                }
            }
        }
        productionVariants = productionVariantsDecoded0
        let dataCaptureConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataCaptureConfigSummary.self, forKey: .dataCaptureConfig)
        dataCaptureConfig = dataCaptureConfigDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointStatus.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastDeploymentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DeploymentConfig.self, forKey: .lastDeploymentConfig)
        lastDeploymentConfig = lastDeploymentConfigDecoded
        let asyncInferenceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AsyncInferenceConfig.self, forKey: .asyncInferenceConfig)
        asyncInferenceConfig = asyncInferenceConfigDecoded
        let pendingDeploymentSummaryDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PendingDeploymentSummary.self, forKey: .pendingDeploymentSummary)
        pendingDeploymentSummary = pendingDeploymentSummaryDecoded
    }
}

extension DescribeExperimentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentName = "ExperimentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
    }
}

extension DescribeExperimentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeExperimentInput: Swift.Equatable {
    /// The name of the experiment to describe.
    /// This member is required.
    public var experimentName: Swift.String?

    public init (
        experimentName: Swift.String? = nil
    )
    {
        self.experimentName = experimentName
    }
}

struct DescribeExperimentInputBody: Swift.Equatable {
    let experimentName: Swift.String?
}

extension DescribeExperimentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentName = "ExperimentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
    }
}

extension DescribeExperimentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeExperimentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeExperimentOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeExperimentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeExperimentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.description = output.description
            self.displayName = output.displayName
            self.experimentArn = output.experimentArn
            self.experimentName = output.experimentName
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.source = output.source
        } else {
            self.createdBy = nil
            self.creationTime = nil
            self.description = nil
            self.displayName = nil
            self.experimentArn = nil
            self.experimentName = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.source = nil
        }
    }
}

public struct DescribeExperimentOutputResponse: Swift.Equatable {
    /// Who created the experiment.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the experiment was created.
    public var creationTime: ClientRuntime.Date?
    /// The description of the experiment.
    public var description: Swift.String?
    /// The name of the experiment as displayed. If DisplayName isn't specified, ExperimentName is displayed.
    public var displayName: Swift.String?
    /// The Amazon Resource Name (ARN) of the experiment.
    public var experimentArn: Swift.String?
    /// The name of the experiment.
    public var experimentName: Swift.String?
    /// Who last modified the experiment.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the experiment was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The ARN of the source and, optionally, the type.
    public var source: SageMakerClientTypes.ExperimentSource?

    public init (
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        experimentArn: Swift.String? = nil,
        experimentName: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        source: SageMakerClientTypes.ExperimentSource? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.description = description
        self.displayName = displayName
        self.experimentArn = experimentArn
        self.experimentName = experimentName
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.source = source
    }
}

struct DescribeExperimentOutputResponseBody: Swift.Equatable {
    let experimentName: Swift.String?
    let experimentArn: Swift.String?
    let displayName: Swift.String?
    let source: SageMakerClientTypes.ExperimentSource?
    let description: Swift.String?
    let creationTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
}

extension DescribeExperimentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case description = "Description"
        case displayName = "DisplayName"
        case experimentArn = "ExperimentArn"
        case experimentName = "ExperimentName"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case source = "Source"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let experimentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentArn)
        experimentArn = experimentArnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentSource.self, forKey: .source)
        source = sourceDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
    }
}

extension DescribeFeatureGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureGroupName = "FeatureGroupName"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let featureGroupName = featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeFeatureGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFeatureGroupInput: Swift.Equatable {
    /// The name of the FeatureGroup you want described.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// A token to resume pagination of the list of Features (FeatureDefinitions). 2,500 Features are returned by default.
    public var nextToken: Swift.String?

    public init (
        featureGroupName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.featureGroupName = featureGroupName
        self.nextToken = nextToken
    }
}

struct DescribeFeatureGroupInputBody: Swift.Equatable {
    let featureGroupName: Swift.String?
    let nextToken: Swift.String?
}

extension DescribeFeatureGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureGroupName = "FeatureGroupName"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFeatureGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFeatureGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFeatureGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFeatureGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeFeatureGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.description = output.description
            self.eventTimeFeatureName = output.eventTimeFeatureName
            self.failureReason = output.failureReason
            self.featureDefinitions = output.featureDefinitions
            self.featureGroupArn = output.featureGroupArn
            self.featureGroupName = output.featureGroupName
            self.featureGroupStatus = output.featureGroupStatus
            self.nextToken = output.nextToken
            self.offlineStoreConfig = output.offlineStoreConfig
            self.offlineStoreStatus = output.offlineStoreStatus
            self.onlineStoreConfig = output.onlineStoreConfig
            self.recordIdentifierFeatureName = output.recordIdentifierFeatureName
            self.roleArn = output.roleArn
        } else {
            self.creationTime = nil
            self.description = nil
            self.eventTimeFeatureName = nil
            self.failureReason = nil
            self.featureDefinitions = nil
            self.featureGroupArn = nil
            self.featureGroupName = nil
            self.featureGroupStatus = nil
            self.nextToken = nil
            self.offlineStoreConfig = nil
            self.offlineStoreStatus = nil
            self.onlineStoreConfig = nil
            self.recordIdentifierFeatureName = nil
            self.roleArn = nil
        }
    }
}

public struct DescribeFeatureGroupOutputResponse: Swift.Equatable {
    /// A timestamp indicating when SageMaker created the FeatureGroup.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// A free form description of the feature group.
    public var description: Swift.String?
    /// The name of the feature that stores the EventTime of a Record in a FeatureGroup. An EventTime is a point in time when a new event occurs that corresponds to the creation or update of a Record in a FeatureGroup. All Records in the FeatureGroup have a corresponding EventTime.
    /// This member is required.
    public var eventTimeFeatureName: Swift.String?
    /// The reason that the FeatureGroup failed to be replicated in the OfflineStore. This is failure can occur because:
    ///
    /// * The FeatureGroup could not be created in the OfflineStore.
    ///
    /// * The FeatureGroup could not be deleted from the OfflineStore.
    public var failureReason: Swift.String?
    /// A list of the Features in the FeatureGroup. Each feature is defined by a FeatureName and FeatureType.
    /// This member is required.
    public var featureDefinitions: [SageMakerClientTypes.FeatureDefinition]?
    /// The Amazon Resource Name (ARN) of the FeatureGroup.
    /// This member is required.
    public var featureGroupArn: Swift.String?
    /// he name of the FeatureGroup.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// The status of the feature group.
    public var featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus?
    /// A token to resume pagination of the list of Features (FeatureDefinitions).
    /// This member is required.
    public var nextToken: Swift.String?
    /// The configuration of the OfflineStore, inducing the S3 location of the OfflineStore, Amazon Web Services Glue or Amazon Web Services Hive data catalogue configurations, and the security configuration.
    public var offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig?
    /// The status of the OfflineStore. Notifies you if replicating data into the OfflineStore has failed. Returns either: Active or Blocked
    public var offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus?
    /// The configuration for the OnlineStore.
    public var onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig?
    /// The name of the Feature used for RecordIdentifier, whose value uniquely identifies a record stored in the feature store.
    /// This member is required.
    public var recordIdentifierFeatureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the OfflineStore if an OfflineStoreConfig is provided.
    public var roleArn: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        eventTimeFeatureName: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        featureDefinitions: [SageMakerClientTypes.FeatureDefinition]? = nil,
        featureGroupArn: Swift.String? = nil,
        featureGroupName: Swift.String? = nil,
        featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus? = nil,
        nextToken: Swift.String? = nil,
        offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig? = nil,
        offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus? = nil,
        onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig? = nil,
        recordIdentifierFeatureName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.eventTimeFeatureName = eventTimeFeatureName
        self.failureReason = failureReason
        self.featureDefinitions = featureDefinitions
        self.featureGroupArn = featureGroupArn
        self.featureGroupName = featureGroupName
        self.featureGroupStatus = featureGroupStatus
        self.nextToken = nextToken
        self.offlineStoreConfig = offlineStoreConfig
        self.offlineStoreStatus = offlineStoreStatus
        self.onlineStoreConfig = onlineStoreConfig
        self.recordIdentifierFeatureName = recordIdentifierFeatureName
        self.roleArn = roleArn
    }
}

struct DescribeFeatureGroupOutputResponseBody: Swift.Equatable {
    let featureGroupArn: Swift.String?
    let featureGroupName: Swift.String?
    let recordIdentifierFeatureName: Swift.String?
    let eventTimeFeatureName: Swift.String?
    let featureDefinitions: [SageMakerClientTypes.FeatureDefinition]?
    let creationTime: ClientRuntime.Date?
    let onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig?
    let offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig?
    let roleArn: Swift.String?
    let featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus?
    let offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus?
    let failureReason: Swift.String?
    let description: Swift.String?
    let nextToken: Swift.String?
}

extension DescribeFeatureGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case description = "Description"
        case eventTimeFeatureName = "EventTimeFeatureName"
        case failureReason = "FailureReason"
        case featureDefinitions = "FeatureDefinitions"
        case featureGroupArn = "FeatureGroupArn"
        case featureGroupName = "FeatureGroupName"
        case featureGroupStatus = "FeatureGroupStatus"
        case nextToken = "NextToken"
        case offlineStoreConfig = "OfflineStoreConfig"
        case offlineStoreStatus = "OfflineStoreStatus"
        case onlineStoreConfig = "OnlineStoreConfig"
        case recordIdentifierFeatureName = "RecordIdentifierFeatureName"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupArn)
        featureGroupArn = featureGroupArnDecoded
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
        let recordIdentifierFeatureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordIdentifierFeatureName)
        recordIdentifierFeatureName = recordIdentifierFeatureNameDecoded
        let eventTimeFeatureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTimeFeatureName)
        eventTimeFeatureName = eventTimeFeatureNameDecoded
        let featureDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.FeatureDefinition?].self, forKey: .featureDefinitions)
        var featureDefinitionsDecoded0:[SageMakerClientTypes.FeatureDefinition]? = nil
        if let featureDefinitionsContainer = featureDefinitionsContainer {
            featureDefinitionsDecoded0 = [SageMakerClientTypes.FeatureDefinition]()
            for structure0 in featureDefinitionsContainer {
                if let structure0 = structure0 {
                    featureDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        featureDefinitions = featureDefinitionsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let onlineStoreConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OnlineStoreConfig.self, forKey: .onlineStoreConfig)
        onlineStoreConfig = onlineStoreConfigDecoded
        let offlineStoreConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OfflineStoreConfig.self, forKey: .offlineStoreConfig)
        offlineStoreConfig = offlineStoreConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let featureGroupStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureGroupStatus.self, forKey: .featureGroupStatus)
        featureGroupStatus = featureGroupStatusDecoded
        let offlineStoreStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OfflineStoreStatus.self, forKey: .offlineStoreStatus)
        offlineStoreStatus = offlineStoreStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFlowDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowDefinitionName = "FlowDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flowDefinitionName = flowDefinitionName {
            try encodeContainer.encode(flowDefinitionName, forKey: .flowDefinitionName)
        }
    }
}

extension DescribeFlowDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFlowDefinitionInput: Swift.Equatable {
    /// The name of the flow definition.
    /// This member is required.
    public var flowDefinitionName: Swift.String?

    public init (
        flowDefinitionName: Swift.String? = nil
    )
    {
        self.flowDefinitionName = flowDefinitionName
    }
}

struct DescribeFlowDefinitionInputBody: Swift.Equatable {
    let flowDefinitionName: Swift.String?
}

extension DescribeFlowDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowDefinitionName = "FlowDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionName)
        flowDefinitionName = flowDefinitionNameDecoded
    }
}

extension DescribeFlowDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFlowDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFlowDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFlowDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeFlowDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.failureReason = output.failureReason
            self.flowDefinitionArn = output.flowDefinitionArn
            self.flowDefinitionName = output.flowDefinitionName
            self.flowDefinitionStatus = output.flowDefinitionStatus
            self.humanLoopActivationConfig = output.humanLoopActivationConfig
            self.humanLoopConfig = output.humanLoopConfig
            self.humanLoopRequestSource = output.humanLoopRequestSource
            self.outputConfig = output.outputConfig
            self.roleArn = output.roleArn
        } else {
            self.creationTime = nil
            self.failureReason = nil
            self.flowDefinitionArn = nil
            self.flowDefinitionName = nil
            self.flowDefinitionStatus = nil
            self.humanLoopActivationConfig = nil
            self.humanLoopConfig = nil
            self.humanLoopRequestSource = nil
            self.outputConfig = nil
            self.roleArn = nil
        }
    }
}

public struct DescribeFlowDefinitionOutputResponse: Swift.Equatable {
    /// The timestamp when the flow definition was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The reason your flow definition failed.
    public var failureReason: Swift.String?
    /// The Amazon Resource Name (ARN) of the flow defintion.
    /// This member is required.
    public var flowDefinitionArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the flow definition.
    /// This member is required.
    public var flowDefinitionName: Swift.String?
    /// The status of the flow definition. Valid values are listed below.
    /// This member is required.
    public var flowDefinitionStatus: SageMakerClientTypes.FlowDefinitionStatus?
    /// An object containing information about what triggers a human review workflow.
    public var humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig?
    /// An object containing information about who works on the task, the workforce task price, and other task details.
    /// This member is required.
    public var humanLoopConfig: SageMakerClientTypes.HumanLoopConfig?
    /// Container for configuring the source of human task requests. Used to specify if Amazon Rekognition or Amazon Textract is used as an integration source.
    public var humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource?
    /// An object containing information about the output file.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) execution role for the flow definition.
    /// This member is required.
    public var roleArn: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        failureReason: Swift.String? = nil,
        flowDefinitionArn: Swift.String? = nil,
        flowDefinitionName: Swift.String? = nil,
        flowDefinitionStatus: SageMakerClientTypes.FlowDefinitionStatus? = nil,
        humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig? = nil,
        humanLoopConfig: SageMakerClientTypes.HumanLoopConfig? = nil,
        humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource? = nil,
        outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.flowDefinitionArn = flowDefinitionArn
        self.flowDefinitionName = flowDefinitionName
        self.flowDefinitionStatus = flowDefinitionStatus
        self.humanLoopActivationConfig = humanLoopActivationConfig
        self.humanLoopConfig = humanLoopConfig
        self.humanLoopRequestSource = humanLoopRequestSource
        self.outputConfig = outputConfig
        self.roleArn = roleArn
    }
}

struct DescribeFlowDefinitionOutputResponseBody: Swift.Equatable {
    let flowDefinitionArn: Swift.String?
    let flowDefinitionName: Swift.String?
    let flowDefinitionStatus: SageMakerClientTypes.FlowDefinitionStatus?
    let creationTime: ClientRuntime.Date?
    let humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource?
    let humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig?
    let humanLoopConfig: SageMakerClientTypes.HumanLoopConfig?
    let outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig?
    let roleArn: Swift.String?
    let failureReason: Swift.String?
}

extension DescribeFlowDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case flowDefinitionArn = "FlowDefinitionArn"
        case flowDefinitionName = "FlowDefinitionName"
        case flowDefinitionStatus = "FlowDefinitionStatus"
        case humanLoopActivationConfig = "HumanLoopActivationConfig"
        case humanLoopConfig = "HumanLoopConfig"
        case humanLoopRequestSource = "HumanLoopRequestSource"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionArn)
        flowDefinitionArn = flowDefinitionArnDecoded
        let flowDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionName)
        flowDefinitionName = flowDefinitionNameDecoded
        let flowDefinitionStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FlowDefinitionStatus.self, forKey: .flowDefinitionStatus)
        flowDefinitionStatus = flowDefinitionStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let humanLoopRequestSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanLoopRequestSource.self, forKey: .humanLoopRequestSource)
        humanLoopRequestSource = humanLoopRequestSourceDecoded
        let humanLoopActivationConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanLoopActivationConfig.self, forKey: .humanLoopActivationConfig)
        humanLoopActivationConfig = humanLoopActivationConfigDecoded
        let humanLoopConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanLoopConfig.self, forKey: .humanLoopConfig)
        humanLoopConfig = humanLoopConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FlowDefinitionOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension DescribeHumanTaskUiInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiName = "HumanTaskUiName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskUiName = humanTaskUiName {
            try encodeContainer.encode(humanTaskUiName, forKey: .humanTaskUiName)
        }
    }
}

extension DescribeHumanTaskUiInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeHumanTaskUiInput: Swift.Equatable {
    /// The name of the human task user interface (worker task template) you want information about.
    /// This member is required.
    public var humanTaskUiName: Swift.String?

    public init (
        humanTaskUiName: Swift.String? = nil
    )
    {
        self.humanTaskUiName = humanTaskUiName
    }
}

struct DescribeHumanTaskUiInputBody: Swift.Equatable {
    let humanTaskUiName: Swift.String?
}

extension DescribeHumanTaskUiInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiName = "HumanTaskUiName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanTaskUiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiName)
        humanTaskUiName = humanTaskUiNameDecoded
    }
}

extension DescribeHumanTaskUiOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeHumanTaskUiOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeHumanTaskUiOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeHumanTaskUiOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeHumanTaskUiOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.humanTaskUiArn = output.humanTaskUiArn
            self.humanTaskUiName = output.humanTaskUiName
            self.humanTaskUiStatus = output.humanTaskUiStatus
            self.uiTemplate = output.uiTemplate
        } else {
            self.creationTime = nil
            self.humanTaskUiArn = nil
            self.humanTaskUiName = nil
            self.humanTaskUiStatus = nil
            self.uiTemplate = nil
        }
    }
}

public struct DescribeHumanTaskUiOutputResponse: Swift.Equatable {
    /// The timestamp when the human task user interface was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the human task user interface (worker task template).
    /// This member is required.
    public var humanTaskUiArn: Swift.String?
    /// The name of the human task user interface (worker task template).
    /// This member is required.
    public var humanTaskUiName: Swift.String?
    /// The status of the human task user interface (worker task template). Valid values are listed below.
    public var humanTaskUiStatus: SageMakerClientTypes.HumanTaskUiStatus?
    /// Container for user interface template information.
    /// This member is required.
    public var uiTemplate: SageMakerClientTypes.UiTemplateInfo?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        humanTaskUiArn: Swift.String? = nil,
        humanTaskUiName: Swift.String? = nil,
        humanTaskUiStatus: SageMakerClientTypes.HumanTaskUiStatus? = nil,
        uiTemplate: SageMakerClientTypes.UiTemplateInfo? = nil
    )
    {
        self.creationTime = creationTime
        self.humanTaskUiArn = humanTaskUiArn
        self.humanTaskUiName = humanTaskUiName
        self.humanTaskUiStatus = humanTaskUiStatus
        self.uiTemplate = uiTemplate
    }
}

struct DescribeHumanTaskUiOutputResponseBody: Swift.Equatable {
    let humanTaskUiArn: Swift.String?
    let humanTaskUiName: Swift.String?
    let humanTaskUiStatus: SageMakerClientTypes.HumanTaskUiStatus?
    let creationTime: ClientRuntime.Date?
    let uiTemplate: SageMakerClientTypes.UiTemplateInfo?
}

extension DescribeHumanTaskUiOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case humanTaskUiArn = "HumanTaskUiArn"
        case humanTaskUiName = "HumanTaskUiName"
        case humanTaskUiStatus = "HumanTaskUiStatus"
        case uiTemplate = "UiTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanTaskUiArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiArn)
        humanTaskUiArn = humanTaskUiArnDecoded
        let humanTaskUiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiName)
        humanTaskUiName = humanTaskUiNameDecoded
        let humanTaskUiStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanTaskUiStatus.self, forKey: .humanTaskUiStatus)
        humanTaskUiStatus = humanTaskUiStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let uiTemplateDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UiTemplateInfo.self, forKey: .uiTemplate)
        uiTemplate = uiTemplateDecoded
    }
}

extension DescribeHyperParameterTuningJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hyperParameterTuningJobName = hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
    }
}

extension DescribeHyperParameterTuningJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeHyperParameterTuningJobInput: Swift.Equatable {
    /// The name of the tuning job.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?

    public init (
        hyperParameterTuningJobName: Swift.String? = nil
    )
    {
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
    }
}

struct DescribeHyperParameterTuningJobInputBody: Swift.Equatable {
    let hyperParameterTuningJobName: Swift.String?
}

extension DescribeHyperParameterTuningJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
    }
}

extension DescribeHyperParameterTuningJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeHyperParameterTuningJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeHyperParameterTuningJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeHyperParameterTuningJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeHyperParameterTuningJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bestTrainingJob = output.bestTrainingJob
            self.creationTime = output.creationTime
            self.failureReason = output.failureReason
            self.hyperParameterTuningEndTime = output.hyperParameterTuningEndTime
            self.hyperParameterTuningJobArn = output.hyperParameterTuningJobArn
            self.hyperParameterTuningJobConfig = output.hyperParameterTuningJobConfig
            self.hyperParameterTuningJobName = output.hyperParameterTuningJobName
            self.hyperParameterTuningJobStatus = output.hyperParameterTuningJobStatus
            self.lastModifiedTime = output.lastModifiedTime
            self.objectiveStatusCounters = output.objectiveStatusCounters
            self.overallBestTrainingJob = output.overallBestTrainingJob
            self.trainingJobDefinition = output.trainingJobDefinition
            self.trainingJobDefinitions = output.trainingJobDefinitions
            self.trainingJobStatusCounters = output.trainingJobStatusCounters
            self.warmStartConfig = output.warmStartConfig
        } else {
            self.bestTrainingJob = nil
            self.creationTime = nil
            self.failureReason = nil
            self.hyperParameterTuningEndTime = nil
            self.hyperParameterTuningJobArn = nil
            self.hyperParameterTuningJobConfig = nil
            self.hyperParameterTuningJobName = nil
            self.hyperParameterTuningJobStatus = nil
            self.lastModifiedTime = nil
            self.objectiveStatusCounters = nil
            self.overallBestTrainingJob = nil
            self.trainingJobDefinition = nil
            self.trainingJobDefinitions = nil
            self.trainingJobStatusCounters = nil
            self.warmStartConfig = nil
        }
    }
}

public struct DescribeHyperParameterTuningJobOutputResponse: Swift.Equatable {
    /// A [TrainingJobSummary] object that describes the training job that completed with the best current [HyperParameterTuningJobObjective].
    public var bestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
    /// The date and time that the tuning job started.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// If the tuning job failed, the reason it failed.
    public var failureReason: Swift.String?
    /// The date and time that the tuning job ended.
    public var hyperParameterTuningEndTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the tuning job.
    /// This member is required.
    public var hyperParameterTuningJobArn: Swift.String?
    /// The [HyperParameterTuningJobConfig] object that specifies the configuration of the tuning job.
    /// This member is required.
    public var hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig?
    /// The name of the tuning job.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?
    /// The status of the tuning job: InProgress, Completed, Failed, Stopping, or Stopped.
    /// This member is required.
    public var hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus?
    /// The date and time that the status of the tuning job was modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The [ObjectiveStatusCounters] object that specifies the number of training jobs, categorized by the status of their final objective metric, that this tuning job launched.
    /// This member is required.
    public var objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters?
    /// If the hyperparameter tuning job is an warm start tuning job with a WarmStartType of IDENTICAL_DATA_AND_ALGORITHM, this is the [TrainingJobSummary] for the training job with the best objective metric value of all training jobs launched by this tuning job and all parent jobs specified for the warm start tuning job.
    public var overallBestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
    /// The [HyperParameterTrainingJobDefinition] object that specifies the definition of the training jobs that this tuning job launches.
    public var trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition?
    /// A list of the [HyperParameterTrainingJobDefinition] objects launched for this tuning job.
    public var trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]?
    /// The [TrainingJobStatusCounters] object that specifies the number of training jobs, categorized by status, that this tuning job launched.
    /// This member is required.
    public var trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters?
    /// The configuration for starting the hyperparameter parameter tuning job using one or more previous tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.
    public var warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig?

    public init (
        bestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary? = nil,
        creationTime: ClientRuntime.Date? = nil,
        failureReason: Swift.String? = nil,
        hyperParameterTuningEndTime: ClientRuntime.Date? = nil,
        hyperParameterTuningJobArn: Swift.String? = nil,
        hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig? = nil,
        hyperParameterTuningJobName: Swift.String? = nil,
        hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters? = nil,
        overallBestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary? = nil,
        trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition? = nil,
        trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]? = nil,
        trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters? = nil,
        warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig? = nil
    )
    {
        self.bestTrainingJob = bestTrainingJob
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.hyperParameterTuningEndTime = hyperParameterTuningEndTime
        self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
        self.hyperParameterTuningJobConfig = hyperParameterTuningJobConfig
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
        self.hyperParameterTuningJobStatus = hyperParameterTuningJobStatus
        self.lastModifiedTime = lastModifiedTime
        self.objectiveStatusCounters = objectiveStatusCounters
        self.overallBestTrainingJob = overallBestTrainingJob
        self.trainingJobDefinition = trainingJobDefinition
        self.trainingJobDefinitions = trainingJobDefinitions
        self.trainingJobStatusCounters = trainingJobStatusCounters
        self.warmStartConfig = warmStartConfig
    }
}

struct DescribeHyperParameterTuningJobOutputResponseBody: Swift.Equatable {
    let hyperParameterTuningJobName: Swift.String?
    let hyperParameterTuningJobArn: Swift.String?
    let hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig?
    let trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition?
    let trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]?
    let hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus?
    let creationTime: ClientRuntime.Date?
    let hyperParameterTuningEndTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters?
    let objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters?
    let bestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
    let overallBestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
    let warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig?
    let failureReason: Swift.String?
}

extension DescribeHyperParameterTuningJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bestTrainingJob = "BestTrainingJob"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case hyperParameterTuningEndTime = "HyperParameterTuningEndTime"
        case hyperParameterTuningJobArn = "HyperParameterTuningJobArn"
        case hyperParameterTuningJobConfig = "HyperParameterTuningJobConfig"
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case hyperParameterTuningJobStatus = "HyperParameterTuningJobStatus"
        case lastModifiedTime = "LastModifiedTime"
        case objectiveStatusCounters = "ObjectiveStatusCounters"
        case overallBestTrainingJob = "OverallBestTrainingJob"
        case trainingJobDefinition = "TrainingJobDefinition"
        case trainingJobDefinitions = "TrainingJobDefinitions"
        case trainingJobStatusCounters = "TrainingJobStatusCounters"
        case warmStartConfig = "WarmStartConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
        let hyperParameterTuningJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobArn)
        hyperParameterTuningJobArn = hyperParameterTuningJobArnDecoded
        let hyperParameterTuningJobConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobConfig.self, forKey: .hyperParameterTuningJobConfig)
        hyperParameterTuningJobConfig = hyperParameterTuningJobConfigDecoded
        let trainingJobDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobDefinition.self, forKey: .trainingJobDefinition)
        trainingJobDefinition = trainingJobDefinitionDecoded
        let trainingJobDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterTrainingJobDefinition?].self, forKey: .trainingJobDefinitions)
        var trainingJobDefinitionsDecoded0:[SageMakerClientTypes.HyperParameterTrainingJobDefinition]? = nil
        if let trainingJobDefinitionsContainer = trainingJobDefinitionsContainer {
            trainingJobDefinitionsDecoded0 = [SageMakerClientTypes.HyperParameterTrainingJobDefinition]()
            for structure0 in trainingJobDefinitionsContainer {
                if let structure0 = structure0 {
                    trainingJobDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        trainingJobDefinitions = trainingJobDefinitionsDecoded0
        let hyperParameterTuningJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobStatus.self, forKey: .hyperParameterTuningJobStatus)
        hyperParameterTuningJobStatus = hyperParameterTuningJobStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let hyperParameterTuningEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .hyperParameterTuningEndTime)
        hyperParameterTuningEndTime = hyperParameterTuningEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let trainingJobStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatusCounters.self, forKey: .trainingJobStatusCounters)
        trainingJobStatusCounters = trainingJobStatusCountersDecoded
        let objectiveStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ObjectiveStatusCounters.self, forKey: .objectiveStatusCounters)
        objectiveStatusCounters = objectiveStatusCountersDecoded
        let bestTrainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobSummary.self, forKey: .bestTrainingJob)
        bestTrainingJob = bestTrainingJobDecoded
        let overallBestTrainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobSummary.self, forKey: .overallBestTrainingJob)
        overallBestTrainingJob = overallBestTrainingJobDecoded
        let warmStartConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig.self, forKey: .warmStartConfig)
        warmStartConfig = warmStartConfigDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension DescribeImageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageName = "ImageName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
    }
}

extension DescribeImageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeImageInput: Swift.Equatable {
    /// The name of the image to describe.
    /// This member is required.
    public var imageName: Swift.String?

    public init (
        imageName: Swift.String? = nil
    )
    {
        self.imageName = imageName
    }
}

struct DescribeImageInputBody: Swift.Equatable {
    let imageName: Swift.String?
}

extension DescribeImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageName = "ImageName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
    }
}

extension DescribeImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeImageOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeImageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.description = output.description
            self.displayName = output.displayName
            self.failureReason = output.failureReason
            self.imageArn = output.imageArn
            self.imageName = output.imageName
            self.imageStatus = output.imageStatus
            self.lastModifiedTime = output.lastModifiedTime
            self.roleArn = output.roleArn
        } else {
            self.creationTime = nil
            self.description = nil
            self.displayName = nil
            self.failureReason = nil
            self.imageArn = nil
            self.imageName = nil
            self.imageStatus = nil
            self.lastModifiedTime = nil
            self.roleArn = nil
        }
    }
}

public struct DescribeImageOutputResponse: Swift.Equatable {
    /// When the image was created.
    public var creationTime: ClientRuntime.Date?
    /// The description of the image.
    public var description: Swift.String?
    /// The name of the image as displayed.
    public var displayName: Swift.String?
    /// When a create, update, or delete operation fails, the reason for the failure.
    public var failureReason: Swift.String?
    /// The Amazon Resource Name (ARN) of the image.
    public var imageArn: Swift.String?
    /// The name of the image.
    public var imageName: Swift.String?
    /// The status of the image.
    public var imageStatus: SageMakerClientTypes.ImageStatus?
    /// When the image was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the IAM role that enables Amazon SageMaker to perform tasks on your behalf.
    public var roleArn: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        imageArn: Swift.String? = nil,
        imageName: Swift.String? = nil,
        imageStatus: SageMakerClientTypes.ImageStatus? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.displayName = displayName
        self.failureReason = failureReason
        self.imageArn = imageArn
        self.imageName = imageName
        self.imageStatus = imageStatus
        self.lastModifiedTime = lastModifiedTime
        self.roleArn = roleArn
    }
}

struct DescribeImageOutputResponseBody: Swift.Equatable {
    let creationTime: ClientRuntime.Date?
    let description: Swift.String?
    let displayName: Swift.String?
    let failureReason: Swift.String?
    let imageArn: Swift.String?
    let imageName: Swift.String?
    let imageStatus: SageMakerClientTypes.ImageStatus?
    let lastModifiedTime: ClientRuntime.Date?
    let roleArn: Swift.String?
}

extension DescribeImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case description = "Description"
        case displayName = "DisplayName"
        case failureReason = "FailureReason"
        case imageArn = "ImageArn"
        case imageName = "ImageName"
        case imageStatus = "ImageStatus"
        case lastModifiedTime = "LastModifiedTime"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let imageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageArn)
        imageArn = imageArnDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let imageStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageStatus.self, forKey: .imageStatus)
        imageStatus = imageStatusDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension DescribeImageVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageName = "ImageName"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension DescribeImageVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeImageVersionInput: Swift.Equatable {
    /// The name of the image.
    /// This member is required.
    public var imageName: Swift.String?
    /// The version of the image. If not specified, the latest version is described.
    public var version: Swift.Int?

    public init (
        imageName: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.imageName = imageName
        self.version = version
    }
}

struct DescribeImageVersionInputBody: Swift.Equatable {
    let imageName: Swift.String?
    let version: Swift.Int?
}

extension DescribeImageVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageName = "ImageName"
        case version = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension DescribeImageVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeImageVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeImageVersionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeImageVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeImageVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.baseImage = output.baseImage
            self.containerImage = output.containerImage
            self.creationTime = output.creationTime
            self.failureReason = output.failureReason
            self.imageArn = output.imageArn
            self.imageVersionArn = output.imageVersionArn
            self.imageVersionStatus = output.imageVersionStatus
            self.lastModifiedTime = output.lastModifiedTime
            self.version = output.version
        } else {
            self.baseImage = nil
            self.containerImage = nil
            self.creationTime = nil
            self.failureReason = nil
            self.imageArn = nil
            self.imageVersionArn = nil
            self.imageVersionStatus = nil
            self.lastModifiedTime = nil
            self.version = nil
        }
    }
}

public struct DescribeImageVersionOutputResponse: Swift.Equatable {
    /// The registry path of the container image on which this image version is based.
    public var baseImage: Swift.String?
    /// The registry path of the container image that contains this image version.
    public var containerImage: Swift.String?
    /// When the version was created.
    public var creationTime: ClientRuntime.Date?
    /// When a create or delete operation fails, the reason for the failure.
    public var failureReason: Swift.String?
    /// The Amazon Resource Name (ARN) of the image the version is based on.
    public var imageArn: Swift.String?
    /// The ARN of the version.
    public var imageVersionArn: Swift.String?
    /// The status of the version.
    public var imageVersionStatus: SageMakerClientTypes.ImageVersionStatus?
    /// When the version was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The version number.
    public var version: Swift.Int?

    public init (
        baseImage: Swift.String? = nil,
        containerImage: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        failureReason: Swift.String? = nil,
        imageArn: Swift.String? = nil,
        imageVersionArn: Swift.String? = nil,
        imageVersionStatus: SageMakerClientTypes.ImageVersionStatus? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        version: Swift.Int? = nil
    )
    {
        self.baseImage = baseImage
        self.containerImage = containerImage
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.imageArn = imageArn
        self.imageVersionArn = imageVersionArn
        self.imageVersionStatus = imageVersionStatus
        self.lastModifiedTime = lastModifiedTime
        self.version = version
    }
}

struct DescribeImageVersionOutputResponseBody: Swift.Equatable {
    let baseImage: Swift.String?
    let containerImage: Swift.String?
    let creationTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let imageArn: Swift.String?
    let imageVersionArn: Swift.String?
    let imageVersionStatus: SageMakerClientTypes.ImageVersionStatus?
    let lastModifiedTime: ClientRuntime.Date?
    let version: Swift.Int?
}

extension DescribeImageVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseImage = "BaseImage"
        case containerImage = "ContainerImage"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case imageArn = "ImageArn"
        case imageVersionArn = "ImageVersionArn"
        case imageVersionStatus = "ImageVersionStatus"
        case lastModifiedTime = "LastModifiedTime"
        case version = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseImage)
        baseImage = baseImageDecoded
        let containerImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerImage)
        containerImage = containerImageDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let imageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageArn)
        imageArn = imageArnDecoded
        let imageVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageVersionArn)
        imageVersionArn = imageVersionArnDecoded
        let imageVersionStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageVersionStatus.self, forKey: .imageVersionStatus)
        imageVersionStatus = imageVersionStatusDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension DescribeInferenceRecommendationsJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
    }
}

extension DescribeInferenceRecommendationsJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeInferenceRecommendationsJobInput: Swift.Equatable {
    /// The name of the job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobName: Swift.String?

    public init (
        jobName: Swift.String? = nil
    )
    {
        self.jobName = jobName
    }
}

struct DescribeInferenceRecommendationsJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
}

extension DescribeInferenceRecommendationsJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
    }
}

extension DescribeInferenceRecommendationsJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInferenceRecommendationsJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInferenceRecommendationsJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInferenceRecommendationsJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInferenceRecommendationsJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.completionTime = output.completionTime
            self.creationTime = output.creationTime
            self.failureReason = output.failureReason
            self.inferenceRecommendations = output.inferenceRecommendations
            self.inputConfig = output.inputConfig
            self.jobArn = output.jobArn
            self.jobDescription = output.jobDescription
            self.jobName = output.jobName
            self.jobType = output.jobType
            self.lastModifiedTime = output.lastModifiedTime
            self.roleArn = output.roleArn
            self.status = output.status
            self.stoppingConditions = output.stoppingConditions
        } else {
            self.completionTime = nil
            self.creationTime = nil
            self.failureReason = nil
            self.inferenceRecommendations = nil
            self.inputConfig = nil
            self.jobArn = nil
            self.jobDescription = nil
            self.jobName = nil
            self.jobType = nil
            self.lastModifiedTime = nil
            self.roleArn = nil
            self.status = nil
            self.stoppingConditions = nil
        }
    }
}

public struct DescribeInferenceRecommendationsJobOutputResponse: Swift.Equatable {
    /// A timestamp that shows when the job completed.
    public var completionTime: ClientRuntime.Date?
    /// A timestamp that shows when the job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// If the job fails, provides information why the job failed.
    public var failureReason: Swift.String?
    /// The recommendations made by Inference Recommender.
    public var inferenceRecommendations: [SageMakerClientTypes.InferenceRecommendation]?
    /// Returns information about the versioned model package Amazon Resource Name (ARN), the traffic pattern, and endpoint configurations you provided when you initiated the job.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.RecommendationJobInputConfig?
    /// The Amazon Resource Name (ARN) of the job.
    /// This member is required.
    public var jobArn: Swift.String?
    /// The job description that you provided when you initiated the job.
    public var jobDescription: Swift.String?
    /// The name of the job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobName: Swift.String?
    /// The job type that you provided when you initiated the job.
    /// This member is required.
    public var jobType: SageMakerClientTypes.RecommendationJobType?
    /// A timestamp that shows when the job was last modified.
    /// This member is required.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role you provided when you initiated the job.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The status of the job.
    /// This member is required.
    public var status: SageMakerClientTypes.RecommendationJobStatus?
    /// The stopping conditions that you provided when you initiated the job.
    public var stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions?

    public init (
        completionTime: ClientRuntime.Date? = nil,
        creationTime: ClientRuntime.Date? = nil,
        failureReason: Swift.String? = nil,
        inferenceRecommendations: [SageMakerClientTypes.InferenceRecommendation]? = nil,
        inputConfig: SageMakerClientTypes.RecommendationJobInputConfig? = nil,
        jobArn: Swift.String? = nil,
        jobDescription: Swift.String? = nil,
        jobName: Swift.String? = nil,
        jobType: SageMakerClientTypes.RecommendationJobType? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        roleArn: Swift.String? = nil,
        status: SageMakerClientTypes.RecommendationJobStatus? = nil,
        stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions? = nil
    )
    {
        self.completionTime = completionTime
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.inferenceRecommendations = inferenceRecommendations
        self.inputConfig = inputConfig
        self.jobArn = jobArn
        self.jobDescription = jobDescription
        self.jobName = jobName
        self.jobType = jobType
        self.lastModifiedTime = lastModifiedTime
        self.roleArn = roleArn
        self.status = status
        self.stoppingConditions = stoppingConditions
    }
}

struct DescribeInferenceRecommendationsJobOutputResponseBody: Swift.Equatable {
    let jobName: Swift.String?
    let jobDescription: Swift.String?
    let jobType: SageMakerClientTypes.RecommendationJobType?
    let jobArn: Swift.String?
    let roleArn: Swift.String?
    let status: SageMakerClientTypes.RecommendationJobStatus?
    let creationTime: ClientRuntime.Date?
    let completionTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let inputConfig: SageMakerClientTypes.RecommendationJobInputConfig?
    let stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions?
    let inferenceRecommendations: [SageMakerClientTypes.InferenceRecommendation]?
}

extension DescribeInferenceRecommendationsJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case inferenceRecommendations = "InferenceRecommendations"
        case inputConfig = "InputConfig"
        case jobArn = "JobArn"
        case jobDescription = "JobDescription"
        case jobName = "JobName"
        case jobType = "JobType"
        case lastModifiedTime = "LastModifiedTime"
        case roleArn = "RoleArn"
        case status = "Status"
        case stoppingConditions = "StoppingConditions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDescription)
        jobDescription = jobDescriptionDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobInputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let stoppingConditionsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobStoppingConditions.self, forKey: .stoppingConditions)
        stoppingConditions = stoppingConditionsDecoded
        let inferenceRecommendationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.InferenceRecommendation?].self, forKey: .inferenceRecommendations)
        var inferenceRecommendationsDecoded0:[SageMakerClientTypes.InferenceRecommendation]? = nil
        if let inferenceRecommendationsContainer = inferenceRecommendationsContainer {
            inferenceRecommendationsDecoded0 = [SageMakerClientTypes.InferenceRecommendation]()
            for structure0 in inferenceRecommendationsContainer {
                if let structure0 = structure0 {
                    inferenceRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        inferenceRecommendations = inferenceRecommendationsDecoded0
    }
}

extension DescribeLabelingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelingJobName = "LabelingJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelingJobName = labelingJobName {
            try encodeContainer.encode(labelingJobName, forKey: .labelingJobName)
        }
    }
}

extension DescribeLabelingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLabelingJobInput: Swift.Equatable {
    /// The name of the labeling job to return information for.
    /// This member is required.
    public var labelingJobName: Swift.String?

    public init (
        labelingJobName: Swift.String? = nil
    )
    {
        self.labelingJobName = labelingJobName
    }
}

struct DescribeLabelingJobInputBody: Swift.Equatable {
    let labelingJobName: Swift.String?
}

extension DescribeLabelingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelingJobName = "LabelingJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobName)
        labelingJobName = labelingJobNameDecoded
    }
}

extension DescribeLabelingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLabelingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLabelingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLabelingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLabelingJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.failureReason = output.failureReason
            self.humanTaskConfig = output.humanTaskConfig
            self.inputConfig = output.inputConfig
            self.jobReferenceCode = output.jobReferenceCode
            self.labelAttributeName = output.labelAttributeName
            self.labelCategoryConfigS3Uri = output.labelCategoryConfigS3Uri
            self.labelCounters = output.labelCounters
            self.labelingJobAlgorithmsConfig = output.labelingJobAlgorithmsConfig
            self.labelingJobArn = output.labelingJobArn
            self.labelingJobName = output.labelingJobName
            self.labelingJobOutput = output.labelingJobOutput
            self.labelingJobStatus = output.labelingJobStatus
            self.lastModifiedTime = output.lastModifiedTime
            self.outputConfig = output.outputConfig
            self.roleArn = output.roleArn
            self.stoppingConditions = output.stoppingConditions
            self.tags = output.tags
        } else {
            self.creationTime = nil
            self.failureReason = nil
            self.humanTaskConfig = nil
            self.inputConfig = nil
            self.jobReferenceCode = nil
            self.labelAttributeName = nil
            self.labelCategoryConfigS3Uri = nil
            self.labelCounters = nil
            self.labelingJobAlgorithmsConfig = nil
            self.labelingJobArn = nil
            self.labelingJobName = nil
            self.labelingJobOutput = nil
            self.labelingJobStatus = nil
            self.lastModifiedTime = nil
            self.outputConfig = nil
            self.roleArn = nil
            self.stoppingConditions = nil
            self.tags = nil
        }
    }
}

public struct DescribeLabelingJobOutputResponse: Swift.Equatable {
    /// The date and time that the labeling job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// If the job failed, the reason that it failed.
    public var failureReason: Swift.String?
    /// Configuration information required for human workers to complete a labeling task.
    /// This member is required.
    public var humanTaskConfig: SageMakerClientTypes.HumanTaskConfig?
    /// Input configuration information for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.LabelingJobInputConfig?
    /// A unique identifier for work done as part of a labeling job.
    /// This member is required.
    public var jobReferenceCode: Swift.String?
    /// The attribute used as the label in the output manifest file.
    public var labelAttributeName: Swift.String?
    /// The S3 location of the JSON file that defines the categories used to label data objects. Please note the following label-category limits:
    ///
    /// * Semantic segmentation labeling jobs using automated labeling: 20 labels
    ///
    /// * Box bounding labeling jobs (all): 10 labels
    ///
    ///
    /// The file is a JSON structure in the following format: {
    ///     "document-version": "2018-11-28"
    ///
    ///
    ///     "labels": [
    ///
    ///
    ///     {
    ///
    ///
    ///     "label": "label 1"
    ///
    ///
    ///     },
    ///
    ///
    ///     {
    ///
    ///
    ///     "label": "label 2"
    ///
    ///
    ///     },
    ///
    ///
    ///     ...
    ///
    ///
    ///     {
    ///
    ///
    ///     "label": "label n"
    ///
    ///
    ///     }
    ///
    ///
    ///     ]
    ///
    ///
    ///     }
    public var labelCategoryConfigS3Uri: Swift.String?
    /// Provides a breakdown of the number of data objects labeled by humans, the number of objects labeled by machine, the number of objects than couldn't be labeled, and the total number of objects labeled.
    /// This member is required.
    public var labelCounters: SageMakerClientTypes.LabelCounters?
    /// Configuration information for automated data labeling.
    public var labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig?
    /// The Amazon Resource Name (ARN) of the labeling job.
    /// This member is required.
    public var labelingJobArn: Swift.String?
    /// The name assigned to the labeling job when it was created.
    /// This member is required.
    public var labelingJobName: Swift.String?
    /// The location of the output produced by the labeling job.
    public var labelingJobOutput: SageMakerClientTypes.LabelingJobOutput?
    /// The processing status of the labeling job.
    /// This member is required.
    public var labelingJobStatus: SageMakerClientTypes.LabelingJobStatus?
    /// The date and time that the labeling job was last updated.
    /// This member is required.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The location of the job's output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.LabelingJobOutputConfig?
    /// The Amazon Resource Name (ARN) that Amazon SageMaker assumes to perform tasks on your behalf during data labeling.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped.
    public var stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        failureReason: Swift.String? = nil,
        humanTaskConfig: SageMakerClientTypes.HumanTaskConfig? = nil,
        inputConfig: SageMakerClientTypes.LabelingJobInputConfig? = nil,
        jobReferenceCode: Swift.String? = nil,
        labelAttributeName: Swift.String? = nil,
        labelCategoryConfigS3Uri: Swift.String? = nil,
        labelCounters: SageMakerClientTypes.LabelCounters? = nil,
        labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig? = nil,
        labelingJobArn: Swift.String? = nil,
        labelingJobName: Swift.String? = nil,
        labelingJobOutput: SageMakerClientTypes.LabelingJobOutput? = nil,
        labelingJobStatus: SageMakerClientTypes.LabelingJobStatus? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        outputConfig: SageMakerClientTypes.LabelingJobOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.humanTaskConfig = humanTaskConfig
        self.inputConfig = inputConfig
        self.jobReferenceCode = jobReferenceCode
        self.labelAttributeName = labelAttributeName
        self.labelCategoryConfigS3Uri = labelCategoryConfigS3Uri
        self.labelCounters = labelCounters
        self.labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfig
        self.labelingJobArn = labelingJobArn
        self.labelingJobName = labelingJobName
        self.labelingJobOutput = labelingJobOutput
        self.labelingJobStatus = labelingJobStatus
        self.lastModifiedTime = lastModifiedTime
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingConditions = stoppingConditions
        self.tags = tags
    }
}

struct DescribeLabelingJobOutputResponseBody: Swift.Equatable {
    let labelingJobStatus: SageMakerClientTypes.LabelingJobStatus?
    let labelCounters: SageMakerClientTypes.LabelCounters?
    let failureReason: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let jobReferenceCode: Swift.String?
    let labelingJobName: Swift.String?
    let labelingJobArn: Swift.String?
    let labelAttributeName: Swift.String?
    let inputConfig: SageMakerClientTypes.LabelingJobInputConfig?
    let outputConfig: SageMakerClientTypes.LabelingJobOutputConfig?
    let roleArn: Swift.String?
    let labelCategoryConfigS3Uri: Swift.String?
    let stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions?
    let labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig?
    let humanTaskConfig: SageMakerClientTypes.HumanTaskConfig?
    let tags: [SageMakerClientTypes.Tag]?
    let labelingJobOutput: SageMakerClientTypes.LabelingJobOutput?
}

extension DescribeLabelingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case humanTaskConfig = "HumanTaskConfig"
        case inputConfig = "InputConfig"
        case jobReferenceCode = "JobReferenceCode"
        case labelAttributeName = "LabelAttributeName"
        case labelCategoryConfigS3Uri = "LabelCategoryConfigS3Uri"
        case labelCounters = "LabelCounters"
        case labelingJobAlgorithmsConfig = "LabelingJobAlgorithmsConfig"
        case labelingJobArn = "LabelingJobArn"
        case labelingJobName = "LabelingJobName"
        case labelingJobOutput = "LabelingJobOutput"
        case labelingJobStatus = "LabelingJobStatus"
        case lastModifiedTime = "LastModifiedTime"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingConditions = "StoppingConditions"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobStatus.self, forKey: .labelingJobStatus)
        labelingJobStatus = labelingJobStatusDecoded
        let labelCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelCounters.self, forKey: .labelCounters)
        labelCounters = labelCountersDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let jobReferenceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobReferenceCode)
        jobReferenceCode = jobReferenceCodeDecoded
        let labelingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobName)
        labelingJobName = labelingJobNameDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let labelAttributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelAttributeName)
        labelAttributeName = labelAttributeNameDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobInputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let labelCategoryConfigS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelCategoryConfigS3Uri)
        labelCategoryConfigS3Uri = labelCategoryConfigS3UriDecoded
        let stoppingConditionsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobStoppingConditions.self, forKey: .stoppingConditions)
        stoppingConditions = stoppingConditionsDecoded
        let labelingJobAlgorithmsConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobAlgorithmsConfig.self, forKey: .labelingJobAlgorithmsConfig)
        labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfigDecoded
        let humanTaskConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanTaskConfig.self, forKey: .humanTaskConfig)
        humanTaskConfig = humanTaskConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let labelingJobOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobOutput.self, forKey: .labelingJobOutput)
        labelingJobOutput = labelingJobOutputDecoded
    }
}

extension DescribeLineageGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineageGroupName = "LineageGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lineageGroupName = lineageGroupName {
            try encodeContainer.encode(lineageGroupName, forKey: .lineageGroupName)
        }
    }
}

extension DescribeLineageGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLineageGroupInput: Swift.Equatable {
    /// The name of the lineage group.
    /// This member is required.
    public var lineageGroupName: Swift.String?

    public init (
        lineageGroupName: Swift.String? = nil
    )
    {
        self.lineageGroupName = lineageGroupName
    }
}

struct DescribeLineageGroupInputBody: Swift.Equatable {
    let lineageGroupName: Swift.String?
}

extension DescribeLineageGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineageGroupName = "LineageGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupName)
        lineageGroupName = lineageGroupNameDecoded
    }
}

extension DescribeLineageGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLineageGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLineageGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLineageGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLineageGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.description = output.description
            self.displayName = output.displayName
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.lineageGroupArn = output.lineageGroupArn
            self.lineageGroupName = output.lineageGroupName
        } else {
            self.createdBy = nil
            self.creationTime = nil
            self.description = nil
            self.displayName = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.lineageGroupArn = nil
            self.lineageGroupName = nil
        }
    }
}

public struct DescribeLineageGroupOutputResponse: Swift.Equatable {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The creation time of lineage group.
    public var creationTime: ClientRuntime.Date?
    /// The description of the lineage group.
    public var description: Swift.String?
    /// The display name of the lineage group.
    public var displayName: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The last modified time of the lineage group.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// The name of the lineage group.
    public var lineageGroupName: Swift.String?

    public init (
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        lineageGroupName: Swift.String? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.description = description
        self.displayName = displayName
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.lineageGroupName = lineageGroupName
    }
}

struct DescribeLineageGroupOutputResponseBody: Swift.Equatable {
    let lineageGroupName: Swift.String?
    let lineageGroupArn: Swift.String?
    let displayName: Swift.String?
    let description: Swift.String?
    let creationTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
}

extension DescribeLineageGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case description = "Description"
        case displayName = "DisplayName"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case lineageGroupName = "LineageGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupName)
        lineageGroupName = lineageGroupNameDecoded
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
    }
}

extension DescribeModelBiasJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
    }
}

extension DescribeModelBiasJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeModelBiasJobDefinitionInput: Swift.Equatable {
    /// The name of the model bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

struct DescribeModelBiasJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
}

extension DescribeModelBiasJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
    }
}

extension DescribeModelBiasJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeModelBiasJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeModelBiasJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeModelBiasJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeModelBiasJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.jobDefinitionArn = output.jobDefinitionArn
            self.jobDefinitionName = output.jobDefinitionName
            self.jobResources = output.jobResources
            self.modelBiasAppSpecification = output.modelBiasAppSpecification
            self.modelBiasBaselineConfig = output.modelBiasBaselineConfig
            self.modelBiasJobInput = output.modelBiasJobInput
            self.modelBiasJobOutputConfig = output.modelBiasJobOutputConfig
            self.networkConfig = output.networkConfig
            self.roleArn = output.roleArn
            self.stoppingCondition = output.stoppingCondition
        } else {
            self.creationTime = nil
            self.jobDefinitionArn = nil
            self.jobDefinitionName = nil
            self.jobResources = nil
            self.modelBiasAppSpecification = nil
            self.modelBiasBaselineConfig = nil
            self.modelBiasJobInput = nil
            self.modelBiasJobOutputConfig = nil
            self.networkConfig = nil
            self.roleArn = nil
            self.stoppingCondition = nil
        }
    }
}

public struct DescribeModelBiasJobDefinitionOutputResponse: Swift.Equatable {
    /// The time at which the model bias job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the model bias job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model bias job to run a specified Docker container image.
    /// This member is required.
    public var modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification?
    /// The baseline configuration for a model bias job.
    public var modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig?
    /// Inputs for the model bias job.
    /// This member is required.
    public var modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model bias job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that has read permission to the input data location and write permission to the output data location in Amazon S3.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification? = nil,
        modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig? = nil,
        modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput? = nil,
        modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
    )
    {
        self.creationTime = creationTime
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelBiasAppSpecification = modelBiasAppSpecification
        self.modelBiasBaselineConfig = modelBiasBaselineConfig
        self.modelBiasJobInput = modelBiasJobInput
        self.modelBiasJobOutputConfig = modelBiasJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
    }
}

struct DescribeModelBiasJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionArn: Swift.String?
    let jobDefinitionName: Swift.String?
    let creationTime: ClientRuntime.Date?
    let modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig?
    let modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification?
    let modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput?
    let modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
}

extension DescribeModelBiasJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case jobDefinitionArn = "JobDefinitionArn"
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelBiasAppSpecification = "ModelBiasAppSpecification"
        case modelBiasBaselineConfig = "ModelBiasBaselineConfig"
        case modelBiasJobInput = "ModelBiasJobInput"
        case modelBiasJobOutputConfig = "ModelBiasJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let modelBiasBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelBiasBaselineConfig.self, forKey: .modelBiasBaselineConfig)
        modelBiasBaselineConfig = modelBiasBaselineConfigDecoded
        let modelBiasAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelBiasAppSpecification.self, forKey: .modelBiasAppSpecification)
        modelBiasAppSpecification = modelBiasAppSpecificationDecoded
        let modelBiasJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelBiasJobInput.self, forKey: .modelBiasJobInput)
        modelBiasJobInput = modelBiasJobInputDecoded
        let modelBiasJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .modelBiasJobOutputConfig)
        modelBiasJobOutputConfig = modelBiasJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
    }
}

extension DescribeModelExplainabilityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
    }
}

extension DescribeModelExplainabilityJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeModelExplainabilityJobDefinitionInput: Swift.Equatable {
    /// The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

struct DescribeModelExplainabilityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
}

extension DescribeModelExplainabilityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
    }
}

extension DescribeModelExplainabilityJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeModelExplainabilityJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeModelExplainabilityJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeModelExplainabilityJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeModelExplainabilityJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.jobDefinitionArn = output.jobDefinitionArn
            self.jobDefinitionName = output.jobDefinitionName
            self.jobResources = output.jobResources
            self.modelExplainabilityAppSpecification = output.modelExplainabilityAppSpecification
            self.modelExplainabilityBaselineConfig = output.modelExplainabilityBaselineConfig
            self.modelExplainabilityJobInput = output.modelExplainabilityJobInput
            self.modelExplainabilityJobOutputConfig = output.modelExplainabilityJobOutputConfig
            self.networkConfig = output.networkConfig
            self.roleArn = output.roleArn
            self.stoppingCondition = output.stoppingCondition
        } else {
            self.creationTime = nil
            self.jobDefinitionArn = nil
            self.jobDefinitionName = nil
            self.jobResources = nil
            self.modelExplainabilityAppSpecification = nil
            self.modelExplainabilityBaselineConfig = nil
            self.modelExplainabilityJobInput = nil
            self.modelExplainabilityJobOutputConfig = nil
            self.networkConfig = nil
            self.roleArn = nil
            self.stoppingCondition = nil
        }
    }
}

public struct DescribeModelExplainabilityJobDefinitionOutputResponse: Swift.Equatable {
    /// The time at which the model explainability job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the model explainability job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model explainability job to run a specified Docker container image.
    /// This member is required.
    public var modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification?
    /// The baseline configuration for a model explainability job.
    public var modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig?
    /// Inputs for the model explainability job.
    /// This member is required.
    public var modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model explainability job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that has read permission to the input data location and write permission to the output data location in Amazon S3.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification? = nil,
        modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig? = nil,
        modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput? = nil,
        modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
    )
    {
        self.creationTime = creationTime
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelExplainabilityAppSpecification = modelExplainabilityAppSpecification
        self.modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfig
        self.modelExplainabilityJobInput = modelExplainabilityJobInput
        self.modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
    }
}

struct DescribeModelExplainabilityJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionArn: Swift.String?
    let jobDefinitionName: Swift.String?
    let creationTime: ClientRuntime.Date?
    let modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig?
    let modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification?
    let modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput?
    let modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
}

extension DescribeModelExplainabilityJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case jobDefinitionArn = "JobDefinitionArn"
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelExplainabilityAppSpecification = "ModelExplainabilityAppSpecification"
        case modelExplainabilityBaselineConfig = "ModelExplainabilityBaselineConfig"
        case modelExplainabilityJobInput = "ModelExplainabilityJobInput"
        case modelExplainabilityJobOutputConfig = "ModelExplainabilityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let modelExplainabilityBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelExplainabilityBaselineConfig.self, forKey: .modelExplainabilityBaselineConfig)
        modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfigDecoded
        let modelExplainabilityAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelExplainabilityAppSpecification.self, forKey: .modelExplainabilityAppSpecification)
        modelExplainabilityAppSpecification = modelExplainabilityAppSpecificationDecoded
        let modelExplainabilityJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelExplainabilityJobInput.self, forKey: .modelExplainabilityJobInput)
        modelExplainabilityJobInput = modelExplainabilityJobInputDecoded
        let modelExplainabilityJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .modelExplainabilityJobOutputConfig)
        modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
    }
}

extension DescribeModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

extension DescribeModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeModelInput: Swift.Equatable {
    /// The name of the model.
    /// This member is required.
    public var modelName: Swift.String?

    public init (
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DescribeModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
}

extension DescribeModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DescribeModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeModelOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containers = output.containers
            self.creationTime = output.creationTime
            self.enableNetworkIsolation = output.enableNetworkIsolation
            self.executionRoleArn = output.executionRoleArn
            self.inferenceExecutionConfig = output.inferenceExecutionConfig
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.primaryContainer = output.primaryContainer
            self.vpcConfig = output.vpcConfig
        } else {
            self.containers = nil
            self.creationTime = nil
            self.enableNetworkIsolation = false
            self.executionRoleArn = nil
            self.inferenceExecutionConfig = nil
            self.modelArn = nil
            self.modelName = nil
            self.primaryContainer = nil
            self.vpcConfig = nil
        }
    }
}

public struct DescribeModelOutputResponse: Swift.Equatable {
    /// The containers in the inference pipeline.
    public var containers: [SageMakerClientTypes.ContainerDefinition]?
    /// A timestamp that shows when the model was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// If True, no inbound or outbound network calls can be made to or from the model container.
    public var enableNetworkIsolation: Swift.Bool
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the model.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// Specifies details of how containers in a multi-container endpoint are called.
    public var inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig?
    /// The Amazon Resource Name (ARN) of the model.
    /// This member is required.
    public var modelArn: Swift.String?
    /// Name of the Amazon SageMaker model.
    /// This member is required.
    public var modelName: Swift.String?
    /// The location of the primary inference code, associated artifacts, and custom environment map that the inference code uses when it is deployed in production.
    public var primaryContainer: SageMakerClientTypes.ContainerDefinition?
    /// A [VpcConfig] object that specifies the VPC that this model has access to. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html)
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init (
        containers: [SageMakerClientTypes.ContainerDefinition]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        enableNetworkIsolation: Swift.Bool = false,
        executionRoleArn: Swift.String? = nil,
        inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        primaryContainer: SageMakerClientTypes.ContainerDefinition? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.containers = containers
        self.creationTime = creationTime
        self.enableNetworkIsolation = enableNetworkIsolation
        self.executionRoleArn = executionRoleArn
        self.inferenceExecutionConfig = inferenceExecutionConfig
        self.modelArn = modelArn
        self.modelName = modelName
        self.primaryContainer = primaryContainer
        self.vpcConfig = vpcConfig
    }
}

struct DescribeModelOutputResponseBody: Swift.Equatable {
    let modelName: Swift.String?
    let primaryContainer: SageMakerClientTypes.ContainerDefinition?
    let containers: [SageMakerClientTypes.ContainerDefinition]?
    let inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig?
    let executionRoleArn: Swift.String?
    let vpcConfig: SageMakerClientTypes.VpcConfig?
    let creationTime: ClientRuntime.Date?
    let modelArn: Swift.String?
    let enableNetworkIsolation: Swift.Bool
}

extension DescribeModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers = "Containers"
        case creationTime = "CreationTime"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case executionRoleArn = "ExecutionRoleArn"
        case inferenceExecutionConfig = "InferenceExecutionConfig"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case primaryContainer = "PrimaryContainer"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let primaryContainerDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ContainerDefinition.self, forKey: .primaryContainer)
        primaryContainer = primaryContainerDecoded
        let containersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ContainerDefinition?].self, forKey: .containers)
        var containersDecoded0:[SageMakerClientTypes.ContainerDefinition]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [SageMakerClientTypes.ContainerDefinition]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let inferenceExecutionConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceExecutionConfig.self, forKey: .inferenceExecutionConfig)
        inferenceExecutionConfig = inferenceExecutionConfigDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let enableNetworkIsolationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
    }
}

extension DescribeModelPackageGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
    }
}

extension DescribeModelPackageGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeModelPackageGroupInput: Swift.Equatable {
    /// The name of the model group to describe.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?

    public init (
        modelPackageGroupName: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
    }
}

struct DescribeModelPackageGroupInputBody: Swift.Equatable {
    let modelPackageGroupName: Swift.String?
}

extension DescribeModelPackageGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
    }
}

extension DescribeModelPackageGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeModelPackageGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeModelPackageGroupOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeModelPackageGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeModelPackageGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.modelPackageGroupArn = output.modelPackageGroupArn
            self.modelPackageGroupDescription = output.modelPackageGroupDescription
            self.modelPackageGroupName = output.modelPackageGroupName
            self.modelPackageGroupStatus = output.modelPackageGroupStatus
        } else {
            self.createdBy = nil
            self.creationTime = nil
            self.modelPackageGroupArn = nil
            self.modelPackageGroupDescription = nil
            self.modelPackageGroupName = nil
            self.modelPackageGroupStatus = nil
        }
    }
}

public struct DescribeModelPackageGroupOutputResponse: Swift.Equatable {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    /// This member is required.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The time that the model group was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the model group.
    /// This member is required.
    public var modelPackageGroupArn: Swift.String?
    /// A description of the model group.
    public var modelPackageGroupDescription: Swift.String?
    /// The name of the model group.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?
    /// The status of the model group.
    /// This member is required.
    public var modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus?

    public init (
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        modelPackageGroupArn: Swift.String? = nil,
        modelPackageGroupDescription: Swift.String? = nil,
        modelPackageGroupName: Swift.String? = nil,
        modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.modelPackageGroupArn = modelPackageGroupArn
        self.modelPackageGroupDescription = modelPackageGroupDescription
        self.modelPackageGroupName = modelPackageGroupName
        self.modelPackageGroupStatus = modelPackageGroupStatus
    }
}

struct DescribeModelPackageGroupOutputResponseBody: Swift.Equatable {
    let modelPackageGroupName: Swift.String?
    let modelPackageGroupArn: Swift.String?
    let modelPackageGroupDescription: Swift.String?
    let creationTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus?
}

extension DescribeModelPackageGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case modelPackageGroupArn = "ModelPackageGroupArn"
        case modelPackageGroupDescription = "ModelPackageGroupDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageGroupStatus = "ModelPackageGroupStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupArn)
        modelPackageGroupArn = modelPackageGroupArnDecoded
        let modelPackageGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupDescription)
        modelPackageGroupDescription = modelPackageGroupDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let modelPackageGroupStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageGroupStatus.self, forKey: .modelPackageGroupStatus)
        modelPackageGroupStatus = modelPackageGroupStatusDecoded
    }
}

extension DescribeModelPackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageName = "ModelPackageName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelPackageName = modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
    }
}

extension DescribeModelPackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeModelPackageInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the model package to describe. When you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
    /// This member is required.
    public var modelPackageName: Swift.String?

    public init (
        modelPackageName: Swift.String? = nil
    )
    {
        self.modelPackageName = modelPackageName
    }
}

struct DescribeModelPackageInputBody: Swift.Equatable {
    let modelPackageName: Swift.String?
}

extension DescribeModelPackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageName = "ModelPackageName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
    }
}

extension DescribeModelPackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeModelPackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeModelPackageOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeModelPackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeModelPackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.additionalInferenceSpecifications = output.additionalInferenceSpecifications
            self.approvalDescription = output.approvalDescription
            self.certifyForMarketplace = output.certifyForMarketplace
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.customerMetadataProperties = output.customerMetadataProperties
            self.domain = output.domain
            self.driftCheckBaselines = output.driftCheckBaselines
            self.inferenceSpecification = output.inferenceSpecification
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.metadataProperties = output.metadataProperties
            self.modelApprovalStatus = output.modelApprovalStatus
            self.modelMetrics = output.modelMetrics
            self.modelPackageArn = output.modelPackageArn
            self.modelPackageDescription = output.modelPackageDescription
            self.modelPackageGroupName = output.modelPackageGroupName
            self.modelPackageName = output.modelPackageName
            self.modelPackageStatus = output.modelPackageStatus
            self.modelPackageStatusDetails = output.modelPackageStatusDetails
            self.modelPackageVersion = output.modelPackageVersion
            self.samplePayloadUrl = output.samplePayloadUrl
            self.sourceAlgorithmSpecification = output.sourceAlgorithmSpecification
            self.task = output.task
            self.validationSpecification = output.validationSpecification
        } else {
            self.additionalInferenceSpecifications = nil
            self.approvalDescription = nil
            self.certifyForMarketplace = false
            self.createdBy = nil
            self.creationTime = nil
            self.customerMetadataProperties = nil
            self.domain = nil
            self.driftCheckBaselines = nil
            self.inferenceSpecification = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.metadataProperties = nil
            self.modelApprovalStatus = nil
            self.modelMetrics = nil
            self.modelPackageArn = nil
            self.modelPackageDescription = nil
            self.modelPackageGroupName = nil
            self.modelPackageName = nil
            self.modelPackageStatus = nil
            self.modelPackageStatusDetails = nil
            self.modelPackageVersion = nil
            self.samplePayloadUrl = nil
            self.sourceAlgorithmSpecification = nil
            self.task = nil
            self.validationSpecification = nil
        }
    }
}

public struct DescribeModelPackageOutputResponse: Swift.Equatable {
    /// An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.
    public var additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
    /// A description provided for the model approval.
    public var approvalDescription: Swift.String?
    /// Whether the model package is certified for listing on Amazon Web Services Marketplace.
    public var certifyForMarketplace: Swift.Bool
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// A timestamp specifying when the model package was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The metadata properties associated with the model package versions.
    public var customerMetadataProperties: [Swift.String:Swift.String]?
    /// The machine learning domain of the model package you specified. Common machine learning domains include computer vision and natural language processing.
    public var domain: Swift.String?
    /// Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on [Drift Detection against Previous Baselines in SageMaker Pipelines](https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection) in the Amazon SageMaker Developer Guide.
    public var driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines?
    /// Details about inference jobs that can be run with models based on this model package.
    public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The last time the model package was modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// The approval status of the model package.
    public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    /// Metrics for the model.
    public var modelMetrics: SageMakerClientTypes.ModelMetrics?
    /// The Amazon Resource Name (ARN) of the model package.
    /// This member is required.
    public var modelPackageArn: Swift.String?
    /// A brief summary of the model package.
    public var modelPackageDescription: Swift.String?
    /// If the model is a versioned model, the name of the model group that the versioned model belongs to.
    public var modelPackageGroupName: Swift.String?
    /// The name of the model package being described.
    /// This member is required.
    public var modelPackageName: Swift.String?
    /// The current status of the model package.
    /// This member is required.
    public var modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
    /// Details about the current status of the model package.
    /// This member is required.
    public var modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails?
    /// The version of the model package.
    public var modelPackageVersion: Swift.Int?
    /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path points to a single gzip compressed tar archive (.tar.gz suffix).
    public var samplePayloadUrl: Swift.String?
    /// Details about the algorithm that was used to create the model package.
    public var sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification?
    /// The machine learning task you specified that your model package accomplishes. Common machine learning tasks include object detection and image classification.
    public var task: Swift.String?
    /// Configurations for one or more transform jobs that SageMaker runs to test the model package.
    public var validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification?

    public init (
        additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil,
        approvalDescription: Swift.String? = nil,
        certifyForMarketplace: Swift.Bool = false,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        customerMetadataProperties: [Swift.String:Swift.String]? = nil,
        domain: Swift.String? = nil,
        driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines? = nil,
        inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
        modelMetrics: SageMakerClientTypes.ModelMetrics? = nil,
        modelPackageArn: Swift.String? = nil,
        modelPackageDescription: Swift.String? = nil,
        modelPackageGroupName: Swift.String? = nil,
        modelPackageName: Swift.String? = nil,
        modelPackageStatus: SageMakerClientTypes.ModelPackageStatus? = nil,
        modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails? = nil,
        modelPackageVersion: Swift.Int? = nil,
        samplePayloadUrl: Swift.String? = nil,
        sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification? = nil,
        task: Swift.String? = nil,
        validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification? = nil
    )
    {
        self.additionalInferenceSpecifications = additionalInferenceSpecifications
        self.approvalDescription = approvalDescription
        self.certifyForMarketplace = certifyForMarketplace
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.customerMetadataProperties = customerMetadataProperties
        self.domain = domain
        self.driftCheckBaselines = driftCheckBaselines
        self.inferenceSpecification = inferenceSpecification
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.metadataProperties = metadataProperties
        self.modelApprovalStatus = modelApprovalStatus
        self.modelMetrics = modelMetrics
        self.modelPackageArn = modelPackageArn
        self.modelPackageDescription = modelPackageDescription
        self.modelPackageGroupName = modelPackageGroupName
        self.modelPackageName = modelPackageName
        self.modelPackageStatus = modelPackageStatus
        self.modelPackageStatusDetails = modelPackageStatusDetails
        self.modelPackageVersion = modelPackageVersion
        self.samplePayloadUrl = samplePayloadUrl
        self.sourceAlgorithmSpecification = sourceAlgorithmSpecification
        self.task = task
        self.validationSpecification = validationSpecification
    }
}

struct DescribeModelPackageOutputResponseBody: Swift.Equatable {
    let modelPackageName: Swift.String?
    let modelPackageGroupName: Swift.String?
    let modelPackageVersion: Swift.Int?
    let modelPackageArn: Swift.String?
    let modelPackageDescription: Swift.String?
    let creationTime: ClientRuntime.Date?
    let inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    let sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification?
    let validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification?
    let modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
    let modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails?
    let certifyForMarketplace: Swift.Bool
    let modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    let createdBy: SageMakerClientTypes.UserContext?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let modelMetrics: SageMakerClientTypes.ModelMetrics?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
    let approvalDescription: Swift.String?
    let customerMetadataProperties: [Swift.String:Swift.String]?
    let driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines?
    let domain: Swift.String?
    let task: Swift.String?
    let samplePayloadUrl: Swift.String?
    let additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
}

extension DescribeModelPackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecifications = "AdditionalInferenceSpecifications"
        case approvalDescription = "ApprovalDescription"
        case certifyForMarketplace = "CertifyForMarketplace"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case domain = "Domain"
        case driftCheckBaselines = "DriftCheckBaselines"
        case inferenceSpecification = "InferenceSpecification"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageArn = "ModelPackageArn"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case modelPackageStatus = "ModelPackageStatus"
        case modelPackageStatusDetails = "ModelPackageStatusDetails"
        case modelPackageVersion = "ModelPackageVersion"
        case samplePayloadUrl = "SamplePayloadUrl"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case task = "Task"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelPackageVersion)
        modelPackageVersion = modelPackageVersionDecoded
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
        let modelPackageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageDescription)
        modelPackageDescription = modelPackageDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let sourceAlgorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SourceAlgorithmSpecification.self, forKey: .sourceAlgorithmSpecification)
        sourceAlgorithmSpecification = sourceAlgorithmSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let modelPackageStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageStatus.self, forKey: .modelPackageStatus)
        modelPackageStatus = modelPackageStatusDecoded
        let modelPackageStatusDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageStatusDetails.self, forKey: .modelPackageStatusDetails)
        modelPackageStatusDetails = modelPackageStatusDetailsDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Swift.Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelMetrics.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let approvalDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalDescription)
        approvalDescription = approvalDescriptionDecoded
        let customerMetadataPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customerMetadataProperties)
        var customerMetadataPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let customerMetadataPropertiesContainer = customerMetadataPropertiesContainer {
            customerMetadataPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, customermetadatavalue0) in customerMetadataPropertiesContainer {
                if let customermetadatavalue0 = customermetadatavalue0 {
                    customerMetadataPropertiesDecoded0?[key0] = customermetadatavalue0
                }
            }
        }
        customerMetadataProperties = customerMetadataPropertiesDecoded0
        let driftCheckBaselinesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DriftCheckBaselines.self, forKey: .driftCheckBaselines)
        driftCheckBaselines = driftCheckBaselinesDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .task)
        task = taskDecoded
        let samplePayloadUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .samplePayloadUrl)
        samplePayloadUrl = samplePayloadUrlDecoded
        let additionalInferenceSpecificationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AdditionalInferenceSpecificationDefinition?].self, forKey: .additionalInferenceSpecifications)
        var additionalInferenceSpecificationsDecoded0:[SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil
        if let additionalInferenceSpecificationsContainer = additionalInferenceSpecificationsContainer {
            additionalInferenceSpecificationsDecoded0 = [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]()
            for structure0 in additionalInferenceSpecificationsContainer {
                if let structure0 = structure0 {
                    additionalInferenceSpecificationsDecoded0?.append(structure0)
                }
            }
        }
        additionalInferenceSpecifications = additionalInferenceSpecificationsDecoded0
    }
}

extension DescribeModelQualityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
    }
}

extension DescribeModelQualityJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeModelQualityJobDefinitionInput: Swift.Equatable {
    /// The name of the model quality job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

struct DescribeModelQualityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
}

extension DescribeModelQualityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
    }
}

extension DescribeModelQualityJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeModelQualityJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeModelQualityJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeModelQualityJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeModelQualityJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.jobDefinitionArn = output.jobDefinitionArn
            self.jobDefinitionName = output.jobDefinitionName
            self.jobResources = output.jobResources
            self.modelQualityAppSpecification = output.modelQualityAppSpecification
            self.modelQualityBaselineConfig = output.modelQualityBaselineConfig
            self.modelQualityJobInput = output.modelQualityJobInput
            self.modelQualityJobOutputConfig = output.modelQualityJobOutputConfig
            self.networkConfig = output.networkConfig
            self.roleArn = output.roleArn
            self.stoppingCondition = output.stoppingCondition
        } else {
            self.creationTime = nil
            self.jobDefinitionArn = nil
            self.jobDefinitionName = nil
            self.jobResources = nil
            self.modelQualityAppSpecification = nil
            self.modelQualityBaselineConfig = nil
            self.modelQualityJobInput = nil
            self.modelQualityJobOutputConfig = nil
            self.networkConfig = nil
            self.roleArn = nil
            self.stoppingCondition = nil
        }
    }
}

public struct DescribeModelQualityJobDefinitionOutputResponse: Swift.Equatable {
    /// The time at which the model quality job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the model quality job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the quality job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model quality job to run a specified Docker container image.
    /// This member is required.
    public var modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification?
    /// The baseline configuration for a model quality job.
    public var modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig?
    /// Inputs for the model quality job.
    /// This member is required.
    public var modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model quality job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification? = nil,
        modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig? = nil,
        modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput? = nil,
        modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
    )
    {
        self.creationTime = creationTime
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelQualityAppSpecification = modelQualityAppSpecification
        self.modelQualityBaselineConfig = modelQualityBaselineConfig
        self.modelQualityJobInput = modelQualityJobInput
        self.modelQualityJobOutputConfig = modelQualityJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
    }
}

struct DescribeModelQualityJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionArn: Swift.String?
    let jobDefinitionName: Swift.String?
    let creationTime: ClientRuntime.Date?
    let modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig?
    let modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification?
    let modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput?
    let modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
}

extension DescribeModelQualityJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case jobDefinitionArn = "JobDefinitionArn"
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelQualityAppSpecification = "ModelQualityAppSpecification"
        case modelQualityBaselineConfig = "ModelQualityBaselineConfig"
        case modelQualityJobInput = "ModelQualityJobInput"
        case modelQualityJobOutputConfig = "ModelQualityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let modelQualityBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQualityBaselineConfig.self, forKey: .modelQualityBaselineConfig)
        modelQualityBaselineConfig = modelQualityBaselineConfigDecoded
        let modelQualityAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQualityAppSpecification.self, forKey: .modelQualityAppSpecification)
        modelQualityAppSpecification = modelQualityAppSpecificationDecoded
        let modelQualityJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQualityJobInput.self, forKey: .modelQualityJobInput)
        modelQualityJobInput = modelQualityJobInputDecoded
        let modelQualityJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .modelQualityJobOutputConfig)
        modelQualityJobOutputConfig = modelQualityJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
    }
}

extension DescribeMonitoringScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
    }
}

extension DescribeMonitoringScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeMonitoringScheduleInput: Swift.Equatable {
    /// Name of a previously created monitoring schedule.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init (
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleName = monitoringScheduleName
    }
}

struct DescribeMonitoringScheduleInputBody: Swift.Equatable {
    let monitoringScheduleName: Swift.String?
}

extension DescribeMonitoringScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
    }
}

extension DescribeMonitoringScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMonitoringScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMonitoringScheduleOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMonitoringScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeMonitoringScheduleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.endpointName = output.endpointName
            self.failureReason = output.failureReason
            self.lastModifiedTime = output.lastModifiedTime
            self.lastMonitoringExecutionSummary = output.lastMonitoringExecutionSummary
            self.monitoringScheduleArn = output.monitoringScheduleArn
            self.monitoringScheduleConfig = output.monitoringScheduleConfig
            self.monitoringScheduleName = output.monitoringScheduleName
            self.monitoringScheduleStatus = output.monitoringScheduleStatus
            self.monitoringType = output.monitoringType
        } else {
            self.creationTime = nil
            self.endpointName = nil
            self.failureReason = nil
            self.lastModifiedTime = nil
            self.lastMonitoringExecutionSummary = nil
            self.monitoringScheduleArn = nil
            self.monitoringScheduleConfig = nil
            self.monitoringScheduleName = nil
            self.monitoringScheduleStatus = nil
            self.monitoringType = nil
        }
    }
}

public struct DescribeMonitoringScheduleOutputResponse: Swift.Equatable {
    /// The time at which the monitoring job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The name of the endpoint for the monitoring job.
    public var endpointName: Swift.String?
    /// A string, up to one KB in size, that contains the reason a monitoring job failed, if it failed.
    public var failureReason: Swift.String?
    /// The time at which the monitoring job was last modified.
    /// This member is required.
    public var lastModifiedTime: ClientRuntime.Date?
    /// Describes metadata on the last execution to run, if there was one.
    public var lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary?
    /// The Amazon Resource Name (ARN) of the monitoring schedule.
    /// This member is required.
    public var monitoringScheduleArn: Swift.String?
    /// The configuration object that specifies the monitoring schedule and defines the monitoring job.
    /// This member is required.
    public var monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
    /// Name of the monitoring schedule.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?
    /// The status of an monitoring job.
    /// This member is required.
    public var monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus?
    /// The type of the monitoring job that this schedule runs. This is one of the following values.
    ///
    /// * DATA_QUALITY - The schedule is for a data quality monitoring job.
    ///
    /// * MODEL_QUALITY - The schedule is for a model quality monitoring job.
    ///
    /// * MODEL_BIAS - The schedule is for a bias monitoring job.
    ///
    /// * MODEL_EXPLAINABILITY - The schedule is for an explainability monitoring job.
    public var monitoringType: SageMakerClientTypes.MonitoringType?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary? = nil,
        monitoringScheduleArn: Swift.String? = nil,
        monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig? = nil,
        monitoringScheduleName: Swift.String? = nil,
        monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus? = nil,
        monitoringType: SageMakerClientTypes.MonitoringType? = nil
    )
    {
        self.creationTime = creationTime
        self.endpointName = endpointName
        self.failureReason = failureReason
        self.lastModifiedTime = lastModifiedTime
        self.lastMonitoringExecutionSummary = lastMonitoringExecutionSummary
        self.monitoringScheduleArn = monitoringScheduleArn
        self.monitoringScheduleConfig = monitoringScheduleConfig
        self.monitoringScheduleName = monitoringScheduleName
        self.monitoringScheduleStatus = monitoringScheduleStatus
        self.monitoringType = monitoringType
    }
}

struct DescribeMonitoringScheduleOutputResponseBody: Swift.Equatable {
    let monitoringScheduleArn: Swift.String?
    let monitoringScheduleName: Swift.String?
    let monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus?
    let monitoringType: SageMakerClientTypes.MonitoringType?
    let failureReason: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
    let endpointName: Swift.String?
    let lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary?
}

extension DescribeMonitoringScheduleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endpointName = "EndpointName"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case lastMonitoringExecutionSummary = "LastMonitoringExecutionSummary"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case monitoringScheduleConfig = "MonitoringScheduleConfig"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringScheduleStatus = "MonitoringScheduleStatus"
        case monitoringType = "MonitoringType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let monitoringScheduleStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ScheduleStatus.self, forKey: .monitoringScheduleStatus)
        monitoringScheduleStatus = monitoringScheduleStatusDecoded
        let monitoringTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringType.self, forKey: .monitoringType)
        monitoringType = monitoringTypeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringScheduleConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringScheduleConfig.self, forKey: .monitoringScheduleConfig)
        monitoringScheduleConfig = monitoringScheduleConfigDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let lastMonitoringExecutionSummaryDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringExecutionSummary.self, forKey: .lastMonitoringExecutionSummary)
        lastMonitoringExecutionSummary = lastMonitoringExecutionSummaryDecoded
    }
}

extension DescribeNotebookInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookInstanceName = notebookInstanceName {
            try encodeContainer.encode(notebookInstanceName, forKey: .notebookInstanceName)
        }
    }
}

extension DescribeNotebookInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeNotebookInstanceInput: Swift.Equatable {
    /// The name of the notebook instance that you want information about.
    /// This member is required.
    public var notebookInstanceName: Swift.String?

    public init (
        notebookInstanceName: Swift.String? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
    }
}

struct DescribeNotebookInstanceInputBody: Swift.Equatable {
    let notebookInstanceName: Swift.String?
}

extension DescribeNotebookInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
    }
}

extension DescribeNotebookInstanceLifecycleConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName {
            try encodeContainer.encode(notebookInstanceLifecycleConfigName, forKey: .notebookInstanceLifecycleConfigName)
        }
    }
}

extension DescribeNotebookInstanceLifecycleConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeNotebookInstanceLifecycleConfigInput: Swift.Equatable {
    /// The name of the lifecycle configuration to describe.
    /// This member is required.
    public var notebookInstanceLifecycleConfigName: Swift.String?

    public init (
        notebookInstanceLifecycleConfigName: Swift.String? = nil
    )
    {
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
    }
}

struct DescribeNotebookInstanceLifecycleConfigInputBody: Swift.Equatable {
    let notebookInstanceLifecycleConfigName: Swift.String?
}

extension DescribeNotebookInstanceLifecycleConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
    }
}

extension DescribeNotebookInstanceLifecycleConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeNotebookInstanceLifecycleConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeNotebookInstanceLifecycleConfigOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeNotebookInstanceLifecycleConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeNotebookInstanceLifecycleConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.lastModifiedTime = output.lastModifiedTime
            self.notebookInstanceLifecycleConfigArn = output.notebookInstanceLifecycleConfigArn
            self.notebookInstanceLifecycleConfigName = output.notebookInstanceLifecycleConfigName
            self.onCreate = output.onCreate
            self.onStart = output.onStart
        } else {
            self.creationTime = nil
            self.lastModifiedTime = nil
            self.notebookInstanceLifecycleConfigArn = nil
            self.notebookInstanceLifecycleConfigName = nil
            self.onCreate = nil
            self.onStart = nil
        }
    }
}

public struct DescribeNotebookInstanceLifecycleConfigOutputResponse: Swift.Equatable {
    /// A timestamp that tells when the lifecycle configuration was created.
    public var creationTime: ClientRuntime.Date?
    /// A timestamp that tells when the lifecycle configuration was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the lifecycle configuration.
    public var notebookInstanceLifecycleConfigArn: Swift.String?
    /// The name of the lifecycle configuration.
    public var notebookInstanceLifecycleConfigName: Swift.String?
    /// The shell script that runs only once, when you create a notebook instance.
    public var onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    /// The shell script that runs every time you start a notebook instance, including when you create the notebook instance.
    public var onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        notebookInstanceLifecycleConfigArn: Swift.String? = nil,
        notebookInstanceLifecycleConfigName: Swift.String? = nil,
        onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil,
        onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
    )
    {
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
        self.notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.onCreate = onCreate
        self.onStart = onStart
    }
}

struct DescribeNotebookInstanceLifecycleConfigOutputResponseBody: Swift.Equatable {
    let notebookInstanceLifecycleConfigArn: Swift.String?
    let notebookInstanceLifecycleConfigName: Swift.String?
    let onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    let onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    let lastModifiedTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
}

extension DescribeNotebookInstanceLifecycleConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case notebookInstanceLifecycleConfigArn = "NotebookInstanceLifecycleConfigArn"
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case onCreate = "OnCreate"
        case onStart = "OnStart"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigArn)
        notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArnDecoded
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let onCreateContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceLifecycleHook?].self, forKey: .onCreate)
        var onCreateDecoded0:[SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
        if let onCreateContainer = onCreateContainer {
            onCreateDecoded0 = [SageMakerClientTypes.NotebookInstanceLifecycleHook]()
            for structure0 in onCreateContainer {
                if let structure0 = structure0 {
                    onCreateDecoded0?.append(structure0)
                }
            }
        }
        onCreate = onCreateDecoded0
        let onStartContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceLifecycleHook?].self, forKey: .onStart)
        var onStartDecoded0:[SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
        if let onStartContainer = onStartContainer {
            onStartDecoded0 = [SageMakerClientTypes.NotebookInstanceLifecycleHook]()
            for structure0 in onStartContainer {
                if let structure0 = structure0 {
                    onStartDecoded0?.append(structure0)
                }
            }
        }
        onStart = onStartDecoded0
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension DescribeNotebookInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeNotebookInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeNotebookInstanceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeNotebookInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeNotebookInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.acceleratorTypes = output.acceleratorTypes
            self.additionalCodeRepositories = output.additionalCodeRepositories
            self.creationTime = output.creationTime
            self.defaultCodeRepository = output.defaultCodeRepository
            self.directInternetAccess = output.directInternetAccess
            self.failureReason = output.failureReason
            self.instanceType = output.instanceType
            self.kmsKeyId = output.kmsKeyId
            self.lastModifiedTime = output.lastModifiedTime
            self.networkInterfaceId = output.networkInterfaceId
            self.notebookInstanceArn = output.notebookInstanceArn
            self.notebookInstanceLifecycleConfigName = output.notebookInstanceLifecycleConfigName
            self.notebookInstanceName = output.notebookInstanceName
            self.notebookInstanceStatus = output.notebookInstanceStatus
            self.platformIdentifier = output.platformIdentifier
            self.roleArn = output.roleArn
            self.rootAccess = output.rootAccess
            self.securityGroups = output.securityGroups
            self.subnetId = output.subnetId
            self.url = output.url
            self.volumeSizeInGB = output.volumeSizeInGB
        } else {
            self.acceleratorTypes = nil
            self.additionalCodeRepositories = nil
            self.creationTime = nil
            self.defaultCodeRepository = nil
            self.directInternetAccess = nil
            self.failureReason = nil
            self.instanceType = nil
            self.kmsKeyId = nil
            self.lastModifiedTime = nil
            self.networkInterfaceId = nil
            self.notebookInstanceArn = nil
            self.notebookInstanceLifecycleConfigName = nil
            self.notebookInstanceName = nil
            self.notebookInstanceStatus = nil
            self.platformIdentifier = nil
            self.roleArn = nil
            self.rootAccess = nil
            self.securityGroups = nil
            self.subnetId = nil
            self.url = nil
            self.volumeSizeInGB = nil
        }
    }
}

public struct DescribeNotebookInstanceOutputResponse: Swift.Equatable {
    /// A list of the Elastic Inference (EI) instance types associated with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
    public var acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    /// An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with Amazon SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var additionalCodeRepositories: [Swift.String]?
    /// A timestamp. Use this parameter to return the time when the notebook instance was created
    public var creationTime: ClientRuntime.Date?
    /// The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with Amazon SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var defaultCodeRepository: Swift.String?
    /// Describes whether Amazon SageMaker provides internet access to the notebook instance. If this value is set to Disabled, the notebook instance does not have internet access, and cannot connect to Amazon SageMaker training and endpoint services. For more information, see [Notebook Instances Are Internet-Enabled by Default](https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access).
    public var directInternetAccess: SageMakerClientTypes.DirectInternetAccess?
    /// If status is Failed, the reason it failed.
    public var failureReason: Swift.String?
    /// The type of ML compute instance running on the notebook instance.
    public var instanceType: SageMakerClientTypes.InstanceType?
    /// The Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.
    public var kmsKeyId: Swift.String?
    /// A timestamp. Use this parameter to retrieve the time when the notebook instance was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The network interface IDs that Amazon SageMaker created at the time of creating the instance.
    public var networkInterfaceId: Swift.String?
    /// The Amazon Resource Name (ARN) of the notebook instance.
    public var notebookInstanceArn: Swift.String?
    /// Returns the name of a notebook instance lifecycle configuration. For information about notebook instance lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html)
    public var notebookInstanceLifecycleConfigName: Swift.String?
    /// The name of the Amazon SageMaker notebook instance.
    public var notebookInstanceName: Swift.String?
    /// The status of the notebook instance.
    public var notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus?
    /// The platform identifier of the notebook instance runtime environment.
    public var platformIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role associated with the instance.
    public var roleArn: Swift.String?
    /// Whether root access is enabled or disabled for users of the notebook instance. Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.
    public var rootAccess: SageMakerClientTypes.RootAccess?
    /// The IDs of the VPC security groups.
    public var securityGroups: [Swift.String]?
    /// The ID of the VPC subnet.
    public var subnetId: Swift.String?
    /// The URL that you use to connect to the Jupyter notebook that is running in your notebook instance.
    public var url: Swift.String?
    /// The size, in GB, of the ML storage volume attached to the notebook instance.
    public var volumeSizeInGB: Swift.Int?

    public init (
        acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [Swift.String]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        defaultCodeRepository: Swift.String? = nil,
        directInternetAccess: SageMakerClientTypes.DirectInternetAccess? = nil,
        failureReason: Swift.String? = nil,
        instanceType: SageMakerClientTypes.InstanceType? = nil,
        kmsKeyId: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        networkInterfaceId: Swift.String? = nil,
        notebookInstanceArn: Swift.String? = nil,
        notebookInstanceLifecycleConfigName: Swift.String? = nil,
        notebookInstanceName: Swift.String? = nil,
        notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus? = nil,
        platformIdentifier: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        rootAccess: SageMakerClientTypes.RootAccess? = nil,
        securityGroups: [Swift.String]? = nil,
        subnetId: Swift.String? = nil,
        url: Swift.String? = nil,
        volumeSizeInGB: Swift.Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.creationTime = creationTime
        self.defaultCodeRepository = defaultCodeRepository
        self.directInternetAccess = directInternetAccess
        self.failureReason = failureReason
        self.instanceType = instanceType
        self.kmsKeyId = kmsKeyId
        self.lastModifiedTime = lastModifiedTime
        self.networkInterfaceId = networkInterfaceId
        self.notebookInstanceArn = notebookInstanceArn
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.notebookInstanceStatus = notebookInstanceStatus
        self.platformIdentifier = platformIdentifier
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.securityGroups = securityGroups
        self.subnetId = subnetId
        self.url = url
        self.volumeSizeInGB = volumeSizeInGB
    }
}

struct DescribeNotebookInstanceOutputResponseBody: Swift.Equatable {
    let notebookInstanceArn: Swift.String?
    let notebookInstanceName: Swift.String?
    let notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus?
    let failureReason: Swift.String?
    let url: Swift.String?
    let instanceType: SageMakerClientTypes.InstanceType?
    let subnetId: Swift.String?
    let securityGroups: [Swift.String]?
    let roleArn: Swift.String?
    let kmsKeyId: Swift.String?
    let networkInterfaceId: Swift.String?
    let lastModifiedTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let notebookInstanceLifecycleConfigName: Swift.String?
    let directInternetAccess: SageMakerClientTypes.DirectInternetAccess?
    let volumeSizeInGB: Swift.Int?
    let acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    let defaultCodeRepository: Swift.String?
    let additionalCodeRepositories: [Swift.String]?
    let rootAccess: SageMakerClientTypes.RootAccess?
    let platformIdentifier: Swift.String?
}

extension DescribeNotebookInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorTypes = "AcceleratorTypes"
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case creationTime = "CreationTime"
        case defaultCodeRepository = "DefaultCodeRepository"
        case directInternetAccess = "DirectInternetAccess"
        case failureReason = "FailureReason"
        case instanceType = "InstanceType"
        case kmsKeyId = "KmsKeyId"
        case lastModifiedTime = "LastModifiedTime"
        case networkInterfaceId = "NetworkInterfaceId"
        case notebookInstanceArn = "NotebookInstanceArn"
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case notebookInstanceStatus = "NotebookInstanceStatus"
        case platformIdentifier = "PlatformIdentifier"
        case roleArn = "RoleArn"
        case rootAccess = "RootAccess"
        case securityGroups = "SecurityGroups"
        case subnetId = "SubnetId"
        case url = "Url"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceArn)
        notebookInstanceArn = notebookInstanceArnDecoded
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let notebookInstanceStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceStatus.self, forKey: .notebookInstanceStatus)
        notebookInstanceStatus = notebookInstanceStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let directInternetAccessDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DirectInternetAccess.self, forKey: .directInternetAccess)
        directInternetAccess = directInternetAccessDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let acceleratorTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceAcceleratorType?].self, forKey: .acceleratorTypes)
        var acceleratorTypesDecoded0:[SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil
        if let acceleratorTypesContainer = acceleratorTypesContainer {
            acceleratorTypesDecoded0 = [SageMakerClientTypes.NotebookInstanceAcceleratorType]()
            for string0 in acceleratorTypesContainer {
                if let string0 = string0 {
                    acceleratorTypesDecoded0?.append(string0)
                }
            }
        }
        acceleratorTypes = acceleratorTypesDecoded0
        let defaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultCodeRepository)
        defaultCodeRepository = defaultCodeRepositoryDecoded
        let additionalCodeRepositoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalCodeRepositories)
        var additionalCodeRepositoriesDecoded0:[Swift.String]? = nil
        if let additionalCodeRepositoriesContainer = additionalCodeRepositoriesContainer {
            additionalCodeRepositoriesDecoded0 = [Swift.String]()
            for string0 in additionalCodeRepositoriesContainer {
                if let string0 = string0 {
                    additionalCodeRepositoriesDecoded0?.append(string0)
                }
            }
        }
        additionalCodeRepositories = additionalCodeRepositoriesDecoded0
        let rootAccessDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RootAccess.self, forKey: .rootAccess)
        rootAccess = rootAccessDecoded
        let platformIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformIdentifier)
        platformIdentifier = platformIdentifierDecoded
    }
}

extension DescribePipelineDefinitionForExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
    }
}

extension DescribePipelineDefinitionForExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePipelineDefinitionForExecutionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init (
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct DescribePipelineDefinitionForExecutionInputBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
}

extension DescribePipelineDefinitionForExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
    }
}

extension DescribePipelineDefinitionForExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePipelineDefinitionForExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePipelineDefinitionForExecutionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePipelineDefinitionForExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribePipelineDefinitionForExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.pipelineDefinition = output.pipelineDefinition
        } else {
            self.creationTime = nil
            self.pipelineDefinition = nil
        }
    }
}

public struct DescribePipelineDefinitionForExecutionOutputResponse: Swift.Equatable {
    /// The time when the pipeline was created.
    public var creationTime: ClientRuntime.Date?
    /// The JSON pipeline definition.
    public var pipelineDefinition: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        pipelineDefinition: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.pipelineDefinition = pipelineDefinition
    }
}

struct DescribePipelineDefinitionForExecutionOutputResponseBody: Swift.Equatable {
    let pipelineDefinition: Swift.String?
    let creationTime: ClientRuntime.Date?
}

extension DescribePipelineDefinitionForExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case pipelineDefinition = "PipelineDefinition"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDefinition)
        pipelineDefinition = pipelineDefinitionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension DescribePipelineExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
    }
}

extension DescribePipelineExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePipelineExecutionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init (
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct DescribePipelineExecutionInputBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
}

extension DescribePipelineExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
    }
}

extension DescribePipelineExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePipelineExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePipelineExecutionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePipelineExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribePipelineExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.failureReason = output.failureReason
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.pipelineArn = output.pipelineArn
            self.pipelineExecutionArn = output.pipelineExecutionArn
            self.pipelineExecutionDescription = output.pipelineExecutionDescription
            self.pipelineExecutionDisplayName = output.pipelineExecutionDisplayName
            self.pipelineExecutionStatus = output.pipelineExecutionStatus
            self.pipelineExperimentConfig = output.pipelineExperimentConfig
        } else {
            self.createdBy = nil
            self.creationTime = nil
            self.failureReason = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.pipelineArn = nil
            self.pipelineExecutionArn = nil
            self.pipelineExecutionDescription = nil
            self.pipelineExecutionDisplayName = nil
            self.pipelineExecutionStatus = nil
            self.pipelineExperimentConfig = nil
        }
    }
}

public struct DescribePipelineExecutionOutputResponse: Swift.Equatable {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The time when the pipeline execution was created.
    public var creationTime: ClientRuntime.Date?
    /// If the execution failed, a message describing why.
    public var failureReason: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The time when the pipeline execution was modified last.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the pipeline.
    public var pipelineArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?
    /// The description of the pipeline execution.
    public var pipelineExecutionDescription: Swift.String?
    /// The display name of the pipeline execution.
    public var pipelineExecutionDisplayName: Swift.String?
    /// The status of the pipeline execution.
    public var pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus?
    /// Specifies the names of the experiment and trial created by a pipeline.
    public var pipelineExperimentConfig: SageMakerClientTypes.PipelineExperimentConfig?

    public init (
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        failureReason: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        pipelineArn: Swift.String? = nil,
        pipelineExecutionArn: Swift.String? = nil,
        pipelineExecutionDescription: Swift.String? = nil,
        pipelineExecutionDisplayName: Swift.String? = nil,
        pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus? = nil,
        pipelineExperimentConfig: SageMakerClientTypes.PipelineExperimentConfig? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.pipelineArn = pipelineArn
        self.pipelineExecutionArn = pipelineExecutionArn
        self.pipelineExecutionDescription = pipelineExecutionDescription
        self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
        self.pipelineExecutionStatus = pipelineExecutionStatus
        self.pipelineExperimentConfig = pipelineExperimentConfig
    }
}

struct DescribePipelineExecutionOutputResponseBody: Swift.Equatable {
    let pipelineArn: Swift.String?
    let pipelineExecutionArn: Swift.String?
    let pipelineExecutionDisplayName: Swift.String?
    let pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus?
    let pipelineExecutionDescription: Swift.String?
    let pipelineExperimentConfig: SageMakerClientTypes.PipelineExperimentConfig?
    let failureReason: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
}

extension DescribePipelineExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case pipelineArn = "PipelineArn"
        case pipelineExecutionArn = "PipelineExecutionArn"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
        case pipelineExecutionStatus = "PipelineExecutionStatus"
        case pipelineExperimentConfig = "PipelineExperimentConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let pipelineExecutionDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDisplayName)
        pipelineExecutionDisplayName = pipelineExecutionDisplayNameDecoded
        let pipelineExecutionStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExecutionStatus.self, forKey: .pipelineExecutionStatus)
        pipelineExecutionStatus = pipelineExecutionStatusDecoded
        let pipelineExecutionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDescription)
        pipelineExecutionDescription = pipelineExecutionDescriptionDecoded
        let pipelineExperimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExperimentConfig.self, forKey: .pipelineExperimentConfig)
        pipelineExperimentConfig = pipelineExperimentConfigDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
    }
}

extension DescribePipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineName = "PipelineName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
    }
}

extension DescribePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePipelineInput: Swift.Equatable {
    /// The name of the pipeline to describe.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init (
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineName = pipelineName
    }
}

struct DescribePipelineInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
}

extension DescribePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineName = "PipelineName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
    }
}

extension DescribePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePipelineOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribePipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.lastRunTime = output.lastRunTime
            self.pipelineArn = output.pipelineArn
            self.pipelineDefinition = output.pipelineDefinition
            self.pipelineDescription = output.pipelineDescription
            self.pipelineDisplayName = output.pipelineDisplayName
            self.pipelineName = output.pipelineName
            self.pipelineStatus = output.pipelineStatus
            self.roleArn = output.roleArn
        } else {
            self.createdBy = nil
            self.creationTime = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.lastRunTime = nil
            self.pipelineArn = nil
            self.pipelineDefinition = nil
            self.pipelineDescription = nil
            self.pipelineDisplayName = nil
            self.pipelineName = nil
            self.pipelineStatus = nil
            self.roleArn = nil
        }
    }
}

public struct DescribePipelineOutputResponse: Swift.Equatable {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The time when the pipeline was created.
    public var creationTime: ClientRuntime.Date?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The time when the pipeline was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The time when the pipeline was last run.
    public var lastRunTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the pipeline.
    public var pipelineArn: Swift.String?
    /// The JSON pipeline definition.
    public var pipelineDefinition: Swift.String?
    /// The description of the pipeline.
    public var pipelineDescription: Swift.String?
    /// The display name of the pipeline.
    public var pipelineDisplayName: Swift.String?
    /// The name of the pipeline.
    public var pipelineName: Swift.String?
    /// The status of the pipeline execution.
    public var pipelineStatus: SageMakerClientTypes.PipelineStatus?
    /// The Amazon Resource Name (ARN) that the pipeline uses to execute.
    public var roleArn: Swift.String?

    public init (
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        lastRunTime: ClientRuntime.Date? = nil,
        pipelineArn: Swift.String? = nil,
        pipelineDefinition: Swift.String? = nil,
        pipelineDescription: Swift.String? = nil,
        pipelineDisplayName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        pipelineStatus: SageMakerClientTypes.PipelineStatus? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lastRunTime = lastRunTime
        self.pipelineArn = pipelineArn
        self.pipelineDefinition = pipelineDefinition
        self.pipelineDescription = pipelineDescription
        self.pipelineDisplayName = pipelineDisplayName
        self.pipelineName = pipelineName
        self.pipelineStatus = pipelineStatus
        self.roleArn = roleArn
    }
}

struct DescribePipelineOutputResponseBody: Swift.Equatable {
    let pipelineArn: Swift.String?
    let pipelineName: Swift.String?
    let pipelineDisplayName: Swift.String?
    let pipelineDefinition: Swift.String?
    let pipelineDescription: Swift.String?
    let roleArn: Swift.String?
    let pipelineStatus: SageMakerClientTypes.PipelineStatus?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let lastRunTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
}

extension DescribePipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lastRunTime = "LastRunTime"
        case pipelineArn = "PipelineArn"
        case pipelineDefinition = "PipelineDefinition"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case pipelineStatus = "PipelineStatus"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDisplayName)
        pipelineDisplayName = pipelineDisplayNameDecoded
        let pipelineDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDefinition)
        pipelineDefinition = pipelineDefinitionDecoded
        let pipelineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDescription)
        pipelineDescription = pipelineDescriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let pipelineStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineStatus.self, forKey: .pipelineStatus)
        pipelineStatus = pipelineStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastRunTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRunTime)
        lastRunTime = lastRunTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
    }
}

extension DescribeProcessingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processingJobName = "ProcessingJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let processingJobName = processingJobName {
            try encodeContainer.encode(processingJobName, forKey: .processingJobName)
        }
    }
}

extension DescribeProcessingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeProcessingJobInput: Swift.Equatable {
    /// The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var processingJobName: Swift.String?

    public init (
        processingJobName: Swift.String? = nil
    )
    {
        self.processingJobName = processingJobName
    }
}

struct DescribeProcessingJobInputBody: Swift.Equatable {
    let processingJobName: Swift.String?
}

extension DescribeProcessingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processingJobName = "ProcessingJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
    }
}

extension DescribeProcessingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeProcessingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeProcessingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeProcessingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeProcessingJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appSpecification = output.appSpecification
            self.autoMLJobArn = output.autoMLJobArn
            self.creationTime = output.creationTime
            self.environment = output.environment
            self.exitMessage = output.exitMessage
            self.experimentConfig = output.experimentConfig
            self.failureReason = output.failureReason
            self.lastModifiedTime = output.lastModifiedTime
            self.monitoringScheduleArn = output.monitoringScheduleArn
            self.networkConfig = output.networkConfig
            self.processingEndTime = output.processingEndTime
            self.processingInputs = output.processingInputs
            self.processingJobArn = output.processingJobArn
            self.processingJobName = output.processingJobName
            self.processingJobStatus = output.processingJobStatus
            self.processingOutputConfig = output.processingOutputConfig
            self.processingResources = output.processingResources
            self.processingStartTime = output.processingStartTime
            self.roleArn = output.roleArn
            self.stoppingCondition = output.stoppingCondition
            self.trainingJobArn = output.trainingJobArn
        } else {
            self.appSpecification = nil
            self.autoMLJobArn = nil
            self.creationTime = nil
            self.environment = nil
            self.exitMessage = nil
            self.experimentConfig = nil
            self.failureReason = nil
            self.lastModifiedTime = nil
            self.monitoringScheduleArn = nil
            self.networkConfig = nil
            self.processingEndTime = nil
            self.processingInputs = nil
            self.processingJobArn = nil
            self.processingJobName = nil
            self.processingJobStatus = nil
            self.processingOutputConfig = nil
            self.processingResources = nil
            self.processingStartTime = nil
            self.roleArn = nil
            self.stoppingCondition = nil
            self.trainingJobArn = nil
        }
    }
}

public struct DescribeProcessingJobOutputResponse: Swift.Equatable {
    /// Configures the processing job to run a specified container image.
    /// This member is required.
    public var appSpecification: SageMakerClientTypes.AppSpecification?
    /// The ARN of an AutoML job associated with this processing job.
    public var autoMLJobArn: Swift.String?
    /// The time at which the processing job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The environment variables set in the Docker container.
    public var environment: [Swift.String:Swift.String]?
    /// An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
    public var exitMessage: Swift.String?
    /// The configuration information used to create an experiment.
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
    public var failureReason: Swift.String?
    /// The time at which the processing job was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The ARN of a monitoring schedule for an endpoint associated with this processing job.
    public var monitoringScheduleArn: Swift.String?
    /// Networking options for a processing job.
    public var networkConfig: SageMakerClientTypes.NetworkConfig?
    /// The time at which the processing job completed.
    public var processingEndTime: ClientRuntime.Date?
    /// The inputs for a processing job.
    public var processingInputs: [SageMakerClientTypes.ProcessingInput]?
    /// The Amazon Resource Name (ARN) of the processing job.
    /// This member is required.
    public var processingJobArn: Swift.String?
    /// The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var processingJobName: Swift.String?
    /// Provides the status of a processing job.
    /// This member is required.
    public var processingJobStatus: SageMakerClientTypes.ProcessingJobStatus?
    /// Output configuration for the processing job.
    public var processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig?
    /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
    /// This member is required.
    public var processingResources: SageMakerClientTypes.ProcessingResources?
    /// The time at which the processing job started.
    public var processingStartTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    public var roleArn: Swift.String?
    /// The time limit for how long the processing job is allowed to run.
    public var stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition?
    /// The ARN of a training job associated with this processing job.
    public var trainingJobArn: Swift.String?

    public init (
        appSpecification: SageMakerClientTypes.AppSpecification? = nil,
        autoMLJobArn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        environment: [Swift.String:Swift.String]? = nil,
        exitMessage: Swift.String? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        failureReason: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        monitoringScheduleArn: Swift.String? = nil,
        networkConfig: SageMakerClientTypes.NetworkConfig? = nil,
        processingEndTime: ClientRuntime.Date? = nil,
        processingInputs: [SageMakerClientTypes.ProcessingInput]? = nil,
        processingJobArn: Swift.String? = nil,
        processingJobName: Swift.String? = nil,
        processingJobStatus: SageMakerClientTypes.ProcessingJobStatus? = nil,
        processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig? = nil,
        processingResources: SageMakerClientTypes.ProcessingResources? = nil,
        processingStartTime: ClientRuntime.Date? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition? = nil,
        trainingJobArn: Swift.String? = nil
    )
    {
        self.appSpecification = appSpecification
        self.autoMLJobArn = autoMLJobArn
        self.creationTime = creationTime
        self.environment = environment
        self.exitMessage = exitMessage
        self.experimentConfig = experimentConfig
        self.failureReason = failureReason
        self.lastModifiedTime = lastModifiedTime
        self.monitoringScheduleArn = monitoringScheduleArn
        self.networkConfig = networkConfig
        self.processingEndTime = processingEndTime
        self.processingInputs = processingInputs
        self.processingJobArn = processingJobArn
        self.processingJobName = processingJobName
        self.processingJobStatus = processingJobStatus
        self.processingOutputConfig = processingOutputConfig
        self.processingResources = processingResources
        self.processingStartTime = processingStartTime
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.trainingJobArn = trainingJobArn
    }
}

struct DescribeProcessingJobOutputResponseBody: Swift.Equatable {
    let processingInputs: [SageMakerClientTypes.ProcessingInput]?
    let processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig?
    let processingJobName: Swift.String?
    let processingResources: SageMakerClientTypes.ProcessingResources?
    let stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition?
    let appSpecification: SageMakerClientTypes.AppSpecification?
    let environment: [Swift.String:Swift.String]?
    let networkConfig: SageMakerClientTypes.NetworkConfig?
    let roleArn: Swift.String?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
    let processingJobArn: Swift.String?
    let processingJobStatus: SageMakerClientTypes.ProcessingJobStatus?
    let exitMessage: Swift.String?
    let failureReason: Swift.String?
    let processingEndTime: ClientRuntime.Date?
    let processingStartTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let monitoringScheduleArn: Swift.String?
    let autoMLJobArn: Swift.String?
    let trainingJobArn: Swift.String?
}

extension DescribeProcessingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appSpecification = "AppSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case creationTime = "CreationTime"
        case environment = "Environment"
        case exitMessage = "ExitMessage"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case networkConfig = "NetworkConfig"
        case processingEndTime = "ProcessingEndTime"
        case processingInputs = "ProcessingInputs"
        case processingJobArn = "ProcessingJobArn"
        case processingJobName = "ProcessingJobName"
        case processingJobStatus = "ProcessingJobStatus"
        case processingOutputConfig = "ProcessingOutputConfig"
        case processingResources = "ProcessingResources"
        case processingStartTime = "ProcessingStartTime"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case trainingJobArn = "TrainingJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingInputsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProcessingInput?].self, forKey: .processingInputs)
        var processingInputsDecoded0:[SageMakerClientTypes.ProcessingInput]? = nil
        if let processingInputsContainer = processingInputsContainer {
            processingInputsDecoded0 = [SageMakerClientTypes.ProcessingInput]()
            for structure0 in processingInputsContainer {
                if let structure0 = structure0 {
                    processingInputsDecoded0?.append(structure0)
                }
            }
        }
        processingInputs = processingInputsDecoded0
        let processingOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingOutputConfig.self, forKey: .processingOutputConfig)
        processingOutputConfig = processingOutputConfigDecoded
        let processingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
        let processingResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingResources.self, forKey: .processingResources)
        processingResources = processingResourcesDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let appSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppSpecification.self, forKey: .appSpecification)
        appSpecification = appSpecificationDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let processingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
        let processingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingJobStatus.self, forKey: .processingJobStatus)
        processingJobStatus = processingJobStatusDecoded
        let exitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exitMessage)
        exitMessage = exitMessageDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let processingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .processingEndTime)
        processingEndTime = processingEndTimeDecoded
        let processingStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .processingStartTime)
        processingStartTime = processingStartTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
    }
}

extension DescribeProjectInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName = "ProjectName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
    }
}

extension DescribeProjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeProjectInput: Swift.Equatable {
    /// The name of the project to describe.
    /// This member is required.
    public var projectName: Swift.String?

    public init (
        projectName: Swift.String? = nil
    )
    {
        self.projectName = projectName
    }
}

struct DescribeProjectInputBody: Swift.Equatable {
    let projectName: Swift.String?
}

extension DescribeProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName = "ProjectName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
    }
}

extension DescribeProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeProjectOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeProjectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.projectArn = output.projectArn
            self.projectDescription = output.projectDescription
            self.projectId = output.projectId
            self.projectName = output.projectName
            self.projectStatus = output.projectStatus
            self.serviceCatalogProvisionedProductDetails = output.serviceCatalogProvisionedProductDetails
            self.serviceCatalogProvisioningDetails = output.serviceCatalogProvisioningDetails
        } else {
            self.createdBy = nil
            self.creationTime = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.projectArn = nil
            self.projectDescription = nil
            self.projectId = nil
            self.projectName = nil
            self.projectStatus = nil
            self.serviceCatalogProvisionedProductDetails = nil
            self.serviceCatalogProvisioningDetails = nil
        }
    }
}

public struct DescribeProjectOutputResponse: Swift.Equatable {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The time when the project was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The timestamp when project was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the project.
    /// This member is required.
    public var projectArn: Swift.String?
    /// The description of the project.
    public var projectDescription: Swift.String?
    /// The ID of the project.
    /// This member is required.
    public var projectId: Swift.String?
    /// The name of the project.
    /// This member is required.
    public var projectName: Swift.String?
    /// The status of the project.
    /// This member is required.
    public var projectStatus: SageMakerClientTypes.ProjectStatus?
    /// Information about a provisioned service catalog product.
    public var serviceCatalogProvisionedProductDetails: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails?
    /// Information used to provision a service catalog product. For information, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    /// This member is required.
    public var serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails?

    public init (
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        projectArn: Swift.String? = nil,
        projectDescription: Swift.String? = nil,
        projectId: Swift.String? = nil,
        projectName: Swift.String? = nil,
        projectStatus: SageMakerClientTypes.ProjectStatus? = nil,
        serviceCatalogProvisionedProductDetails: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails? = nil,
        serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.projectArn = projectArn
        self.projectDescription = projectDescription
        self.projectId = projectId
        self.projectName = projectName
        self.projectStatus = projectStatus
        self.serviceCatalogProvisionedProductDetails = serviceCatalogProvisionedProductDetails
        self.serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetails
    }
}

struct DescribeProjectOutputResponseBody: Swift.Equatable {
    let projectArn: Swift.String?
    let projectName: Swift.String?
    let projectId: Swift.String?
    let projectDescription: Swift.String?
    let serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails?
    let serviceCatalogProvisionedProductDetails: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails?
    let projectStatus: SageMakerClientTypes.ProjectStatus?
    let createdBy: SageMakerClientTypes.UserContext?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
}

extension DescribeProjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case projectArn = "ProjectArn"
        case projectDescription = "ProjectDescription"
        case projectId = "ProjectId"
        case projectName = "ProjectName"
        case projectStatus = "ProjectStatus"
        case serviceCatalogProvisionedProductDetails = "ServiceCatalogProvisionedProductDetails"
        case serviceCatalogProvisioningDetails = "ServiceCatalogProvisioningDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let projectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectId)
        projectId = projectIdDecoded
        let projectDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectDescription)
        projectDescription = projectDescriptionDecoded
        let serviceCatalogProvisioningDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ServiceCatalogProvisioningDetails.self, forKey: .serviceCatalogProvisioningDetails)
        serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetailsDecoded
        let serviceCatalogProvisionedProductDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ServiceCatalogProvisionedProductDetails.self, forKey: .serviceCatalogProvisionedProductDetails)
        serviceCatalogProvisionedProductDetails = serviceCatalogProvisionedProductDetailsDecoded
        let projectStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProjectStatus.self, forKey: .projectStatus)
        projectStatus = projectStatusDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
    }
}

extension DescribeStudioLifecycleConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioLifecycleConfigName = "StudioLifecycleConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let studioLifecycleConfigName = studioLifecycleConfigName {
            try encodeContainer.encode(studioLifecycleConfigName, forKey: .studioLifecycleConfigName)
        }
    }
}

extension DescribeStudioLifecycleConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStudioLifecycleConfigInput: Swift.Equatable {
    /// The name of the Studio Lifecycle Configuration to describe.
    /// This member is required.
    public var studioLifecycleConfigName: Swift.String?

    public init (
        studioLifecycleConfigName: Swift.String? = nil
    )
    {
        self.studioLifecycleConfigName = studioLifecycleConfigName
    }
}

struct DescribeStudioLifecycleConfigInputBody: Swift.Equatable {
    let studioLifecycleConfigName: Swift.String?
}

extension DescribeStudioLifecycleConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioLifecycleConfigName = "StudioLifecycleConfigName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigName)
        studioLifecycleConfigName = studioLifecycleConfigNameDecoded
    }
}

extension DescribeStudioLifecycleConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStudioLifecycleConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStudioLifecycleConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStudioLifecycleConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStudioLifecycleConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.lastModifiedTime = output.lastModifiedTime
            self.studioLifecycleConfigAppType = output.studioLifecycleConfigAppType
            self.studioLifecycleConfigArn = output.studioLifecycleConfigArn
            self.studioLifecycleConfigContent = output.studioLifecycleConfigContent
            self.studioLifecycleConfigName = output.studioLifecycleConfigName
        } else {
            self.creationTime = nil
            self.lastModifiedTime = nil
            self.studioLifecycleConfigAppType = nil
            self.studioLifecycleConfigArn = nil
            self.studioLifecycleConfigContent = nil
            self.studioLifecycleConfigName = nil
        }
    }
}

public struct DescribeStudioLifecycleConfigOutputResponse: Swift.Equatable {
    /// The creation time of the Studio Lifecycle Configuration.
    public var creationTime: ClientRuntime.Date?
    /// This value is equivalent to CreationTime because Studio Lifecycle Configurations are immutable.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The App type that the Lifecycle Configuration is attached to.
    public var studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType?
    /// The ARN of the Lifecycle Configuration to describe.
    public var studioLifecycleConfigArn: Swift.String?
    /// The content of your Studio Lifecycle Configuration script.
    public var studioLifecycleConfigContent: Swift.String?
    /// The name of the Studio Lifecycle Configuration that is described.
    public var studioLifecycleConfigName: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType? = nil,
        studioLifecycleConfigArn: Swift.String? = nil,
        studioLifecycleConfigContent: Swift.String? = nil,
        studioLifecycleConfigName: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
        self.studioLifecycleConfigAppType = studioLifecycleConfigAppType
        self.studioLifecycleConfigArn = studioLifecycleConfigArn
        self.studioLifecycleConfigContent = studioLifecycleConfigContent
        self.studioLifecycleConfigName = studioLifecycleConfigName
    }
}

struct DescribeStudioLifecycleConfigOutputResponseBody: Swift.Equatable {
    let studioLifecycleConfigArn: Swift.String?
    let studioLifecycleConfigName: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let studioLifecycleConfigContent: Swift.String?
    let studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType?
}

extension DescribeStudioLifecycleConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case studioLifecycleConfigAppType = "StudioLifecycleConfigAppType"
        case studioLifecycleConfigArn = "StudioLifecycleConfigArn"
        case studioLifecycleConfigContent = "StudioLifecycleConfigContent"
        case studioLifecycleConfigName = "StudioLifecycleConfigName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioLifecycleConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigArn)
        studioLifecycleConfigArn = studioLifecycleConfigArnDecoded
        let studioLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigName)
        studioLifecycleConfigName = studioLifecycleConfigNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let studioLifecycleConfigContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigContent)
        studioLifecycleConfigContent = studioLifecycleConfigContentDecoded
        let studioLifecycleConfigAppTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StudioLifecycleConfigAppType.self, forKey: .studioLifecycleConfigAppType)
        studioLifecycleConfigAppType = studioLifecycleConfigAppTypeDecoded
    }
}

extension DescribeSubscribedWorkteamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workteamArn = "WorkteamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workteamArn = workteamArn {
            try encodeContainer.encode(workteamArn, forKey: .workteamArn)
        }
    }
}

extension DescribeSubscribedWorkteamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeSubscribedWorkteamInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the subscribed work team to describe.
    /// This member is required.
    public var workteamArn: Swift.String?

    public init (
        workteamArn: Swift.String? = nil
    )
    {
        self.workteamArn = workteamArn
    }
}

struct DescribeSubscribedWorkteamInputBody: Swift.Equatable {
    let workteamArn: Swift.String?
}

extension DescribeSubscribedWorkteamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workteamArn = "WorkteamArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
    }
}

extension DescribeSubscribedWorkteamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSubscribedWorkteamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeSubscribedWorkteamOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSubscribedWorkteamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeSubscribedWorkteamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.subscribedWorkteam = output.subscribedWorkteam
        } else {
            self.subscribedWorkteam = nil
        }
    }
}

public struct DescribeSubscribedWorkteamOutputResponse: Swift.Equatable {
    /// A Workteam instance that contains information about the work team.
    /// This member is required.
    public var subscribedWorkteam: SageMakerClientTypes.SubscribedWorkteam?

    public init (
        subscribedWorkteam: SageMakerClientTypes.SubscribedWorkteam? = nil
    )
    {
        self.subscribedWorkteam = subscribedWorkteam
    }
}

struct DescribeSubscribedWorkteamOutputResponseBody: Swift.Equatable {
    let subscribedWorkteam: SageMakerClientTypes.SubscribedWorkteam?
}

extension DescribeSubscribedWorkteamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subscribedWorkteam = "SubscribedWorkteam"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscribedWorkteamDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SubscribedWorkteam.self, forKey: .subscribedWorkteam)
        subscribedWorkteam = subscribedWorkteamDecoded
    }
}

extension DescribeTrainingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trainingJobName = "TrainingJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trainingJobName = trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
    }
}

extension DescribeTrainingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTrainingJobInput: Swift.Equatable {
    /// The name of the training job.
    /// This member is required.
    public var trainingJobName: Swift.String?

    public init (
        trainingJobName: Swift.String? = nil
    )
    {
        self.trainingJobName = trainingJobName
    }
}

struct DescribeTrainingJobInputBody: Swift.Equatable {
    let trainingJobName: Swift.String?
}

extension DescribeTrainingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trainingJobName = "TrainingJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
    }
}

extension DescribeTrainingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTrainingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTrainingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTrainingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTrainingJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.algorithmSpecification = output.algorithmSpecification
            self.autoMLJobArn = output.autoMLJobArn
            self.billableTimeInSeconds = output.billableTimeInSeconds
            self.checkpointConfig = output.checkpointConfig
            self.creationTime = output.creationTime
            self.debugHookConfig = output.debugHookConfig
            self.debugRuleConfigurations = output.debugRuleConfigurations
            self.debugRuleEvaluationStatuses = output.debugRuleEvaluationStatuses
            self.enableInterContainerTrafficEncryption = output.enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = output.enableManagedSpotTraining
            self.enableNetworkIsolation = output.enableNetworkIsolation
            self.environment = output.environment
            self.experimentConfig = output.experimentConfig
            self.failureReason = output.failureReason
            self.finalMetricDataList = output.finalMetricDataList
            self.hyperParameters = output.hyperParameters
            self.inputDataConfig = output.inputDataConfig
            self.labelingJobArn = output.labelingJobArn
            self.lastModifiedTime = output.lastModifiedTime
            self.modelArtifacts = output.modelArtifacts
            self.outputDataConfig = output.outputDataConfig
            self.profilerConfig = output.profilerConfig
            self.profilerRuleConfigurations = output.profilerRuleConfigurations
            self.profilerRuleEvaluationStatuses = output.profilerRuleEvaluationStatuses
            self.profilingStatus = output.profilingStatus
            self.resourceConfig = output.resourceConfig
            self.retryStrategy = output.retryStrategy
            self.roleArn = output.roleArn
            self.secondaryStatus = output.secondaryStatus
            self.secondaryStatusTransitions = output.secondaryStatusTransitions
            self.stoppingCondition = output.stoppingCondition
            self.tensorBoardOutputConfig = output.tensorBoardOutputConfig
            self.trainingEndTime = output.trainingEndTime
            self.trainingJobArn = output.trainingJobArn
            self.trainingJobName = output.trainingJobName
            self.trainingJobStatus = output.trainingJobStatus
            self.trainingStartTime = output.trainingStartTime
            self.trainingTimeInSeconds = output.trainingTimeInSeconds
            self.tuningJobArn = output.tuningJobArn
            self.vpcConfig = output.vpcConfig
        } else {
            self.algorithmSpecification = nil
            self.autoMLJobArn = nil
            self.billableTimeInSeconds = nil
            self.checkpointConfig = nil
            self.creationTime = nil
            self.debugHookConfig = nil
            self.debugRuleConfigurations = nil
            self.debugRuleEvaluationStatuses = nil
            self.enableInterContainerTrafficEncryption = false
            self.enableManagedSpotTraining = false
            self.enableNetworkIsolation = false
            self.environment = nil
            self.experimentConfig = nil
            self.failureReason = nil
            self.finalMetricDataList = nil
            self.hyperParameters = nil
            self.inputDataConfig = nil
            self.labelingJobArn = nil
            self.lastModifiedTime = nil
            self.modelArtifacts = nil
            self.outputDataConfig = nil
            self.profilerConfig = nil
            self.profilerRuleConfigurations = nil
            self.profilerRuleEvaluationStatuses = nil
            self.profilingStatus = nil
            self.resourceConfig = nil
            self.retryStrategy = nil
            self.roleArn = nil
            self.secondaryStatus = nil
            self.secondaryStatusTransitions = nil
            self.stoppingCondition = nil
            self.tensorBoardOutputConfig = nil
            self.trainingEndTime = nil
            self.trainingJobArn = nil
            self.trainingJobName = nil
            self.trainingJobStatus = nil
            self.trainingStartTime = nil
            self.trainingTimeInSeconds = nil
            self.tuningJobArn = nil
            self.vpcConfig = nil
        }
    }
}

public struct DescribeTrainingJobOutputResponse: Swift.Equatable {
    /// Information about the algorithm used for training, and algorithm metadata.
    /// This member is required.
    public var algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
    /// The Amazon Resource Name (ARN) of an AutoML job.
    public var autoMLJobArn: Swift.String?
    /// The billable time in seconds. Billable time refers to the absolute wall-clock time. Multiply BillableTimeInSeconds by the number of instances (InstanceCount) in your training cluster to get the total compute time SageMaker will bill you if you run distributed training. The formula is as follows: BillableTimeInSeconds * InstanceCount . You can calculate the savings from using managed spot training using the formula (1 - BillableTimeInSeconds / TrainingTimeInSeconds) * 100. For example, if BillableTimeInSeconds is 100 and TrainingTimeInSeconds is 500, the savings is 80%.
    public var billableTimeInSeconds: Swift.Int?
    /// Contains information about the output location for managed spot training checkpoint data.
    public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
    /// A timestamp that indicates when the training job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// Configuration information for the Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
    public var debugHookConfig: SageMakerClientTypes.DebugHookConfig?
    /// Configuration information for Debugger rules for debugging output tensors.
    public var debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
    /// Evaluation status of Debugger rules for debugging on a training job.
    public var debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]?
    /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithms in distributed training.
    public var enableInterContainerTrafficEncryption: Swift.Bool
    /// A Boolean indicating whether managed spot training is enabled (True) or not (False).
    public var enableManagedSpotTraining: Swift.Bool
    /// If you want to allow inbound or outbound network calls, except for calls between peers within a training cluster for distributed training, choose True. If you enable network isolation for training jobs that are configured to use a VPC, Amazon SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
    public var enableNetworkIsolation: Swift.Bool
    /// The environment variables to set in the Docker container.
    public var environment: [Swift.String:Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob]
    ///
    /// * [CreateTrainingJob]
    ///
    /// * [CreateTransformJob]
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// If the training job failed, the reason it failed.
    public var failureReason: Swift.String?
    /// A collection of MetricData objects that specify the names, values, and dates and times that the training algorithm emitted to Amazon CloudWatch.
    public var finalMetricDataList: [SageMakerClientTypes.MetricData]?
    /// Algorithm-specific parameters.
    public var hyperParameters: [Swift.String:Swift.String]?
    /// An array of Channel objects that describes each data input channel.
    public var inputDataConfig: [SageMakerClientTypes.Channel]?
    /// The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the transform or training job.
    public var labelingJobArn: Swift.String?
    /// A timestamp that indicates when the status of the training job was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// Information about the Amazon S3 location that is configured for storing model artifacts.
    /// This member is required.
    public var modelArtifacts: SageMakerClientTypes.ModelArtifacts?
    /// The S3 path where model artifacts that you configured when creating the job are stored. Amazon SageMaker creates subfolders for model artifacts.
    public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
    /// Configuration information for Debugger system monitoring, framework profiling, and storage paths.
    public var profilerConfig: SageMakerClientTypes.ProfilerConfig?
    /// Configuration information for Debugger rules for profiling system and framework metrics.
    public var profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    /// Evaluation status of Debugger rules for profiling on a training job.
    public var profilerRuleEvaluationStatuses: [SageMakerClientTypes.ProfilerRuleEvaluationStatus]?
    /// Profiling status of a training job.
    public var profilingStatus: SageMakerClientTypes.ProfilingStatus?
    /// Resources, including ML compute instances and ML storage volumes, that are configured for model training.
    /// This member is required.
    public var resourceConfig: SageMakerClientTypes.ResourceConfig?
    /// The number of times to retry the job when the job fails due to an InternalServerError.
    public var retryStrategy: SageMakerClientTypes.RetryStrategy?
    /// The Amazon Web Services Identity and Access Management (IAM) role configured for the training job.
    public var roleArn: Swift.String?
    /// Provides detailed information about the state of the training job. For detailed information on the secondary status of the training job, see StatusMessage under [SecondaryStatusTransition]. Amazon SageMaker provides primary statuses and secondary statuses that apply to each of them: InProgress
    ///
    /// * Starting - Starting the training job.
    ///
    /// * Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.
    ///
    /// * Training - Training is in progress.
    ///
    /// * Interrupted - The job stopped because the managed spot training instances were interrupted.
    ///
    /// * Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.
    ///
    ///
    /// Completed
    ///
    /// * Completed - The training job has completed.
    ///
    ///
    /// Failed
    ///
    /// * Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.
    ///
    ///
    /// Stopped
    ///
    /// * MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.
    ///
    /// * MaxWaitTimeExceeded - The job stopped because it exceeded the maximum allowed wait time.
    ///
    /// * Stopped - The training job has stopped.
    ///
    ///
    /// Stopping
    ///
    /// * Stopping - Stopping the training job.
    ///
    ///
    /// Valid values for SecondaryStatus are subject to change. We no longer support the following secondary statuses:
    ///
    /// * LaunchingMLInstances
    ///
    /// * PreparingTraining
    ///
    /// * DownloadingTrainingImage
    /// This member is required.
    public var secondaryStatus: SageMakerClientTypes.SecondaryStatus?
    /// A history of all of the secondary statuses that the training job has transitioned through.
    public var secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]?
    /// Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// Configuration of storage locations for the Debugger TensorBoard output data.
    public var tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
    /// Indicates the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.
    public var trainingEndTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the training job.
    /// This member is required.
    public var trainingJobArn: Swift.String?
    /// Name of the model training job.
    /// This member is required.
    public var trainingJobName: Swift.String?
    /// The status of the training job. Amazon SageMaker provides the following training job statuses:
    ///
    /// * InProgress - The training is in progress.
    ///
    /// * Completed - The training job has completed.
    ///
    /// * Failed - The training job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTrainingJobResponse call.
    ///
    /// * Stopping - The training job is stopping.
    ///
    /// * Stopped - The training job has stopped.
    ///
    ///
    /// For more detailed information, see SecondaryStatus.
    /// This member is required.
    public var trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
    /// Indicates the time when the training job starts on training instances. You are billed for the time interval between this time and the value of TrainingEndTime. The start time in CloudWatch Logs might be later than this time. The difference is due to the time it takes to download the training data and to the size of the training container.
    public var trainingStartTime: ClientRuntime.Date?
    /// The training time in seconds.
    public var trainingTimeInSeconds: Swift.Int?
    /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the training job was launched by a hyperparameter tuning job.
    public var tuningJobArn: Swift.String?
    /// A [VpcConfig] object that specifies the VPC that this training job has access to. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init (
        algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification? = nil,
        autoMLJobArn: Swift.String? = nil,
        billableTimeInSeconds: Swift.Int? = nil,
        checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
        creationTime: ClientRuntime.Date? = nil,
        debugHookConfig: SageMakerClientTypes.DebugHookConfig? = nil,
        debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]? = nil,
        debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]? = nil,
        enableInterContainerTrafficEncryption: Swift.Bool = false,
        enableManagedSpotTraining: Swift.Bool = false,
        enableNetworkIsolation: Swift.Bool = false,
        environment: [Swift.String:Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        failureReason: Swift.String? = nil,
        finalMetricDataList: [SageMakerClientTypes.MetricData]? = nil,
        hyperParameters: [Swift.String:Swift.String]? = nil,
        inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
        labelingJobArn: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        modelArtifacts: SageMakerClientTypes.ModelArtifacts? = nil,
        outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
        profilerConfig: SageMakerClientTypes.ProfilerConfig? = nil,
        profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]? = nil,
        profilerRuleEvaluationStatuses: [SageMakerClientTypes.ProfilerRuleEvaluationStatus]? = nil,
        profilingStatus: SageMakerClientTypes.ProfilingStatus? = nil,
        resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
        retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
        roleArn: Swift.String? = nil,
        secondaryStatus: SageMakerClientTypes.SecondaryStatus? = nil,
        secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig? = nil,
        trainingEndTime: ClientRuntime.Date? = nil,
        trainingJobArn: Swift.String? = nil,
        trainingJobName: Swift.String? = nil,
        trainingJobStatus: SageMakerClientTypes.TrainingJobStatus? = nil,
        trainingStartTime: ClientRuntime.Date? = nil,
        trainingTimeInSeconds: Swift.Int? = nil,
        tuningJobArn: Swift.String? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.algorithmSpecification = algorithmSpecification
        self.autoMLJobArn = autoMLJobArn
        self.billableTimeInSeconds = billableTimeInSeconds
        self.checkpointConfig = checkpointConfig
        self.creationTime = creationTime
        self.debugHookConfig = debugHookConfig
        self.debugRuleConfigurations = debugRuleConfigurations
        self.debugRuleEvaluationStatuses = debugRuleEvaluationStatuses
        self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
        self.enableManagedSpotTraining = enableManagedSpotTraining
        self.enableNetworkIsolation = enableNetworkIsolation
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.failureReason = failureReason
        self.finalMetricDataList = finalMetricDataList
        self.hyperParameters = hyperParameters
        self.inputDataConfig = inputDataConfig
        self.labelingJobArn = labelingJobArn
        self.lastModifiedTime = lastModifiedTime
        self.modelArtifacts = modelArtifacts
        self.outputDataConfig = outputDataConfig
        self.profilerConfig = profilerConfig
        self.profilerRuleConfigurations = profilerRuleConfigurations
        self.profilerRuleEvaluationStatuses = profilerRuleEvaluationStatuses
        self.profilingStatus = profilingStatus
        self.resourceConfig = resourceConfig
        self.retryStrategy = retryStrategy
        self.roleArn = roleArn
        self.secondaryStatus = secondaryStatus
        self.secondaryStatusTransitions = secondaryStatusTransitions
        self.stoppingCondition = stoppingCondition
        self.tensorBoardOutputConfig = tensorBoardOutputConfig
        self.trainingEndTime = trainingEndTime
        self.trainingJobArn = trainingJobArn
        self.trainingJobName = trainingJobName
        self.trainingJobStatus = trainingJobStatus
        self.trainingStartTime = trainingStartTime
        self.trainingTimeInSeconds = trainingTimeInSeconds
        self.tuningJobArn = tuningJobArn
        self.vpcConfig = vpcConfig
    }
}

struct DescribeTrainingJobOutputResponseBody: Swift.Equatable {
    let trainingJobName: Swift.String?
    let trainingJobArn: Swift.String?
    let tuningJobArn: Swift.String?
    let labelingJobArn: Swift.String?
    let autoMLJobArn: Swift.String?
    let modelArtifacts: SageMakerClientTypes.ModelArtifacts?
    let trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
    let secondaryStatus: SageMakerClientTypes.SecondaryStatus?
    let failureReason: Swift.String?
    let hyperParameters: [Swift.String:Swift.String]?
    let algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
    let roleArn: Swift.String?
    let inputDataConfig: [SageMakerClientTypes.Channel]?
    let outputDataConfig: SageMakerClientTypes.OutputDataConfig?
    let resourceConfig: SageMakerClientTypes.ResourceConfig?
    let vpcConfig: SageMakerClientTypes.VpcConfig?
    let stoppingCondition: SageMakerClientTypes.StoppingCondition?
    let creationTime: ClientRuntime.Date?
    let trainingStartTime: ClientRuntime.Date?
    let trainingEndTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]?
    let finalMetricDataList: [SageMakerClientTypes.MetricData]?
    let enableNetworkIsolation: Swift.Bool
    let enableInterContainerTrafficEncryption: Swift.Bool
    let enableManagedSpotTraining: Swift.Bool
    let checkpointConfig: SageMakerClientTypes.CheckpointConfig?
    let trainingTimeInSeconds: Swift.Int?
    let billableTimeInSeconds: Swift.Int?
    let debugHookConfig: SageMakerClientTypes.DebugHookConfig?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
    let debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
    let tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
    let debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]?
    let profilerConfig: SageMakerClientTypes.ProfilerConfig?
    let profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    let profilerRuleEvaluationStatuses: [SageMakerClientTypes.ProfilerRuleEvaluationStatus]?
    let profilingStatus: SageMakerClientTypes.ProfilingStatus?
    let retryStrategy: SageMakerClientTypes.RetryStrategy?
    let environment: [Swift.String:Swift.String]?
}

extension DescribeTrainingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case billableTimeInSeconds = "BillableTimeInSeconds"
        case checkpointConfig = "CheckpointConfig"
        case creationTime = "CreationTime"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case debugRuleEvaluationStatuses = "DebugRuleEvaluationStatuses"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case finalMetricDataList = "FinalMetricDataList"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case labelingJobArn = "LabelingJobArn"
        case lastModifiedTime = "LastModifiedTime"
        case modelArtifacts = "ModelArtifacts"
        case outputDataConfig = "OutputDataConfig"
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case profilerRuleEvaluationStatuses = "ProfilerRuleEvaluationStatuses"
        case profilingStatus = "ProfilingStatus"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case secondaryStatus = "SecondaryStatus"
        case secondaryStatusTransitions = "SecondaryStatusTransitions"
        case stoppingCondition = "StoppingCondition"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingEndTime = "TrainingEndTime"
        case trainingJobArn = "TrainingJobArn"
        case trainingJobName = "TrainingJobName"
        case trainingJobStatus = "TrainingJobStatus"
        case trainingStartTime = "TrainingStartTime"
        case trainingTimeInSeconds = "TrainingTimeInSeconds"
        case tuningJobArn = "TuningJobArn"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let tuningJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tuningJobArn)
        tuningJobArn = tuningJobArnDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let modelArtifactsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelArtifacts.self, forKey: .modelArtifacts)
        modelArtifacts = modelArtifactsDecoded
        let trainingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatus.self, forKey: .trainingJobStatus)
        trainingJobStatus = trainingJobStatusDecoded
        let secondaryStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SecondaryStatus.self, forKey: .secondaryStatus)
        secondaryStatus = secondaryStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, hyperparametervalue0) in hyperParametersContainer {
                if let hyperparametervalue0 = hyperparametervalue0 {
                    hyperParametersDecoded0?[key0] = hyperparametervalue0
                }
            }
        }
        hyperParameters = hyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Channel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.Channel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let secondaryStatusTransitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.SecondaryStatusTransition?].self, forKey: .secondaryStatusTransitions)
        var secondaryStatusTransitionsDecoded0:[SageMakerClientTypes.SecondaryStatusTransition]? = nil
        if let secondaryStatusTransitionsContainer = secondaryStatusTransitionsContainer {
            secondaryStatusTransitionsDecoded0 = [SageMakerClientTypes.SecondaryStatusTransition]()
            for structure0 in secondaryStatusTransitionsContainer {
                if let structure0 = structure0 {
                    secondaryStatusTransitionsDecoded0?.append(structure0)
                }
            }
        }
        secondaryStatusTransitions = secondaryStatusTransitionsDecoded0
        let finalMetricDataListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MetricData?].self, forKey: .finalMetricDataList)
        var finalMetricDataListDecoded0:[SageMakerClientTypes.MetricData]? = nil
        if let finalMetricDataListContainer = finalMetricDataListContainer {
            finalMetricDataListDecoded0 = [SageMakerClientTypes.MetricData]()
            for structure0 in finalMetricDataListContainer {
                if let structure0 = structure0 {
                    finalMetricDataListDecoded0?.append(structure0)
                }
            }
        }
        finalMetricDataList = finalMetricDataListDecoded0
        let enableNetworkIsolationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableManagedSpotTraining)
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let trainingTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .trainingTimeInSeconds)
        trainingTimeInSeconds = trainingTimeInSecondsDecoded
        let billableTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billableTimeInSeconds)
        billableTimeInSeconds = billableTimeInSecondsDecoded
        let debugHookConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DebugHookConfig.self, forKey: .debugHookConfig)
        debugHookConfig = debugHookConfigDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let debugRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DebugRuleConfiguration?].self, forKey: .debugRuleConfigurations)
        var debugRuleConfigurationsDecoded0:[SageMakerClientTypes.DebugRuleConfiguration]? = nil
        if let debugRuleConfigurationsContainer = debugRuleConfigurationsContainer {
            debugRuleConfigurationsDecoded0 = [SageMakerClientTypes.DebugRuleConfiguration]()
            for structure0 in debugRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    debugRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        debugRuleConfigurations = debugRuleConfigurationsDecoded0
        let tensorBoardOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TensorBoardOutputConfig.self, forKey: .tensorBoardOutputConfig)
        tensorBoardOutputConfig = tensorBoardOutputConfigDecoded
        let debugRuleEvaluationStatusesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DebugRuleEvaluationStatus?].self, forKey: .debugRuleEvaluationStatuses)
        var debugRuleEvaluationStatusesDecoded0:[SageMakerClientTypes.DebugRuleEvaluationStatus]? = nil
        if let debugRuleEvaluationStatusesContainer = debugRuleEvaluationStatusesContainer {
            debugRuleEvaluationStatusesDecoded0 = [SageMakerClientTypes.DebugRuleEvaluationStatus]()
            for structure0 in debugRuleEvaluationStatusesContainer {
                if let structure0 = structure0 {
                    debugRuleEvaluationStatusesDecoded0?.append(structure0)
                }
            }
        }
        debugRuleEvaluationStatuses = debugRuleEvaluationStatusesDecoded0
        let profilerConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProfilerConfig.self, forKey: .profilerConfig)
        profilerConfig = profilerConfigDecoded
        let profilerRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProfilerRuleConfiguration?].self, forKey: .profilerRuleConfigurations)
        var profilerRuleConfigurationsDecoded0:[SageMakerClientTypes.ProfilerRuleConfiguration]? = nil
        if let profilerRuleConfigurationsContainer = profilerRuleConfigurationsContainer {
            profilerRuleConfigurationsDecoded0 = [SageMakerClientTypes.ProfilerRuleConfiguration]()
            for structure0 in profilerRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    profilerRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        profilerRuleConfigurations = profilerRuleConfigurationsDecoded0
        let profilerRuleEvaluationStatusesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProfilerRuleEvaluationStatus?].self, forKey: .profilerRuleEvaluationStatuses)
        var profilerRuleEvaluationStatusesDecoded0:[SageMakerClientTypes.ProfilerRuleEvaluationStatus]? = nil
        if let profilerRuleEvaluationStatusesContainer = profilerRuleEvaluationStatusesContainer {
            profilerRuleEvaluationStatusesDecoded0 = [SageMakerClientTypes.ProfilerRuleEvaluationStatus]()
            for structure0 in profilerRuleEvaluationStatusesContainer {
                if let structure0 = structure0 {
                    profilerRuleEvaluationStatusesDecoded0?.append(structure0)
                }
            }
        }
        profilerRuleEvaluationStatuses = profilerRuleEvaluationStatusesDecoded0
        let profilingStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProfilingStatus.self, forKey: .profilingStatus)
        profilingStatus = profilingStatusDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, trainingenvironmentvalue0) in environmentContainer {
                if let trainingenvironmentvalue0 = trainingenvironmentvalue0 {
                    environmentDecoded0?[key0] = trainingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
    }
}

extension DescribeTransformJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformJobName = "TransformJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let transformJobName = transformJobName {
            try encodeContainer.encode(transformJobName, forKey: .transformJobName)
        }
    }
}

extension DescribeTransformJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTransformJobInput: Swift.Equatable {
    /// The name of the transform job that you want to view details of.
    /// This member is required.
    public var transformJobName: Swift.String?

    public init (
        transformJobName: Swift.String? = nil
    )
    {
        self.transformJobName = transformJobName
    }
}

struct DescribeTransformJobInputBody: Swift.Equatable {
    let transformJobName: Swift.String?
}

extension DescribeTransformJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformJobName = "TransformJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobName)
        transformJobName = transformJobNameDecoded
    }
}

extension DescribeTransformJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTransformJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTransformJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTransformJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTransformJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoMLJobArn = output.autoMLJobArn
            self.batchStrategy = output.batchStrategy
            self.creationTime = output.creationTime
            self.dataProcessing = output.dataProcessing
            self.environment = output.environment
            self.experimentConfig = output.experimentConfig
            self.failureReason = output.failureReason
            self.labelingJobArn = output.labelingJobArn
            self.maxConcurrentTransforms = output.maxConcurrentTransforms
            self.maxPayloadInMB = output.maxPayloadInMB
            self.modelClientConfig = output.modelClientConfig
            self.modelName = output.modelName
            self.transformEndTime = output.transformEndTime
            self.transformInput = output.transformInput
            self.transformJobArn = output.transformJobArn
            self.transformJobName = output.transformJobName
            self.transformJobStatus = output.transformJobStatus
            self.transformOutput = output.transformOutput
            self.transformResources = output.transformResources
            self.transformStartTime = output.transformStartTime
        } else {
            self.autoMLJobArn = nil
            self.batchStrategy = nil
            self.creationTime = nil
            self.dataProcessing = nil
            self.environment = nil
            self.experimentConfig = nil
            self.failureReason = nil
            self.labelingJobArn = nil
            self.maxConcurrentTransforms = nil
            self.maxPayloadInMB = nil
            self.modelClientConfig = nil
            self.modelName = nil
            self.transformEndTime = nil
            self.transformInput = nil
            self.transformJobArn = nil
            self.transformJobName = nil
            self.transformJobStatus = nil
            self.transformOutput = nil
            self.transformResources = nil
            self.transformStartTime = nil
        }
    }
}

public struct DescribeTransformJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the AutoML transform job.
    public var autoMLJobArn: Swift.String?
    /// Specifies the number of records to include in a mini-batch for an HTTP inference request. A record is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record. To enable the batch strategy, you must set SplitType to Line, RecordIO, or TFRecord.
    public var batchStrategy: SageMakerClientTypes.BatchStrategy?
    /// A timestamp that shows when the transform Job was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see [Associate Prediction Results with their Corresponding Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
    public var dataProcessing: SageMakerClientTypes.DataProcessing?
    /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
    public var environment: [Swift.String:Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob]
    ///
    /// * [CreateTrainingJob]
    ///
    /// * [CreateTransformJob]
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// If the transform job failed, FailureReason describes why it failed. A transform job creates a log file, which includes error messages, and stores it as an Amazon S3 object. For more information, see [Log Amazon SageMaker Events with Amazon CloudWatch](https://docs.aws.amazon.com/sagemaker/latest/dg/logging-cloudwatch.html).
    public var failureReason: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the transform or training job.
    public var labelingJobArn: Swift.String?
    /// The maximum number of parallel requests on each instance node that can be launched in a transform job. The default value is 1.
    public var maxConcurrentTransforms: Swift.Int?
    /// The maximum payload size, in MB, used in the transform job.
    public var maxPayloadInMB: Swift.Int?
    /// The timeout and maximum number of retries for processing a transform job invocation.
    public var modelClientConfig: SageMakerClientTypes.ModelClientConfig?
    /// The name of the model used in the transform job.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates when the transform job has been completed, or has stopped or failed. You are billed for the time interval between this time and the value of TransformStartTime.
    public var transformEndTime: ClientRuntime.Date?
    /// Describes the dataset to be transformed and the Amazon S3 location where it is stored.
    /// This member is required.
    public var transformInput: SageMakerClientTypes.TransformInput?
    /// The Amazon Resource Name (ARN) of the transform job.
    /// This member is required.
    public var transformJobArn: Swift.String?
    /// The name of the transform job.
    /// This member is required.
    public var transformJobName: Swift.String?
    /// The status of the transform job. If the transform job failed, the reason is returned in the FailureReason field.
    /// This member is required.
    public var transformJobStatus: SageMakerClientTypes.TransformJobStatus?
    /// Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
    public var transformOutput: SageMakerClientTypes.TransformOutput?
    /// Describes the resources, including ML instance types and ML instance count, to use for the transform job.
    /// This member is required.
    public var transformResources: SageMakerClientTypes.TransformResources?
    /// Indicates when the transform job starts on ML instances. You are billed for the time interval between this time and the value of TransformEndTime.
    public var transformStartTime: ClientRuntime.Date?

    public init (
        autoMLJobArn: Swift.String? = nil,
        batchStrategy: SageMakerClientTypes.BatchStrategy? = nil,
        creationTime: ClientRuntime.Date? = nil,
        dataProcessing: SageMakerClientTypes.DataProcessing? = nil,
        environment: [Swift.String:Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        failureReason: Swift.String? = nil,
        labelingJobArn: Swift.String? = nil,
        maxConcurrentTransforms: Swift.Int? = nil,
        maxPayloadInMB: Swift.Int? = nil,
        modelClientConfig: SageMakerClientTypes.ModelClientConfig? = nil,
        modelName: Swift.String? = nil,
        transformEndTime: ClientRuntime.Date? = nil,
        transformInput: SageMakerClientTypes.TransformInput? = nil,
        transformJobArn: Swift.String? = nil,
        transformJobName: Swift.String? = nil,
        transformJobStatus: SageMakerClientTypes.TransformJobStatus? = nil,
        transformOutput: SageMakerClientTypes.TransformOutput? = nil,
        transformResources: SageMakerClientTypes.TransformResources? = nil,
        transformStartTime: ClientRuntime.Date? = nil
    )
    {
        self.autoMLJobArn = autoMLJobArn
        self.batchStrategy = batchStrategy
        self.creationTime = creationTime
        self.dataProcessing = dataProcessing
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.failureReason = failureReason
        self.labelingJobArn = labelingJobArn
        self.maxConcurrentTransforms = maxConcurrentTransforms
        self.maxPayloadInMB = maxPayloadInMB
        self.modelClientConfig = modelClientConfig
        self.modelName = modelName
        self.transformEndTime = transformEndTime
        self.transformInput = transformInput
        self.transformJobArn = transformJobArn
        self.transformJobName = transformJobName
        self.transformJobStatus = transformJobStatus
        self.transformOutput = transformOutput
        self.transformResources = transformResources
        self.transformStartTime = transformStartTime
    }
}

struct DescribeTransformJobOutputResponseBody: Swift.Equatable {
    let transformJobName: Swift.String?
    let transformJobArn: Swift.String?
    let transformJobStatus: SageMakerClientTypes.TransformJobStatus?
    let failureReason: Swift.String?
    let modelName: Swift.String?
    let maxConcurrentTransforms: Swift.Int?
    let modelClientConfig: SageMakerClientTypes.ModelClientConfig?
    let maxPayloadInMB: Swift.Int?
    let batchStrategy: SageMakerClientTypes.BatchStrategy?
    let environment: [Swift.String:Swift.String]?
    let transformInput: SageMakerClientTypes.TransformInput?
    let transformOutput: SageMakerClientTypes.TransformOutput?
    let transformResources: SageMakerClientTypes.TransformResources?
    let creationTime: ClientRuntime.Date?
    let transformStartTime: ClientRuntime.Date?
    let transformEndTime: ClientRuntime.Date?
    let labelingJobArn: Swift.String?
    let autoMLJobArn: Swift.String?
    let dataProcessing: SageMakerClientTypes.DataProcessing?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
}

extension DescribeTransformJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobArn = "AutoMLJobArn"
        case batchStrategy = "BatchStrategy"
        case creationTime = "CreationTime"
        case dataProcessing = "DataProcessing"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case labelingJobArn = "LabelingJobArn"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case modelClientConfig = "ModelClientConfig"
        case modelName = "ModelName"
        case transformEndTime = "TransformEndTime"
        case transformInput = "TransformInput"
        case transformJobArn = "TransformJobArn"
        case transformJobName = "TransformJobName"
        case transformJobStatus = "TransformJobStatus"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
        case transformStartTime = "TransformStartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobName)
        transformJobName = transformJobNameDecoded
        let transformJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobArn)
        transformJobArn = transformJobArnDecoded
        let transformJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJobStatus.self, forKey: .transformJobStatus)
        transformJobStatus = transformJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let maxConcurrentTransformsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentTransforms)
        maxConcurrentTransforms = maxConcurrentTransformsDecoded
        let modelClientConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelClientConfig.self, forKey: .modelClientConfig)
        modelClientConfig = modelClientConfigDecoded
        let maxPayloadInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPayloadInMB)
        maxPayloadInMB = maxPayloadInMBDecoded
        let batchStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.BatchStrategy.self, forKey: .batchStrategy)
        batchStrategy = batchStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, transformenvironmentvalue0) in environmentContainer {
                if let transformenvironmentvalue0 = transformenvironmentvalue0 {
                    environmentDecoded0?[key0] = transformenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let transformInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformInput.self, forKey: .transformInput)
        transformInput = transformInputDecoded
        let transformOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformOutput.self, forKey: .transformOutput)
        transformOutput = transformOutputDecoded
        let transformResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformResources.self, forKey: .transformResources)
        transformResources = transformResourcesDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let transformStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transformStartTime)
        transformStartTime = transformStartTimeDecoded
        let transformEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transformEndTime)
        transformEndTime = transformEndTimeDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let dataProcessingDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataProcessing.self, forKey: .dataProcessing)
        dataProcessing = dataProcessingDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
    }
}

extension DescribeTrialComponentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentName = "TrialComponentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
    }
}

extension DescribeTrialComponentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTrialComponentInput: Swift.Equatable {
    /// The name of the trial component to describe.
    /// This member is required.
    public var trialComponentName: Swift.String?

    public init (
        trialComponentName: Swift.String? = nil
    )
    {
        self.trialComponentName = trialComponentName
    }
}

struct DescribeTrialComponentInputBody: Swift.Equatable {
    let trialComponentName: Swift.String?
}

extension DescribeTrialComponentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentName = "TrialComponentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
    }
}

extension DescribeTrialComponentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTrialComponentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTrialComponentOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTrialComponentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTrialComponentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.displayName = output.displayName
            self.endTime = output.endTime
            self.inputArtifacts = output.inputArtifacts
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.lineageGroupArn = output.lineageGroupArn
            self.metadataProperties = output.metadataProperties
            self.metrics = output.metrics
            self.outputArtifacts = output.outputArtifacts
            self.parameters = output.parameters
            self.source = output.source
            self.startTime = output.startTime
            self.status = output.status
            self.trialComponentArn = output.trialComponentArn
            self.trialComponentName = output.trialComponentName
        } else {
            self.createdBy = nil
            self.creationTime = nil
            self.displayName = nil
            self.endTime = nil
            self.inputArtifacts = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.lineageGroupArn = nil
            self.metadataProperties = nil
            self.metrics = nil
            self.outputArtifacts = nil
            self.parameters = nil
            self.source = nil
            self.startTime = nil
            self.status = nil
            self.trialComponentArn = nil
            self.trialComponentName = nil
        }
    }
}

public struct DescribeTrialComponentOutputResponse: Swift.Equatable {
    /// Who created the trial component.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the component was created.
    public var creationTime: ClientRuntime.Date?
    /// The name of the component as displayed. If DisplayName isn't specified, TrialComponentName is displayed.
    public var displayName: Swift.String?
    /// When the component ended.
    public var endTime: ClientRuntime.Date?
    /// The input artifacts of the component.
    public var inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    /// Who last modified the component.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the component was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// The metrics for the component.
    public var metrics: [SageMakerClientTypes.TrialComponentMetricSummary]?
    /// The output artifacts of the component.
    public var outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    /// The hyperparameters of the component.
    public var parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]?
    /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
    public var source: SageMakerClientTypes.TrialComponentSource?
    /// When the component started.
    public var startTime: ClientRuntime.Date?
    /// The status of the component. States include:
    ///
    /// * InProgress
    ///
    /// * Completed
    ///
    /// * Failed
    public var status: SageMakerClientTypes.TrialComponentStatus?
    /// The Amazon Resource Name (ARN) of the trial component.
    public var trialComponentArn: Swift.String?
    /// The name of the trial component.
    public var trialComponentName: Swift.String?

    public init (
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        displayName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        metrics: [SageMakerClientTypes.TrialComponentMetricSummary]? = nil,
        outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil,
        parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil,
        source: SageMakerClientTypes.TrialComponentSource? = nil,
        startTime: ClientRuntime.Date? = nil,
        status: SageMakerClientTypes.TrialComponentStatus? = nil,
        trialComponentArn: Swift.String? = nil,
        trialComponentName: Swift.String? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.displayName = displayName
        self.endTime = endTime
        self.inputArtifacts = inputArtifacts
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.metadataProperties = metadataProperties
        self.metrics = metrics
        self.outputArtifacts = outputArtifacts
        self.parameters = parameters
        self.source = source
        self.startTime = startTime
        self.status = status
        self.trialComponentArn = trialComponentArn
        self.trialComponentName = trialComponentName
    }
}

struct DescribeTrialComponentOutputResponseBody: Swift.Equatable {
    let trialComponentName: Swift.String?
    let trialComponentArn: Swift.String?
    let displayName: Swift.String?
    let source: SageMakerClientTypes.TrialComponentSource?
    let status: SageMakerClientTypes.TrialComponentStatus?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
    let parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]?
    let inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    let outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let metrics: [SageMakerClientTypes.TrialComponentMetricSummary]?
    let lineageGroupArn: Swift.String?
}

extension DescribeTrialComponentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case metadataProperties = "MetadataProperties"
        case metrics = "Metrics"
        case outputArtifacts = "OutputArtifacts"
        case parameters = "Parameters"
        case source = "Source"
        case startTime = "StartTime"
        case status = "Status"
        case trialComponentArn = "TrialComponentArn"
        case trialComponentName = "TrialComponentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentSource.self, forKey: .source)
        source = sourceDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentParameterValue?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]()
            for (key0, trialcomponentparametervalue0) in parametersContainer {
                if let trialcomponentparametervalue0 = trialcomponentparametervalue0 {
                    parametersDecoded0?[key0] = trialcomponentparametervalue0
                }
            }
        }
        parameters = parametersDecoded0
        let inputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in inputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    inputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in outputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    outputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let metricsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrialComponentMetricSummary?].self, forKey: .metrics)
        var metricsDecoded0:[SageMakerClientTypes.TrialComponentMetricSummary]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [SageMakerClientTypes.TrialComponentMetricSummary]()
            for structure0 in metricsContainer {
                if let structure0 = structure0 {
                    metricsDecoded0?.append(structure0)
                }
            }
        }
        metrics = metricsDecoded0
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
    }
}

extension DescribeTrialInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }
}

extension DescribeTrialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTrialInput: Swift.Equatable {
    /// The name of the trial to describe.
    /// This member is required.
    public var trialName: Swift.String?

    public init (
        trialName: Swift.String? = nil
    )
    {
        self.trialName = trialName
    }
}

struct DescribeTrialInputBody: Swift.Equatable {
    let trialName: Swift.String?
}

extension DescribeTrialInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialName = "TrialName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
    }
}

extension DescribeTrialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTrialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTrialOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTrialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTrialOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdBy = output.createdBy
            self.creationTime = output.creationTime
            self.displayName = output.displayName
            self.experimentName = output.experimentName
            self.lastModifiedBy = output.lastModifiedBy
            self.lastModifiedTime = output.lastModifiedTime
            self.metadataProperties = output.metadataProperties
            self.source = output.source
            self.trialArn = output.trialArn
            self.trialName = output.trialName
        } else {
            self.createdBy = nil
            self.creationTime = nil
            self.displayName = nil
            self.experimentName = nil
            self.lastModifiedBy = nil
            self.lastModifiedTime = nil
            self.metadataProperties = nil
            self.source = nil
            self.trialArn = nil
            self.trialName = nil
        }
    }
}

public struct DescribeTrialOutputResponse: Swift.Equatable {
    /// Who created the trial.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the trial was created.
    public var creationTime: ClientRuntime.Date?
    /// The name of the trial as displayed. If DisplayName isn't specified, TrialName is displayed.
    public var displayName: Swift.String?
    /// The name of the experiment the trial is part of.
    public var experimentName: Swift.String?
    /// Who last modified the trial.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the trial was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
    public var source: SageMakerClientTypes.TrialSource?
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?
    /// The name of the trial.
    public var trialName: Swift.String?

    public init (
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: ClientRuntime.Date? = nil,
        displayName: Swift.String? = nil,
        experimentName: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        source: SageMakerClientTypes.TrialSource? = nil,
        trialArn: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.displayName = displayName
        self.experimentName = experimentName
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.metadataProperties = metadataProperties
        self.source = source
        self.trialArn = trialArn
        self.trialName = trialName
    }
}

struct DescribeTrialOutputResponseBody: Swift.Equatable {
    let trialName: Swift.String?
    let trialArn: Swift.String?
    let displayName: Swift.String?
    let experimentName: Swift.String?
    let source: SageMakerClientTypes.TrialSource?
    let creationTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
}

extension DescribeTrialOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case experimentName = "ExperimentName"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case metadataProperties = "MetadataProperties"
        case source = "Source"
        case trialArn = "TrialArn"
        case trialName = "TrialName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let trialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialArn)
        trialArn = trialArnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialSource.self, forKey: .source)
        source = sourceDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
    }
}

extension DescribeUserProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }
}

extension DescribeUserProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeUserProfileInput: Swift.Equatable {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The user profile name. This value is not case sensitive.
    /// This member is required.
    public var userProfileName: Swift.String?

    public init (
        domainId: Swift.String? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.domainId = domainId
        self.userProfileName = userProfileName
    }
}

struct DescribeUserProfileInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileName: Swift.String?
}

extension DescribeUserProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
    }
}

extension DescribeUserProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUserProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUserProfileOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeUserProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.domainId = output.domainId
            self.failureReason = output.failureReason
            self.homeEfsFileSystemUid = output.homeEfsFileSystemUid
            self.lastModifiedTime = output.lastModifiedTime
            self.singleSignOnUserIdentifier = output.singleSignOnUserIdentifier
            self.singleSignOnUserValue = output.singleSignOnUserValue
            self.status = output.status
            self.userProfileArn = output.userProfileArn
            self.userProfileName = output.userProfileName
            self.userSettings = output.userSettings
        } else {
            self.creationTime = nil
            self.domainId = nil
            self.failureReason = nil
            self.homeEfsFileSystemUid = nil
            self.lastModifiedTime = nil
            self.singleSignOnUserIdentifier = nil
            self.singleSignOnUserValue = nil
            self.status = nil
            self.userProfileArn = nil
            self.userProfileName = nil
            self.userSettings = nil
        }
    }
}

public struct DescribeUserProfileOutputResponse: Swift.Equatable {
    /// The creation time.
    public var creationTime: ClientRuntime.Date?
    /// The ID of the domain that contains the profile.
    public var domainId: Swift.String?
    /// The failure reason.
    public var failureReason: Swift.String?
    /// The ID of the user's profile in the Amazon Elastic File System (EFS) volume.
    public var homeEfsFileSystemUid: Swift.String?
    /// The last modified time.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The SSO user identifier.
    public var singleSignOnUserIdentifier: Swift.String?
    /// The SSO user value.
    public var singleSignOnUserValue: Swift.String?
    /// The status.
    public var status: SageMakerClientTypes.UserProfileStatus?
    /// The user profile Amazon Resource Name (ARN).
    public var userProfileArn: Swift.String?
    /// The user profile name.
    public var userProfileName: Swift.String?
    /// A collection of settings.
    public var userSettings: SageMakerClientTypes.UserSettings?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        domainId: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        homeEfsFileSystemUid: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        singleSignOnUserIdentifier: Swift.String? = nil,
        singleSignOnUserValue: Swift.String? = nil,
        status: SageMakerClientTypes.UserProfileStatus? = nil,
        userProfileArn: Swift.String? = nil,
        userProfileName: Swift.String? = nil,
        userSettings: SageMakerClientTypes.UserSettings? = nil
    )
    {
        self.creationTime = creationTime
        self.domainId = domainId
        self.failureReason = failureReason
        self.homeEfsFileSystemUid = homeEfsFileSystemUid
        self.lastModifiedTime = lastModifiedTime
        self.singleSignOnUserIdentifier = singleSignOnUserIdentifier
        self.singleSignOnUserValue = singleSignOnUserValue
        self.status = status
        self.userProfileArn = userProfileArn
        self.userProfileName = userProfileName
        self.userSettings = userSettings
    }
}

struct DescribeUserProfileOutputResponseBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileArn: Swift.String?
    let userProfileName: Swift.String?
    let homeEfsFileSystemUid: Swift.String?
    let status: SageMakerClientTypes.UserProfileStatus?
    let lastModifiedTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let singleSignOnUserIdentifier: Swift.String?
    let singleSignOnUserValue: Swift.String?
    let userSettings: SageMakerClientTypes.UserSettings?
}

extension DescribeUserProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case domainId = "DomainId"
        case failureReason = "FailureReason"
        case homeEfsFileSystemUid = "HomeEfsFileSystemUid"
        case lastModifiedTime = "LastModifiedTime"
        case singleSignOnUserIdentifier = "SingleSignOnUserIdentifier"
        case singleSignOnUserValue = "SingleSignOnUserValue"
        case status = "Status"
        case userProfileArn = "UserProfileArn"
        case userProfileName = "UserProfileName"
        case userSettings = "UserSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileArn)
        userProfileArn = userProfileArnDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let homeEfsFileSystemUidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeEfsFileSystemUid)
        homeEfsFileSystemUid = homeEfsFileSystemUidDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserProfileStatus.self, forKey: .status)
        status = statusDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let singleSignOnUserIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .singleSignOnUserIdentifier)
        singleSignOnUserIdentifier = singleSignOnUserIdentifierDecoded
        let singleSignOnUserValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .singleSignOnUserValue)
        singleSignOnUserValue = singleSignOnUserValueDecoded
        let userSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserSettings.self, forKey: .userSettings)
        userSettings = userSettingsDecoded
    }
}

extension DescribeWorkforceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workforceName = "WorkforceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workforceName = workforceName {
            try encodeContainer.encode(workforceName, forKey: .workforceName)
        }
    }
}

extension DescribeWorkforceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeWorkforceInput: Swift.Equatable {
    /// The name of the private workforce whose access you want to restrict. WorkforceName is automatically set to default when a workforce is created and cannot be modified.
    /// This member is required.
    public var workforceName: Swift.String?

    public init (
        workforceName: Swift.String? = nil
    )
    {
        self.workforceName = workforceName
    }
}

struct DescribeWorkforceInputBody: Swift.Equatable {
    let workforceName: Swift.String?
}

extension DescribeWorkforceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workforceName = "WorkforceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
    }
}

extension DescribeWorkforceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeWorkforceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeWorkforceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeWorkforceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeWorkforceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.workforce = output.workforce
        } else {
            self.workforce = nil
        }
    }
}

public struct DescribeWorkforceOutputResponse: Swift.Equatable {
    /// A single private workforce, which is automatically created when you create your first private work team. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see [Create a Private Workforce](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html).
    /// This member is required.
    public var workforce: SageMakerClientTypes.Workforce?

    public init (
        workforce: SageMakerClientTypes.Workforce? = nil
    )
    {
        self.workforce = workforce
    }
}

struct DescribeWorkforceOutputResponseBody: Swift.Equatable {
    let workforce: SageMakerClientTypes.Workforce?
}

extension DescribeWorkforceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workforce = "Workforce"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Workforce.self, forKey: .workforce)
        workforce = workforceDecoded
    }
}

extension DescribeWorkteamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workteamName = "WorkteamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workteamName = workteamName {
            try encodeContainer.encode(workteamName, forKey: .workteamName)
        }
    }
}

extension DescribeWorkteamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeWorkteamInput: Swift.Equatable {
    /// The name of the work team to return a description of.
    /// This member is required.
    public var workteamName: Swift.String?

    public init (
        workteamName: Swift.String? = nil
    )
    {
        self.workteamName = workteamName
    }
}

struct DescribeWorkteamInputBody: Swift.Equatable {
    let workteamName: Swift.String?
}

extension DescribeWorkteamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workteamName = "WorkteamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamName)
        workteamName = workteamNameDecoded
    }
}

extension DescribeWorkteamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeWorkteamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeWorkteamOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeWorkteamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeWorkteamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.workteam = output.workteam
        } else {
            self.workteam = nil
        }
    }
}

public struct DescribeWorkteamOutputResponse: Swift.Equatable {
    /// A Workteam instance that contains information about the work team.
    /// This member is required.
    public var workteam: SageMakerClientTypes.Workteam?

    public init (
        workteam: SageMakerClientTypes.Workteam? = nil
    )
    {
        self.workteam = workteam
    }
}

struct DescribeWorkteamOutputResponseBody: Swift.Equatable {
    let workteam: SageMakerClientTypes.Workteam?
}

extension DescribeWorkteamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workteam = "Workteam"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Workteam.self, forKey: .workteam)
        workteam = workteamDecoded
    }
}

extension SageMakerClientTypes.DesiredWeightAndCapacity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredInstanceCount = "DesiredInstanceCount"
        case desiredWeight = "DesiredWeight"
        case variantName = "VariantName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredInstanceCount = desiredInstanceCount {
            try encodeContainer.encode(desiredInstanceCount, forKey: .desiredInstanceCount)
        }
        if let desiredWeight = desiredWeight {
            try encodeContainer.encode(desiredWeight, forKey: .desiredWeight)
        }
        if let variantName = variantName {
            try encodeContainer.encode(variantName, forKey: .variantName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .variantName)
        variantName = variantNameDecoded
        let desiredWeightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .desiredWeight)
        desiredWeight = desiredWeightDecoded
        let desiredInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredInstanceCount)
        desiredInstanceCount = desiredInstanceCountDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies weight and capacity values for a production variant.
    public struct DesiredWeightAndCapacity: Swift.Equatable {
        /// The variant's capacity.
        public var desiredInstanceCount: Swift.Int?
        /// The variant's weight.
        public var desiredWeight: Swift.Float?
        /// The name of the variant to update.
        /// This member is required.
        public var variantName: Swift.String?

        public init (
            desiredInstanceCount: Swift.Int? = nil,
            desiredWeight: Swift.Float? = nil,
            variantName: Swift.String? = nil
        )
        {
            self.desiredInstanceCount = desiredInstanceCount
            self.desiredWeight = desiredWeight
            self.variantName = variantName
        }
    }

}

extension SageMakerClientTypes {
    public enum DetailedAlgorithmStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case notStarted
        case sdkUnknown(Swift.String)

        public static var allCases: [DetailedAlgorithmStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .notStarted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .notStarted: return "NotStarted"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DetailedAlgorithmStatus(rawValue: rawValue) ?? DetailedAlgorithmStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum DetailedModelPackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case notStarted
        case sdkUnknown(Swift.String)

        public static var allCases: [DetailedModelPackageStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .notStarted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .notStarted: return "NotStarted"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DetailedModelPackageStatus(rawValue: rawValue) ?? DetailedModelPackageStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.Device: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case deviceName = "DeviceName"
        case iotThingName = "IotThingName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceName = deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let iotThingName = iotThingName {
            try encodeContainer.encode(iotThingName, forKey: .iotThingName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let iotThingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iotThingName)
        iotThingName = iotThingNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Information of a particular device.
    public struct Device: Swift.Equatable {
        /// Description of the device.
        public var description: Swift.String?
        /// The name of the device.
        /// This member is required.
        public var deviceName: Swift.String?
        /// Amazon Web Services Internet of Things (IoT) object name.
        public var iotThingName: Swift.String?

        public init (
            description: Swift.String? = nil,
            deviceName: Swift.String? = nil,
            iotThingName: Swift.String? = nil
        )
        {
            self.description = description
            self.deviceName = deviceName
            self.iotThingName = iotThingName
        }
    }

}

extension SageMakerClientTypes.DeviceFleetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case deviceFleetArn = "DeviceFleetArn"
        case deviceFleetName = "DeviceFleetName"
        case lastModifiedTime = "LastModifiedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let deviceFleetArn = deviceFleetArn {
            try encodeContainer.encode(deviceFleetArn, forKey: .deviceFleetArn)
        }
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetArn)
        deviceFleetArn = deviceFleetArnDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Summary of the device fleet.
    public struct DeviceFleetSummary: Swift.Equatable {
        /// Timestamp of when the device fleet was created.
        public var creationTime: ClientRuntime.Date?
        /// Amazon Resource Name (ARN) of the device fleet.
        /// This member is required.
        public var deviceFleetArn: Swift.String?
        /// Name of the device fleet.
        /// This member is required.
        public var deviceFleetName: Swift.String?
        /// Timestamp of when the device fleet was last updated.
        public var lastModifiedTime: ClientRuntime.Date?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            deviceFleetArn: Swift.String? = nil,
            deviceFleetName: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.deviceFleetArn = deviceFleetArn
            self.deviceFleetName = deviceFleetName
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes.DeviceStats: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectedDeviceCount = "ConnectedDeviceCount"
        case registeredDeviceCount = "RegisteredDeviceCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if connectedDeviceCount != 0 {
            try encodeContainer.encode(connectedDeviceCount, forKey: .connectedDeviceCount)
        }
        if registeredDeviceCount != 0 {
            try encodeContainer.encode(registeredDeviceCount, forKey: .registeredDeviceCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectedDeviceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .connectedDeviceCount)
        connectedDeviceCount = connectedDeviceCountDecoded
        let registeredDeviceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .registeredDeviceCount)
        registeredDeviceCount = registeredDeviceCountDecoded
    }
}

extension SageMakerClientTypes {
    /// Status of devices.
    public struct DeviceStats: Swift.Equatable {
        /// The number of devices connected with a heartbeat.
        /// This member is required.
        public var connectedDeviceCount: Swift.Int
        /// The number of registered devices.
        /// This member is required.
        public var registeredDeviceCount: Swift.Int

        public init (
            connectedDeviceCount: Swift.Int = 0,
            registeredDeviceCount: Swift.Int = 0
        )
        {
            self.connectedDeviceCount = connectedDeviceCount
            self.registeredDeviceCount = registeredDeviceCount
        }
    }

}

extension SageMakerClientTypes.DeviceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentVersion = "AgentVersion"
        case description = "Description"
        case deviceArn = "DeviceArn"
        case deviceFleetName = "DeviceFleetName"
        case deviceName = "DeviceName"
        case iotThingName = "IotThingName"
        case latestHeartbeat = "LatestHeartbeat"
        case models = "Models"
        case registrationTime = "RegistrationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentVersion = agentVersion {
            try encodeContainer.encode(agentVersion, forKey: .agentVersion)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceArn = deviceArn {
            try encodeContainer.encode(deviceArn, forKey: .deviceArn)
        }
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let deviceName = deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let iotThingName = iotThingName {
            try encodeContainer.encode(iotThingName, forKey: .iotThingName)
        }
        if let latestHeartbeat = latestHeartbeat {
            try encodeContainer.encode(latestHeartbeat.timeIntervalSince1970, forKey: .latestHeartbeat)
        }
        if let models = models {
            var modelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .models)
            for edgemodelsummaries0 in models {
                try modelsContainer.encode(edgemodelsummaries0)
            }
        }
        if let registrationTime = registrationTime {
            try encodeContainer.encode(registrationTime.timeIntervalSince1970, forKey: .registrationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let deviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let iotThingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iotThingName)
        iotThingName = iotThingNameDecoded
        let registrationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registrationTime)
        registrationTime = registrationTimeDecoded
        let latestHeartbeatDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .latestHeartbeat)
        latestHeartbeat = latestHeartbeatDecoded
        let modelsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EdgeModelSummary?].self, forKey: .models)
        var modelsDecoded0:[SageMakerClientTypes.EdgeModelSummary]? = nil
        if let modelsContainer = modelsContainer {
            modelsDecoded0 = [SageMakerClientTypes.EdgeModelSummary]()
            for structure0 in modelsContainer {
                if let structure0 = structure0 {
                    modelsDecoded0?.append(structure0)
                }
            }
        }
        models = modelsDecoded0
        let agentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
    }
}

extension SageMakerClientTypes {
    /// Summary of the device.
    public struct DeviceSummary: Swift.Equatable {
        /// Edge Manager agent version.
        public var agentVersion: Swift.String?
        /// A description of the device.
        public var description: Swift.String?
        /// Amazon Resource Name (ARN) of the device.
        /// This member is required.
        public var deviceArn: Swift.String?
        /// The name of the fleet the device belongs to.
        public var deviceFleetName: Swift.String?
        /// The unique identifier of the device.
        /// This member is required.
        public var deviceName: Swift.String?
        /// The Amazon Web Services Internet of Things (IoT) object thing name associated with the device..
        public var iotThingName: Swift.String?
        /// The last heartbeat received from the device.
        public var latestHeartbeat: ClientRuntime.Date?
        /// Models on the device.
        public var models: [SageMakerClientTypes.EdgeModelSummary]?
        /// The timestamp of the last registration or de-reregistration.
        public var registrationTime: ClientRuntime.Date?

        public init (
            agentVersion: Swift.String? = nil,
            description: Swift.String? = nil,
            deviceArn: Swift.String? = nil,
            deviceFleetName: Swift.String? = nil,
            deviceName: Swift.String? = nil,
            iotThingName: Swift.String? = nil,
            latestHeartbeat: ClientRuntime.Date? = nil,
            models: [SageMakerClientTypes.EdgeModelSummary]? = nil,
            registrationTime: ClientRuntime.Date? = nil
        )
        {
            self.agentVersion = agentVersion
            self.description = description
            self.deviceArn = deviceArn
            self.deviceFleetName = deviceFleetName
            self.deviceName = deviceName
            self.iotThingName = iotThingName
            self.latestHeartbeat = latestHeartbeat
            self.models = models
            self.registrationTime = registrationTime
        }
    }

}

extension SageMakerClientTypes {
    public enum DirectInternetAccess: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectInternetAccess] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectInternetAccess(rawValue: rawValue) ?? DirectInternetAccess.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum Direction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascendants
        case both
        case descendants
        case sdkUnknown(Swift.String)

        public static var allCases: [Direction] {
            return [
                .ascendants,
                .both,
                .descendants,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascendants: return "Ascendants"
            case .both: return "Both"
            case .descendants: return "Descendants"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Direction(rawValue: rawValue) ?? Direction.sdkUnknown(rawValue)
        }
    }
}

extension DisableSagemakerServicecatalogPortfolioInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DisableSagemakerServicecatalogPortfolioInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisableSagemakerServicecatalogPortfolioInput: Swift.Equatable {

}

struct DisableSagemakerServicecatalogPortfolioInputBody: Swift.Equatable {
}

extension DisableSagemakerServicecatalogPortfolioInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisableSagemakerServicecatalogPortfolioOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableSagemakerServicecatalogPortfolioOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableSagemakerServicecatalogPortfolioOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableSagemakerServicecatalogPortfolioOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableSagemakerServicecatalogPortfolioOutputResponse: Swift.Equatable {

}

extension DisassociateTrialComponentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentName = "TrialComponentName"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }
}

extension DisassociateTrialComponentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociateTrialComponentInput: Swift.Equatable {
    /// The name of the component to disassociate from the trial.
    /// This member is required.
    public var trialComponentName: Swift.String?
    /// The name of the trial to disassociate from.
    /// This member is required.
    public var trialName: Swift.String?

    public init (
        trialComponentName: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.trialComponentName = trialComponentName
        self.trialName = trialName
    }
}

struct DisassociateTrialComponentInputBody: Swift.Equatable {
    let trialComponentName: Swift.String?
    let trialName: Swift.String?
}

extension DisassociateTrialComponentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentName = "TrialComponentName"
        case trialName = "TrialName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
    }
}

extension DisassociateTrialComponentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateTrialComponentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateTrialComponentOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateTrialComponentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisassociateTrialComponentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trialArn = output.trialArn
            self.trialComponentArn = output.trialComponentArn
        } else {
            self.trialArn = nil
            self.trialComponentArn = nil
        }
    }
}

public struct DisassociateTrialComponentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?
    /// The ARN of the trial component.
    public var trialComponentArn: Swift.String?

    public init (
        trialArn: Swift.String? = nil,
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
        self.trialComponentArn = trialComponentArn
    }
}

struct DisassociateTrialComponentOutputResponseBody: Swift.Equatable {
    let trialComponentArn: Swift.String?
    let trialArn: Swift.String?
}

extension DisassociateTrialComponentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialArn = "TrialArn"
        case trialComponentArn = "TrialComponentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
        let trialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialArn)
        trialArn = trialArnDecoded
    }
}

extension SageMakerClientTypes.DomainDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case domainArn = "DomainArn"
        case domainId = "DomainId"
        case domainName = "DomainName"
        case lastModifiedTime = "LastModifiedTime"
        case status = "Status"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let domainArn = domainArn {
            try encodeContainer.encode(domainArn, forKey: .domainArn)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DomainStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension SageMakerClientTypes {
    /// The domain's details.
    public struct DomainDetails: Swift.Equatable {
        /// The creation time.
        public var creationTime: ClientRuntime.Date?
        /// The domain's Amazon Resource Name (ARN).
        public var domainArn: Swift.String?
        /// The domain ID.
        public var domainId: Swift.String?
        /// The domain name.
        public var domainName: Swift.String?
        /// The last modified time.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The status.
        public var status: SageMakerClientTypes.DomainStatus?
        /// The domain's URL.
        public var url: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            domainArn: Swift.String? = nil,
            domainId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            status: SageMakerClientTypes.DomainStatus? = nil,
            url: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.domainArn = domainArn
            self.domainId = domainId
            self.domainName = domainName
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.url = url
        }
    }

}

extension SageMakerClientTypes.DomainSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rStudioServerProDomainSettings = "RStudioServerProDomainSettings"
        case securityGroupIds = "SecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rStudioServerProDomainSettings = rStudioServerProDomainSettings {
            try encodeContainer.encode(rStudioServerProDomainSettings, forKey: .rStudioServerProDomainSettings)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for domainsecuritygroupids0 in securityGroupIds {
                try securityGroupIdsContainer.encode(domainsecuritygroupids0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let rStudioServerProDomainSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RStudioServerProDomainSettings.self, forKey: .rStudioServerProDomainSettings)
        rStudioServerProDomainSettings = rStudioServerProDomainSettingsDecoded
    }
}

extension SageMakerClientTypes {
    /// A collection of settings that apply to the SageMaker Domain. These settings are specified through the CreateDomain API call.
    public struct DomainSettings: Swift.Equatable {
        /// A collection of settings that configure the RStudioServerPro Domain-level app.
        public var rStudioServerProDomainSettings: SageMakerClientTypes.RStudioServerProDomainSettings?
        /// The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        public var securityGroupIds: [Swift.String]?

        public init (
            rStudioServerProDomainSettings: SageMakerClientTypes.RStudioServerProDomainSettings? = nil,
            securityGroupIds: [Swift.String]? = nil
        )
        {
            self.rStudioServerProDomainSettings = rStudioServerProDomainSettings
            self.securityGroupIds = securityGroupIds
        }
    }

}

extension SageMakerClientTypes.DomainSettingsForUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rStudioServerProDomainSettingsForUpdate = "RStudioServerProDomainSettingsForUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rStudioServerProDomainSettingsForUpdate = rStudioServerProDomainSettingsForUpdate {
            try encodeContainer.encode(rStudioServerProDomainSettingsForUpdate, forKey: .rStudioServerProDomainSettingsForUpdate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rStudioServerProDomainSettingsForUpdateDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RStudioServerProDomainSettingsForUpdate.self, forKey: .rStudioServerProDomainSettingsForUpdate)
        rStudioServerProDomainSettingsForUpdate = rStudioServerProDomainSettingsForUpdateDecoded
    }
}

extension SageMakerClientTypes {
    /// A collection of Domain configuration settings to update.
    public struct DomainSettingsForUpdate: Swift.Equatable {
        /// A collection of RStudioServerPro Domain-level app settings to update.
        public var rStudioServerProDomainSettingsForUpdate: SageMakerClientTypes.RStudioServerProDomainSettingsForUpdate?

        public init (
            rStudioServerProDomainSettingsForUpdate: SageMakerClientTypes.RStudioServerProDomainSettingsForUpdate? = nil
        )
        {
            self.rStudioServerProDomainSettingsForUpdate = rStudioServerProDomainSettingsForUpdate
        }
    }

}

extension SageMakerClientTypes {
    public enum DomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleteFailed
        case deleting
        case failed
        case inservice
        case pending
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainStatus] {
            return [
                .deleteFailed,
                .deleting,
                .failed,
                .inservice,
                .pending,
                .updateFailed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleteFailed: return "Delete_Failed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .pending: return "Pending"
            case .updateFailed: return "Update_Failed"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DomainStatus(rawValue: rawValue) ?? DomainStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.DriftCheckBaselines: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bias = "Bias"
        case explainability = "Explainability"
        case modelDataQuality = "ModelDataQuality"
        case modelQuality = "ModelQuality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bias = bias {
            try encodeContainer.encode(bias, forKey: .bias)
        }
        if let explainability = explainability {
            try encodeContainer.encode(explainability, forKey: .explainability)
        }
        if let modelDataQuality = modelDataQuality {
            try encodeContainer.encode(modelDataQuality, forKey: .modelDataQuality)
        }
        if let modelQuality = modelQuality {
            try encodeContainer.encode(modelQuality, forKey: .modelQuality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let biasDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DriftCheckBias.self, forKey: .bias)
        bias = biasDecoded
        let explainabilityDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DriftCheckExplainability.self, forKey: .explainability)
        explainability = explainabilityDecoded
        let modelQualityDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DriftCheckModelQuality.self, forKey: .modelQuality)
        modelQuality = modelQualityDecoded
        let modelDataQualityDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DriftCheckModelDataQuality.self, forKey: .modelDataQuality)
        modelDataQuality = modelDataQualityDecoded
    }
}

extension SageMakerClientTypes {
    /// Represents the drift check baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckBaselines: Swift.Equatable {
        /// Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
        public var bias: SageMakerClientTypes.DriftCheckBias?
        /// Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.
        public var explainability: SageMakerClientTypes.DriftCheckExplainability?
        /// Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package.
        public var modelDataQuality: SageMakerClientTypes.DriftCheckModelDataQuality?
        /// Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
        public var modelQuality: SageMakerClientTypes.DriftCheckModelQuality?

        public init (
            bias: SageMakerClientTypes.DriftCheckBias? = nil,
            explainability: SageMakerClientTypes.DriftCheckExplainability? = nil,
            modelDataQuality: SageMakerClientTypes.DriftCheckModelDataQuality? = nil,
            modelQuality: SageMakerClientTypes.DriftCheckModelQuality? = nil
        )
        {
            self.bias = bias
            self.explainability = explainability
            self.modelDataQuality = modelDataQuality
            self.modelQuality = modelQuality
        }
    }

}

extension SageMakerClientTypes.DriftCheckBias: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configFile = "ConfigFile"
        case postTrainingConstraints = "PostTrainingConstraints"
        case preTrainingConstraints = "PreTrainingConstraints"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configFile = configFile {
            try encodeContainer.encode(configFile, forKey: .configFile)
        }
        if let postTrainingConstraints = postTrainingConstraints {
            try encodeContainer.encode(postTrainingConstraints, forKey: .postTrainingConstraints)
        }
        if let preTrainingConstraints = preTrainingConstraints {
            try encodeContainer.encode(preTrainingConstraints, forKey: .preTrainingConstraints)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configFileDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FileSource.self, forKey: .configFile)
        configFile = configFileDecoded
        let preTrainingConstraintsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .preTrainingConstraints)
        preTrainingConstraints = preTrainingConstraintsDecoded
        let postTrainingConstraintsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .postTrainingConstraints)
        postTrainingConstraints = postTrainingConstraintsDecoded
    }
}

extension SageMakerClientTypes {
    /// Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckBias: Swift.Equatable {
        /// The bias config file for a model.
        public var configFile: SageMakerClientTypes.FileSource?
        ///
        public var postTrainingConstraints: SageMakerClientTypes.MetricsSource?
        ///
        public var preTrainingConstraints: SageMakerClientTypes.MetricsSource?

        public init (
            configFile: SageMakerClientTypes.FileSource? = nil,
            postTrainingConstraints: SageMakerClientTypes.MetricsSource? = nil,
            preTrainingConstraints: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.configFile = configFile
            self.postTrainingConstraints = postTrainingConstraints
            self.preTrainingConstraints = preTrainingConstraints
        }
    }

}

extension SageMakerClientTypes.DriftCheckExplainability: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configFile = "ConfigFile"
        case constraints = "Constraints"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configFile = configFile {
            try encodeContainer.encode(configFile, forKey: .configFile)
        }
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let constraintsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .constraints)
        constraints = constraintsDecoded
        let configFileDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FileSource.self, forKey: .configFile)
        configFile = configFileDecoded
    }
}

extension SageMakerClientTypes {
    /// Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckExplainability: Swift.Equatable {
        /// The explainability config file for the model.
        public var configFile: SageMakerClientTypes.FileSource?
        ///
        public var constraints: SageMakerClientTypes.MetricsSource?

        public init (
            configFile: SageMakerClientTypes.FileSource? = nil,
            constraints: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.configFile = configFile
            self.constraints = constraints
        }
    }

}

extension SageMakerClientTypes.DriftCheckModelDataQuality: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints = "Constraints"
        case statistics = "Statistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let statistics = statistics {
            try encodeContainer.encode(statistics, forKey: .statistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statisticsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .statistics)
        statistics = statisticsDecoded
        let constraintsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .constraints)
        constraints = constraintsDecoded
    }
}

extension SageMakerClientTypes {
    /// Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckModelDataQuality: Swift.Equatable {
        ///
        public var constraints: SageMakerClientTypes.MetricsSource?
        ///
        public var statistics: SageMakerClientTypes.MetricsSource?

        public init (
            constraints: SageMakerClientTypes.MetricsSource? = nil,
            statistics: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.constraints = constraints
            self.statistics = statistics
        }
    }

}

extension SageMakerClientTypes.DriftCheckModelQuality: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints = "Constraints"
        case statistics = "Statistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let statistics = statistics {
            try encodeContainer.encode(statistics, forKey: .statistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statisticsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .statistics)
        statistics = statisticsDecoded
        let constraintsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .constraints)
        constraints = constraintsDecoded
    }
}

extension SageMakerClientTypes {
    /// Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckModelQuality: Swift.Equatable {
        ///
        public var constraints: SageMakerClientTypes.MetricsSource?
        ///
        public var statistics: SageMakerClientTypes.MetricsSource?

        public init (
            constraints: SageMakerClientTypes.MetricsSource? = nil,
            statistics: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.constraints = constraints
            self.statistics = statistics
        }
    }

}

extension SageMakerClientTypes.Edge: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationType = "AssociationType"
        case destinationArn = "DestinationArn"
        case sourceArn = "SourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationType = associationType {
            try encodeContainer.encode(associationType.rawValue, forKey: .associationType)
        }
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let associationTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AssociationEdgeType.self, forKey: .associationType)
        associationType = associationTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// A directed edge connecting two lineage entities.
    public struct Edge: Swift.Equatable {
        /// The type of the Association(Edge) between the source and destination. For example ContributedTo, Produced, or DerivedFrom.
        public var associationType: SageMakerClientTypes.AssociationEdgeType?
        /// The Amazon Resource Name (ARN) of the destination lineage entity of the directed edge.
        public var destinationArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the source lineage entity of the directed edge.
        public var sourceArn: Swift.String?

        public init (
            associationType: SageMakerClientTypes.AssociationEdgeType? = nil,
            destinationArn: Swift.String? = nil,
            sourceArn: Swift.String? = nil
        )
        {
            self.associationType = associationType
            self.destinationArn = destinationArn
            self.sourceArn = sourceArn
        }
    }

}

extension SageMakerClientTypes.EdgeModel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case latestInference = "LatestInference"
        case latestSampleTime = "LatestSampleTime"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latestInference = latestInference {
            try encodeContainer.encode(latestInference.timeIntervalSince1970, forKey: .latestInference)
        }
        if let latestSampleTime = latestSampleTime {
            try encodeContainer.encode(latestSampleTime.timeIntervalSince1970, forKey: .latestSampleTime)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let latestSampleTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .latestSampleTime)
        latestSampleTime = latestSampleTimeDecoded
        let latestInferenceDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .latestInference)
        latestInference = latestInferenceDecoded
    }
}

extension SageMakerClientTypes {
    /// The model on the edge device.
    public struct EdgeModel: Swift.Equatable {
        /// The timestamp of the last inference that was made.
        public var latestInference: ClientRuntime.Date?
        /// The timestamp of the last data sample taken.
        public var latestSampleTime: ClientRuntime.Date?
        /// The name of the model.
        /// This member is required.
        public var modelName: Swift.String?
        /// The model version.
        /// This member is required.
        public var modelVersion: Swift.String?

        public init (
            latestInference: ClientRuntime.Date? = nil,
            latestSampleTime: ClientRuntime.Date? = nil,
            modelName: Swift.String? = nil,
            modelVersion: Swift.String? = nil
        )
        {
            self.latestInference = latestInference
            self.latestSampleTime = latestSampleTime
            self.modelName = modelName
            self.modelVersion = modelVersion
        }
    }

}

extension SageMakerClientTypes.EdgeModelStat: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDeviceCount = "ActiveDeviceCount"
        case connectedDeviceCount = "ConnectedDeviceCount"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
        case offlineDeviceCount = "OfflineDeviceCount"
        case samplingDeviceCount = "SamplingDeviceCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if activeDeviceCount != 0 {
            try encodeContainer.encode(activeDeviceCount, forKey: .activeDeviceCount)
        }
        if connectedDeviceCount != 0 {
            try encodeContainer.encode(connectedDeviceCount, forKey: .connectedDeviceCount)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
        if offlineDeviceCount != 0 {
            try encodeContainer.encode(offlineDeviceCount, forKey: .offlineDeviceCount)
        }
        if samplingDeviceCount != 0 {
            try encodeContainer.encode(samplingDeviceCount, forKey: .samplingDeviceCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let offlineDeviceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .offlineDeviceCount)
        offlineDeviceCount = offlineDeviceCountDecoded
        let connectedDeviceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .connectedDeviceCount)
        connectedDeviceCount = connectedDeviceCountDecoded
        let activeDeviceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .activeDeviceCount)
        activeDeviceCount = activeDeviceCountDecoded
        let samplingDeviceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .samplingDeviceCount)
        samplingDeviceCount = samplingDeviceCountDecoded
    }
}

extension SageMakerClientTypes {
    /// Status of edge devices with this model.
    public struct EdgeModelStat: Swift.Equatable {
        /// The number of devices that have this model version, a heart beat, and are currently running.
        /// This member is required.
        public var activeDeviceCount: Swift.Int
        /// The number of devices that have this model version and have a heart beat.
        /// This member is required.
        public var connectedDeviceCount: Swift.Int
        /// The name of the model.
        /// This member is required.
        public var modelName: Swift.String?
        /// The model version.
        /// This member is required.
        public var modelVersion: Swift.String?
        /// The number of devices that have this model version and do not have a heart beat.
        /// This member is required.
        public var offlineDeviceCount: Swift.Int
        /// The number of devices with this model version and are producing sample data.
        /// This member is required.
        public var samplingDeviceCount: Swift.Int

        public init (
            activeDeviceCount: Swift.Int = 0,
            connectedDeviceCount: Swift.Int = 0,
            modelName: Swift.String? = nil,
            modelVersion: Swift.String? = nil,
            offlineDeviceCount: Swift.Int = 0,
            samplingDeviceCount: Swift.Int = 0
        )
        {
            self.activeDeviceCount = activeDeviceCount
            self.connectedDeviceCount = connectedDeviceCount
            self.modelName = modelName
            self.modelVersion = modelVersion
            self.offlineDeviceCount = offlineDeviceCount
            self.samplingDeviceCount = samplingDeviceCount
        }
    }

}

extension SageMakerClientTypes.EdgeModelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
    }
}

extension SageMakerClientTypes {
    /// Summary of model on edge device.
    public struct EdgeModelSummary: Swift.Equatable {
        /// The name of the model.
        /// This member is required.
        public var modelName: Swift.String?
        /// The version model.
        /// This member is required.
        public var modelVersion: Swift.String?

        public init (
            modelName: Swift.String? = nil,
            modelVersion: Swift.String? = nil
        )
        {
            self.modelName = modelName
            self.modelVersion = modelVersion
        }
    }

}

extension SageMakerClientTypes.EdgeOutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case presetDeploymentConfig = "PresetDeploymentConfig"
        case presetDeploymentType = "PresetDeploymentType"
        case s3OutputLocation = "S3OutputLocation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let presetDeploymentConfig = presetDeploymentConfig {
            try encodeContainer.encode(presetDeploymentConfig, forKey: .presetDeploymentConfig)
        }
        if let presetDeploymentType = presetDeploymentType {
            try encodeContainer.encode(presetDeploymentType.rawValue, forKey: .presetDeploymentType)
        }
        if let s3OutputLocation = s3OutputLocation {
            try encodeContainer.encode(s3OutputLocation, forKey: .s3OutputLocation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputLocation)
        s3OutputLocation = s3OutputLocationDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let presetDeploymentTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgePresetDeploymentType.self, forKey: .presetDeploymentType)
        presetDeploymentType = presetDeploymentTypeDecoded
        let presetDeploymentConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .presetDeploymentConfig)
        presetDeploymentConfig = presetDeploymentConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// The output configuration.
    public struct EdgeOutputConfig: Swift.Equatable {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.
        public var kmsKeyId: Swift.String?
        /// The configuration used to create deployment artifacts. Specify configuration options with a JSON string. The available configuration options for each type are:
        ///
        /// * ComponentName (optional) - Name of the GreenGrass V2 component. If not specified, the default name generated consists of "SagemakerEdgeManager" and the name of your SageMaker Edge Manager packaging job.
        ///
        /// * ComponentDescription (optional) - Description of the component.
        ///
        /// * ComponentVersion (optional) - The version of the component. Amazon Web Services IoT Greengrass uses semantic versions for components. Semantic versions follow a major.minor.patch number system. For example, version 1.0.0 represents the first major release for a component. For more information, see the [semantic version specification](https://semver.org/).
        ///
        /// * PlatformOS (optional) - The name of the operating system for the platform. Supported platforms include Windows and Linux.
        ///
        /// * PlatformArchitecture (optional) - The processor architecture for the platform. Supported architectures Windows include: Windows32_x86, Windows64_x64. Supported architectures for Linux include: Linux x86_64, Linux ARMV8.
        public var presetDeploymentConfig: Swift.String?
        /// The deployment type SageMaker Edge Manager will create. Currently only supports Amazon Web Services IoT Greengrass Version 2 components.
        public var presetDeploymentType: SageMakerClientTypes.EdgePresetDeploymentType?
        /// The Amazon Simple Storage (S3) bucker URI.
        /// This member is required.
        public var s3OutputLocation: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            presetDeploymentConfig: Swift.String? = nil,
            presetDeploymentType: SageMakerClientTypes.EdgePresetDeploymentType? = nil,
            s3OutputLocation: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.presetDeploymentConfig = presetDeploymentConfig
            self.presetDeploymentType = presetDeploymentType
            self.s3OutputLocation = s3OutputLocation
        }
    }

}

extension SageMakerClientTypes {
    public enum EdgePackagingJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inprogress
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [EdgePackagingJobStatus] {
            return [
                .completed,
                .failed,
                .inprogress,
                .starting,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EdgePackagingJobStatus(rawValue: rawValue) ?? EdgePackagingJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.EdgePackagingJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
        case creationTime = "CreationTime"
        case edgePackagingJobArn = "EdgePackagingJobArn"
        case edgePackagingJobName = "EdgePackagingJobName"
        case edgePackagingJobStatus = "EdgePackagingJobStatus"
        case lastModifiedTime = "LastModifiedTime"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compilationJobName = compilationJobName {
            try encodeContainer.encode(compilationJobName, forKey: .compilationJobName)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let edgePackagingJobArn = edgePackagingJobArn {
            try encodeContainer.encode(edgePackagingJobArn, forKey: .edgePackagingJobArn)
        }
        if let edgePackagingJobName = edgePackagingJobName {
            try encodeContainer.encode(edgePackagingJobName, forKey: .edgePackagingJobName)
        }
        if let edgePackagingJobStatus = edgePackagingJobStatus {
            try encodeContainer.encode(edgePackagingJobStatus.rawValue, forKey: .edgePackagingJobStatus)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgePackagingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobArn)
        edgePackagingJobArn = edgePackagingJobArnDecoded
        let edgePackagingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobName)
        edgePackagingJobName = edgePackagingJobNameDecoded
        let edgePackagingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgePackagingJobStatus.self, forKey: .edgePackagingJobStatus)
        edgePackagingJobStatus = edgePackagingJobStatusDecoded
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Summary of edge packaging job.
    public struct EdgePackagingJobSummary: Swift.Equatable {
        /// The name of the SageMaker Neo compilation job.
        public var compilationJobName: Swift.String?
        /// The timestamp of when the job was created.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the edge packaging job.
        /// This member is required.
        public var edgePackagingJobArn: Swift.String?
        /// The name of the edge packaging job.
        /// This member is required.
        public var edgePackagingJobName: Swift.String?
        /// The status of the edge packaging job.
        /// This member is required.
        public var edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus?
        /// The timestamp of when the edge packaging job was last updated.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The name of the model.
        public var modelName: Swift.String?
        /// The version of the model.
        public var modelVersion: Swift.String?

        public init (
            compilationJobName: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            edgePackagingJobArn: Swift.String? = nil,
            edgePackagingJobName: Swift.String? = nil,
            edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            modelName: Swift.String? = nil,
            modelVersion: Swift.String? = nil
        )
        {
            self.compilationJobName = compilationJobName
            self.creationTime = creationTime
            self.edgePackagingJobArn = edgePackagingJobArn
            self.edgePackagingJobName = edgePackagingJobName
            self.edgePackagingJobStatus = edgePackagingJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.modelName = modelName
            self.modelVersion = modelVersion
        }
    }

}

extension SageMakerClientTypes.EdgePresetDeploymentOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifact = "Artifact"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifact = artifact {
            try encodeContainer.encode(artifact, forKey: .artifact)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgePresetDeploymentType.self, forKey: .type)
        type = typeDecoded
        let artifactDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifact)
        artifact = artifactDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgePresetDeploymentStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}

extension SageMakerClientTypes {
    /// The output of a SageMaker Edge Manager deployable resource.
    public struct EdgePresetDeploymentOutput: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the generated deployable resource.
        public var artifact: Swift.String?
        /// The status of the deployable resource.
        public var status: SageMakerClientTypes.EdgePresetDeploymentStatus?
        /// Returns a message describing the status of the deployed resource.
        public var statusMessage: Swift.String?
        /// The deployment type created by SageMaker Edge Manager. Currently only supports Amazon Web Services IoT Greengrass Version 2 components.
        /// This member is required.
        public var type: SageMakerClientTypes.EdgePresetDeploymentType?

        public init (
            artifact: Swift.String? = nil,
            status: SageMakerClientTypes.EdgePresetDeploymentStatus? = nil,
            statusMessage: Swift.String? = nil,
            type: SageMakerClientTypes.EdgePresetDeploymentType? = nil
        )
        {
            self.artifact = artifact
            self.status = status
            self.statusMessage = statusMessage
            self.type = type
        }
    }

}

extension SageMakerClientTypes {
    public enum EdgePresetDeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [EdgePresetDeploymentStatus] {
            return [
                .completed,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EdgePresetDeploymentStatus(rawValue: rawValue) ?? EdgePresetDeploymentStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum EdgePresetDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greengrassv2component
        case sdkUnknown(Swift.String)

        public static var allCases: [EdgePresetDeploymentType] {
            return [
                .greengrassv2component,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greengrassv2component: return "GreengrassV2Component"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EdgePresetDeploymentType(rawValue: rawValue) ?? EdgePresetDeploymentType.sdkUnknown(rawValue)
        }
    }
}

extension EnableSagemakerServicecatalogPortfolioInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension EnableSagemakerServicecatalogPortfolioInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableSagemakerServicecatalogPortfolioInput: Swift.Equatable {

}

struct EnableSagemakerServicecatalogPortfolioInputBody: Swift.Equatable {
}

extension EnableSagemakerServicecatalogPortfolioInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension EnableSagemakerServicecatalogPortfolioOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableSagemakerServicecatalogPortfolioOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableSagemakerServicecatalogPortfolioOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableSagemakerServicecatalogPortfolioOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableSagemakerServicecatalogPortfolioOutputResponse: Swift.Equatable {

}

extension SageMakerClientTypes.Endpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointArn = "EndpointArn"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringSchedules = "MonitoringSchedules"
        case productionVariants = "ProductionVariants"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dataCaptureConfig = dataCaptureConfig {
            try encodeContainer.encode(dataCaptureConfig, forKey: .dataCaptureConfig)
        }
        if let endpointArn = endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let endpointConfigName = endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let endpointStatus = endpointStatus {
            try encodeContainer.encode(endpointStatus.rawValue, forKey: .endpointStatus)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let monitoringSchedules = monitoringSchedules {
            var monitoringSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .monitoringSchedules)
            for monitoringschedulelist0 in monitoringSchedules {
                try monitoringSchedulesContainer.encode(monitoringschedulelist0)
            }
        }
        if let productionVariants = productionVariants {
            var productionVariantsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productionVariants)
            for productionvariantsummarylist0 in productionVariants {
                try productionVariantsContainer.encode(productionvariantsummarylist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariantSummary?].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[SageMakerClientTypes.ProductionVariantSummary]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [SageMakerClientTypes.ProductionVariantSummary]()
            for structure0 in productionVariantsContainer {
                if let structure0 = structure0 {
                    productionVariantsDecoded0?.append(structure0)
                }
            }
        }
        productionVariants = productionVariantsDecoded0
        let dataCaptureConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataCaptureConfigSummary.self, forKey: .dataCaptureConfig)
        dataCaptureConfig = dataCaptureConfigDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointStatus.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringSchedulesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringSchedule?].self, forKey: .monitoringSchedules)
        var monitoringSchedulesDecoded0:[SageMakerClientTypes.MonitoringSchedule]? = nil
        if let monitoringSchedulesContainer = monitoringSchedulesContainer {
            monitoringSchedulesDecoded0 = [SageMakerClientTypes.MonitoringSchedule]()
            for structure0 in monitoringSchedulesContainer {
                if let structure0 = structure0 {
                    monitoringSchedulesDecoded0?.append(structure0)
                }
            }
        }
        monitoringSchedules = monitoringSchedulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes {
    /// A hosted endpoint for real-time inference.
    public struct Endpoint: Swift.Equatable {
        /// The time that the endpoint was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        ///
        public var dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary?
        /// The Amazon Resource Name (ARN) of the endpoint.
        /// This member is required.
        public var endpointArn: Swift.String?
        /// The endpoint configuration associated with the endpoint.
        /// This member is required.
        public var endpointConfigName: Swift.String?
        /// The name of the endpoint.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The status of the endpoint.
        /// This member is required.
        public var endpointStatus: SageMakerClientTypes.EndpointStatus?
        /// If the endpoint failed, the reason it failed.
        public var failureReason: Swift.String?
        /// The last time the endpoint was modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// A list of monitoring schedules for the endpoint. For information about model monitoring, see [Amazon SageMaker Model Monitor](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html).
        public var monitoringSchedules: [SageMakerClientTypes.MonitoringSchedule]?
        /// A list of the production variants hosted on the endpoint. Each production variant is a model.
        public var productionVariants: [SageMakerClientTypes.ProductionVariantSummary]?
        /// A list of the tags associated with the endpoint. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
        public var tags: [SageMakerClientTypes.Tag]?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary? = nil,
            endpointArn: Swift.String? = nil,
            endpointConfigName: Swift.String? = nil,
            endpointName: Swift.String? = nil,
            endpointStatus: SageMakerClientTypes.EndpointStatus? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            monitoringSchedules: [SageMakerClientTypes.MonitoringSchedule]? = nil,
            productionVariants: [SageMakerClientTypes.ProductionVariantSummary]? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.creationTime = creationTime
            self.dataCaptureConfig = dataCaptureConfig
            self.endpointArn = endpointArn
            self.endpointConfigName = endpointConfigName
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.monitoringSchedules = monitoringSchedules
            self.productionVariants = productionVariants
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {
    public enum EndpointConfigSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointConfigSortKey] {
            return [
                .creationtime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EndpointConfigSortKey(rawValue: rawValue) ?? EndpointConfigSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.EndpointConfigSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endpointConfigArn = "EndpointConfigArn"
        case endpointConfigName = "EndpointConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpointConfigArn = endpointConfigArn {
            try encodeContainer.encode(endpointConfigArn, forKey: .endpointConfigArn)
        }
        if let endpointConfigName = endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let endpointConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigArn)
        endpointConfigArn = endpointConfigArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information for an endpoint configuration.
    public struct EndpointConfigSummary: Swift.Equatable {
        /// A timestamp that shows when the endpoint configuration was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the endpoint configuration.
        /// This member is required.
        public var endpointConfigArn: Swift.String?
        /// The name of the endpoint configuration.
        /// This member is required.
        public var endpointConfigName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            endpointConfigArn: Swift.String? = nil,
            endpointConfigName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointConfigArn = endpointConfigArn
            self.endpointConfigName = endpointConfigName
        }
    }

}

extension SageMakerClientTypes.EndpointInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTimeOffset = "EndTimeOffset"
        case endpointName = "EndpointName"
        case featuresAttribute = "FeaturesAttribute"
        case inferenceAttribute = "InferenceAttribute"
        case localPath = "LocalPath"
        case probabilityAttribute = "ProbabilityAttribute"
        case probabilityThresholdAttribute = "ProbabilityThresholdAttribute"
        case s3DataDistributionType = "S3DataDistributionType"
        case s3InputMode = "S3InputMode"
        case startTimeOffset = "StartTimeOffset"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTimeOffset = endTimeOffset {
            try encodeContainer.encode(endTimeOffset, forKey: .endTimeOffset)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let featuresAttribute = featuresAttribute {
            try encodeContainer.encode(featuresAttribute, forKey: .featuresAttribute)
        }
        if let inferenceAttribute = inferenceAttribute {
            try encodeContainer.encode(inferenceAttribute, forKey: .inferenceAttribute)
        }
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let probabilityAttribute = probabilityAttribute {
            try encodeContainer.encode(probabilityAttribute, forKey: .probabilityAttribute)
        }
        if let probabilityThresholdAttribute = probabilityThresholdAttribute {
            try encodeContainer.encode(probabilityThresholdAttribute, forKey: .probabilityThresholdAttribute)
        }
        if let s3DataDistributionType = s3DataDistributionType {
            try encodeContainer.encode(s3DataDistributionType.rawValue, forKey: .s3DataDistributionType)
        }
        if let s3InputMode = s3InputMode {
            try encodeContainer.encode(s3InputMode.rawValue, forKey: .s3InputMode)
        }
        if let startTimeOffset = startTimeOffset {
            try encodeContainer.encode(startTimeOffset, forKey: .startTimeOffset)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3InputModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3InputMode.self, forKey: .s3InputMode)
        s3InputMode = s3InputModeDecoded
        let s3DataDistributionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3DataDistributionType.self, forKey: .s3DataDistributionType)
        s3DataDistributionType = s3DataDistributionTypeDecoded
        let featuresAttributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featuresAttribute)
        featuresAttribute = featuresAttributeDecoded
        let inferenceAttributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceAttribute)
        inferenceAttribute = inferenceAttributeDecoded
        let probabilityAttributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .probabilityAttribute)
        probabilityAttribute = probabilityAttributeDecoded
        let probabilityThresholdAttributeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .probabilityThresholdAttribute)
        probabilityThresholdAttribute = probabilityThresholdAttributeDecoded
        let startTimeOffsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTimeOffset)
        startTimeOffset = startTimeOffsetDecoded
        let endTimeOffsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTimeOffset)
        endTimeOffset = endTimeOffsetDecoded
    }
}

extension SageMakerClientTypes {
    /// Input object for the endpoint
    public struct EndpointInput: Swift.Equatable {
        /// If specified, monitoring jobs substract this time from the end time. For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html).
        public var endTimeOffset: Swift.String?
        /// An endpoint in customer's account which has enabled DataCaptureConfig enabled.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The attributes of the input data that are the input features.
        public var featuresAttribute: Swift.String?
        /// The attribute of the input data that represents the ground truth label.
        public var inferenceAttribute: Swift.String?
        /// Path to the filesystem where the endpoint data is available to the container.
        /// This member is required.
        public var localPath: Swift.String?
        /// In a classification problem, the attribute that represents the class probability.
        public var probabilityAttribute: Swift.String?
        /// The threshold for the class probability to be evaluated as a positive result.
        public var probabilityThresholdAttribute: Swift.Double?
        /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to FullyReplicated
        public var s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType?
        /// Whether the Pipe or File is used as the input mode for transferring data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        public var s3InputMode: SageMakerClientTypes.ProcessingS3InputMode?
        /// If specified, monitoring jobs substract this time from the start time. For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html).
        public var startTimeOffset: Swift.String?

        public init (
            endTimeOffset: Swift.String? = nil,
            endpointName: Swift.String? = nil,
            featuresAttribute: Swift.String? = nil,
            inferenceAttribute: Swift.String? = nil,
            localPath: Swift.String? = nil,
            probabilityAttribute: Swift.String? = nil,
            probabilityThresholdAttribute: Swift.Double? = nil,
            s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType? = nil,
            s3InputMode: SageMakerClientTypes.ProcessingS3InputMode? = nil,
            startTimeOffset: Swift.String? = nil
        )
        {
            self.endTimeOffset = endTimeOffset
            self.endpointName = endpointName
            self.featuresAttribute = featuresAttribute
            self.inferenceAttribute = inferenceAttribute
            self.localPath = localPath
            self.probabilityAttribute = probabilityAttribute
            self.probabilityThresholdAttribute = probabilityThresholdAttribute
            self.s3DataDistributionType = s3DataDistributionType
            self.s3InputMode = s3InputMode
            self.startTimeOffset = startTimeOffset
        }
    }

}

extension SageMakerClientTypes.EndpointInputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentParameterRanges = "EnvironmentParameterRanges"
        case inferenceSpecificationName = "InferenceSpecificationName"
        case instanceType = "InstanceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let environmentParameterRanges = environmentParameterRanges {
            try encodeContainer.encode(environmentParameterRanges, forKey: .environmentParameterRanges)
        }
        if let inferenceSpecificationName = inferenceSpecificationName {
            try encodeContainer.encode(inferenceSpecificationName, forKey: .inferenceSpecificationName)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let inferenceSpecificationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSpecificationName)
        inferenceSpecificationName = inferenceSpecificationNameDecoded
        let environmentParameterRangesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EnvironmentParameterRanges.self, forKey: .environmentParameterRanges)
        environmentParameterRanges = environmentParameterRangesDecoded
    }
}

extension SageMakerClientTypes {
    /// The endpoint configuration for the load test.
    public struct EndpointInputConfiguration: Swift.Equatable {
        /// The parameter you want to benchmark against.
        public var environmentParameterRanges: SageMakerClientTypes.EnvironmentParameterRanges?
        /// The inference specification name in the model package version.
        public var inferenceSpecificationName: Swift.String?
        /// The instance types to use for the load test.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.ProductionVariantInstanceType?

        public init (
            environmentParameterRanges: SageMakerClientTypes.EnvironmentParameterRanges? = nil,
            inferenceSpecificationName: Swift.String? = nil,
            instanceType: SageMakerClientTypes.ProductionVariantInstanceType? = nil
        )
        {
            self.environmentParameterRanges = environmentParameterRanges
            self.inferenceSpecificationName = inferenceSpecificationName
            self.instanceType = instanceType
        }
    }

}

extension SageMakerClientTypes.EndpointOutputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
        case initialInstanceCount = "InitialInstanceCount"
        case instanceType = "InstanceType"
        case variantName = "VariantName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if initialInstanceCount != 0 {
            try encodeContainer.encode(initialInstanceCount, forKey: .initialInstanceCount)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let variantName = variantName {
            try encodeContainer.encode(variantName, forKey: .variantName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let variantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .variantName)
        variantName = variantNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let initialInstanceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .initialInstanceCount)
        initialInstanceCount = initialInstanceCountDecoded
    }
}

extension SageMakerClientTypes {
    /// The endpoint configuration made by Inference Recommender during a recommendation job.
    public struct EndpointOutputConfiguration: Swift.Equatable {
        /// The name of the endpoint made during a recommendation job.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The number of instances recommended to launch initially.
        /// This member is required.
        public var initialInstanceCount: Swift.Int
        /// The instance type recommended by Amazon SageMaker Inference Recommender.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.ProductionVariantInstanceType?
        /// The name of the production variant (deployed model) made during a recommendation job.
        /// This member is required.
        public var variantName: Swift.String?

        public init (
            endpointName: Swift.String? = nil,
            initialInstanceCount: Swift.Int = 0,
            instanceType: SageMakerClientTypes.ProductionVariantInstanceType? = nil,
            variantName: Swift.String? = nil
        )
        {
            self.endpointName = endpointName
            self.initialInstanceCount = initialInstanceCount
            self.instanceType = instanceType
            self.variantName = variantName
        }
    }

}

extension SageMakerClientTypes {
    public enum EndpointSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointSortKey] {
            return [
                .creationtime,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EndpointSortKey(rawValue: rawValue) ?? EndpointSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum EndpointStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case deleting
        case failed
        case inService
        case outOfService
        case rollingBack
        case systemUpdating
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointStatus] {
            return [
                .creating,
                .deleting,
                .failed,
                .inService,
                .outOfService,
                .rollingBack,
                .systemUpdating,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inService: return "InService"
            case .outOfService: return "OutOfService"
            case .rollingBack: return "RollingBack"
            case .systemUpdating: return "SystemUpdating"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EndpointStatus(rawValue: rawValue) ?? EndpointStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.EndpointSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endpointArn = "EndpointArn"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case lastModifiedTime = "LastModifiedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpointArn = endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let endpointStatus = endpointStatus {
            try encodeContainer.encode(endpointStatus.rawValue, forKey: .endpointStatus)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointStatus.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information for an endpoint.
    public struct EndpointSummary: Swift.Equatable {
        /// A timestamp that shows when the endpoint was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the endpoint.
        /// This member is required.
        public var endpointArn: Swift.String?
        /// The name of the endpoint.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The status of the endpoint.
        ///
        /// * OutOfService: Endpoint is not available to take incoming requests.
        ///
        /// * Creating: [CreateEndpoint] is executing.
        ///
        /// * Updating: [UpdateEndpoint] or [UpdateEndpointWeightsAndCapacities] is executing.
        ///
        /// * SystemUpdating: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.
        ///
        /// * RollingBack: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an InService status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an [UpdateEndpointWeightsAndCapacities] call or when the [UpdateEndpointWeightsAndCapacities] operation is called explicitly.
        ///
        /// * InService: Endpoint is available to process incoming requests.
        ///
        /// * Deleting: [DeleteEndpoint] is executing.
        ///
        /// * Failed: Endpoint could not be created, updated, or re-scaled. Use [DescribeEndpointOutput$FailureReason] for information about the failure. [DeleteEndpoint] is the only operation that can be performed on a failed endpoint.
        ///
        ///
        /// To get a list of endpoints with a specified status, use the [ListEndpointsInput$StatusEquals] filter.
        /// This member is required.
        public var endpointStatus: SageMakerClientTypes.EndpointStatus?
        /// A timestamp that shows when the endpoint was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            endpointArn: Swift.String? = nil,
            endpointName: Swift.String? = nil,
            endpointStatus: SageMakerClientTypes.EndpointStatus? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointArn = endpointArn
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes.EnvironmentParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
        case valueType = "ValueType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
        if let valueType = valueType {
            try encodeContainer.encode(valueType, forKey: .valueType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .valueType)
        valueType = valueTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// A list of environment parameters suggested by the Amazon SageMaker Inference Recommender.
    public struct EnvironmentParameter: Swift.Equatable {
        /// The environment key suggested by the Amazon SageMaker Inference Recommender.
        /// This member is required.
        public var key: Swift.String?
        /// The value suggested by the Amazon SageMaker Inference Recommender.
        /// This member is required.
        public var value: Swift.String?
        /// The value type suggested by the Amazon SageMaker Inference Recommender.
        /// This member is required.
        public var valueType: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil,
            valueType: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
            self.valueType = valueType
        }
    }

}

extension SageMakerClientTypes.EnvironmentParameterRanges: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoricalParameterRanges = "CategoricalParameterRanges"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categoricalParameterRanges = categoricalParameterRanges {
            var categoricalParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categoricalParameterRanges)
            for categoricalparameters0 in categoricalParameterRanges {
                try categoricalParameterRangesContainer.encode(categoricalparameters0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoricalParameterRangesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.CategoricalParameter?].self, forKey: .categoricalParameterRanges)
        var categoricalParameterRangesDecoded0:[SageMakerClientTypes.CategoricalParameter]? = nil
        if let categoricalParameterRangesContainer = categoricalParameterRangesContainer {
            categoricalParameterRangesDecoded0 = [SageMakerClientTypes.CategoricalParameter]()
            for structure0 in categoricalParameterRangesContainer {
                if let structure0 = structure0 {
                    categoricalParameterRangesDecoded0?.append(structure0)
                }
            }
        }
        categoricalParameterRanges = categoricalParameterRangesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Specifies the range of environment parameters
    public struct EnvironmentParameterRanges: Swift.Equatable {
        /// Specified a list of parameters for each category.
        public var categoricalParameterRanges: [SageMakerClientTypes.CategoricalParameter]?

        public init (
            categoricalParameterRanges: [SageMakerClientTypes.CategoricalParameter]? = nil
        )
        {
            self.categoricalParameterRanges = categoricalParameterRanges
        }
    }

}

extension SageMakerClientTypes {
    public enum ExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case completedWithViolations
        case failed
        case inProgress
        case pending
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionStatus] {
            return [
                .completed,
                .completedWithViolations,
                .failed,
                .inProgress,
                .pending,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .completedWithViolations: return "CompletedWithViolations"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExecutionStatus(rawValue: rawValue) ?? ExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.Experiment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case description = "Description"
        case displayName = "DisplayName"
        case experimentArn = "ExperimentArn"
        case experimentName = "ExperimentName"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case source = "Source"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let experimentArn = experimentArn {
            try encodeContainer.encode(experimentArn, forKey: .experimentArn)
        }
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let experimentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentArn)
        experimentArn = experimentArnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentSource.self, forKey: .source)
        source = sourceDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes {
    /// The properties of an experiment as returned by the [Search] API.
    public struct Experiment: Swift.Equatable {
        /// Who created the experiment.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the experiment was created.
        public var creationTime: ClientRuntime.Date?
        /// The description of the experiment.
        public var description: Swift.String?
        /// The name of the experiment as displayed. If DisplayName isn't specified, ExperimentName is displayed.
        public var displayName: Swift.String?
        /// The Amazon Resource Name (ARN) of the experiment.
        public var experimentArn: Swift.String?
        /// The name of the experiment.
        public var experimentName: Swift.String?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// When the experiment was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The source of the experiment.
        public var source: SageMakerClientTypes.ExperimentSource?
        /// The list of tags that are associated with the experiment. You can use [Search] API to search on the tags.
        public var tags: [SageMakerClientTypes.Tag]?

        public init (
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            experimentArn: Swift.String? = nil,
            experimentName: Swift.String? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            source: SageMakerClientTypes.ExperimentSource? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.description = description
            self.displayName = displayName
            self.experimentArn = experimentArn
            self.experimentName = experimentName
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.source = source
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes.ExperimentConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentName = "ExperimentName"
        case trialComponentDisplayName = "TrialComponentDisplayName"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let trialComponentDisplayName = trialComponentDisplayName {
            try encodeContainer.encode(trialComponentDisplayName, forKey: .trialComponentDisplayName)
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let trialComponentDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentDisplayName)
        trialComponentDisplayName = trialComponentDisplayNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob]
    ///
    /// * [CreateTrainingJob]
    ///
    /// * [CreateTransformJob]
    public struct ExperimentConfig: Swift.Equatable {
        /// The name of an existing experiment to associate the trial component with.
        public var experimentName: Swift.String?
        /// The display name for the trial component. If this key isn't specified, the display name is the trial component name.
        public var trialComponentDisplayName: Swift.String?
        /// The name of an existing trial to associate the trial component with. If not specified, a new trial is created.
        public var trialName: Swift.String?

        public init (
            experimentName: Swift.String? = nil,
            trialComponentDisplayName: Swift.String? = nil,
            trialName: Swift.String? = nil
        )
        {
            self.experimentName = experimentName
            self.trialComponentDisplayName = trialComponentDisplayName
            self.trialName = trialName
        }
    }

}

extension SageMakerClientTypes.ExperimentSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceArn = "SourceArn"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// The source of the experiment.
    public struct ExperimentSource: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the source.
        /// This member is required.
        public var sourceArn: Swift.String?
        /// The source type.
        public var sourceType: Swift.String?

        public init (
            sourceArn: Swift.String? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
        }
    }

}

extension SageMakerClientTypes.ExperimentSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case experimentArn = "ExperimentArn"
        case experimentName = "ExperimentName"
        case experimentSource = "ExperimentSource"
        case lastModifiedTime = "LastModifiedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let experimentArn = experimentArn {
            try encodeContainer.encode(experimentArn, forKey: .experimentArn)
        }
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let experimentSource = experimentSource {
            try encodeContainer.encode(experimentSource, forKey: .experimentSource)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentArn)
        experimentArn = experimentArnDecoded
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let experimentSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentSource.self, forKey: .experimentSource)
        experimentSource = experimentSourceDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// A summary of the properties of an experiment. To get the complete set of properties, call the [DescribeExperiment] API and provide the ExperimentName.
    public struct ExperimentSummary: Swift.Equatable {
        /// When the experiment was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the experiment as displayed. If DisplayName isn't specified, ExperimentName is displayed.
        public var displayName: Swift.String?
        /// The Amazon Resource Name (ARN) of the experiment.
        public var experimentArn: Swift.String?
        /// The name of the experiment.
        public var experimentName: Swift.String?
        /// The source of the experiment.
        public var experimentSource: SageMakerClientTypes.ExperimentSource?
        /// When the experiment was last modified.
        public var lastModifiedTime: ClientRuntime.Date?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            displayName: Swift.String? = nil,
            experimentArn: Swift.String? = nil,
            experimentName: Swift.String? = nil,
            experimentSource: SageMakerClientTypes.ExperimentSource? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.displayName = displayName
            self.experimentArn = experimentArn
            self.experimentName = experimentName
            self.experimentSource = experimentSource
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes.Explainability: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case report = "Report"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let report = report {
            try encodeContainer.encode(report, forKey: .report)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .report)
        report = reportDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains explainability metrics for a model.
    public struct Explainability: Swift.Equatable {
        /// The explainability report for a model.
        public var report: SageMakerClientTypes.MetricsSource?

        public init (
            report: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.report = report
        }
    }

}

extension SageMakerClientTypes.FeatureDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureName = "FeatureName"
        case featureType = "FeatureType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let featureName = featureName {
            try encodeContainer.encode(featureName, forKey: .featureName)
        }
        if let featureType = featureType {
            try encodeContainer.encode(featureType.rawValue, forKey: .featureType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureName)
        featureName = featureNameDecoded
        let featureTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureType.self, forKey: .featureType)
        featureType = featureTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// A list of features. You must include FeatureName and FeatureType. Valid feature FeatureTypes are Integral, Fractional and String.
    public struct FeatureDefinition: Swift.Equatable {
        /// The name of a feature. The type must be a string. FeatureName cannot be any of the following: is_deleted, write_time, api_invocation_time.
        public var featureName: Swift.String?
        /// The value type of a feature. Valid values are Integral, Fractional, or String.
        public var featureType: SageMakerClientTypes.FeatureType?

        public init (
            featureName: Swift.String? = nil,
            featureType: SageMakerClientTypes.FeatureType? = nil
        )
        {
            self.featureName = featureName
            self.featureType = featureType
        }
    }

}

extension SageMakerClientTypes.FeatureGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case description = "Description"
        case eventTimeFeatureName = "EventTimeFeatureName"
        case failureReason = "FailureReason"
        case featureDefinitions = "FeatureDefinitions"
        case featureGroupArn = "FeatureGroupArn"
        case featureGroupName = "FeatureGroupName"
        case featureGroupStatus = "FeatureGroupStatus"
        case offlineStoreConfig = "OfflineStoreConfig"
        case offlineStoreStatus = "OfflineStoreStatus"
        case onlineStoreConfig = "OnlineStoreConfig"
        case recordIdentifierFeatureName = "RecordIdentifierFeatureName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventTimeFeatureName = eventTimeFeatureName {
            try encodeContainer.encode(eventTimeFeatureName, forKey: .eventTimeFeatureName)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let featureDefinitions = featureDefinitions {
            var featureDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureDefinitions)
            for featuredefinitions0 in featureDefinitions {
                try featureDefinitionsContainer.encode(featuredefinitions0)
            }
        }
        if let featureGroupArn = featureGroupArn {
            try encodeContainer.encode(featureGroupArn, forKey: .featureGroupArn)
        }
        if let featureGroupName = featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
        if let featureGroupStatus = featureGroupStatus {
            try encodeContainer.encode(featureGroupStatus.rawValue, forKey: .featureGroupStatus)
        }
        if let offlineStoreConfig = offlineStoreConfig {
            try encodeContainer.encode(offlineStoreConfig, forKey: .offlineStoreConfig)
        }
        if let offlineStoreStatus = offlineStoreStatus {
            try encodeContainer.encode(offlineStoreStatus, forKey: .offlineStoreStatus)
        }
        if let onlineStoreConfig = onlineStoreConfig {
            try encodeContainer.encode(onlineStoreConfig, forKey: .onlineStoreConfig)
        }
        if let recordIdentifierFeatureName = recordIdentifierFeatureName {
            try encodeContainer.encode(recordIdentifierFeatureName, forKey: .recordIdentifierFeatureName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupArn)
        featureGroupArn = featureGroupArnDecoded
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
        let recordIdentifierFeatureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordIdentifierFeatureName)
        recordIdentifierFeatureName = recordIdentifierFeatureNameDecoded
        let eventTimeFeatureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTimeFeatureName)
        eventTimeFeatureName = eventTimeFeatureNameDecoded
        let featureDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.FeatureDefinition?].self, forKey: .featureDefinitions)
        var featureDefinitionsDecoded0:[SageMakerClientTypes.FeatureDefinition]? = nil
        if let featureDefinitionsContainer = featureDefinitionsContainer {
            featureDefinitionsDecoded0 = [SageMakerClientTypes.FeatureDefinition]()
            for structure0 in featureDefinitionsContainer {
                if let structure0 = structure0 {
                    featureDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        featureDefinitions = featureDefinitionsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let onlineStoreConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OnlineStoreConfig.self, forKey: .onlineStoreConfig)
        onlineStoreConfig = onlineStoreConfigDecoded
        let offlineStoreConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OfflineStoreConfig.self, forKey: .offlineStoreConfig)
        offlineStoreConfig = offlineStoreConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let featureGroupStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureGroupStatus.self, forKey: .featureGroupStatus)
        featureGroupStatus = featureGroupStatusDecoded
        let offlineStoreStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OfflineStoreStatus.self, forKey: .offlineStoreStatus)
        offlineStoreStatus = offlineStoreStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.
    public struct FeatureGroup: Swift.Equatable {
        /// The time a FeatureGroup was created.
        public var creationTime: ClientRuntime.Date?
        /// A free form description of a FeatureGroup.
        public var description: Swift.String?
        /// The name of the feature that stores the EventTime of a Record in a FeatureGroup. A EventTime is point in time when a new event occurs that corresponds to the creation or update of a Record in FeatureGroup. All Records in the FeatureGroup must have a corresponding EventTime.
        public var eventTimeFeatureName: Swift.String?
        /// The reason that the FeatureGroup failed to be replicated in the OfflineStore. This is failure may be due to a failure to create a FeatureGroup in or delete a FeatureGroup from the OfflineStore.
        public var failureReason: Swift.String?
        /// A list of Features. Each Feature must include a FeatureName and a FeatureType. Valid FeatureTypes are Integral, Fractional and String. FeatureNames cannot be any of the following: is_deleted, write_time, api_invocation_time. You can create up to 2,500 FeatureDefinitions per FeatureGroup.
        public var featureDefinitions: [SageMakerClientTypes.FeatureDefinition]?
        /// The Amazon Resource Name (ARN) of a FeatureGroup.
        public var featureGroupArn: Swift.String?
        /// The name of the FeatureGroup.
        public var featureGroupName: Swift.String?
        /// A FeatureGroup status.
        public var featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus?
        /// The configuration of an OfflineStore. Provide an OfflineStoreConfig in a request to CreateFeatureGroup to create an OfflineStore. To encrypt an OfflineStore using at rest data encryption, specify Amazon Web Services Key Management Service (KMS) key ID, or KMSKeyId, in S3StorageConfig.
        public var offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig?
        /// The status of OfflineStore.
        public var offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus?
        /// Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or KMSKeyId, for at rest data encryption. You can turn OnlineStore on or off by specifying the EnableOnlineStore flag at General Assembly; the default value is False.
        public var onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig?
        /// The name of the Feature whose value uniquely identifies a Record defined in the FeatureGroupFeatureDefinitions.
        public var recordIdentifierFeatureName: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM execution role used to create the feature group.
        public var roleArn: Swift.String?
        /// Tags used to define a FeatureGroup.
        public var tags: [SageMakerClientTypes.Tag]?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            eventTimeFeatureName: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            featureDefinitions: [SageMakerClientTypes.FeatureDefinition]? = nil,
            featureGroupArn: Swift.String? = nil,
            featureGroupName: Swift.String? = nil,
            featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus? = nil,
            offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig? = nil,
            offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus? = nil,
            onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig? = nil,
            recordIdentifierFeatureName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.creationTime = creationTime
            self.description = description
            self.eventTimeFeatureName = eventTimeFeatureName
            self.failureReason = failureReason
            self.featureDefinitions = featureDefinitions
            self.featureGroupArn = featureGroupArn
            self.featureGroupName = featureGroupName
            self.featureGroupStatus = featureGroupStatus
            self.offlineStoreConfig = offlineStoreConfig
            self.offlineStoreStatus = offlineStoreStatus
            self.onlineStoreConfig = onlineStoreConfig
            self.recordIdentifierFeatureName = recordIdentifierFeatureName
            self.roleArn = roleArn
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {
    public enum FeatureGroupSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case featureGroupStatus
        case name
        case offlineStoreStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureGroupSortBy] {
            return [
                .creationTime,
                .featureGroupStatus,
                .name,
                .offlineStoreStatus,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .featureGroupStatus: return "FeatureGroupStatus"
            case .name: return "Name"
            case .offlineStoreStatus: return "OfflineStoreStatus"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FeatureGroupSortBy(rawValue: rawValue) ?? FeatureGroupSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum FeatureGroupSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureGroupSortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FeatureGroupSortOrder(rawValue: rawValue) ?? FeatureGroupSortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum FeatureGroupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureGroupStatus] {
            return [
                .created,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "Created"
            case .createFailed: return "CreateFailed"
            case .creating: return "Creating"
            case .deleteFailed: return "DeleteFailed"
            case .deleting: return "Deleting"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FeatureGroupStatus(rawValue: rawValue) ?? FeatureGroupStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.FeatureGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case featureGroupArn = "FeatureGroupArn"
        case featureGroupName = "FeatureGroupName"
        case featureGroupStatus = "FeatureGroupStatus"
        case offlineStoreStatus = "OfflineStoreStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let featureGroupArn = featureGroupArn {
            try encodeContainer.encode(featureGroupArn, forKey: .featureGroupArn)
        }
        if let featureGroupName = featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
        if let featureGroupStatus = featureGroupStatus {
            try encodeContainer.encode(featureGroupStatus.rawValue, forKey: .featureGroupStatus)
        }
        if let offlineStoreStatus = offlineStoreStatus {
            try encodeContainer.encode(offlineStoreStatus, forKey: .offlineStoreStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
        let featureGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupArn)
        featureGroupArn = featureGroupArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let featureGroupStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureGroupStatus.self, forKey: .featureGroupStatus)
        featureGroupStatus = featureGroupStatusDecoded
        let offlineStoreStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OfflineStoreStatus.self, forKey: .offlineStoreStatus)
        offlineStoreStatus = offlineStoreStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// The name, Arn, CreationTime, FeatureGroup values, LastUpdatedTime and EnableOnlineStorage status of a FeatureGroup.
    public struct FeatureGroupSummary: Swift.Equatable {
        /// A timestamp indicating the time of creation time of the FeatureGroup.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// Unique identifier for the FeatureGroup.
        /// This member is required.
        public var featureGroupArn: Swift.String?
        /// The name of FeatureGroup.
        /// This member is required.
        public var featureGroupName: Swift.String?
        /// The status of a FeatureGroup. The status can be any of the following: Creating, Created, CreateFail, Deleting or DetailFail.
        public var featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus?
        /// Notifies you if replicating data into the OfflineStore has failed. Returns either: Active or Blocked.
        public var offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            featureGroupArn: Swift.String? = nil,
            featureGroupName: Swift.String? = nil,
            featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus? = nil,
            offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.featureGroupArn = featureGroupArn
            self.featureGroupName = featureGroupName
            self.featureGroupStatus = featureGroupStatus
            self.offlineStoreStatus = offlineStoreStatus
        }
    }

}

extension SageMakerClientTypes {
    public enum FeatureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fractional
        case integral
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureType] {
            return [
                .fractional,
                .integral,
                .string,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fractional: return "Fractional"
            case .integral: return "Integral"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FeatureType(rawValue: rawValue) ?? FeatureType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.FileSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentDigest = "ContentDigest"
        case contentType = "ContentType"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentDigest = contentDigest {
            try encodeContainer.encode(contentDigest, forKey: .contentDigest)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let contentDigestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentDigest)
        contentDigest = contentDigestDecoded
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains details regarding the file source.
    public struct FileSource: Swift.Equatable {
        /// The digest of the file source.
        public var contentDigest: Swift.String?
        /// The type of content stored in the file source.
        public var contentType: Swift.String?
        /// The Amazon S3 URI for the file source.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            contentDigest: Swift.String? = nil,
            contentType: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.contentDigest = contentDigest
            self.contentType = contentType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    public enum FileSystemAccessMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ro
        case rw
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemAccessMode] {
            return [
                .ro,
                .rw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ro: return "ro"
            case .rw: return "rw"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileSystemAccessMode(rawValue: rawValue) ?? FileSystemAccessMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.FileSystemConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultGid = "DefaultGid"
        case defaultUid = "DefaultUid"
        case mountPath = "MountPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if defaultGid != 0 {
            try encodeContainer.encode(defaultGid, forKey: .defaultGid)
        }
        if defaultUid != 0 {
            try encodeContainer.encode(defaultUid, forKey: .defaultUid)
        }
        if let mountPath = mountPath {
            try encodeContainer.encode(mountPath, forKey: .mountPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mountPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mountPath)
        mountPath = mountPathDecoded
        let defaultUidDecoded = try containerValues.decode(Swift.Int.self, forKey: .defaultUid)
        defaultUid = defaultUidDecoded
        let defaultGidDecoded = try containerValues.decode(Swift.Int.self, forKey: .defaultGid)
        defaultGid = defaultGidDecoded
    }
}

extension SageMakerClientTypes {
    /// The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
    public struct FileSystemConfig: Swift.Equatable {
        /// The default POSIX group ID (GID). If not specified, defaults to 100.
        public var defaultGid: Swift.Int
        /// The default POSIX user ID (UID). If not specified, defaults to 1000.
        public var defaultUid: Swift.Int
        /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
        public var mountPath: Swift.String?

        public init (
            defaultGid: Swift.Int = 0,
            defaultUid: Swift.Int = 0,
            mountPath: Swift.String? = nil
        )
        {
            self.defaultGid = defaultGid
            self.defaultUid = defaultUid
            self.mountPath = mountPath
        }
    }

}

extension SageMakerClientTypes.FileSystemDataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryPath = "DirectoryPath"
        case fileSystemAccessMode = "FileSystemAccessMode"
        case fileSystemId = "FileSystemId"
        case fileSystemType = "FileSystemType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryPath = directoryPath {
            try encodeContainer.encode(directoryPath, forKey: .directoryPath)
        }
        if let fileSystemAccessMode = fileSystemAccessMode {
            try encodeContainer.encode(fileSystemAccessMode.rawValue, forKey: .fileSystemAccessMode)
        }
        if let fileSystemId = fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let fileSystemType = fileSystemType {
            try encodeContainer.encode(fileSystemType.rawValue, forKey: .fileSystemType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let fileSystemAccessModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FileSystemAccessMode.self, forKey: .fileSystemAccessMode)
        fileSystemAccessMode = fileSystemAccessModeDecoded
        let fileSystemTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FileSystemType.self, forKey: .fileSystemType)
        fileSystemType = fileSystemTypeDecoded
        let directoryPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryPath)
        directoryPath = directoryPathDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies a file system data source for a channel.
    public struct FileSystemDataSource: Swift.Equatable {
        /// The full path to the directory to associate with the channel.
        /// This member is required.
        public var directoryPath: Swift.String?
        /// The access mode of the mount of the directory associated with the channel. A directory can be mounted either in ro (read-only) or rw (read-write) mode.
        /// This member is required.
        public var fileSystemAccessMode: SageMakerClientTypes.FileSystemAccessMode?
        /// The file system id.
        /// This member is required.
        public var fileSystemId: Swift.String?
        /// The file system type.
        /// This member is required.
        public var fileSystemType: SageMakerClientTypes.FileSystemType?

        public init (
            directoryPath: Swift.String? = nil,
            fileSystemAccessMode: SageMakerClientTypes.FileSystemAccessMode? = nil,
            fileSystemId: Swift.String? = nil,
            fileSystemType: SageMakerClientTypes.FileSystemType? = nil
        )
        {
            self.directoryPath = directoryPath
            self.fileSystemAccessMode = fileSystemAccessMode
            self.fileSystemId = fileSystemId
            self.fileSystemType = fileSystemType
        }
    }

}

extension SageMakerClientTypes {
    public enum FileSystemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case efs
        case fsxlustre
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemType] {
            return [
                .efs,
                .fsxlustre,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .efs: return "EFS"
            case .fsxlustre: return "FSxLustre"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileSystemType(rawValue: rawValue) ?? FileSystemType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.Filter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case `operator` = "Operator"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Operator.self, forKey: .operator)
        `operator` = operatorDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// A conditional statement for a search expression that includes a resource property, a Boolean operator, and a value. Resources that match the statement are returned in the results from the [Search] API. If you specify a Value, but not an Operator, Amazon SageMaker uses the equals operator. In search, there are several property types: Metrics To define a metric filter, enter a value using the form "Metrics.", where  is a metric name. For example, the following filter searches for training jobs with an "accuracy" metric greater than "0.9": {
    ///     "Name": "Metrics.accuracy",
    ///
    ///
    ///     "Operator": "GreaterThan",
    ///
    ///
    ///     "Value": "0.9"
    ///
    /// } HyperParameters To define a hyperparameter filter, enter a value with the form "HyperParameters.". Decimal hyperparameter values are treated as a decimal in a comparison if the specified Value is also a decimal value. If the specified Value is an integer, the decimal hyperparameter values are treated as integers. For example, the following filter is satisfied by training jobs with a "learning_rate" hyperparameter that is less than "0.5":  {
    ///     "Name": "HyperParameters.learning_rate",
    ///
    ///
    ///     "Operator": "LessThan",
    ///
    ///
    ///     "Value": "0.5"
    ///
    /// } Tags To define a tag filter, enter a value with the form Tags..
    public struct Filter: Swift.Equatable {
        /// A resource property name. For example, TrainingJobName. For valid property names, see [SearchRecord]. You must specify a valid property for the resource.
        /// This member is required.
        public var name: Swift.String?
        /// A Boolean binary operator that is used to evaluate the filter. The operator field contains one of the following values: Equals The value of Name equals Value. NotEquals The value of Name doesn't equal Value. Exists The Name property exists. NotExists The Name property does not exist. GreaterThan The value of Name is greater than Value. Not supported for text properties. GreaterThanOrEqualTo The value of Name is greater than or equal to Value. Not supported for text properties. LessThan The value of Name is less than Value. Not supported for text properties. LessThanOrEqualTo The value of Name is less than or equal to Value. Not supported for text properties. In The value of Name is one of the comma delimited strings in Value. Only supported for text properties. Contains The value of Name contains the string Value. Only supported for text properties. A SearchExpression can include the Contains operator multiple times when the value of Name is one of the following:
        ///
        /// * Experiment.DisplayName
        ///
        /// * Experiment.ExperimentName
        ///
        /// * Experiment.Tags
        ///
        /// * Trial.DisplayName
        ///
        /// * Trial.TrialName
        ///
        /// * Trial.Tags
        ///
        /// * TrialComponent.DisplayName
        ///
        /// * TrialComponent.TrialComponentName
        ///
        /// * TrialComponent.Tags
        ///
        /// * TrialComponent.InputArtifacts
        ///
        /// * TrialComponent.OutputArtifacts
        ///
        ///
        /// A SearchExpression can include only one Contains operator for all other values of Name. In these cases, if you include multiple Contains operators in the SearchExpression, the result is the following error message: "'CONTAINS' operator usage limit of 1 exceeded."
        public var `operator`: SageMakerClientTypes.Operator?
        /// A value used with Name and Operator to determine which resources satisfy the filter's condition. For numerical properties, Value must be an integer or floating-point decimal. For timestamp properties, Value must be an ISO 8601 date-time string of the following format: YYYY-mm-dd'T'HH:MM:SS.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            `operator`: SageMakerClientTypes.Operator? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.value = value
        }
    }

}

extension SageMakerClientTypes.FinalAutoMLJobObjectiveMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobObjectiveType.self, forKey: .type)
        type = typeDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLMetricEnum.self, forKey: .metricName)
        metricName = metricNameDecoded
        let valueDecoded = try containerValues.decode(Swift.Float.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// The best candidate result from an AutoML training job.
    public struct FinalAutoMLJobObjectiveMetric: Swift.Equatable {
        /// The name of the metric with the best result. For a description of the possible objective metrics, see [AutoMLJobObjective$MetricName].
        /// This member is required.
        public var metricName: SageMakerClientTypes.AutoMLMetricEnum?
        /// The type of metric with the best result.
        public var type: SageMakerClientTypes.AutoMLJobObjectiveType?
        /// The value of the metric with the best result.
        /// This member is required.
        public var value: Swift.Float

        public init (
            metricName: SageMakerClientTypes.AutoMLMetricEnum? = nil,
            type: SageMakerClientTypes.AutoMLJobObjectiveType? = nil,
            value: Swift.Float = 0.0
        )
        {
            self.metricName = metricName
            self.type = type
            self.value = value
        }
    }

}

extension SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobObjectiveType.self, forKey: .type)
        type = typeDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let valueDecoded = try containerValues.decode(Swift.Float.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// Shows the final value for the objective metric for a training job that was launched by a hyperparameter tuning job. You define the objective metric in the HyperParameterTuningJobObjective parameter of [HyperParameterTuningJobConfig].
    public struct FinalHyperParameterTuningJobObjectiveMetric: Swift.Equatable {
        /// The name of the objective metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// Whether to minimize or maximize the objective metric. Valid values are Minimize and Maximize.
        public var type: SageMakerClientTypes.HyperParameterTuningJobObjectiveType?
        /// The value of the objective metric.
        /// This member is required.
        public var value: Swift.Float

        public init (
            metricName: Swift.String? = nil,
            type: SageMakerClientTypes.HyperParameterTuningJobObjectiveType? = nil,
            value: Swift.Float = 0.0
        )
        {
            self.metricName = metricName
            self.type = type
            self.value = value
        }
    }

}

extension SageMakerClientTypes.FlowDefinitionOutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains information about where human output will be stored.
    public struct FlowDefinitionOutputConfig: Swift.Equatable {
        /// The Amazon Key Management Service (KMS) key ID for server-side encryption.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 path where the object containing human output will be made available. To learn more about the format of Amazon A2I output data, see [Amazon A2I Output Data](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-output-data.html).
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes {
    public enum FlowDefinitionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleting
        case failed
        case initializing
        case sdkUnknown(Swift.String)

        public static var allCases: [FlowDefinitionStatus] {
            return [
                .active,
                .deleting,
                .failed,
                .initializing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .initializing: return "Initializing"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FlowDefinitionStatus(rawValue: rawValue) ?? FlowDefinitionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.FlowDefinitionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case flowDefinitionArn = "FlowDefinitionArn"
        case flowDefinitionName = "FlowDefinitionName"
        case flowDefinitionStatus = "FlowDefinitionStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let flowDefinitionArn = flowDefinitionArn {
            try encodeContainer.encode(flowDefinitionArn, forKey: .flowDefinitionArn)
        }
        if let flowDefinitionName = flowDefinitionName {
            try encodeContainer.encode(flowDefinitionName, forKey: .flowDefinitionName)
        }
        if let flowDefinitionStatus = flowDefinitionStatus {
            try encodeContainer.encode(flowDefinitionStatus.rawValue, forKey: .flowDefinitionStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionName)
        flowDefinitionName = flowDefinitionNameDecoded
        let flowDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowDefinitionArn)
        flowDefinitionArn = flowDefinitionArnDecoded
        let flowDefinitionStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FlowDefinitionStatus.self, forKey: .flowDefinitionStatus)
        flowDefinitionStatus = flowDefinitionStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains summary information about the flow definition.
    public struct FlowDefinitionSummary: Swift.Equatable {
        /// The timestamp when SageMaker created the flow definition.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The reason why the flow definition creation failed. A failure reason is returned only when the flow definition status is Failed.
        public var failureReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the flow definition.
        /// This member is required.
        public var flowDefinitionArn: Swift.String?
        /// The name of the flow definition.
        /// This member is required.
        public var flowDefinitionName: Swift.String?
        /// The status of the flow definition. Valid values:
        /// This member is required.
        public var flowDefinitionStatus: SageMakerClientTypes.FlowDefinitionStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            flowDefinitionArn: Swift.String? = nil,
            flowDefinitionName: Swift.String? = nil,
            flowDefinitionStatus: SageMakerClientTypes.FlowDefinitionStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.flowDefinitionArn = flowDefinitionArn
            self.flowDefinitionName = flowDefinitionName
            self.flowDefinitionStatus = flowDefinitionStatus
        }
    }

}

extension SageMakerClientTypes {
    public enum Framework: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case darknet
        case keras
        case mxnet
        case onnx
        case pytorch
        case sklearn
        case tensorflow
        case tflite
        case xgboost
        case sdkUnknown(Swift.String)

        public static var allCases: [Framework] {
            return [
                .darknet,
                .keras,
                .mxnet,
                .onnx,
                .pytorch,
                .sklearn,
                .tensorflow,
                .tflite,
                .xgboost,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .darknet: return "DARKNET"
            case .keras: return "KERAS"
            case .mxnet: return "MXNET"
            case .onnx: return "ONNX"
            case .pytorch: return "PYTORCH"
            case .sklearn: return "SKLEARN"
            case .tensorflow: return "TENSORFLOW"
            case .tflite: return "TFLITE"
            case .xgboost: return "XGBOOST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Framework(rawValue: rawValue) ?? Framework.sdkUnknown(rawValue)
        }
    }
}

extension GetDeviceFleetReportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
    }
}

extension GetDeviceFleetReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDeviceFleetReportInput: Swift.Equatable {
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?

    public init (
        deviceFleetName: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
    }
}

struct GetDeviceFleetReportInputBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
}

extension GetDeviceFleetReportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
    }
}

extension GetDeviceFleetReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeviceFleetReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDeviceFleetReportOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeviceFleetReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDeviceFleetReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentVersions = output.agentVersions
            self.description = output.description
            self.deviceFleetArn = output.deviceFleetArn
            self.deviceFleetName = output.deviceFleetName
            self.deviceStats = output.deviceStats
            self.modelStats = output.modelStats
            self.outputConfig = output.outputConfig
            self.reportGenerated = output.reportGenerated
        } else {
            self.agentVersions = nil
            self.description = nil
            self.deviceFleetArn = nil
            self.deviceFleetName = nil
            self.deviceStats = nil
            self.modelStats = nil
            self.outputConfig = nil
            self.reportGenerated = nil
        }
    }
}

public struct GetDeviceFleetReportOutputResponse: Swift.Equatable {
    /// The versions of Edge Manager agent deployed on the fleet.
    public var agentVersions: [SageMakerClientTypes.AgentVersion]?
    /// Description of the fleet.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the device.
    /// This member is required.
    public var deviceFleetArn: Swift.String?
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// Status of devices.
    public var deviceStats: SageMakerClientTypes.DeviceStats?
    /// Status of model on device.
    public var modelStats: [SageMakerClientTypes.EdgeModelStat]?
    /// The output configuration for storing sample data collected by the fleet.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// Timestamp of when the report was generated.
    public var reportGenerated: ClientRuntime.Date?

    public init (
        agentVersions: [SageMakerClientTypes.AgentVersion]? = nil,
        description: Swift.String? = nil,
        deviceFleetArn: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        deviceStats: SageMakerClientTypes.DeviceStats? = nil,
        modelStats: [SageMakerClientTypes.EdgeModelStat]? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        reportGenerated: ClientRuntime.Date? = nil
    )
    {
        self.agentVersions = agentVersions
        self.description = description
        self.deviceFleetArn = deviceFleetArn
        self.deviceFleetName = deviceFleetName
        self.deviceStats = deviceStats
        self.modelStats = modelStats
        self.outputConfig = outputConfig
        self.reportGenerated = reportGenerated
    }
}

struct GetDeviceFleetReportOutputResponseBody: Swift.Equatable {
    let deviceFleetArn: Swift.String?
    let deviceFleetName: Swift.String?
    let outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    let description: Swift.String?
    let reportGenerated: ClientRuntime.Date?
    let deviceStats: SageMakerClientTypes.DeviceStats?
    let agentVersions: [SageMakerClientTypes.AgentVersion]?
    let modelStats: [SageMakerClientTypes.EdgeModelStat]?
}

extension GetDeviceFleetReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentVersions = "AgentVersions"
        case description = "Description"
        case deviceFleetArn = "DeviceFleetArn"
        case deviceFleetName = "DeviceFleetName"
        case deviceStats = "DeviceStats"
        case modelStats = "ModelStats"
        case outputConfig = "OutputConfig"
        case reportGenerated = "ReportGenerated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetArn)
        deviceFleetArn = deviceFleetArnDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgeOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let reportGeneratedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .reportGenerated)
        reportGenerated = reportGeneratedDecoded
        let deviceStatsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DeviceStats.self, forKey: .deviceStats)
        deviceStats = deviceStatsDecoded
        let agentVersionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AgentVersion?].self, forKey: .agentVersions)
        var agentVersionsDecoded0:[SageMakerClientTypes.AgentVersion]? = nil
        if let agentVersionsContainer = agentVersionsContainer {
            agentVersionsDecoded0 = [SageMakerClientTypes.AgentVersion]()
            for structure0 in agentVersionsContainer {
                if let structure0 = structure0 {
                    agentVersionsDecoded0?.append(structure0)
                }
            }
        }
        agentVersions = agentVersionsDecoded0
        let modelStatsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EdgeModelStat?].self, forKey: .modelStats)
        var modelStatsDecoded0:[SageMakerClientTypes.EdgeModelStat]? = nil
        if let modelStatsContainer = modelStatsContainer {
            modelStatsDecoded0 = [SageMakerClientTypes.EdgeModelStat]()
            for structure0 in modelStatsContainer {
                if let structure0 = structure0 {
                    modelStatsDecoded0?.append(structure0)
                }
            }
        }
        modelStats = modelStatsDecoded0
    }
}

extension GetLineageGroupPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineageGroupName = "LineageGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lineageGroupName = lineageGroupName {
            try encodeContainer.encode(lineageGroupName, forKey: .lineageGroupName)
        }
    }
}

extension GetLineageGroupPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLineageGroupPolicyInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the lineage group.
    /// This member is required.
    public var lineageGroupName: Swift.String?

    public init (
        lineageGroupName: Swift.String? = nil
    )
    {
        self.lineageGroupName = lineageGroupName
    }
}

struct GetLineageGroupPolicyInputBody: Swift.Equatable {
    let lineageGroupName: Swift.String?
}

extension GetLineageGroupPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineageGroupName = "LineageGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupName)
        lineageGroupName = lineageGroupNameDecoded
    }
}

extension GetLineageGroupPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLineageGroupPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLineageGroupPolicyOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLineageGroupPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLineageGroupPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lineageGroupArn = output.lineageGroupArn
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.lineageGroupArn = nil
            self.resourcePolicy = nil
        }
    }
}

public struct GetLineageGroupPolicyOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// The resource policy that gives access to the lineage group in another account.
    public var resourcePolicy: Swift.String?

    public init (
        lineageGroupArn: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.lineageGroupArn = lineageGroupArn
        self.resourcePolicy = resourcePolicy
    }
}

struct GetLineageGroupPolicyOutputResponseBody: Swift.Equatable {
    let lineageGroupArn: Swift.String?
    let resourcePolicy: Swift.String?
}

extension GetLineageGroupPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineageGroupArn = "LineageGroupArn"
        case resourcePolicy = "ResourcePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

extension GetModelPackageGroupPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
    }
}

extension GetModelPackageGroupPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetModelPackageGroupPolicyInput: Swift.Equatable {
    /// The name of the model group for which to get the resource policy.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?

    public init (
        modelPackageGroupName: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
    }
}

struct GetModelPackageGroupPolicyInputBody: Swift.Equatable {
    let modelPackageGroupName: Swift.String?
}

extension GetModelPackageGroupPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
    }
}

extension GetModelPackageGroupPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetModelPackageGroupPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetModelPackageGroupPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetModelPackageGroupPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetModelPackageGroupPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.resourcePolicy = nil
        }
    }
}

public struct GetModelPackageGroupPolicyOutputResponse: Swift.Equatable {
    /// The resource policy for the model group.
    /// This member is required.
    public var resourcePolicy: Swift.String?

    public init (
        resourcePolicy: Swift.String? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

struct GetModelPackageGroupPolicyOutputResponseBody: Swift.Equatable {
    let resourcePolicy: Swift.String?
}

extension GetModelPackageGroupPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourcePolicy = "ResourcePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

extension GetSagemakerServicecatalogPortfolioStatusInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetSagemakerServicecatalogPortfolioStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSagemakerServicecatalogPortfolioStatusInput: Swift.Equatable {

}

struct GetSagemakerServicecatalogPortfolioStatusInputBody: Swift.Equatable {
}

extension GetSagemakerServicecatalogPortfolioStatusInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSagemakerServicecatalogPortfolioStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSagemakerServicecatalogPortfolioStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSagemakerServicecatalogPortfolioStatusOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSagemakerServicecatalogPortfolioStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSagemakerServicecatalogPortfolioStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

public struct GetSagemakerServicecatalogPortfolioStatusOutputResponse: Swift.Equatable {
    /// Whether Service Catalog is enabled or disabled in SageMaker.
    public var status: SageMakerClientTypes.SagemakerServicecatalogStatus?

    public init (
        status: SageMakerClientTypes.SagemakerServicecatalogStatus? = nil
    )
    {
        self.status = status
    }
}

struct GetSagemakerServicecatalogPortfolioStatusOutputResponseBody: Swift.Equatable {
    let status: SageMakerClientTypes.SagemakerServicecatalogStatus?
}

extension GetSagemakerServicecatalogPortfolioStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SagemakerServicecatalogStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension GetSearchSuggestionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource = "Resource"
        case suggestionQuery = "SuggestionQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resource = resource {
            try encodeContainer.encode(resource.rawValue, forKey: .resource)
        }
        if let suggestionQuery = suggestionQuery {
            try encodeContainer.encode(suggestionQuery, forKey: .suggestionQuery)
        }
    }
}

extension GetSearchSuggestionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSearchSuggestionsInput: Swift.Equatable {
    /// The name of the Amazon SageMaker resource to search for.
    /// This member is required.
    public var resource: SageMakerClientTypes.ResourceType?
    /// Limits the property names that are included in the response.
    public var suggestionQuery: SageMakerClientTypes.SuggestionQuery?

    public init (
        resource: SageMakerClientTypes.ResourceType? = nil,
        suggestionQuery: SageMakerClientTypes.SuggestionQuery? = nil
    )
    {
        self.resource = resource
        self.suggestionQuery = suggestionQuery
    }
}

struct GetSearchSuggestionsInputBody: Swift.Equatable {
    let resource: SageMakerClientTypes.ResourceType?
    let suggestionQuery: SageMakerClientTypes.SuggestionQuery?
}

extension GetSearchSuggestionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource = "Resource"
        case suggestionQuery = "SuggestionQuery"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceType.self, forKey: .resource)
        resource = resourceDecoded
        let suggestionQueryDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SuggestionQuery.self, forKey: .suggestionQuery)
        suggestionQuery = suggestionQueryDecoded
    }
}

extension GetSearchSuggestionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSearchSuggestionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSearchSuggestionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSearchSuggestionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSearchSuggestionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.propertyNameSuggestions = output.propertyNameSuggestions
        } else {
            self.propertyNameSuggestions = nil
        }
    }
}

public struct GetSearchSuggestionsOutputResponse: Swift.Equatable {
    /// A list of property names for a Resource that match a SuggestionQuery.
    public var propertyNameSuggestions: [SageMakerClientTypes.PropertyNameSuggestion]?

    public init (
        propertyNameSuggestions: [SageMakerClientTypes.PropertyNameSuggestion]? = nil
    )
    {
        self.propertyNameSuggestions = propertyNameSuggestions
    }
}

struct GetSearchSuggestionsOutputResponseBody: Swift.Equatable {
    let propertyNameSuggestions: [SageMakerClientTypes.PropertyNameSuggestion]?
}

extension GetSearchSuggestionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case propertyNameSuggestions = "PropertyNameSuggestions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertyNameSuggestionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.PropertyNameSuggestion?].self, forKey: .propertyNameSuggestions)
        var propertyNameSuggestionsDecoded0:[SageMakerClientTypes.PropertyNameSuggestion]? = nil
        if let propertyNameSuggestionsContainer = propertyNameSuggestionsContainer {
            propertyNameSuggestionsDecoded0 = [SageMakerClientTypes.PropertyNameSuggestion]()
            for structure0 in propertyNameSuggestionsContainer {
                if let structure0 = structure0 {
                    propertyNameSuggestionsDecoded0?.append(structure0)
                }
            }
        }
        propertyNameSuggestions = propertyNameSuggestionsDecoded0
    }
}

extension SageMakerClientTypes.GitConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branch = "Branch"
        case repositoryUrl = "RepositoryUrl"
        case secretArn = "SecretArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branch = branch {
            try encodeContainer.encode(branch, forKey: .branch)
        }
        if let repositoryUrl = repositoryUrl {
            try encodeContainer.encode(repositoryUrl, forKey: .repositoryUrl)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryUrl)
        repositoryUrl = repositoryUrlDecoded
        let branchDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branch)
        branch = branchDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies configuration details for a Git repository in your Amazon Web Services account.
    public struct GitConfig: Swift.Equatable {
        /// The default branch for the Git repository.
        public var branch: Swift.String?
        /// The URL where the Git repository is located.
        /// This member is required.
        public var repositoryUrl: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
        public var secretArn: Swift.String?

        public init (
            branch: Swift.String? = nil,
            repositoryUrl: Swift.String? = nil,
            secretArn: Swift.String? = nil
        )
        {
            self.branch = branch
            self.repositoryUrl = repositoryUrl
            self.secretArn = secretArn
        }
    }

}

extension SageMakerClientTypes.GitConfigForUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case secretArn = "SecretArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies configuration details for a Git repository when the repository is updated.
    public struct GitConfigForUpdate: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
        public var secretArn: Swift.String?

        public init (
            secretArn: Swift.String? = nil
        )
        {
            self.secretArn = secretArn
        }
    }

}

extension SageMakerClientTypes.HumanLoopActivationConditionsConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanLoopActivationConditions = "HumanLoopActivationConditions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanLoopActivationConditions = humanLoopActivationConditions {
            try encodeContainer.encode(humanLoopActivationConditions, forKey: .humanLoopActivationConditions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanLoopActivationConditionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanLoopActivationConditions)
        humanLoopActivationConditions = humanLoopActivationConditionsDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines under what conditions SageMaker creates a human loop. Used within . See for the required format of activation conditions.
    public struct HumanLoopActivationConditionsConfig: Swift.Equatable {
        /// JSON expressing use-case specific conditions declaratively. If any condition is matched, atomic tasks are created against the configured work team. The set of conditions is different for Rekognition and Textract. For more information about how to structure the JSON, see [JSON Schema for Human Loop Activation Conditions in Amazon Augmented AI](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html) in the Amazon SageMaker Developer Guide.
        /// This member is required.
        public var humanLoopActivationConditions: Swift.String?

        public init (
            humanLoopActivationConditions: Swift.String? = nil
        )
        {
            self.humanLoopActivationConditions = humanLoopActivationConditions
        }
    }

}

extension SageMakerClientTypes.HumanLoopActivationConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanLoopActivationConditionsConfig = "HumanLoopActivationConditionsConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanLoopActivationConditionsConfig = humanLoopActivationConditionsConfig {
            try encodeContainer.encode(humanLoopActivationConditionsConfig, forKey: .humanLoopActivationConditionsConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanLoopActivationConditionsConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HumanLoopActivationConditionsConfig.self, forKey: .humanLoopActivationConditionsConfig)
        humanLoopActivationConditionsConfig = humanLoopActivationConditionsConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides information about how and under what conditions SageMaker creates a human loop. If HumanLoopActivationConfig is not given, then all requests go to humans.
    public struct HumanLoopActivationConfig: Swift.Equatable {
        /// Container structure for defining under what conditions SageMaker creates a human loop.
        /// This member is required.
        public var humanLoopActivationConditionsConfig: SageMakerClientTypes.HumanLoopActivationConditionsConfig?

        public init (
            humanLoopActivationConditionsConfig: SageMakerClientTypes.HumanLoopActivationConditionsConfig? = nil
        )
        {
            self.humanLoopActivationConditionsConfig = humanLoopActivationConditionsConfig
        }
    }

}

extension SageMakerClientTypes.HumanLoopConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiArn = "HumanTaskUiArn"
        case publicWorkforceTaskPrice = "PublicWorkforceTaskPrice"
        case taskAvailabilityLifetimeInSeconds = "TaskAvailabilityLifetimeInSeconds"
        case taskCount = "TaskCount"
        case taskDescription = "TaskDescription"
        case taskKeywords = "TaskKeywords"
        case taskTimeLimitInSeconds = "TaskTimeLimitInSeconds"
        case taskTitle = "TaskTitle"
        case workteamArn = "WorkteamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskUiArn = humanTaskUiArn {
            try encodeContainer.encode(humanTaskUiArn, forKey: .humanTaskUiArn)
        }
        if let publicWorkforceTaskPrice = publicWorkforceTaskPrice {
            try encodeContainer.encode(publicWorkforceTaskPrice, forKey: .publicWorkforceTaskPrice)
        }
        if let taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds {
            try encodeContainer.encode(taskAvailabilityLifetimeInSeconds, forKey: .taskAvailabilityLifetimeInSeconds)
        }
        if let taskCount = taskCount {
            try encodeContainer.encode(taskCount, forKey: .taskCount)
        }
        if let taskDescription = taskDescription {
            try encodeContainer.encode(taskDescription, forKey: .taskDescription)
        }
        if let taskKeywords = taskKeywords {
            var taskKeywordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taskKeywords)
            for flowdefinitiontaskkeywords0 in taskKeywords {
                try taskKeywordsContainer.encode(flowdefinitiontaskkeywords0)
            }
        }
        if let taskTimeLimitInSeconds = taskTimeLimitInSeconds {
            try encodeContainer.encode(taskTimeLimitInSeconds, forKey: .taskTimeLimitInSeconds)
        }
        if let taskTitle = taskTitle {
            try encodeContainer.encode(taskTitle, forKey: .taskTitle)
        }
        if let workteamArn = workteamArn {
            try encodeContainer.encode(workteamArn, forKey: .workteamArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
        let humanTaskUiArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiArn)
        humanTaskUiArn = humanTaskUiArnDecoded
        let taskTitleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskTitle)
        taskTitle = taskTitleDecoded
        let taskDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDescription)
        taskDescription = taskDescriptionDecoded
        let taskCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .taskCount)
        taskCount = taskCountDecoded
        let taskAvailabilityLifetimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .taskAvailabilityLifetimeInSeconds)
        taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSecondsDecoded
        let taskTimeLimitInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .taskTimeLimitInSeconds)
        taskTimeLimitInSeconds = taskTimeLimitInSecondsDecoded
        let taskKeywordsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .taskKeywords)
        var taskKeywordsDecoded0:[Swift.String]? = nil
        if let taskKeywordsContainer = taskKeywordsContainer {
            taskKeywordsDecoded0 = [Swift.String]()
            for string0 in taskKeywordsContainer {
                if let string0 = string0 {
                    taskKeywordsDecoded0?.append(string0)
                }
            }
        }
        taskKeywords = taskKeywordsDecoded0
        let publicWorkforceTaskPriceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PublicWorkforceTaskPrice.self, forKey: .publicWorkforceTaskPrice)
        publicWorkforceTaskPrice = publicWorkforceTaskPriceDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the work to be performed by human workers.
    public struct HumanLoopConfig: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the human task user interface. You can use standard HTML and Crowd HTML Elements to create a custom worker task template. You use this template to create a human task UI. To learn how to create a custom HTML template, see [Create Custom Worker Task Template](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-custom-templates.html). To learn how to create a human task UI, which is a worker task template that can be used in a flow definition, see [Create and Delete a Worker Task Templates](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-worker-template-console.html).
        /// This member is required.
        public var humanTaskUiArn: Swift.String?
        /// Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.
        ///
        /// * 0.036
        ///
        /// * 0.048
        ///
        /// * 0.060
        ///
        /// * 0.072
        ///
        /// * 0.120
        ///
        /// * 0.240
        ///
        /// * 0.360
        ///
        /// * 0.480
        ///
        /// * 0.600
        ///
        /// * 0.720
        ///
        /// * 0.840
        ///
        /// * 0.960
        ///
        /// * 1.080
        ///
        /// * 1.200
        ///
        ///
        /// Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.
        ///
        /// * 0.012
        ///
        /// * 0.024
        ///
        /// * 0.036
        ///
        /// * 0.048
        ///
        /// * 0.060
        ///
        /// * 0.072
        ///
        /// * 0.120
        ///
        /// * 0.240
        ///
        /// * 0.360
        ///
        /// * 0.480
        ///
        /// * 0.600
        ///
        /// * 0.720
        ///
        /// * 0.840
        ///
        /// * 0.960
        ///
        /// * 1.080
        ///
        /// * 1.200
        ///
        ///
        /// Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.
        ///
        /// * 0.840
        ///
        /// * 0.960
        ///
        /// * 1.080
        ///
        /// * 1.200
        ///
        ///
        /// Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.
        ///
        /// * 2.400
        ///
        /// * 2.280
        ///
        /// * 2.160
        ///
        /// * 2.040
        ///
        /// * 1.920
        ///
        /// * 1.800
        ///
        /// * 1.680
        ///
        /// * 1.560
        ///
        /// * 1.440
        ///
        /// * 1.320
        ///
        /// * 1.200
        ///
        /// * 1.080
        ///
        /// * 0.960
        ///
        /// * 0.840
        ///
        /// * 0.720
        ///
        /// * 0.600
        ///
        /// * 0.480
        ///
        /// * 0.360
        ///
        /// * 0.240
        ///
        /// * 0.120
        ///
        /// * 0.072
        ///
        /// * 0.060
        ///
        /// * 0.048
        ///
        /// * 0.036
        ///
        /// * 0.024
        ///
        /// * 0.012
        ///
        ///
        /// Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.
        ///
        /// * 1.200
        ///
        /// * 1.080
        ///
        /// * 0.960
        ///
        /// * 0.840
        ///
        /// * 0.720
        ///
        /// * 0.600
        ///
        /// * 0.480
        ///
        /// * 0.360
        ///
        /// * 0.240
        ///
        /// * 0.120
        ///
        /// * 0.072
        ///
        /// * 0.060
        ///
        /// * 0.048
        ///
        /// * 0.036
        ///
        /// * 0.024
        ///
        /// * 0.012
        ///
        ///
        /// Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.
        ///
        /// * 1.200
        ///
        /// * 1.080
        ///
        /// * 0.960
        ///
        /// * 0.840
        ///
        /// * 0.720
        ///
        /// * 0.600
        ///
        /// * 0.480
        ///
        /// * 0.360
        ///
        /// * 0.240
        ///
        /// * 0.120
        ///
        /// * 0.072
        ///
        /// * 0.060
        ///
        /// * 0.048
        ///
        /// * 0.036
        ///
        /// * 0.024
        ///
        /// * 0.012
        public var publicWorkforceTaskPrice: SageMakerClientTypes.PublicWorkforceTaskPrice?
        /// The length of time that a task remains available for review by human workers.
        public var taskAvailabilityLifetimeInSeconds: Swift.Int?
        /// The number of distinct workers who will perform the same task on each object. For example, if TaskCount is set to 3 for an image classification labeling job, three workers will classify each input image. Increasing TaskCount can improve label accuracy.
        /// This member is required.
        public var taskCount: Swift.Int?
        /// A description for the human worker task.
        /// This member is required.
        public var taskDescription: Swift.String?
        /// Keywords used to describe the task so that workers can discover the task.
        public var taskKeywords: [Swift.String]?
        /// The amount of time that a worker has to complete a task. The default value is 3,600 seconds (1 hour).
        public var taskTimeLimitInSeconds: Swift.Int?
        /// A title for the human worker task.
        /// This member is required.
        public var taskTitle: Swift.String?
        /// Amazon Resource Name (ARN) of a team of workers. To learn more about the types of workforces and work teams you can create and use with Amazon A2I, see [Create and Manage Workforces](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management.html).
        /// This member is required.
        public var workteamArn: Swift.String?

        public init (
            humanTaskUiArn: Swift.String? = nil,
            publicWorkforceTaskPrice: SageMakerClientTypes.PublicWorkforceTaskPrice? = nil,
            taskAvailabilityLifetimeInSeconds: Swift.Int? = nil,
            taskCount: Swift.Int? = nil,
            taskDescription: Swift.String? = nil,
            taskKeywords: [Swift.String]? = nil,
            taskTimeLimitInSeconds: Swift.Int? = nil,
            taskTitle: Swift.String? = nil,
            workteamArn: Swift.String? = nil
        )
        {
            self.humanTaskUiArn = humanTaskUiArn
            self.publicWorkforceTaskPrice = publicWorkforceTaskPrice
            self.taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds
            self.taskCount = taskCount
            self.taskDescription = taskDescription
            self.taskKeywords = taskKeywords
            self.taskTimeLimitInSeconds = taskTimeLimitInSeconds
            self.taskTitle = taskTitle
            self.workteamArn = workteamArn
        }
    }

}

extension SageMakerClientTypes.HumanLoopRequestSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsManagedHumanLoopRequestSource = "AwsManagedHumanLoopRequestSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsManagedHumanLoopRequestSource = awsManagedHumanLoopRequestSource {
            try encodeContainer.encode(awsManagedHumanLoopRequestSource.rawValue, forKey: .awsManagedHumanLoopRequestSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsManagedHumanLoopRequestSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AwsManagedHumanLoopRequestSource.self, forKey: .awsManagedHumanLoopRequestSource)
        awsManagedHumanLoopRequestSource = awsManagedHumanLoopRequestSourceDecoded
    }
}

extension SageMakerClientTypes {
    /// Container for configuring the source of human task requests.
    public struct HumanLoopRequestSource: Swift.Equatable {
        /// Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. The default field settings and JSON parsing rules are different based on the integration source. Valid values:
        /// This member is required.
        public var awsManagedHumanLoopRequestSource: SageMakerClientTypes.AwsManagedHumanLoopRequestSource?

        public init (
            awsManagedHumanLoopRequestSource: SageMakerClientTypes.AwsManagedHumanLoopRequestSource? = nil
        )
        {
            self.awsManagedHumanLoopRequestSource = awsManagedHumanLoopRequestSource
        }
    }

}

extension SageMakerClientTypes.HumanTaskConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotationConsolidationConfig = "AnnotationConsolidationConfig"
        case maxConcurrentTaskCount = "MaxConcurrentTaskCount"
        case numberOfHumanWorkersPerDataObject = "NumberOfHumanWorkersPerDataObject"
        case preHumanTaskLambdaArn = "PreHumanTaskLambdaArn"
        case publicWorkforceTaskPrice = "PublicWorkforceTaskPrice"
        case taskAvailabilityLifetimeInSeconds = "TaskAvailabilityLifetimeInSeconds"
        case taskDescription = "TaskDescription"
        case taskKeywords = "TaskKeywords"
        case taskTimeLimitInSeconds = "TaskTimeLimitInSeconds"
        case taskTitle = "TaskTitle"
        case uiConfig = "UiConfig"
        case workteamArn = "WorkteamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotationConsolidationConfig = annotationConsolidationConfig {
            try encodeContainer.encode(annotationConsolidationConfig, forKey: .annotationConsolidationConfig)
        }
        if let maxConcurrentTaskCount = maxConcurrentTaskCount {
            try encodeContainer.encode(maxConcurrentTaskCount, forKey: .maxConcurrentTaskCount)
        }
        if let numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject {
            try encodeContainer.encode(numberOfHumanWorkersPerDataObject, forKey: .numberOfHumanWorkersPerDataObject)
        }
        if let preHumanTaskLambdaArn = preHumanTaskLambdaArn {
            try encodeContainer.encode(preHumanTaskLambdaArn, forKey: .preHumanTaskLambdaArn)
        }
        if let publicWorkforceTaskPrice = publicWorkforceTaskPrice {
            try encodeContainer.encode(publicWorkforceTaskPrice, forKey: .publicWorkforceTaskPrice)
        }
        if let taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds {
            try encodeContainer.encode(taskAvailabilityLifetimeInSeconds, forKey: .taskAvailabilityLifetimeInSeconds)
        }
        if let taskDescription = taskDescription {
            try encodeContainer.encode(taskDescription, forKey: .taskDescription)
        }
        if let taskKeywords = taskKeywords {
            var taskKeywordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taskKeywords)
            for taskkeywords0 in taskKeywords {
                try taskKeywordsContainer.encode(taskkeywords0)
            }
        }
        if let taskTimeLimitInSeconds = taskTimeLimitInSeconds {
            try encodeContainer.encode(taskTimeLimitInSeconds, forKey: .taskTimeLimitInSeconds)
        }
        if let taskTitle = taskTitle {
            try encodeContainer.encode(taskTitle, forKey: .taskTitle)
        }
        if let uiConfig = uiConfig {
            try encodeContainer.encode(uiConfig, forKey: .uiConfig)
        }
        if let workteamArn = workteamArn {
            try encodeContainer.encode(workteamArn, forKey: .workteamArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
        let uiConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UiConfig.self, forKey: .uiConfig)
        uiConfig = uiConfigDecoded
        let preHumanTaskLambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preHumanTaskLambdaArn)
        preHumanTaskLambdaArn = preHumanTaskLambdaArnDecoded
        let taskKeywordsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .taskKeywords)
        var taskKeywordsDecoded0:[Swift.String]? = nil
        if let taskKeywordsContainer = taskKeywordsContainer {
            taskKeywordsDecoded0 = [Swift.String]()
            for string0 in taskKeywordsContainer {
                if let string0 = string0 {
                    taskKeywordsDecoded0?.append(string0)
                }
            }
        }
        taskKeywords = taskKeywordsDecoded0
        let taskTitleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskTitle)
        taskTitle = taskTitleDecoded
        let taskDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDescription)
        taskDescription = taskDescriptionDecoded
        let numberOfHumanWorkersPerDataObjectDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfHumanWorkersPerDataObject)
        numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObjectDecoded
        let taskTimeLimitInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .taskTimeLimitInSeconds)
        taskTimeLimitInSeconds = taskTimeLimitInSecondsDecoded
        let taskAvailabilityLifetimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .taskAvailabilityLifetimeInSeconds)
        taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSecondsDecoded
        let maxConcurrentTaskCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentTaskCount)
        maxConcurrentTaskCount = maxConcurrentTaskCountDecoded
        let annotationConsolidationConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AnnotationConsolidationConfig.self, forKey: .annotationConsolidationConfig)
        annotationConsolidationConfig = annotationConsolidationConfigDecoded
        let publicWorkforceTaskPriceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PublicWorkforceTaskPrice.self, forKey: .publicWorkforceTaskPrice)
        publicWorkforceTaskPrice = publicWorkforceTaskPriceDecoded
    }
}

extension SageMakerClientTypes {
    /// Information required for human workers to complete a labeling task.
    public struct HumanTaskConfig: Swift.Equatable {
        /// Configures how labels are consolidated across human workers.
        /// This member is required.
        public var annotationConsolidationConfig: SageMakerClientTypes.AnnotationConsolidationConfig?
        /// Defines the maximum number of data objects that can be labeled by human workers at the same time. Also referred to as batch size. Each object may have more than one worker at one time. The default value is 1000 objects.
        public var maxConcurrentTaskCount: Swift.Int?
        /// The number of human workers that will label an object.
        /// This member is required.
        public var numberOfHumanWorkersPerDataObject: Swift.Int?
        /// The Amazon Resource Name (ARN) of a Lambda function that is run before a data object is sent to a human worker. Use this function to provide input to a custom labeling job. For [built-in task types](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html), use one of the following Amazon SageMaker Ground Truth Lambda function ARNs for PreHumanTaskLambdaArn. For custom labeling workflows, see [Pre-annotation Lambda](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-prelambda). Bounding box - Finds the most similar boxes from different workers based on the Jaccard index of the boxes.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-BoundingBox
        ///
        ///
        /// Image classification - Uses a variant of the Expectation Maximization approach to estimate the true class of an image based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClass
        ///
        ///
        /// Multi-label image classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of an image based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClassMultiLabel
        ///
        ///
        /// Semantic segmentation - Treats each pixel in an image as a multi-class classification and treats pixel annotations from workers as "votes" for the correct label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-SemanticSegmentation
        ///
        ///
        /// Text classification - Uses a variant of the Expectation Maximization approach to estimate the true class of text based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClass
        ///
        ///
        /// Multi-label text classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of text based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClassMultiLabel
        ///
        ///
        /// Named entity recognition - Groups similar selections and calculates aggregate boundaries, resolving to most-assigned label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-NamedEntityRecognition
        ///
        ///
        /// Video Classification - Use this task type when you need workers to classify videos using predefined labels that you specify. Workers are shown videos and are asked to choose one label for each video.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoMultiClass
        ///
        ///
        /// Video Frame Object Detection - Use this task type to have workers identify and locate objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to identify and localize various objects in a series of video frames, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectDetection
        ///
        ///
        /// Video Frame Object Tracking - Use this task type to have workers track the movement of objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to track the movement of objects, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectTracking
        ///
        ///
        /// 3D Point Cloud Modalities Use the following pre-annotation lambdas for 3D point cloud labeling modality tasks. See [3D Point Cloud Task types ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-task-types.html) to learn more. 3D Point Cloud Object Detection - Use this task type when you want workers to classify objects in a 3D point cloud by drawing 3D cuboids around objects. For example, you can use this task type to ask workers to identify different types of objects in a point cloud, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectDetection
        ///
        ///
        /// 3D Point Cloud Object Tracking - Use this task type when you want workers to draw 3D cuboids around objects that appear in a sequence of 3D point cloud frames. For example, you can use this task type to ask workers to track the movement of vehicles across multiple point cloud frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectTracking
        ///
        ///
        /// 3D Point Cloud Semantic Segmentation - Use this task type when you want workers to create a point-level semantic segmentation masks by painting objects in a 3D point cloud using different colors where each color is assigned to one of the classes you specify.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudSemanticSegmentation
        ///
        ///
        /// Use the following ARNs for Label Verification and Adjustment Jobs Use label verification and adjustment jobs to review and adjust labels. To learn more, see [Verify and Adjust Labels ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html). Bounding box verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgement for bounding box labels based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationBoundingBox
        ///
        ///
        /// Bounding box adjustment - Finds the most similar boxes from different workers based on the Jaccard index of the adjusted annotations.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentBoundingBox
        ///
        ///
        /// Semantic segmentation verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgment for semantic segmentation labels based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationSemanticSegmentation
        ///
        ///
        /// Semantic segmentation adjustment - Treats each pixel in an image as a multi-class classification and treats pixel adjusted annotations from workers as "votes" for the correct label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentSemanticSegmentation
        ///
        ///
        /// Video Frame Object Detection Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to classify and localize objects in a sequence of video frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectDetection
        ///
        ///
        /// Video Frame Object Tracking Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to track object movement across a sequence of video frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectTracking
        ///
        ///
        /// 3D point cloud object detection adjustment - Adjust 3D cuboids in a point cloud frame.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        ///
        /// 3D point cloud object tracking adjustment - Adjust 3D cuboids across a sequence of point cloud frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        ///
        /// 3D point cloud semantic segmentation adjustment - Adjust semantic segmentation masks in a 3D point cloud.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        /// This member is required.
        public var preHumanTaskLambdaArn: Swift.String?
        /// The price that you pay for each task performed by an Amazon Mechanical Turk worker.
        public var publicWorkforceTaskPrice: SageMakerClientTypes.PublicWorkforceTaskPrice?
        /// The length of time that a task remains available for labeling by human workers. The default and maximum values for this parameter depend on the type of workforce you use.
        ///
        /// * If you choose the Amazon Mechanical Turk workforce, the maximum is 12 hours (43,200 seconds). The default is 6 hours (21,600 seconds).
        ///
        /// * If you choose a private or vendor workforce, the default value is 30 days (2592,000 seconds) for non-AL mode. For most users, the maximum is also 30 days.
        public var taskAvailabilityLifetimeInSeconds: Swift.Int?
        /// A description of the task for your human workers.
        /// This member is required.
        public var taskDescription: Swift.String?
        /// Keywords used to describe the task so that workers on Amazon Mechanical Turk can discover the task.
        public var taskKeywords: [Swift.String]?
        /// The amount of time that a worker has to complete a task. If you create a custom labeling job, the maximum value for this parameter is 8 hours (28,800 seconds). If you create a labeling job using a [built-in task type](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html) the maximum for this parameter depends on the task type you use:
        ///
        /// * For [image](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-images.html) and [text](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-text.html) labeling jobs, the maximum is 8 hours (28,800 seconds).
        ///
        /// * For [3D point cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud.html) and [video frame](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-video.html) labeling jobs, the maximum is 30 days (2952,000 seconds) for non-AL mode. For most users, the maximum is also 30 days.
        /// This member is required.
        public var taskTimeLimitInSeconds: Swift.Int?
        /// A title for the task for your human workers.
        /// This member is required.
        public var taskTitle: Swift.String?
        /// Information about the user interface that workers use to complete the labeling task.
        /// This member is required.
        public var uiConfig: SageMakerClientTypes.UiConfig?
        /// The Amazon Resource Name (ARN) of the work team assigned to complete the tasks.
        /// This member is required.
        public var workteamArn: Swift.String?

        public init (
            annotationConsolidationConfig: SageMakerClientTypes.AnnotationConsolidationConfig? = nil,
            maxConcurrentTaskCount: Swift.Int? = nil,
            numberOfHumanWorkersPerDataObject: Swift.Int? = nil,
            preHumanTaskLambdaArn: Swift.String? = nil,
            publicWorkforceTaskPrice: SageMakerClientTypes.PublicWorkforceTaskPrice? = nil,
            taskAvailabilityLifetimeInSeconds: Swift.Int? = nil,
            taskDescription: Swift.String? = nil,
            taskKeywords: [Swift.String]? = nil,
            taskTimeLimitInSeconds: Swift.Int? = nil,
            taskTitle: Swift.String? = nil,
            uiConfig: SageMakerClientTypes.UiConfig? = nil,
            workteamArn: Swift.String? = nil
        )
        {
            self.annotationConsolidationConfig = annotationConsolidationConfig
            self.maxConcurrentTaskCount = maxConcurrentTaskCount
            self.numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject
            self.preHumanTaskLambdaArn = preHumanTaskLambdaArn
            self.publicWorkforceTaskPrice = publicWorkforceTaskPrice
            self.taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds
            self.taskDescription = taskDescription
            self.taskKeywords = taskKeywords
            self.taskTimeLimitInSeconds = taskTimeLimitInSeconds
            self.taskTitle = taskTitle
            self.uiConfig = uiConfig
            self.workteamArn = workteamArn
        }
    }

}

extension SageMakerClientTypes {
    public enum HumanTaskUiStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [HumanTaskUiStatus] {
            return [
                .active,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .deleting: return "Deleting"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HumanTaskUiStatus(rawValue: rawValue) ?? HumanTaskUiStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.HumanTaskUiSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case humanTaskUiArn = "HumanTaskUiArn"
        case humanTaskUiName = "HumanTaskUiName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let humanTaskUiArn = humanTaskUiArn {
            try encodeContainer.encode(humanTaskUiArn, forKey: .humanTaskUiArn)
        }
        if let humanTaskUiName = humanTaskUiName {
            try encodeContainer.encode(humanTaskUiName, forKey: .humanTaskUiName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanTaskUiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiName)
        humanTaskUiName = humanTaskUiNameDecoded
        let humanTaskUiArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiArn)
        humanTaskUiArn = humanTaskUiArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Container for human task user interface information.
    public struct HumanTaskUiSummary: Swift.Equatable {
        /// A timestamp when SageMaker created the human task user interface.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the human task user interface.
        /// This member is required.
        public var humanTaskUiArn: Swift.String?
        /// The name of the human task user interface.
        /// This member is required.
        public var humanTaskUiName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            humanTaskUiArn: Swift.String? = nil,
            humanTaskUiName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.humanTaskUiArn = humanTaskUiArn
            self.humanTaskUiName = humanTaskUiName
        }
    }

}

extension SageMakerClientTypes.HyperParameterAlgorithmSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmName = "AlgorithmName"
        case metricDefinitions = "MetricDefinitions"
        case trainingImage = "TrainingImage"
        case trainingInputMode = "TrainingInputMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if let metricDefinitions = metricDefinitions {
            var metricDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricDefinitions)
            for metricdefinitionlist0 in metricDefinitions {
                try metricDefinitionsContainer.encode(metricdefinitionlist0)
            }
        }
        if let trainingImage = trainingImage {
            try encodeContainer.encode(trainingImage, forKey: .trainingImage)
        }
        if let trainingInputMode = trainingInputMode {
            try encodeContainer.encode(trainingInputMode.rawValue, forKey: .trainingInputMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingImage)
        trainingImage = trainingImageDecoded
        let trainingInputModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingInputMode.self, forKey: .trainingInputMode)
        trainingInputMode = trainingInputModeDecoded
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let metricDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MetricDefinition?].self, forKey: .metricDefinitions)
        var metricDefinitionsDecoded0:[SageMakerClientTypes.MetricDefinition]? = nil
        if let metricDefinitionsContainer = metricDefinitionsContainer {
            metricDefinitionsDecoded0 = [SageMakerClientTypes.MetricDefinition]()
            for structure0 in metricDefinitionsContainer {
                if let structure0 = structure0 {
                    metricDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        metricDefinitions = metricDefinitionsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Specifies which training algorithm to use for training jobs that a hyperparameter tuning job launches and the metrics to monitor.
    public struct HyperParameterAlgorithmSpecification: Swift.Equatable {
        /// The name of the resource algorithm to use for the hyperparameter tuning job. If you specify a value for this parameter, do not specify a value for TrainingImage.
        public var algorithmName: Swift.String?
        /// An array of [MetricDefinition] objects that specify the metrics that the algorithm emits.
        public var metricDefinitions: [SageMakerClientTypes.MetricDefinition]?
        /// The registry path of the Docker image that contains the training algorithm. For information about Docker registry paths for built-in algorithms, see [Algorithms Provided by Amazon SageMaker: Common Parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html). Amazon SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
        public var trainingImage: Swift.String?
        /// The training input mode that the algorithm supports. For more information about input modes, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Pipe mode If an algorithm supports Pipe mode, Amazon SageMaker streams data directly from Amazon S3 to the container. File mode If an algorithm supports File mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container. You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any. For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training. FastFile mode If an algorithm supports FastFile mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk. FastFile mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.
        /// This member is required.
        public var trainingInputMode: SageMakerClientTypes.TrainingInputMode?

        public init (
            algorithmName: Swift.String? = nil,
            metricDefinitions: [SageMakerClientTypes.MetricDefinition]? = nil,
            trainingImage: Swift.String? = nil,
            trainingInputMode: SageMakerClientTypes.TrainingInputMode? = nil
        )
        {
            self.algorithmName = algorithmName
            self.metricDefinitions = metricDefinitions
            self.trainingImage = trainingImage
            self.trainingInputMode = trainingInputMode
        }
    }

}

extension SageMakerClientTypes {
    public enum HyperParameterScalingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case linear
        case logarithmic
        case reverseLogarithmic
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterScalingType] {
            return [
                .auto,
                .linear,
                .logarithmic,
                .reverseLogarithmic,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "Auto"
            case .linear: return "Linear"
            case .logarithmic: return "Logarithmic"
            case .reverseLogarithmic: return "ReverseLogarithmic"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HyperParameterScalingType(rawValue: rawValue) ?? HyperParameterScalingType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.HyperParameterSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue = "DefaultValue"
        case description = "Description"
        case isRequired = "IsRequired"
        case isTunable = "IsTunable"
        case name = "Name"
        case range = "Range"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValue = defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if isRequired != false {
            try encodeContainer.encode(isRequired, forKey: .isRequired)
        }
        if isTunable != false {
            try encodeContainer.encode(isTunable, forKey: .isTunable)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let range = range {
            try encodeContainer.encode(range, forKey: .range)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ParameterType.self, forKey: .type)
        type = typeDecoded
        let rangeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ParameterRange.self, forKey: .range)
        range = rangeDecoded
        let isTunableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTunable)
        isTunable = isTunableDecoded
        let isRequiredDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isRequired)
        isRequired = isRequiredDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines a hyperparameter to be used by an algorithm.
    public struct HyperParameterSpecification: Swift.Equatable {
        /// The default value for this hyperparameter. If a default value is specified, a hyperparameter cannot be required.
        public var defaultValue: Swift.String?
        /// A brief description of the hyperparameter.
        public var description: Swift.String?
        /// Indicates whether this hyperparameter is required.
        public var isRequired: Swift.Bool
        /// Indicates whether this hyperparameter is tunable in a hyperparameter tuning job.
        public var isTunable: Swift.Bool
        /// The name of this hyperparameter. The name must be unique.
        /// This member is required.
        public var name: Swift.String?
        /// The allowed range for this hyperparameter.
        public var range: SageMakerClientTypes.ParameterRange?
        /// The type of this hyperparameter. The valid types are Integer, Continuous, Categorical, and FreeText.
        /// This member is required.
        public var type: SageMakerClientTypes.ParameterType?

        public init (
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            isRequired: Swift.Bool = false,
            isTunable: Swift.Bool = false,
            name: Swift.String? = nil,
            range: SageMakerClientTypes.ParameterRange? = nil,
            type: SageMakerClientTypes.ParameterType? = nil
        )
        {
            self.defaultValue = defaultValue
            self.description = description
            self.isRequired = isRequired
            self.isTunable = isTunable
            self.name = name
            self.range = range
            self.type = type
        }
    }

}

extension SageMakerClientTypes.HyperParameterTrainingJobDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case checkpointConfig = "CheckpointConfig"
        case definitionName = "DefinitionName"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case hyperParameterRanges = "HyperParameterRanges"
        case inputDataConfig = "InputDataConfig"
        case outputDataConfig = "OutputDataConfig"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case staticHyperParameters = "StaticHyperParameters"
        case stoppingCondition = "StoppingCondition"
        case tuningObjective = "TuningObjective"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmSpecification = algorithmSpecification {
            try encodeContainer.encode(algorithmSpecification, forKey: .algorithmSpecification)
        }
        if let checkpointConfig = checkpointConfig {
            try encodeContainer.encode(checkpointConfig, forKey: .checkpointConfig)
        }
        if let definitionName = definitionName {
            try encodeContainer.encode(definitionName, forKey: .definitionName)
        }
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if enableManagedSpotTraining != false {
            try encodeContainer.encode(enableManagedSpotTraining, forKey: .enableManagedSpotTraining)
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let hyperParameterRanges = hyperParameterRanges {
            try encodeContainer.encode(hyperParameterRanges, forKey: .hyperParameterRanges)
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for inputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(inputdataconfig0)
            }
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let resourceConfig = resourceConfig {
            try encodeContainer.encode(resourceConfig, forKey: .resourceConfig)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let staticHyperParameters = staticHyperParameters {
            var staticHyperParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .staticHyperParameters)
            for (dictKey0, hyperparameters0) in staticHyperParameters {
                try staticHyperParametersContainer.encode(hyperparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tuningObjective = tuningObjective {
            try encodeContainer.encode(tuningObjective, forKey: .tuningObjective)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let definitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .definitionName)
        definitionName = definitionNameDecoded
        let tuningObjectiveDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobObjective.self, forKey: .tuningObjective)
        tuningObjective = tuningObjectiveDecoded
        let hyperParameterRangesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ParameterRanges.self, forKey: .hyperParameterRanges)
        hyperParameterRanges = hyperParameterRangesDecoded
        let staticHyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .staticHyperParameters)
        var staticHyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let staticHyperParametersContainer = staticHyperParametersContainer {
            staticHyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, hyperparametervalue0) in staticHyperParametersContainer {
                if let hyperparametervalue0 = hyperparametervalue0 {
                    staticHyperParametersDecoded0?[key0] = hyperparametervalue0
                }
            }
        }
        staticHyperParameters = staticHyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterAlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Channel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.Channel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let enableNetworkIsolationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableManagedSpotTraining)
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the training jobs launched by a hyperparameter tuning job.
    public struct HyperParameterTrainingJobDefinition: Swift.Equatable {
        /// The [HyperParameterAlgorithmSpecification] object that specifies the resource algorithm to use for the training jobs that the tuning job launches.
        /// This member is required.
        public var algorithmSpecification: SageMakerClientTypes.HyperParameterAlgorithmSpecification?
        /// Contains information about the output location for managed spot training checkpoint data.
        public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
        /// The job definition name.
        public var definitionName: Swift.String?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.
        public var enableInterContainerTrafficEncryption: Swift.Bool
        /// A Boolean indicating whether managed spot training is enabled (True) or not (False).
        public var enableManagedSpotTraining: Swift.Bool
        /// Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If network isolation is used for training jobs that are configured to use a VPC, Amazon SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
        public var enableNetworkIsolation: Swift.Bool
        /// Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job. You can specify a maximum of 20 hyperparameters that a hyperparameter tuning job can search over. Every possible value of a categorical parameter range counts against this limit.
        public var hyperParameterRanges: SageMakerClientTypes.ParameterRanges?
        /// An array of [Channel] objects that specify the input for the training jobs that the tuning job launches.
        public var inputDataConfig: [SageMakerClientTypes.Channel]?
        /// Specifies the path to the Amazon S3 bucket where you store model artifacts from the training jobs that the tuning job launches.
        /// This member is required.
        public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
        /// The resources, including the compute instances and storage volumes, to use for the training jobs that the tuning job launches. Storage volumes store model artifacts and incremental states. Training algorithms might also use storage volumes for scratch space. If you want Amazon SageMaker to use the storage volume to store the training data, choose File as the TrainingInputMode in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.
        /// This member is required.
        public var resourceConfig: SageMakerClientTypes.ResourceConfig?
        /// The number of times to retry the job when the job fails due to an InternalServerError.
        public var retryStrategy: SageMakerClientTypes.RetryStrategy?
        /// The Amazon Resource Name (ARN) of the IAM role associated with the training jobs that the tuning job launches.
        /// This member is required.
        public var roleArn: Swift.String?
        /// Specifies the values of hyperparameters that do not change for the tuning job.
        public var staticHyperParameters: [Swift.String:Swift.String]?
        /// Specifies a limit to how long a model hyperparameter training job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs.
        /// This member is required.
        public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
        /// Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the Type parameter.
        public var tuningObjective: SageMakerClientTypes.HyperParameterTuningJobObjective?
        /// The [VpcConfig] object that specifies the VPC that you want the training jobs that this hyperparameter tuning job launches to connect to. Control access to and from your training container by configuring the VPC. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init (
            algorithmSpecification: SageMakerClientTypes.HyperParameterAlgorithmSpecification? = nil,
            checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
            definitionName: Swift.String? = nil,
            enableInterContainerTrafficEncryption: Swift.Bool = false,
            enableManagedSpotTraining: Swift.Bool = false,
            enableNetworkIsolation: Swift.Bool = false,
            hyperParameterRanges: SageMakerClientTypes.ParameterRanges? = nil,
            inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
            outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
            resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
            retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
            roleArn: Swift.String? = nil,
            staticHyperParameters: [Swift.String:Swift.String]? = nil,
            stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
            tuningObjective: SageMakerClientTypes.HyperParameterTuningJobObjective? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.algorithmSpecification = algorithmSpecification
            self.checkpointConfig = checkpointConfig
            self.definitionName = definitionName
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.hyperParameterRanges = hyperParameterRanges
            self.inputDataConfig = inputDataConfig
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.retryStrategy = retryStrategy
            self.roleArn = roleArn
            self.staticHyperParameters = staticHyperParameters
            self.stoppingCondition = stoppingCondition
            self.tuningObjective = tuningObjective
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes.HyperParameterTrainingJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case finalHyperParameterTuningJobObjectiveMetric = "FinalHyperParameterTuningJobObjectiveMetric"
        case objectiveStatus = "ObjectiveStatus"
        case trainingEndTime = "TrainingEndTime"
        case trainingJobArn = "TrainingJobArn"
        case trainingJobDefinitionName = "TrainingJobDefinitionName"
        case trainingJobName = "TrainingJobName"
        case trainingJobStatus = "TrainingJobStatus"
        case trainingStartTime = "TrainingStartTime"
        case tunedHyperParameters = "TunedHyperParameters"
        case tuningJobName = "TuningJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let finalHyperParameterTuningJobObjectiveMetric = finalHyperParameterTuningJobObjectiveMetric {
            try encodeContainer.encode(finalHyperParameterTuningJobObjectiveMetric, forKey: .finalHyperParameterTuningJobObjectiveMetric)
        }
        if let objectiveStatus = objectiveStatus {
            try encodeContainer.encode(objectiveStatus.rawValue, forKey: .objectiveStatus)
        }
        if let trainingEndTime = trainingEndTime {
            try encodeContainer.encode(trainingEndTime.timeIntervalSince1970, forKey: .trainingEndTime)
        }
        if let trainingJobArn = trainingJobArn {
            try encodeContainer.encode(trainingJobArn, forKey: .trainingJobArn)
        }
        if let trainingJobDefinitionName = trainingJobDefinitionName {
            try encodeContainer.encode(trainingJobDefinitionName, forKey: .trainingJobDefinitionName)
        }
        if let trainingJobName = trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
        if let trainingJobStatus = trainingJobStatus {
            try encodeContainer.encode(trainingJobStatus.rawValue, forKey: .trainingJobStatus)
        }
        if let trainingStartTime = trainingStartTime {
            try encodeContainer.encode(trainingStartTime.timeIntervalSince1970, forKey: .trainingStartTime)
        }
        if let tunedHyperParameters = tunedHyperParameters {
            var tunedHyperParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tunedHyperParameters)
            for (dictKey0, hyperparameters0) in tunedHyperParameters {
                try tunedHyperParametersContainer.encode(hyperparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tuningJobName = tuningJobName {
            try encodeContainer.encode(tuningJobName, forKey: .tuningJobName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobDefinitionName)
        trainingJobDefinitionName = trainingJobDefinitionNameDecoded
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let tuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tuningJobName)
        tuningJobName = tuningJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let trainingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatus.self, forKey: .trainingJobStatus)
        trainingJobStatus = trainingJobStatusDecoded
        let tunedHyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tunedHyperParameters)
        var tunedHyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let tunedHyperParametersContainer = tunedHyperParametersContainer {
            tunedHyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, hyperparametervalue0) in tunedHyperParametersContainer {
                if let hyperparametervalue0 = hyperparametervalue0 {
                    tunedHyperParametersDecoded0?[key0] = hyperparametervalue0
                }
            }
        }
        tunedHyperParameters = tunedHyperParametersDecoded0
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let finalHyperParameterTuningJobObjectiveMetricDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric.self, forKey: .finalHyperParameterTuningJobObjectiveMetric)
        finalHyperParameterTuningJobObjectiveMetric = finalHyperParameterTuningJobObjectiveMetricDecoded
        let objectiveStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ObjectiveStatus.self, forKey: .objectiveStatus)
        objectiveStatus = objectiveStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies summary information about a training job.
    public struct HyperParameterTrainingJobSummary: Swift.Equatable {
        /// The date and time that the training job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The reason that the training job failed.
        public var failureReason: Swift.String?
        /// The [FinalHyperParameterTuningJobObjectiveMetric] object that specifies the value of the objective metric of the tuning job that launched this training job.
        public var finalHyperParameterTuningJobObjectiveMetric: SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric?
        /// The status of the objective metric for the training job:
        ///
        /// * Succeeded: The final objective metric for the training job was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.
        ///
        ///
        ///
        ///
        /// * Pending: The training job is in progress and evaluation of its final objective metric is pending.
        ///
        ///
        ///
        ///
        /// * Failed: The final objective metric for the training job was not evaluated, and was not used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.
        public var objectiveStatus: SageMakerClientTypes.ObjectiveStatus?
        /// Specifies the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.
        public var trainingEndTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the training job.
        /// This member is required.
        public var trainingJobArn: Swift.String?
        /// The training job definition name.
        public var trainingJobDefinitionName: Swift.String?
        /// The name of the training job.
        /// This member is required.
        public var trainingJobName: Swift.String?
        /// The status of the training job.
        /// This member is required.
        public var trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
        /// The date and time that the training job started.
        public var trainingStartTime: ClientRuntime.Date?
        /// A list of the hyperparameters for which you specified ranges to search.
        /// This member is required.
        public var tunedHyperParameters: [Swift.String:Swift.String]?
        /// The HyperParameter tuning job that launched the training job.
        public var tuningJobName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            finalHyperParameterTuningJobObjectiveMetric: SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric? = nil,
            objectiveStatus: SageMakerClientTypes.ObjectiveStatus? = nil,
            trainingEndTime: ClientRuntime.Date? = nil,
            trainingJobArn: Swift.String? = nil,
            trainingJobDefinitionName: Swift.String? = nil,
            trainingJobName: Swift.String? = nil,
            trainingJobStatus: SageMakerClientTypes.TrainingJobStatus? = nil,
            trainingStartTime: ClientRuntime.Date? = nil,
            tunedHyperParameters: [Swift.String:Swift.String]? = nil,
            tuningJobName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.finalHyperParameterTuningJobObjectiveMetric = finalHyperParameterTuningJobObjectiveMetric
            self.objectiveStatus = objectiveStatus
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobDefinitionName = trainingJobDefinitionName
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
            self.trainingStartTime = trainingStartTime
            self.tunedHyperParameters = tunedHyperParameters
            self.tuningJobName = tuningJobName
        }
    }

}

extension SageMakerClientTypes.HyperParameterTuningJobConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobObjective = "HyperParameterTuningJobObjective"
        case parameterRanges = "ParameterRanges"
        case resourceLimits = "ResourceLimits"
        case strategy = "Strategy"
        case trainingJobEarlyStoppingType = "TrainingJobEarlyStoppingType"
        case tuningJobCompletionCriteria = "TuningJobCompletionCriteria"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hyperParameterTuningJobObjective = hyperParameterTuningJobObjective {
            try encodeContainer.encode(hyperParameterTuningJobObjective, forKey: .hyperParameterTuningJobObjective)
        }
        if let parameterRanges = parameterRanges {
            try encodeContainer.encode(parameterRanges, forKey: .parameterRanges)
        }
        if let resourceLimits = resourceLimits {
            try encodeContainer.encode(resourceLimits, forKey: .resourceLimits)
        }
        if let strategy = strategy {
            try encodeContainer.encode(strategy.rawValue, forKey: .strategy)
        }
        if let trainingJobEarlyStoppingType = trainingJobEarlyStoppingType {
            try encodeContainer.encode(trainingJobEarlyStoppingType.rawValue, forKey: .trainingJobEarlyStoppingType)
        }
        if let tuningJobCompletionCriteria = tuningJobCompletionCriteria {
            try encodeContainer.encode(tuningJobCompletionCriteria, forKey: .tuningJobCompletionCriteria)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let strategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobStrategyType.self, forKey: .strategy)
        strategy = strategyDecoded
        let hyperParameterTuningJobObjectiveDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobObjective.self, forKey: .hyperParameterTuningJobObjective)
        hyperParameterTuningJobObjective = hyperParameterTuningJobObjectiveDecoded
        let resourceLimitsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceLimits.self, forKey: .resourceLimits)
        resourceLimits = resourceLimitsDecoded
        let parameterRangesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ParameterRanges.self, forKey: .parameterRanges)
        parameterRanges = parameterRangesDecoded
        let trainingJobEarlyStoppingTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobEarlyStoppingType.self, forKey: .trainingJobEarlyStoppingType)
        trainingJobEarlyStoppingType = trainingJobEarlyStoppingTypeDecoded
        let tuningJobCompletionCriteriaDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TuningJobCompletionCriteria.self, forKey: .tuningJobCompletionCriteria)
        tuningJobCompletionCriteria = tuningJobCompletionCriteriaDecoded
    }
}

extension SageMakerClientTypes {
    /// Configures a hyperparameter tuning job.
    public struct HyperParameterTuningJobConfig: Swift.Equatable {
        /// The [HyperParameterTuningJobObjective] object that specifies the objective metric for this tuning job.
        public var hyperParameterTuningJobObjective: SageMakerClientTypes.HyperParameterTuningJobObjective?
        /// The [ParameterRanges] object that specifies the ranges of hyperparameters that this tuning job searches.
        public var parameterRanges: SageMakerClientTypes.ParameterRanges?
        /// The [ResourceLimits] object that specifies the maximum number of training jobs and parallel training jobs for this tuning job.
        /// This member is required.
        public var resourceLimits: SageMakerClientTypes.ResourceLimits?
        /// Specifies how hyperparameter tuning chooses the combinations of hyperparameter values to use for the training job it launches. To use the Bayesian search strategy, set this to Bayesian. To randomly search, set it to Random. For information about search strategies, see [How Hyperparameter Tuning Works](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html).
        /// This member is required.
        public var strategy: SageMakerClientTypes.HyperParameterTuningJobStrategyType?
        /// Specifies whether to use early stopping for training jobs launched by the hyperparameter tuning job. This can be one of the following values (the default value is OFF): OFF Training jobs launched by the hyperparameter tuning job do not use early stopping. AUTO Amazon SageMaker stops training jobs launched by the hyperparameter tuning job when they are unlikely to perform better than previously completed training jobs. For more information, see [Stop Training Jobs Early](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html).
        public var trainingJobEarlyStoppingType: SageMakerClientTypes.TrainingJobEarlyStoppingType?
        /// The tuning job's completion criteria.
        public var tuningJobCompletionCriteria: SageMakerClientTypes.TuningJobCompletionCriteria?

        public init (
            hyperParameterTuningJobObjective: SageMakerClientTypes.HyperParameterTuningJobObjective? = nil,
            parameterRanges: SageMakerClientTypes.ParameterRanges? = nil,
            resourceLimits: SageMakerClientTypes.ResourceLimits? = nil,
            strategy: SageMakerClientTypes.HyperParameterTuningJobStrategyType? = nil,
            trainingJobEarlyStoppingType: SageMakerClientTypes.TrainingJobEarlyStoppingType? = nil,
            tuningJobCompletionCriteria: SageMakerClientTypes.TuningJobCompletionCriteria? = nil
        )
        {
            self.hyperParameterTuningJobObjective = hyperParameterTuningJobObjective
            self.parameterRanges = parameterRanges
            self.resourceLimits = resourceLimits
            self.strategy = strategy
            self.trainingJobEarlyStoppingType = trainingJobEarlyStoppingType
            self.tuningJobCompletionCriteria = tuningJobCompletionCriteria
        }
    }

}

extension SageMakerClientTypes.HyperParameterTuningJobObjective: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobObjectiveType.self, forKey: .type)
        type = typeDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the Type parameter.
    public struct HyperParameterTuningJobObjective: Swift.Equatable {
        /// The name of the metric to use for the objective metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// Whether to minimize or maximize the objective metric.
        /// This member is required.
        public var type: SageMakerClientTypes.HyperParameterTuningJobObjectiveType?

        public init (
            metricName: Swift.String? = nil,
            type: SageMakerClientTypes.HyperParameterTuningJobObjectiveType? = nil
        )
        {
            self.metricName = metricName
            self.type = type
        }
    }

}

extension SageMakerClientTypes {
    public enum HyperParameterTuningJobObjectiveType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case maximize
        case minimize
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobObjectiveType] {
            return [
                .maximize,
                .minimize,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .maximize: return "Maximize"
            case .minimize: return "Minimize"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HyperParameterTuningJobObjectiveType(rawValue: rawValue) ?? HyperParameterTuningJobObjectiveType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum HyperParameterTuningJobSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobSortByOptions] {
            return [
                .creationtime,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HyperParameterTuningJobSortByOptions(rawValue: rawValue) ?? HyperParameterTuningJobSortByOptions.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum HyperParameterTuningJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HyperParameterTuningJobStatus(rawValue: rawValue) ?? HyperParameterTuningJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    /// The strategy hyperparameter tuning uses to find the best combination of hyperparameters for your model. Currently, the only supported value is Bayesian.
    public enum HyperParameterTuningJobStrategyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bayesian
        case random
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobStrategyType] {
            return [
                .bayesian,
                .random,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bayesian: return "Bayesian"
            case .random: return "Random"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HyperParameterTuningJobStrategyType(rawValue: rawValue) ?? HyperParameterTuningJobStrategyType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.HyperParameterTuningJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case hyperParameterTuningEndTime = "HyperParameterTuningEndTime"
        case hyperParameterTuningJobArn = "HyperParameterTuningJobArn"
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case hyperParameterTuningJobStatus = "HyperParameterTuningJobStatus"
        case lastModifiedTime = "LastModifiedTime"
        case objectiveStatusCounters = "ObjectiveStatusCounters"
        case resourceLimits = "ResourceLimits"
        case strategy = "Strategy"
        case trainingJobStatusCounters = "TrainingJobStatusCounters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let hyperParameterTuningEndTime = hyperParameterTuningEndTime {
            try encodeContainer.encode(hyperParameterTuningEndTime.timeIntervalSince1970, forKey: .hyperParameterTuningEndTime)
        }
        if let hyperParameterTuningJobArn = hyperParameterTuningJobArn {
            try encodeContainer.encode(hyperParameterTuningJobArn, forKey: .hyperParameterTuningJobArn)
        }
        if let hyperParameterTuningJobName = hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
        if let hyperParameterTuningJobStatus = hyperParameterTuningJobStatus {
            try encodeContainer.encode(hyperParameterTuningJobStatus.rawValue, forKey: .hyperParameterTuningJobStatus)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let objectiveStatusCounters = objectiveStatusCounters {
            try encodeContainer.encode(objectiveStatusCounters, forKey: .objectiveStatusCounters)
        }
        if let resourceLimits = resourceLimits {
            try encodeContainer.encode(resourceLimits, forKey: .resourceLimits)
        }
        if let strategy = strategy {
            try encodeContainer.encode(strategy.rawValue, forKey: .strategy)
        }
        if let trainingJobStatusCounters = trainingJobStatusCounters {
            try encodeContainer.encode(trainingJobStatusCounters, forKey: .trainingJobStatusCounters)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
        let hyperParameterTuningJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobArn)
        hyperParameterTuningJobArn = hyperParameterTuningJobArnDecoded
        let hyperParameterTuningJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobStatus.self, forKey: .hyperParameterTuningJobStatus)
        hyperParameterTuningJobStatus = hyperParameterTuningJobStatusDecoded
        let strategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobStrategyType.self, forKey: .strategy)
        strategy = strategyDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let hyperParameterTuningEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .hyperParameterTuningEndTime)
        hyperParameterTuningEndTime = hyperParameterTuningEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let trainingJobStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatusCounters.self, forKey: .trainingJobStatusCounters)
        trainingJobStatusCounters = trainingJobStatusCountersDecoded
        let objectiveStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ObjectiveStatusCounters.self, forKey: .objectiveStatusCounters)
        objectiveStatusCounters = objectiveStatusCountersDecoded
        let resourceLimitsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceLimits.self, forKey: .resourceLimits)
        resourceLimits = resourceLimitsDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about a hyperparameter tuning job.
    public struct HyperParameterTuningJobSummary: Swift.Equatable {
        /// The date and time that the tuning job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The date and time that the tuning job ended.
        public var hyperParameterTuningEndTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the tuning job.
        /// This member is required.
        public var hyperParameterTuningJobArn: Swift.String?
        /// The name of the tuning job.
        /// This member is required.
        public var hyperParameterTuningJobName: Swift.String?
        /// The status of the tuning job.
        /// This member is required.
        public var hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus?
        /// The date and time that the tuning job was modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The [ObjectiveStatusCounters] object that specifies the numbers of training jobs, categorized by objective metric status, that this tuning job launched.
        /// This member is required.
        public var objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters?
        /// The [ResourceLimits] object that specifies the maximum number of training jobs and parallel training jobs allowed for this tuning job.
        public var resourceLimits: SageMakerClientTypes.ResourceLimits?
        /// Specifies the search strategy hyperparameter tuning uses to choose which hyperparameters to use for each iteration. Currently, the only valid value is Bayesian.
        /// This member is required.
        public var strategy: SageMakerClientTypes.HyperParameterTuningJobStrategyType?
        /// The [TrainingJobStatusCounters] object that specifies the numbers of training jobs, categorized by status, that this tuning job launched.
        /// This member is required.
        public var trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            hyperParameterTuningEndTime: ClientRuntime.Date? = nil,
            hyperParameterTuningJobArn: Swift.String? = nil,
            hyperParameterTuningJobName: Swift.String? = nil,
            hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters? = nil,
            resourceLimits: SageMakerClientTypes.ResourceLimits? = nil,
            strategy: SageMakerClientTypes.HyperParameterTuningJobStrategyType? = nil,
            trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters? = nil
        )
        {
            self.creationTime = creationTime
            self.hyperParameterTuningEndTime = hyperParameterTuningEndTime
            self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
            self.hyperParameterTuningJobStatus = hyperParameterTuningJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.objectiveStatusCounters = objectiveStatusCounters
            self.resourceLimits = resourceLimits
            self.strategy = strategy
            self.trainingJobStatusCounters = trainingJobStatusCounters
        }
    }

}

extension SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parentHyperParameterTuningJobs = "ParentHyperParameterTuningJobs"
        case warmStartType = "WarmStartType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parentHyperParameterTuningJobs = parentHyperParameterTuningJobs {
            var parentHyperParameterTuningJobsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parentHyperParameterTuningJobs)
            for parenthyperparametertuningjobs0 in parentHyperParameterTuningJobs {
                try parentHyperParameterTuningJobsContainer.encode(parenthyperparametertuningjobs0)
            }
        }
        if let warmStartType = warmStartType {
            try encodeContainer.encode(warmStartType.rawValue, forKey: .warmStartType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentHyperParameterTuningJobsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ParentHyperParameterTuningJob?].self, forKey: .parentHyperParameterTuningJobs)
        var parentHyperParameterTuningJobsDecoded0:[SageMakerClientTypes.ParentHyperParameterTuningJob]? = nil
        if let parentHyperParameterTuningJobsContainer = parentHyperParameterTuningJobsContainer {
            parentHyperParameterTuningJobsDecoded0 = [SageMakerClientTypes.ParentHyperParameterTuningJob]()
            for structure0 in parentHyperParameterTuningJobsContainer {
                if let structure0 = structure0 {
                    parentHyperParameterTuningJobsDecoded0?.append(structure0)
                }
            }
        }
        parentHyperParameterTuningJobs = parentHyperParameterTuningJobsDecoded0
        let warmStartTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobWarmStartType.self, forKey: .warmStartType)
        warmStartType = warmStartTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job. All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job. All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.
    public struct HyperParameterTuningJobWarmStartConfig: Swift.Equatable {
        /// An array of hyperparameter tuning jobs that are used as the starting point for the new hyperparameter tuning job. For more information about warm starting a hyperparameter tuning job, see [Using a Previous Hyperparameter Tuning Job as a Starting Point](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-warm-start.html). Hyperparameter tuning jobs created before October 1, 2018 cannot be used as parent jobs for warm start tuning jobs.
        /// This member is required.
        public var parentHyperParameterTuningJobs: [SageMakerClientTypes.ParentHyperParameterTuningJob]?
        /// Specifies one of the following: IDENTICAL_DATA_AND_ALGORITHM The new hyperparameter tuning job uses the same input data and training image as the parent tuning jobs. You can change the hyperparameter ranges to search and the maximum number of training jobs that the hyperparameter tuning job launches. You cannot use a new version of the training algorithm, unless the changes in the new version do not affect the algorithm itself. For example, changes that improve logging or adding support for a different data format are allowed. You can also change hyperparameters from tunable to static, and from static to tunable, but the total number of static plus tunable hyperparameters must remain the same as it is in all parent jobs. The objective metric for the new tuning job must be the same as for all parent jobs. TRANSFER_LEARNING The new hyperparameter tuning job can include input data, hyperparameter ranges, maximum number of concurrent training jobs, and maximum number of training jobs that are different than those of its parent hyperparameter tuning jobs. The training image can also be a different version from the version used in the parent hyperparameter tuning job. You can also change hyperparameters from tunable to static, and from static to tunable, but the total number of static plus tunable hyperparameters must remain the same as it is in all parent jobs. The objective metric for the new tuning job must be the same as for all parent jobs.
        /// This member is required.
        public var warmStartType: SageMakerClientTypes.HyperParameterTuningJobWarmStartType?

        public init (
            parentHyperParameterTuningJobs: [SageMakerClientTypes.ParentHyperParameterTuningJob]? = nil,
            warmStartType: SageMakerClientTypes.HyperParameterTuningJobWarmStartType? = nil
        )
        {
            self.parentHyperParameterTuningJobs = parentHyperParameterTuningJobs
            self.warmStartType = warmStartType
        }
    }

}

extension SageMakerClientTypes {
    public enum HyperParameterTuningJobWarmStartType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case identicalDataAndAlgorithm
        case transferLearning
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobWarmStartType] {
            return [
                .identicalDataAndAlgorithm,
                .transferLearning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .identicalDataAndAlgorithm: return "IdenticalDataAndAlgorithm"
            case .transferLearning: return "TransferLearning"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HyperParameterTuningJobWarmStartType(rawValue: rawValue) ?? HyperParameterTuningJobWarmStartType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.Image: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case description = "Description"
        case displayName = "DisplayName"
        case failureReason = "FailureReason"
        case imageArn = "ImageArn"
        case imageName = "ImageName"
        case imageStatus = "ImageStatus"
        case lastModifiedTime = "LastModifiedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let imageArn = imageArn {
            try encodeContainer.encode(imageArn, forKey: .imageArn)
        }
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
        if let imageStatus = imageStatus {
            try encodeContainer.encode(imageStatus.rawValue, forKey: .imageStatus)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let imageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageArn)
        imageArn = imageArnDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let imageStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageStatus.self, forKey: .imageStatus)
        imageStatus = imageStatusDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// A SageMaker image. A SageMaker image represents a set of container images that are derived from a common base container image. Each of these container images is represented by a SageMaker ImageVersion.
    public struct Image: Swift.Equatable {
        /// When the image was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The description of the image.
        public var description: Swift.String?
        /// The name of the image as displayed.
        public var displayName: Swift.String?
        /// When a create, update, or delete operation fails, the reason for the failure.
        public var failureReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the image.
        /// This member is required.
        public var imageArn: Swift.String?
        /// The name of the image.
        /// This member is required.
        public var imageName: Swift.String?
        /// The status of the image.
        /// This member is required.
        public var imageStatus: SageMakerClientTypes.ImageStatus?
        /// When the image was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            imageArn: Swift.String? = nil,
            imageName: Swift.String? = nil,
            imageStatus: SageMakerClientTypes.ImageStatus? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.description = description
            self.displayName = displayName
            self.failureReason = failureReason
            self.imageArn = imageArn
            self.imageName = imageName
            self.imageStatus = imageStatus
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes.ImageConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case repositoryAccessMode = "RepositoryAccessMode"
        case repositoryAuthConfig = "RepositoryAuthConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let repositoryAccessMode = repositoryAccessMode {
            try encodeContainer.encode(repositoryAccessMode.rawValue, forKey: .repositoryAccessMode)
        }
        if let repositoryAuthConfig = repositoryAuthConfig {
            try encodeContainer.encode(repositoryAuthConfig, forKey: .repositoryAuthConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryAccessModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RepositoryAccessMode.self, forKey: .repositoryAccessMode)
        repositoryAccessMode = repositoryAccessModeDecoded
        let repositoryAuthConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RepositoryAuthConfig.self, forKey: .repositoryAuthConfig)
        repositoryAuthConfig = repositoryAuthConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC).
    public struct ImageConfig: Swift.Equatable {
        /// Set this to one of the following values:
        ///
        /// * Platform - The model image is hosted in Amazon ECR.
        ///
        /// * Vpc - The model image is hosted in a private Docker registry in your VPC.
        /// This member is required.
        public var repositoryAccessMode: SageMakerClientTypes.RepositoryAccessMode?
        /// (Optional) Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication.
        public var repositoryAuthConfig: SageMakerClientTypes.RepositoryAuthConfig?

        public init (
            repositoryAccessMode: SageMakerClientTypes.RepositoryAccessMode? = nil,
            repositoryAuthConfig: SageMakerClientTypes.RepositoryAuthConfig? = nil
        )
        {
            self.repositoryAccessMode = repositoryAccessMode
            self.repositoryAuthConfig = repositoryAuthConfig
        }
    }

}

extension SageMakerClientTypes {
    public enum ImageSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case imageName
        case lastModifiedTime
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageSortBy] {
            return [
                .creationTime,
                .imageName,
                .lastModifiedTime,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CREATION_TIME"
            case .imageName: return "IMAGE_NAME"
            case .lastModifiedTime: return "LAST_MODIFIED_TIME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImageSortBy(rawValue: rawValue) ?? ImageSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ImageSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageSortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImageSortOrder(rawValue: rawValue) ?? ImageSortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ImageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageStatus] {
            return [
                .created,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImageStatus(rawValue: rawValue) ?? ImageStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ImageVersion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case imageArn = "ImageArn"
        case imageVersionArn = "ImageVersionArn"
        case imageVersionStatus = "ImageVersionStatus"
        case lastModifiedTime = "LastModifiedTime"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let imageArn = imageArn {
            try encodeContainer.encode(imageArn, forKey: .imageArn)
        }
        if let imageVersionArn = imageVersionArn {
            try encodeContainer.encode(imageVersionArn, forKey: .imageVersionArn)
        }
        if let imageVersionStatus = imageVersionStatus {
            try encodeContainer.encode(imageVersionStatus.rawValue, forKey: .imageVersionStatus)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let imageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageArn)
        imageArn = imageArnDecoded
        let imageVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageVersionArn)
        imageVersionArn = imageVersionArnDecoded
        let imageVersionStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageVersionStatus.self, forKey: .imageVersionStatus)
        imageVersionStatus = imageVersionStatusDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension SageMakerClientTypes {
    /// A version of a SageMaker Image. A version represents an existing container image.
    public struct ImageVersion: Swift.Equatable {
        /// When the version was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// When a create or delete operation fails, the reason for the failure.
        public var failureReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the image the version is based on.
        /// This member is required.
        public var imageArn: Swift.String?
        /// The ARN of the version.
        /// This member is required.
        public var imageVersionArn: Swift.String?
        /// The status of the version.
        /// This member is required.
        public var imageVersionStatus: SageMakerClientTypes.ImageVersionStatus?
        /// When the version was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The version number.
        /// This member is required.
        public var version: Swift.Int?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            imageArn: Swift.String? = nil,
            imageVersionArn: Swift.String? = nil,
            imageVersionStatus: SageMakerClientTypes.ImageVersionStatus? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            version: Swift.Int? = nil
        )
        {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.imageArn = imageArn
            self.imageVersionArn = imageVersionArn
            self.imageVersionStatus = imageVersionStatus
            self.lastModifiedTime = lastModifiedTime
            self.version = version
        }
    }

}

extension SageMakerClientTypes {
    public enum ImageVersionSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case lastModifiedTime
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageVersionSortBy] {
            return [
                .creationTime,
                .lastModifiedTime,
                .version,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CREATION_TIME"
            case .lastModifiedTime: return "LAST_MODIFIED_TIME"
            case .version: return "VERSION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImageVersionSortBy(rawValue: rawValue) ?? ImageVersionSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ImageVersionSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageVersionSortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImageVersionSortOrder(rawValue: rawValue) ?? ImageVersionSortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ImageVersionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageVersionStatus] {
            return [
                .created,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImageVersionStatus(rawValue: rawValue) ?? ImageVersionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.InferenceExecutionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mode = "Mode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceExecutionMode.self, forKey: .mode)
        mode = modeDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies details about how containers in a multi-container endpoint are run.
    public struct InferenceExecutionConfig: Swift.Equatable {
        /// How containers in a multi-container are run. The following values are valid.
        ///
        /// * SERIAL - Containers run as a serial pipeline.
        ///
        /// * DIRECT - Only the individual container that you specify is run.
        /// This member is required.
        public var mode: SageMakerClientTypes.InferenceExecutionMode?

        public init (
            mode: SageMakerClientTypes.InferenceExecutionMode? = nil
        )
        {
            self.mode = mode
        }
    }

}

extension SageMakerClientTypes {
    public enum InferenceExecutionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case direct
        case serial
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceExecutionMode] {
            return [
                .direct,
                .serial,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .direct: return "Direct"
            case .serial: return "Serial"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferenceExecutionMode(rawValue: rawValue) ?? InferenceExecutionMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.InferenceRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointConfiguration = "EndpointConfiguration"
        case metrics = "Metrics"
        case modelConfiguration = "ModelConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointConfiguration = endpointConfiguration {
            try encodeContainer.encode(endpointConfiguration, forKey: .endpointConfiguration)
        }
        if let metrics = metrics {
            try encodeContainer.encode(metrics, forKey: .metrics)
        }
        if let modelConfiguration = modelConfiguration {
            try encodeContainer.encode(modelConfiguration, forKey: .modelConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationMetrics.self, forKey: .metrics)
        metrics = metricsDecoded
        let endpointConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointOutputConfiguration.self, forKey: .endpointConfiguration)
        endpointConfiguration = endpointConfigurationDecoded
        let modelConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelConfiguration.self, forKey: .modelConfiguration)
        modelConfiguration = modelConfigurationDecoded
    }
}

extension SageMakerClientTypes {
    /// A list of recommendations made by Amazon SageMaker Inference Recommender.
    public struct InferenceRecommendation: Swift.Equatable {
        /// Defines the endpoint configuration parameters.
        /// This member is required.
        public var endpointConfiguration: SageMakerClientTypes.EndpointOutputConfiguration?
        /// The metrics used to decide what recommendation to make.
        /// This member is required.
        public var metrics: SageMakerClientTypes.RecommendationMetrics?
        /// Defines the model configuration.
        /// This member is required.
        public var modelConfiguration: SageMakerClientTypes.ModelConfiguration?

        public init (
            endpointConfiguration: SageMakerClientTypes.EndpointOutputConfiguration? = nil,
            metrics: SageMakerClientTypes.RecommendationMetrics? = nil,
            modelConfiguration: SageMakerClientTypes.ModelConfiguration? = nil
        )
        {
            self.endpointConfiguration = endpointConfiguration
            self.metrics = metrics
            self.modelConfiguration = modelConfiguration
        }
    }

}

extension SageMakerClientTypes.InferenceRecommendationsJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case jobArn = "JobArn"
        case jobDescription = "JobDescription"
        case jobName = "JobName"
        case jobType = "JobType"
        case lastModifiedTime = "LastModifiedTime"
        case roleArn = "RoleArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let jobArn = jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobDescription = jobDescription {
            try encodeContainer.encode(jobDescription, forKey: .jobDescription)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobType = jobType {
            try encodeContainer.encode(jobType.rawValue, forKey: .jobType)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDescription)
        jobDescription = jobDescriptionDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension SageMakerClientTypes {
    /// A structure that contains a list of recommendation jobs.
    public struct InferenceRecommendationsJob: Swift.Equatable {
        /// A timestamp that shows when the job completed.
        public var completionTime: ClientRuntime.Date?
        /// A timestamp that shows when the job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// If the job fails, provides information why the job failed.
        public var failureReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the recommendation job.
        /// This member is required.
        public var jobArn: Swift.String?
        /// The job description.
        /// This member is required.
        public var jobDescription: Swift.String?
        /// The name of the job.
        /// This member is required.
        public var jobName: Swift.String?
        /// The recommendation job type.
        /// This member is required.
        public var jobType: SageMakerClientTypes.RecommendationJobType?
        /// A timestamp that shows when the job was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The status of the job.
        /// This member is required.
        public var status: SageMakerClientTypes.RecommendationJobStatus?

        public init (
            completionTime: ClientRuntime.Date? = nil,
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            jobArn: Swift.String? = nil,
            jobDescription: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobType: SageMakerClientTypes.RecommendationJobType? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            roleArn: Swift.String? = nil,
            status: SageMakerClientTypes.RecommendationJobStatus? = nil
        )
        {
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.jobArn = jobArn
            self.jobDescription = jobDescription
            self.jobName = jobName
            self.jobType = jobType
            self.lastModifiedTime = lastModifiedTime
            self.roleArn = roleArn
            self.status = status
        }
    }

}

extension SageMakerClientTypes.InferenceSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers = "Containers"
        case supportedContentTypes = "SupportedContentTypes"
        case supportedRealtimeInferenceInstanceTypes = "SupportedRealtimeInferenceInstanceTypes"
        case supportedResponseMIMETypes = "SupportedResponseMIMETypes"
        case supportedTransformInstanceTypes = "SupportedTransformInstanceTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for modelpackagecontainerdefinitionlist0 in containers {
                try containersContainer.encode(modelpackagecontainerdefinitionlist0)
            }
        }
        if let supportedContentTypes = supportedContentTypes {
            var supportedContentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedContentTypes)
            for contenttypes0 in supportedContentTypes {
                try supportedContentTypesContainer.encode(contenttypes0)
            }
        }
        if let supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes {
            var supportedRealtimeInferenceInstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedRealtimeInferenceInstanceTypes)
            for realtimeinferenceinstancetypes0 in supportedRealtimeInferenceInstanceTypes {
                try supportedRealtimeInferenceInstanceTypesContainer.encode(realtimeinferenceinstancetypes0.rawValue)
            }
        }
        if let supportedResponseMIMETypes = supportedResponseMIMETypes {
            var supportedResponseMIMETypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedResponseMIMETypes)
            for responsemimetypes0 in supportedResponseMIMETypes {
                try supportedResponseMIMETypesContainer.encode(responsemimetypes0)
            }
        }
        if let supportedTransformInstanceTypes = supportedTransformInstanceTypes {
            var supportedTransformInstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedTransformInstanceTypes)
            for transforminstancetypes0 in supportedTransformInstanceTypes {
                try supportedTransformInstanceTypesContainer.encode(transforminstancetypes0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelPackageContainerDefinition?].self, forKey: .containers)
        var containersDecoded0:[SageMakerClientTypes.ModelPackageContainerDefinition]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [SageMakerClientTypes.ModelPackageContainerDefinition]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let supportedTransformInstanceTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TransformInstanceType?].self, forKey: .supportedTransformInstanceTypes)
        var supportedTransformInstanceTypesDecoded0:[SageMakerClientTypes.TransformInstanceType]? = nil
        if let supportedTransformInstanceTypesContainer = supportedTransformInstanceTypesContainer {
            supportedTransformInstanceTypesDecoded0 = [SageMakerClientTypes.TransformInstanceType]()
            for string0 in supportedTransformInstanceTypesContainer {
                if let string0 = string0 {
                    supportedTransformInstanceTypesDecoded0?.append(string0)
                }
            }
        }
        supportedTransformInstanceTypes = supportedTransformInstanceTypesDecoded0
        let supportedRealtimeInferenceInstanceTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariantInstanceType?].self, forKey: .supportedRealtimeInferenceInstanceTypes)
        var supportedRealtimeInferenceInstanceTypesDecoded0:[SageMakerClientTypes.ProductionVariantInstanceType]? = nil
        if let supportedRealtimeInferenceInstanceTypesContainer = supportedRealtimeInferenceInstanceTypesContainer {
            supportedRealtimeInferenceInstanceTypesDecoded0 = [SageMakerClientTypes.ProductionVariantInstanceType]()
            for string0 in supportedRealtimeInferenceInstanceTypesContainer {
                if let string0 = string0 {
                    supportedRealtimeInferenceInstanceTypesDecoded0?.append(string0)
                }
            }
        }
        supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypesDecoded0
        let supportedContentTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedContentTypes)
        var supportedContentTypesDecoded0:[Swift.String]? = nil
        if let supportedContentTypesContainer = supportedContentTypesContainer {
            supportedContentTypesDecoded0 = [Swift.String]()
            for string0 in supportedContentTypesContainer {
                if let string0 = string0 {
                    supportedContentTypesDecoded0?.append(string0)
                }
            }
        }
        supportedContentTypes = supportedContentTypesDecoded0
        let supportedResponseMIMETypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedResponseMIMETypes)
        var supportedResponseMIMETypesDecoded0:[Swift.String]? = nil
        if let supportedResponseMIMETypesContainer = supportedResponseMIMETypesContainer {
            supportedResponseMIMETypesDecoded0 = [Swift.String]()
            for string0 in supportedResponseMIMETypesContainer {
                if let string0 = string0 {
                    supportedResponseMIMETypesDecoded0?.append(string0)
                }
            }
        }
        supportedResponseMIMETypes = supportedResponseMIMETypesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Defines how to perform inference generation after a training job is run.
    public struct InferenceSpecification: Swift.Equatable {
        /// The Amazon ECR registry path of the Docker image that contains the inference code.
        /// This member is required.
        public var containers: [SageMakerClientTypes.ModelPackageContainerDefinition]?
        /// The supported MIME types for the input data.
        /// This member is required.
        public var supportedContentTypes: [Swift.String]?
        /// A list of the instance types that are used to generate inferences in real-time. This parameter is required for unversioned models, and optional for versioned models.
        public var supportedRealtimeInferenceInstanceTypes: [SageMakerClientTypes.ProductionVariantInstanceType]?
        /// The supported MIME types for the output data.
        /// This member is required.
        public var supportedResponseMIMETypes: [Swift.String]?
        /// A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed. This parameter is required for unversioned models, and optional for versioned models.
        public var supportedTransformInstanceTypes: [SageMakerClientTypes.TransformInstanceType]?

        public init (
            containers: [SageMakerClientTypes.ModelPackageContainerDefinition]? = nil,
            supportedContentTypes: [Swift.String]? = nil,
            supportedRealtimeInferenceInstanceTypes: [SageMakerClientTypes.ProductionVariantInstanceType]? = nil,
            supportedResponseMIMETypes: [Swift.String]? = nil,
            supportedTransformInstanceTypes: [SageMakerClientTypes.TransformInstanceType]? = nil
        )
        {
            self.containers = containers
            self.supportedContentTypes = supportedContentTypes
            self.supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes
            self.supportedResponseMIMETypes = supportedResponseMIMETypes
            self.supportedTransformInstanceTypes = supportedTransformInstanceTypes
        }
    }

}

extension SageMakerClientTypes.InputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataInputConfig = "DataInputConfig"
        case framework = "Framework"
        case frameworkVersion = "FrameworkVersion"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataInputConfig = dataInputConfig {
            try encodeContainer.encode(dataInputConfig, forKey: .dataInputConfig)
        }
        if let framework = framework {
            try encodeContainer.encode(framework.rawValue, forKey: .framework)
        }
        if let frameworkVersion = frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let dataInputConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataInputConfig)
        dataInputConfig = dataInputConfigDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Framework.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
    public struct InputConfig: Swift.Equatable {
        /// Specifies the name and shape of the expected data inputs for your trained model with a JSON dictionary form. The data inputs are [InputConfig$Framework] specific.
        ///
        /// * TensorFlow: You must specify the name and shape (NHWC format) of the expected data inputs using a dictionary format for your trained model. The dictionary formats required for the console and CLI are different.
        ///
        /// * Examples for one input:
        ///
        /// * If using the console, {"input":[1,1024,1024,3]}
        ///
        /// * If using the CLI, {\"input\":[1,1024,1024,3]}
        ///
        ///
        ///
        ///
        /// * Examples for two inputs:
        ///
        /// * If using the console, {"data1": [1,28,28,1], "data2":[1,28,28,1]}
        ///
        /// * If using the CLI, {\"data1\": [1,28,28,1], \"data2\":[1,28,28,1]}
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * KERAS: You must specify the name and shape (NCHW format) of expected data inputs using a dictionary format for your trained model. Note that while Keras model artifacts should be uploaded in NHWC (channel-last) format, DataInputConfig should be specified in NCHW (channel-first) format. The dictionary formats required for the console and CLI are different.
        ///
        /// * Examples for one input:
        ///
        /// * If using the console, {"input_1":[1,3,224,224]}
        ///
        /// * If using the CLI, {\"input_1\":[1,3,224,224]}
        ///
        ///
        ///
        ///
        /// * Examples for two inputs:
        ///
        /// * If using the console, {"input_1": [1,3,224,224], "input_2":[1,3,224,224]}
        ///
        /// * If using the CLI, {\"input_1\": [1,3,224,224], \"input_2\":[1,3,224,224]}
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * MXNET/ONNX/DARKNET: You must specify the name and shape (NCHW format) of the expected data inputs in order using a dictionary format for your trained model. The dictionary formats required for the console and CLI are different.
        ///
        /// * Examples for one input:
        ///
        /// * If using the console, {"data":[1,3,1024,1024]}
        ///
        /// * If using the CLI, {\"data\":[1,3,1024,1024]}
        ///
        ///
        ///
        ///
        /// * Examples for two inputs:
        ///
        /// * If using the console, {"var1": [1,1,28,28], "var2":[1,1,28,28]}
        ///
        /// * If using the CLI, {\"var1\": [1,1,28,28], \"var2\":[1,1,28,28]}
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * PyTorch: You can either specify the name and shape (NCHW format) of expected data inputs in order using a dictionary format for your trained model or you can specify the shape only using a list format. The dictionary formats required for the console and CLI are different. The list formats for the console and CLI are the same.
        ///
        /// * Examples for one input in dictionary format:
        ///
        /// * If using the console, {"input0":[1,3,224,224]}
        ///
        /// * If using the CLI, {\"input0\":[1,3,224,224]}
        ///
        ///
        ///
        ///
        /// * Example for one input in list format: [[1,3,224,224]]
        ///
        /// * Examples for two inputs in dictionary format:
        ///
        /// * If using the console, {"input0":[1,3,224,224], "input1":[1,3,224,224]}
        ///
        /// * If using the CLI, {\"input0\":[1,3,224,224], \"input1\":[1,3,224,224]}
        ///
        ///
        ///
        ///
        /// * Example for two inputs in list format: [[1,3,224,224], [1,3,224,224]]
        ///
        ///
        ///
        ///
        /// * XGBOOST: input data name and shape are not needed.
        ///
        ///
        /// DataInputConfig supports the following parameters for CoreML[OutputConfig$TargetDevice] (ML Model format):
        ///
        /// * shape: Input shape, for example {"input_1": {"shape": [1,224,224,3]}}. In addition to static input shapes, CoreML converter supports Flexible input shapes:
        ///
        /// * Range Dimension. You can use the Range Dimension feature if you know the input shape will be within some specific interval in that dimension, for example: {"input_1": {"shape": ["1..10", 224, 224, 3]}}
        ///
        /// * Enumerated shapes. Sometimes, the models are trained to work only on a select set of inputs. You can enumerate all supported input shapes, for example: {"input_1": {"shape": [[1, 224, 224, 3], [1, 160, 160, 3]]}}
        ///
        ///
        ///
        ///
        /// * default_shape: Default input shape. You can set a default shape during conversion for both Range Dimension and Enumerated Shapes. For example {"input_1": {"shape": ["1..10", 224, 224, 3], "default_shape": [1, 224, 224, 3]}}
        ///
        /// * type: Input type. Allowed values: Image and Tensor. By default, the converter generates an ML Model with inputs of type Tensor (MultiArray). User can set input type to be Image. Image input type requires additional input parameters such as bias and scale.
        ///
        /// * bias: If the input type is an Image, you need to provide the bias vector.
        ///
        /// * scale: If the input type is an Image, you need to provide a scale factor.
        ///
        ///
        /// CoreML ClassifierConfig parameters can be specified using [OutputConfig$CompilerOptions]. CoreML converter supports Tensorflow and PyTorch models. CoreML conversion examples:
        ///
        /// * Tensor type input:
        ///
        /// * "DataInputConfig": {"input_1": {"shape": [[1,224,224,3], [1,160,160,3]], "default_shape": [1,224,224,3]}}
        ///
        ///
        ///
        ///
        /// * Tensor type input without input name (PyTorch):
        ///
        /// * "DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]], "default_shape": [1,3,224,224]}]
        ///
        ///
        ///
        ///
        /// * Image type input:
        ///
        /// * "DataInputConfig": {"input_1": {"shape": [[1,224,224,3], [1,160,160,3]], "default_shape": [1,224,224,3], "type": "Image", "bias": [-1,-1,-1], "scale": 0.007843137255}}
        ///
        /// * "CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}
        ///
        ///
        ///
        ///
        /// * Image type input without input name (PyTorch):
        ///
        /// * "DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]], "default_shape": [1,3,224,224], "type": "Image", "bias": [-1,-1,-1], "scale": 0.007843137255}]
        ///
        /// * "CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}
        ///
        ///
        ///
        ///
        ///
        /// Depending on the model format, DataInputConfig requires the following parameters for ml_eia2[OutputConfig:TargetDevice](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-TargetDevice).
        ///
        /// * For TensorFlow models saved in the SavedModel format, specify the input names from signature_def_key and the input model shapes for DataInputConfig. Specify the signature_def_key in [OutputConfig:CompilerOptions](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions) if the model does not use TensorFlow's default signature def key. For example:
        ///
        /// * "DataInputConfig": {"inputs": [1, 224, 224, 3]}
        ///
        /// * "CompilerOptions": {"signature_def_key": "serving_custom"}
        ///
        ///
        ///
        ///
        /// * For TensorFlow models saved as a frozen graph, specify the input tensor names and shapes in DataInputConfig and the output tensor names for output_names in [OutputConfig:CompilerOptions](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions). For example:
        ///
        /// * "DataInputConfig": {"input_tensor:0": [1, 224, 224, 3]}
        ///
        /// * "CompilerOptions": {"output_names": ["output_tensor:0"]}
        /// This member is required.
        public var dataInputConfig: Swift.String?
        /// Identifies the framework in which the model was trained. For example: TENSORFLOW.
        /// This member is required.
        public var framework: SageMakerClientTypes.Framework?
        /// Specifies the framework version to use. This API field is only supported for PyTorch framework versions 1.4, 1.5, and 1.6 for cloud instance target devices: ml_c4, ml_c5, ml_m4, ml_m5, ml_p2, ml_p3, and ml_g4dn.
        public var frameworkVersion: Swift.String?
        /// The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            dataInputConfig: Swift.String? = nil,
            framework: SageMakerClientTypes.Framework? = nil,
            frameworkVersion: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.dataInputConfig = dataInputConfig
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    public enum InputMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case file
        case pipe
        case sdkUnknown(Swift.String)

        public static var allCases: [InputMode] {
            return [
                .file,
                .pipe,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .file: return "File"
            case .pipe: return "Pipe"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputMode(rawValue: rawValue) ?? InputMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum InstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Xlarge
        case mlC5d18xlarge
        case mlC5d2xlarge
        case mlC5d4xlarge
        case mlC5d9xlarge
        case mlC5dXlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Xlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM5d12xlarge
        case mlM5d16xlarge
        case mlM5d24xlarge
        case mlM5d2xlarge
        case mlM5d4xlarge
        case mlM5d8xlarge
        case mlM5dLarge
        case mlM5dXlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Xlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP3dn24xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlR512xlarge
        case mlR516xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR58xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlT22xlarge
        case mlT2Large
        case mlT2Medium
        case mlT2Xlarge
        case mlT32xlarge
        case mlT3Large
        case mlT3Medium
        case mlT3Xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Xlarge,
                .mlC5d18xlarge,
                .mlC5d2xlarge,
                .mlC5d4xlarge,
                .mlC5d9xlarge,
                .mlC5dXlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Xlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM5d12xlarge,
                .mlM5d16xlarge,
                .mlM5d24xlarge,
                .mlM5d2xlarge,
                .mlM5d4xlarge,
                .mlM5d8xlarge,
                .mlM5dLarge,
                .mlM5dXlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Xlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP3dn24xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlR512xlarge,
                .mlR516xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR58xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlT22xlarge,
                .mlT2Large,
                .mlT2Medium,
                .mlT2Xlarge,
                .mlT32xlarge,
                .mlT3Large,
                .mlT3Medium,
                .mlT3Xlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC5d18xlarge: return "ml.c5d.18xlarge"
            case .mlC5d2xlarge: return "ml.c5d.2xlarge"
            case .mlC5d4xlarge: return "ml.c5d.4xlarge"
            case .mlC5d9xlarge: return "ml.c5d.9xlarge"
            case .mlC5dXlarge: return "ml.c5d.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM5d12xlarge: return "ml.m5d.12xlarge"
            case .mlM5d16xlarge: return "ml.m5d.16xlarge"
            case .mlM5d24xlarge: return "ml.m5d.24xlarge"
            case .mlM5d2xlarge: return "ml.m5d.2xlarge"
            case .mlM5d4xlarge: return "ml.m5d.4xlarge"
            case .mlM5d8xlarge: return "ml.m5d.8xlarge"
            case .mlM5dLarge: return "ml.m5d.large"
            case .mlM5dXlarge: return "ml.m5d.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP3dn24xlarge: return "ml.p3dn.24xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR516xlarge: return "ml.r5.16xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR58xlarge: return "ml.r5.8xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlT22xlarge: return "ml.t2.2xlarge"
            case .mlT2Large: return "ml.t2.large"
            case .mlT2Medium: return "ml.t2.medium"
            case .mlT2Xlarge: return "ml.t2.xlarge"
            case .mlT32xlarge: return "ml.t3.2xlarge"
            case .mlT3Large: return "ml.t3.large"
            case .mlT3Medium: return "ml.t3.medium"
            case .mlT3Xlarge: return "ml.t3.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceType(rawValue: rawValue) ?? InstanceType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.IntegerParameterRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxValue = "MaxValue"
        case minValue = "MinValue"
        case name = "Name"
        case scalingType = "ScalingType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxValue = maxValue {
            try encodeContainer.encode(maxValue, forKey: .maxValue)
        }
        if let minValue = minValue {
            try encodeContainer.encode(minValue, forKey: .minValue)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scalingType = scalingType {
            try encodeContainer.encode(scalingType.rawValue, forKey: .scalingType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let minValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minValue)
        minValue = minValueDecoded
        let maxValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxValue)
        maxValue = maxValueDecoded
        let scalingTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterScalingType.self, forKey: .scalingType)
        scalingType = scalingTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// For a hyperparameter of the integer type, specifies the range that a hyperparameter tuning job searches.
    public struct IntegerParameterRange: Swift.Equatable {
        /// The maximum value of the hyperparameter to search.
        /// This member is required.
        public var maxValue: Swift.String?
        /// The minimum value of the hyperparameter to search.
        /// This member is required.
        public var minValue: Swift.String?
        /// The name of the hyperparameter to search.
        /// This member is required.
        public var name: Swift.String?
        /// The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see [Hyperparameter Scaling](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type). One of the following values: Auto Amazon SageMaker hyperparameter tuning chooses the best scale for the hyperparameter. Linear Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale. Logarithmic Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale. Logarithmic scaling works only for ranges that have only values greater than 0.
        public var scalingType: SageMakerClientTypes.HyperParameterScalingType?

        public init (
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil,
            name: Swift.String? = nil,
            scalingType: SageMakerClientTypes.HyperParameterScalingType? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
            self.name = name
            self.scalingType = scalingType
        }
    }

}

extension SageMakerClientTypes.IntegerParameterRangeSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxValue = "MaxValue"
        case minValue = "MinValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxValue = maxValue {
            try encodeContainer.encode(maxValue, forKey: .maxValue)
        }
        if let minValue = minValue {
            try encodeContainer.encode(minValue, forKey: .minValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minValue)
        minValue = minValueDecoded
        let maxValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxValue)
        maxValue = maxValueDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the possible values for an integer hyperparameter.
    public struct IntegerParameterRangeSpecification: Swift.Equatable {
        /// The maximum integer value allowed.
        /// This member is required.
        public var maxValue: Swift.String?
        /// The minimum integer value allowed.
        /// This member is required.
        public var minValue: Swift.String?

        public init (
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
        }
    }

}

extension SageMakerClientTypes {
    public enum JoinSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case input
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [JoinSource] {
            return [
                .input,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .input: return "Input"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JoinSource(rawValue: rawValue) ?? JoinSource.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.JupyterServerAppSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultResourceSpec = "DefaultResourceSpec"
        case lifecycleConfigArns = "LifecycleConfigArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultResourceSpec = defaultResourceSpec {
            try encodeContainer.encode(defaultResourceSpec, forKey: .defaultResourceSpec)
        }
        if let lifecycleConfigArns = lifecycleConfigArns {
            var lifecycleConfigArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleConfigArns)
            for lifecycleconfigarns0 in lifecycleConfigArns {
                try lifecycleConfigArnsContainer.encode(lifecycleconfigarns0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultResourceSpecDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceSpec.self, forKey: .defaultResourceSpec)
        defaultResourceSpec = defaultResourceSpecDecoded
        let lifecycleConfigArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .lifecycleConfigArns)
        var lifecycleConfigArnsDecoded0:[Swift.String]? = nil
        if let lifecycleConfigArnsContainer = lifecycleConfigArnsContainer {
            lifecycleConfigArnsDecoded0 = [Swift.String]()
            for string0 in lifecycleConfigArnsContainer {
                if let string0 = string0 {
                    lifecycleConfigArnsDecoded0?.append(string0)
                }
            }
        }
        lifecycleConfigArns = lifecycleConfigArnsDecoded0
    }
}

extension SageMakerClientTypes {
    /// The JupyterServer app settings.
    public struct JupyterServerAppSettings: Swift.Equatable {
        /// The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the JupyterServerApp.
        public var lifecycleConfigArns: [Swift.String]?

        public init (
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            lifecycleConfigArns: [Swift.String]? = nil
        )
        {
            self.defaultResourceSpec = defaultResourceSpec
            self.lifecycleConfigArns = lifecycleConfigArns
        }
    }

}

extension SageMakerClientTypes.KernelGatewayAppSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customImages = "CustomImages"
        case defaultResourceSpec = "DefaultResourceSpec"
        case lifecycleConfigArns = "LifecycleConfigArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customImages = customImages {
            var customImagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customImages)
            for customimages0 in customImages {
                try customImagesContainer.encode(customimages0)
            }
        }
        if let defaultResourceSpec = defaultResourceSpec {
            try encodeContainer.encode(defaultResourceSpec, forKey: .defaultResourceSpec)
        }
        if let lifecycleConfigArns = lifecycleConfigArns {
            var lifecycleConfigArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleConfigArns)
            for lifecycleconfigarns0 in lifecycleConfigArns {
                try lifecycleConfigArnsContainer.encode(lifecycleconfigarns0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultResourceSpecDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceSpec.self, forKey: .defaultResourceSpec)
        defaultResourceSpec = defaultResourceSpecDecoded
        let customImagesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.CustomImage?].self, forKey: .customImages)
        var customImagesDecoded0:[SageMakerClientTypes.CustomImage]? = nil
        if let customImagesContainer = customImagesContainer {
            customImagesDecoded0 = [SageMakerClientTypes.CustomImage]()
            for structure0 in customImagesContainer {
                if let structure0 = structure0 {
                    customImagesDecoded0?.append(structure0)
                }
            }
        }
        customImages = customImagesDecoded0
        let lifecycleConfigArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .lifecycleConfigArns)
        var lifecycleConfigArnsDecoded0:[Swift.String]? = nil
        if let lifecycleConfigArnsContainer = lifecycleConfigArnsContainer {
            lifecycleConfigArnsDecoded0 = [Swift.String]()
            for string0 in lifecycleConfigArnsContainer {
                if let string0 = string0 {
                    lifecycleConfigArnsDecoded0?.append(string0)
                }
            }
        }
        lifecycleConfigArns = lifecycleConfigArnsDecoded0
    }
}

extension SageMakerClientTypes {
    /// The KernelGateway app settings.
    public struct KernelGatewayAppSettings: Swift.Equatable {
        /// A list of custom SageMaker images that are configured to run as a KernelGateway app.
        public var customImages: [SageMakerClientTypes.CustomImage]?
        /// The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the the user profile or domain.
        public var lifecycleConfigArns: [Swift.String]?

        public init (
            customImages: [SageMakerClientTypes.CustomImage]? = nil,
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            lifecycleConfigArns: [Swift.String]? = nil
        )
        {
            self.customImages = customImages
            self.defaultResourceSpec = defaultResourceSpec
            self.lifecycleConfigArns = lifecycleConfigArns
        }
    }

}

extension SageMakerClientTypes.KernelGatewayImageConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileSystemConfig = "FileSystemConfig"
        case kernelSpecs = "KernelSpecs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileSystemConfig = fileSystemConfig {
            try encodeContainer.encode(fileSystemConfig, forKey: .fileSystemConfig)
        }
        if let kernelSpecs = kernelSpecs {
            var kernelSpecsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .kernelSpecs)
            for kernelspecs0 in kernelSpecs {
                try kernelSpecsContainer.encode(kernelspecs0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kernelSpecsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.KernelSpec?].self, forKey: .kernelSpecs)
        var kernelSpecsDecoded0:[SageMakerClientTypes.KernelSpec]? = nil
        if let kernelSpecsContainer = kernelSpecsContainer {
            kernelSpecsDecoded0 = [SageMakerClientTypes.KernelSpec]()
            for structure0 in kernelSpecsContainer {
                if let structure0 = structure0 {
                    kernelSpecsDecoded0?.append(structure0)
                }
            }
        }
        kernelSpecs = kernelSpecsDecoded0
        let fileSystemConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FileSystemConfig.self, forKey: .fileSystemConfig)
        fileSystemConfig = fileSystemConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
    public struct KernelGatewayImageConfig: Swift.Equatable {
        /// The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
        public var fileSystemConfig: SageMakerClientTypes.FileSystemConfig?
        /// The specification of the Jupyter kernels in the image.
        /// This member is required.
        public var kernelSpecs: [SageMakerClientTypes.KernelSpec]?

        public init (
            fileSystemConfig: SageMakerClientTypes.FileSystemConfig? = nil,
            kernelSpecs: [SageMakerClientTypes.KernelSpec]? = nil
        )
        {
            self.fileSystemConfig = fileSystemConfig
            self.kernelSpecs = kernelSpecs
        }
    }

}

extension SageMakerClientTypes.KernelSpec: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
    }
}

extension SageMakerClientTypes {
    /// The specification of a Jupyter kernel.
    public struct KernelSpec: Swift.Equatable {
        /// The display name of the kernel.
        public var displayName: Swift.String?
        /// The name of the Jupyter kernel in the image. This value is case sensitive.
        /// This member is required.
        public var name: Swift.String?

        public init (
            displayName: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.name = name
        }
    }

}

extension SageMakerClientTypes.LabelCounters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedNonRetryableError = "FailedNonRetryableError"
        case humanLabeled = "HumanLabeled"
        case machineLabeled = "MachineLabeled"
        case totalLabeled = "TotalLabeled"
        case unlabeled = "Unlabeled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if failedNonRetryableError != 0 {
            try encodeContainer.encode(failedNonRetryableError, forKey: .failedNonRetryableError)
        }
        if humanLabeled != 0 {
            try encodeContainer.encode(humanLabeled, forKey: .humanLabeled)
        }
        if machineLabeled != 0 {
            try encodeContainer.encode(machineLabeled, forKey: .machineLabeled)
        }
        if totalLabeled != 0 {
            try encodeContainer.encode(totalLabeled, forKey: .totalLabeled)
        }
        if unlabeled != 0 {
            try encodeContainer.encode(unlabeled, forKey: .unlabeled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalLabeledDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalLabeled)
        totalLabeled = totalLabeledDecoded
        let humanLabeledDecoded = try containerValues.decode(Swift.Int.self, forKey: .humanLabeled)
        humanLabeled = humanLabeledDecoded
        let machineLabeledDecoded = try containerValues.decode(Swift.Int.self, forKey: .machineLabeled)
        machineLabeled = machineLabeledDecoded
        let failedNonRetryableErrorDecoded = try containerValues.decode(Swift.Int.self, forKey: .failedNonRetryableError)
        failedNonRetryableError = failedNonRetryableErrorDecoded
        let unlabeledDecoded = try containerValues.decode(Swift.Int.self, forKey: .unlabeled)
        unlabeled = unlabeledDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides a breakdown of the number of objects labeled.
    public struct LabelCounters: Swift.Equatable {
        /// The total number of objects that could not be labeled due to an error.
        public var failedNonRetryableError: Swift.Int
        /// The total number of objects labeled by a human worker.
        public var humanLabeled: Swift.Int
        /// The total number of objects labeled by automated data labeling.
        public var machineLabeled: Swift.Int
        /// The total number of objects labeled.
        public var totalLabeled: Swift.Int
        /// The total number of objects not yet labeled.
        public var unlabeled: Swift.Int

        public init (
            failedNonRetryableError: Swift.Int = 0,
            humanLabeled: Swift.Int = 0,
            machineLabeled: Swift.Int = 0,
            totalLabeled: Swift.Int = 0,
            unlabeled: Swift.Int = 0
        )
        {
            self.failedNonRetryableError = failedNonRetryableError
            self.humanLabeled = humanLabeled
            self.machineLabeled = machineLabeled
            self.totalLabeled = totalLabeled
            self.unlabeled = unlabeled
        }
    }

}

extension SageMakerClientTypes.LabelCountersForWorkteam: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanLabeled = "HumanLabeled"
        case pendingHuman = "PendingHuman"
        case total = "Total"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if humanLabeled != 0 {
            try encodeContainer.encode(humanLabeled, forKey: .humanLabeled)
        }
        if pendingHuman != 0 {
            try encodeContainer.encode(pendingHuman, forKey: .pendingHuman)
        }
        if total != 0 {
            try encodeContainer.encode(total, forKey: .total)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanLabeledDecoded = try containerValues.decode(Swift.Int.self, forKey: .humanLabeled)
        humanLabeled = humanLabeledDecoded
        let pendingHumanDecoded = try containerValues.decode(Swift.Int.self, forKey: .pendingHuman)
        pendingHuman = pendingHumanDecoded
        let totalDecoded = try containerValues.decode(Swift.Int.self, forKey: .total)
        total = totalDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides counts for human-labeled tasks in the labeling job.
    public struct LabelCountersForWorkteam: Swift.Equatable {
        /// The total number of data objects labeled by a human worker.
        public var humanLabeled: Swift.Int
        /// The total number of data objects that need to be labeled by a human worker.
        public var pendingHuman: Swift.Int
        /// The total number of tasks in the labeling job.
        public var total: Swift.Int

        public init (
            humanLabeled: Swift.Int = 0,
            pendingHuman: Swift.Int = 0,
            total: Swift.Int = 0
        )
        {
            self.humanLabeled = humanLabeled
            self.pendingHuman = pendingHuman
            self.total = total
        }
    }

}

extension SageMakerClientTypes.LabelingJobAlgorithmsConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initialActiveLearningModelArn = "InitialActiveLearningModelArn"
        case labelingJobAlgorithmSpecificationArn = "LabelingJobAlgorithmSpecificationArn"
        case labelingJobResourceConfig = "LabelingJobResourceConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let initialActiveLearningModelArn = initialActiveLearningModelArn {
            try encodeContainer.encode(initialActiveLearningModelArn, forKey: .initialActiveLearningModelArn)
        }
        if let labelingJobAlgorithmSpecificationArn = labelingJobAlgorithmSpecificationArn {
            try encodeContainer.encode(labelingJobAlgorithmSpecificationArn, forKey: .labelingJobAlgorithmSpecificationArn)
        }
        if let labelingJobResourceConfig = labelingJobResourceConfig {
            try encodeContainer.encode(labelingJobResourceConfig, forKey: .labelingJobResourceConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobAlgorithmSpecificationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobAlgorithmSpecificationArn)
        labelingJobAlgorithmSpecificationArn = labelingJobAlgorithmSpecificationArnDecoded
        let initialActiveLearningModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initialActiveLearningModelArn)
        initialActiveLearningModelArn = initialActiveLearningModelArnDecoded
        let labelingJobResourceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobResourceConfig.self, forKey: .labelingJobResourceConfig)
        labelingJobResourceConfig = labelingJobResourceConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides configuration information for auto-labeling of your data objects. A LabelingJobAlgorithmsConfig object must be supplied in order to use auto-labeling.
    public struct LabelingJobAlgorithmsConfig: Swift.Equatable {
        /// At the end of an auto-label job Ground Truth sends the Amazon Resource Name (ARN) of the final model used for auto-labeling. You can use this model as the starting point for subsequent similar jobs by providing the ARN of the model here.
        public var initialActiveLearningModelArn: Swift.String?
        /// Specifies the Amazon Resource Name (ARN) of the algorithm used for auto-labeling. You must select one of the following ARNs:
        ///
        /// * Image classification arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/image-classification
        ///
        /// * Text classification arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/text-classification
        ///
        /// * Object detection arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/object-detection
        ///
        /// * Semantic Segmentation arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/semantic-segmentation
        /// This member is required.
        public var labelingJobAlgorithmSpecificationArn: Swift.String?
        /// Provides configuration information for a labeling job.
        public var labelingJobResourceConfig: SageMakerClientTypes.LabelingJobResourceConfig?

        public init (
            initialActiveLearningModelArn: Swift.String? = nil,
            labelingJobAlgorithmSpecificationArn: Swift.String? = nil,
            labelingJobResourceConfig: SageMakerClientTypes.LabelingJobResourceConfig? = nil
        )
        {
            self.initialActiveLearningModelArn = initialActiveLearningModelArn
            self.labelingJobAlgorithmSpecificationArn = labelingJobAlgorithmSpecificationArn
            self.labelingJobResourceConfig = labelingJobResourceConfig
        }
    }

}

extension SageMakerClientTypes.LabelingJobDataAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentClassifiers = "ContentClassifiers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentClassifiers = contentClassifiers {
            var contentClassifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contentClassifiers)
            for contentclassifiers0 in contentClassifiers {
                try contentClassifiersContainer.encode(contentclassifiers0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentClassifiersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ContentClassifier?].self, forKey: .contentClassifiers)
        var contentClassifiersDecoded0:[SageMakerClientTypes.ContentClassifier]? = nil
        if let contentClassifiersContainer = contentClassifiersContainer {
            contentClassifiersDecoded0 = [SageMakerClientTypes.ContentClassifier]()
            for string0 in contentClassifiersContainer {
                if let string0 = string0 {
                    contentClassifiersDecoded0?.append(string0)
                }
            }
        }
        contentClassifiers = contentClassifiersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Attributes of the data specified by the customer. Use these to describe the data to be labeled.
    public struct LabelingJobDataAttributes: Swift.Equatable {
        /// Declares that your content is free of personally identifiable information or adult content. Amazon SageMaker may restrict the Amazon Mechanical Turk workers that can view your task based on this information.
        public var contentClassifiers: [SageMakerClientTypes.ContentClassifier]?

        public init (
            contentClassifiers: [SageMakerClientTypes.ContentClassifier]? = nil
        )
        {
            self.contentClassifiers = contentClassifiers
        }
    }

}

extension SageMakerClientTypes.LabelingJobDataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3DataSource = "S3DataSource"
        case snsDataSource = "SnsDataSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3DataSource = s3DataSource {
            try encodeContainer.encode(s3DataSource, forKey: .s3DataSource)
        }
        if let snsDataSource = snsDataSource {
            try encodeContainer.encode(snsDataSource, forKey: .snsDataSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3DataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobS3DataSource.self, forKey: .s3DataSource)
        s3DataSource = s3DataSourceDecoded
        let snsDataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobSnsDataSource.self, forKey: .snsDataSource)
        snsDataSource = snsDataSourceDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides information about the location of input data. You must specify at least one of the following: S3DataSource or SnsDataSource. Use SnsDataSource to specify an SNS input topic for a streaming labeling job. If you do not specify and SNS input topic ARN, Ground Truth will create a one-time labeling job. Use S3DataSource to specify an input manifest file for both streaming and one-time labeling jobs. Adding an S3DataSource is optional if you use SnsDataSource to create a streaming labeling job.
    public struct LabelingJobDataSource: Swift.Equatable {
        /// The Amazon S3 location of the input data objects.
        public var s3DataSource: SageMakerClientTypes.LabelingJobS3DataSource?
        /// An Amazon SNS data source used for streaming labeling jobs. To learn more, see [Send Data to a Streaming Labeling Job](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-send-data).
        public var snsDataSource: SageMakerClientTypes.LabelingJobSnsDataSource?

        public init (
            s3DataSource: SageMakerClientTypes.LabelingJobS3DataSource? = nil,
            snsDataSource: SageMakerClientTypes.LabelingJobSnsDataSource? = nil
        )
        {
            self.s3DataSource = s3DataSource
            self.snsDataSource = snsDataSource
        }
    }

}

extension SageMakerClientTypes.LabelingJobForWorkteamSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case jobReferenceCode = "JobReferenceCode"
        case labelCounters = "LabelCounters"
        case labelingJobName = "LabelingJobName"
        case numberOfHumanWorkersPerDataObject = "NumberOfHumanWorkersPerDataObject"
        case workRequesterAccountId = "WorkRequesterAccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let jobReferenceCode = jobReferenceCode {
            try encodeContainer.encode(jobReferenceCode, forKey: .jobReferenceCode)
        }
        if let labelCounters = labelCounters {
            try encodeContainer.encode(labelCounters, forKey: .labelCounters)
        }
        if let labelingJobName = labelingJobName {
            try encodeContainer.encode(labelingJobName, forKey: .labelingJobName)
        }
        if let numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject {
            try encodeContainer.encode(numberOfHumanWorkersPerDataObject, forKey: .numberOfHumanWorkersPerDataObject)
        }
        if let workRequesterAccountId = workRequesterAccountId {
            try encodeContainer.encode(workRequesterAccountId, forKey: .workRequesterAccountId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobName)
        labelingJobName = labelingJobNameDecoded
        let jobReferenceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobReferenceCode)
        jobReferenceCode = jobReferenceCodeDecoded
        let workRequesterAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workRequesterAccountId)
        workRequesterAccountId = workRequesterAccountIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let labelCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelCountersForWorkteam.self, forKey: .labelCounters)
        labelCounters = labelCountersDecoded
        let numberOfHumanWorkersPerDataObjectDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfHumanWorkersPerDataObject)
        numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObjectDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information for a work team.
    public struct LabelingJobForWorkteamSummary: Swift.Equatable {
        /// The date and time that the labeling job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// A unique identifier for a labeling job. You can use this to refer to a specific labeling job.
        /// This member is required.
        public var jobReferenceCode: Swift.String?
        /// Provides information about the progress of a labeling job.
        public var labelCounters: SageMakerClientTypes.LabelCountersForWorkteam?
        /// The name of the labeling job that the work team is assigned to.
        public var labelingJobName: Swift.String?
        /// The configured number of workers per data object.
        public var numberOfHumanWorkersPerDataObject: Swift.Int?
        /// The Amazon Web Services account ID of the account used to start the labeling job.
        /// This member is required.
        public var workRequesterAccountId: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            jobReferenceCode: Swift.String? = nil,
            labelCounters: SageMakerClientTypes.LabelCountersForWorkteam? = nil,
            labelingJobName: Swift.String? = nil,
            numberOfHumanWorkersPerDataObject: Swift.Int? = nil,
            workRequesterAccountId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.jobReferenceCode = jobReferenceCode
            self.labelCounters = labelCounters
            self.labelingJobName = labelingJobName
            self.numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject
            self.workRequesterAccountId = workRequesterAccountId
        }
    }

}

extension SageMakerClientTypes.LabelingJobInputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAttributes = "DataAttributes"
        case dataSource = "DataSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAttributes = dataAttributes {
            try encodeContainer.encode(dataAttributes, forKey: .dataAttributes)
        }
        if let dataSource = dataSource {
            try encodeContainer.encode(dataSource, forKey: .dataSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobDataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let dataAttributesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobDataAttributes.self, forKey: .dataAttributes)
        dataAttributes = dataAttributesDecoded
    }
}

extension SageMakerClientTypes {
    /// Input configuration information for a labeling job.
    public struct LabelingJobInputConfig: Swift.Equatable {
        /// Attributes of the data specified by the customer.
        public var dataAttributes: SageMakerClientTypes.LabelingJobDataAttributes?
        /// The location of the input data.
        /// This member is required.
        public var dataSource: SageMakerClientTypes.LabelingJobDataSource?

        public init (
            dataAttributes: SageMakerClientTypes.LabelingJobDataAttributes? = nil,
            dataSource: SageMakerClientTypes.LabelingJobDataSource? = nil
        )
        {
            self.dataAttributes = dataAttributes
            self.dataSource = dataSource
        }
    }

}

extension SageMakerClientTypes.LabelingJobOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalActiveLearningModelArn = "FinalActiveLearningModelArn"
        case outputDatasetS3Uri = "OutputDatasetS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalActiveLearningModelArn = finalActiveLearningModelArn {
            try encodeContainer.encode(finalActiveLearningModelArn, forKey: .finalActiveLearningModelArn)
        }
        if let outputDatasetS3Uri = outputDatasetS3Uri {
            try encodeContainer.encode(outputDatasetS3Uri, forKey: .outputDatasetS3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputDatasetS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputDatasetS3Uri)
        outputDatasetS3Uri = outputDatasetS3UriDecoded
        let finalActiveLearningModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalActiveLearningModelArn)
        finalActiveLearningModelArn = finalActiveLearningModelArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the location of the output produced by the labeling job.
    public struct LabelingJobOutput: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the most recent Amazon SageMaker model trained as part of automated data labeling.
        public var finalActiveLearningModelArn: Swift.String?
        /// The Amazon S3 bucket location of the manifest file for labeled data.
        /// This member is required.
        public var outputDatasetS3Uri: Swift.String?

        public init (
            finalActiveLearningModelArn: Swift.String? = nil,
            outputDatasetS3Uri: Swift.String? = nil
        )
        {
            self.finalActiveLearningModelArn = finalActiveLearningModelArn
            self.outputDatasetS3Uri = outputDatasetS3Uri
        }
    }

}

extension SageMakerClientTypes.LabelingJobOutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3OutputPath = "S3OutputPath"
        case snsTopicArn = "SnsTopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
        if let snsTopicArn = snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Output configuration information for a labeling job.
    public struct LabelingJobOutputConfig: Swift.Equatable {
        /// The Amazon Web Services Key Management Service ID of the key used to encrypt the output data, if any. If you provide your own KMS key ID, you must add the required permissions to your KMS key described in [Encrypt Output Data and Storage Volume with Amazon Web Services KMS](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security-permission.html#sms-security-kms-permissions). If you don't provide a KMS key ID, Amazon SageMaker uses the default Amazon Web Services KMS key for Amazon S3 for your role's account to encrypt your output data. If you use a bucket policy with an s3:PutObject permission that only allows objects with server-side encryption, set the condition key of s3:x-amz-server-side-encryption to "aws:kms". For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 location to write output data.
        /// This member is required.
        public var s3OutputPath: Swift.String?
        /// An Amazon Simple Notification Service (Amazon SNS) output topic ARN. Provide a SnsTopicArn if you want to do real time chaining to another streaming job and receive an Amazon SNS notifications each time a data object is submitted by a worker. If you provide an SnsTopicArn in OutputConfig, when workers complete labeling tasks, Ground Truth will send labeling task output data to the SNS output topic you specify here. To learn more, see [Receive Output Data from a Streaming Labeling Job](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-output-data).
        public var snsTopicArn: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
            self.snsTopicArn = snsTopicArn
        }
    }

}

extension SageMakerClientTypes.LabelingJobResourceConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case volumeKmsKeyId = "VolumeKmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let volumeKmsKeyId = volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Configure encryption on the storage volume attached to the ML compute instance used to run automated data labeling model training and inference.
    public struct LabelingJobResourceConfig: Swift.Equatable {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the training and inference jobs used for automated data labeling. You can only specify a VolumeKmsKeyId when you create a labeling job with automated data labeling enabled using the API operation CreateLabelingJob. You cannot specify an Amazon Web Services KMS key to encrypt the storage volume used for automated data labeling model training and inference when you create a labeling job using the console. To learn more, see [Output Data and Storage Volume Encryption](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security.html). The VolumeKmsKeyId can be any of the following formats:
        ///
        /// * KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?

        public init (
            volumeKmsKeyId: Swift.String? = nil
        )
        {
            self.volumeKmsKeyId = volumeKmsKeyId
        }
    }

}

extension SageMakerClientTypes.LabelingJobS3DataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case manifestS3Uri = "ManifestS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let manifestS3Uri = manifestS3Uri {
            try encodeContainer.encode(manifestS3Uri, forKey: .manifestS3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let manifestS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .manifestS3Uri)
        manifestS3Uri = manifestS3UriDecoded
    }
}

extension SageMakerClientTypes {
    /// The Amazon S3 location of the input data objects.
    public struct LabelingJobS3DataSource: Swift.Equatable {
        /// The Amazon S3 location of the manifest file that describes the input data objects. The input manifest file referenced in ManifestS3Uri must contain one of the following keys: source-ref or source. The value of the keys are interpreted as follows:
        ///
        /// * source-ref: The source of the object is the Amazon S3 object specified in the value. Use this value when the object is a binary object, such as an image.
        ///
        /// * source: The source of the object is the value. Use this value when the object is a text value.
        ///
        ///
        /// If you are a new user of Ground Truth, it is recommended you review [Use an Input Manifest File ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-input-data-input-manifest.html) in the Amazon SageMaker Developer Guide to learn how to create an input manifest file.
        /// This member is required.
        public var manifestS3Uri: Swift.String?

        public init (
            manifestS3Uri: Swift.String? = nil
        )
        {
            self.manifestS3Uri = manifestS3Uri
        }
    }

}

extension SageMakerClientTypes.LabelingJobSnsDataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snsTopicArn = "SnsTopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let snsTopicArn = snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
    }
}

extension SageMakerClientTypes {
    /// An Amazon SNS data source used for streaming labeling jobs.
    public struct LabelingJobSnsDataSource: Swift.Equatable {
        /// The Amazon SNS input topic Amazon Resource Name (ARN). Specify the ARN of the input topic you will use to send new data objects to a streaming labeling job.
        /// This member is required.
        public var snsTopicArn: Swift.String?

        public init (
            snsTopicArn: Swift.String? = nil
        )
        {
            self.snsTopicArn = snsTopicArn
        }
    }

}

extension SageMakerClientTypes {
    public enum LabelingJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case initializing
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelingJobStatus] {
            return [
                .completed,
                .failed,
                .initializing,
                .inProgress,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .initializing: return "Initializing"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LabelingJobStatus(rawValue: rawValue) ?? LabelingJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.LabelingJobStoppingConditions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxHumanLabeledObjectCount = "MaxHumanLabeledObjectCount"
        case maxPercentageOfInputDatasetLabeled = "MaxPercentageOfInputDatasetLabeled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxHumanLabeledObjectCount = maxHumanLabeledObjectCount {
            try encodeContainer.encode(maxHumanLabeledObjectCount, forKey: .maxHumanLabeledObjectCount)
        }
        if let maxPercentageOfInputDatasetLabeled = maxPercentageOfInputDatasetLabeled {
            try encodeContainer.encode(maxPercentageOfInputDatasetLabeled, forKey: .maxPercentageOfInputDatasetLabeled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxHumanLabeledObjectCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxHumanLabeledObjectCount)
        maxHumanLabeledObjectCount = maxHumanLabeledObjectCountDecoded
        let maxPercentageOfInputDatasetLabeledDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPercentageOfInputDatasetLabeled)
        maxPercentageOfInputDatasetLabeled = maxPercentageOfInputDatasetLabeledDecoded
    }
}

extension SageMakerClientTypes {
    /// A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling. Labeling jobs fail after 30 days with an appropriate client error message.
    public struct LabelingJobStoppingConditions: Swift.Equatable {
        /// The maximum number of objects that can be labeled by human workers.
        public var maxHumanLabeledObjectCount: Swift.Int?
        /// The maximum number of input data objects that should be labeled.
        public var maxPercentageOfInputDatasetLabeled: Swift.Int?

        public init (
            maxHumanLabeledObjectCount: Swift.Int? = nil,
            maxPercentageOfInputDatasetLabeled: Swift.Int? = nil
        )
        {
            self.maxHumanLabeledObjectCount = maxHumanLabeledObjectCount
            self.maxPercentageOfInputDatasetLabeled = maxPercentageOfInputDatasetLabeled
        }
    }

}

extension SageMakerClientTypes.LabelingJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotationConsolidationLambdaArn = "AnnotationConsolidationLambdaArn"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case inputConfig = "InputConfig"
        case labelCounters = "LabelCounters"
        case labelingJobArn = "LabelingJobArn"
        case labelingJobName = "LabelingJobName"
        case labelingJobOutput = "LabelingJobOutput"
        case labelingJobStatus = "LabelingJobStatus"
        case lastModifiedTime = "LastModifiedTime"
        case preHumanTaskLambdaArn = "PreHumanTaskLambdaArn"
        case workteamArn = "WorkteamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotationConsolidationLambdaArn = annotationConsolidationLambdaArn {
            try encodeContainer.encode(annotationConsolidationLambdaArn, forKey: .annotationConsolidationLambdaArn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let inputConfig = inputConfig {
            try encodeContainer.encode(inputConfig, forKey: .inputConfig)
        }
        if let labelCounters = labelCounters {
            try encodeContainer.encode(labelCounters, forKey: .labelCounters)
        }
        if let labelingJobArn = labelingJobArn {
            try encodeContainer.encode(labelingJobArn, forKey: .labelingJobArn)
        }
        if let labelingJobName = labelingJobName {
            try encodeContainer.encode(labelingJobName, forKey: .labelingJobName)
        }
        if let labelingJobOutput = labelingJobOutput {
            try encodeContainer.encode(labelingJobOutput, forKey: .labelingJobOutput)
        }
        if let labelingJobStatus = labelingJobStatus {
            try encodeContainer.encode(labelingJobStatus.rawValue, forKey: .labelingJobStatus)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let preHumanTaskLambdaArn = preHumanTaskLambdaArn {
            try encodeContainer.encode(preHumanTaskLambdaArn, forKey: .preHumanTaskLambdaArn)
        }
        if let workteamArn = workteamArn {
            try encodeContainer.encode(workteamArn, forKey: .workteamArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobName)
        labelingJobName = labelingJobNameDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let labelingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobStatus.self, forKey: .labelingJobStatus)
        labelingJobStatus = labelingJobStatusDecoded
        let labelCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelCounters.self, forKey: .labelCounters)
        labelCounters = labelCountersDecoded
        let workteamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
        let preHumanTaskLambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preHumanTaskLambdaArn)
        preHumanTaskLambdaArn = preHumanTaskLambdaArnDecoded
        let annotationConsolidationLambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotationConsolidationLambdaArn)
        annotationConsolidationLambdaArn = annotationConsolidationLambdaArnDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let labelingJobOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobOutput.self, forKey: .labelingJobOutput)
        labelingJobOutput = labelingJobOutputDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobInputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about a labeling job.
    public struct LabelingJobSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Lambda function used to consolidate the annotations from individual workers into a label for a data object. For more information, see [Annotation Consolidation](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html).
        public var annotationConsolidationLambdaArn: Swift.String?
        /// The date and time that the job was created (timestamp).
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// If the LabelingJobStatus field is Failed, this field contains a description of the error.
        public var failureReason: Swift.String?
        /// Input configuration for the labeling job.
        public var inputConfig: SageMakerClientTypes.LabelingJobInputConfig?
        /// Counts showing the progress of the labeling job.
        /// This member is required.
        public var labelCounters: SageMakerClientTypes.LabelCounters?
        /// The Amazon Resource Name (ARN) assigned to the labeling job when it was created.
        /// This member is required.
        public var labelingJobArn: Swift.String?
        /// The name of the labeling job.
        /// This member is required.
        public var labelingJobName: Swift.String?
        /// The location of the output produced by the labeling job.
        public var labelingJobOutput: SageMakerClientTypes.LabelingJobOutput?
        /// The current status of the labeling job.
        /// This member is required.
        public var labelingJobStatus: SageMakerClientTypes.LabelingJobStatus?
        /// The date and time that the job was last modified (timestamp).
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of a Lambda function. The function is run before each data object is sent to a worker.
        /// This member is required.
        public var preHumanTaskLambdaArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the work team assigned to the job.
        /// This member is required.
        public var workteamArn: Swift.String?

        public init (
            annotationConsolidationLambdaArn: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            inputConfig: SageMakerClientTypes.LabelingJobInputConfig? = nil,
            labelCounters: SageMakerClientTypes.LabelCounters? = nil,
            labelingJobArn: Swift.String? = nil,
            labelingJobName: Swift.String? = nil,
            labelingJobOutput: SageMakerClientTypes.LabelingJobOutput? = nil,
            labelingJobStatus: SageMakerClientTypes.LabelingJobStatus? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            preHumanTaskLambdaArn: Swift.String? = nil,
            workteamArn: Swift.String? = nil
        )
        {
            self.annotationConsolidationLambdaArn = annotationConsolidationLambdaArn
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.inputConfig = inputConfig
            self.labelCounters = labelCounters
            self.labelingJobArn = labelingJobArn
            self.labelingJobName = labelingJobName
            self.labelingJobOutput = labelingJobOutput
            self.labelingJobStatus = labelingJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.preHumanTaskLambdaArn = preHumanTaskLambdaArn
            self.workteamArn = workteamArn
        }
    }

}

extension SageMakerClientTypes.LambdaStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case outputParameters = "OutputParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let outputParameters = outputParameters {
            var outputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputParameters)
            for outputparameterlist0 in outputParameters {
                try outputParametersContainer.encode(outputparameterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let outputParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.OutputParameter?].self, forKey: .outputParameters)
        var outputParametersDecoded0:[SageMakerClientTypes.OutputParameter]? = nil
        if let outputParametersContainer = outputParametersContainer {
            outputParametersDecoded0 = [SageMakerClientTypes.OutputParameter]()
            for structure0 in outputParametersContainer {
                if let structure0 = structure0 {
                    outputParametersDecoded0?.append(structure0)
                }
            }
        }
        outputParameters = outputParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Metadata for a Lambda step.
    public struct LambdaStepMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution.
        public var arn: Swift.String?
        /// A list of the output parameters of the Lambda step.
        public var outputParameters: [SageMakerClientTypes.OutputParameter]?

        public init (
            arn: Swift.String? = nil,
            outputParameters: [SageMakerClientTypes.OutputParameter]? = nil
        )
        {
            self.arn = arn
            self.outputParameters = outputParameters
        }
    }

}

extension SageMakerClientTypes.LineageGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case lineageGroupName = "LineageGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let lineageGroupArn = lineageGroupArn {
            try encodeContainer.encode(lineageGroupArn, forKey: .lineageGroupArn)
        }
        if let lineageGroupName = lineageGroupName {
            try encodeContainer.encode(lineageGroupName, forKey: .lineageGroupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
        let lineageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupName)
        lineageGroupName = lineageGroupNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of a lineage group. A lineage group provides a group of shareable lineage entity resources.
    public struct LineageGroupSummary: Swift.Equatable {
        /// The creation time of the lineage group summary.
        public var creationTime: ClientRuntime.Date?
        /// The display name of the lineage group summary.
        public var displayName: Swift.String?
        /// The last modified time of the lineage group summary.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the lineage group resource.
        public var lineageGroupArn: Swift.String?
        /// The name or Amazon Resource Name (ARN) of the lineage group.
        public var lineageGroupName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            displayName: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            lineageGroupArn: Swift.String? = nil,
            lineageGroupName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.displayName = displayName
            self.lastModifiedTime = lastModifiedTime
            self.lineageGroupArn = lineageGroupArn
            self.lineageGroupName = lineageGroupName
        }
    }

}

extension SageMakerClientTypes {
    public enum LineageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case action
        case artifact
        case context
        case trialComponent
        case sdkUnknown(Swift.String)

        public static var allCases: [LineageType] {
            return [
                .action,
                .artifact,
                .context,
                .trialComponent,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .action: return "Action"
            case .artifact: return "Artifact"
            case .context: return "Context"
            case .trialComponent: return "TrialComponent"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LineageType(rawValue: rawValue) ?? LineageType.sdkUnknown(rawValue)
        }
    }
}

extension ListActionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType = "ActionType"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceUri = "SourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionType = actionType {
            try encodeContainer.encode(actionType, forKey: .actionType)
        }
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let sourceUri = sourceUri {
            try encodeContainer.encode(sourceUri, forKey: .sourceUri)
        }
    }
}

extension ListActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListActionsInput: Swift.Equatable {
    /// A filter that returns only actions of the specified type.
    public var actionType: Swift.String?
    /// A filter that returns only actions created on or after the specified time.
    public var createdAfter: ClientRuntime.Date?
    /// A filter that returns only actions created on or before the specified time.
    public var createdBefore: ClientRuntime.Date?
    /// The maximum number of actions to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListActions didn't return the full set of actions, the call returns a token for getting the next set of actions.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortActionsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only actions with the specified source URI.
    public var sourceUri: Swift.String?

    public init (
        actionType: Swift.String? = nil,
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortActionsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceUri: Swift.String? = nil
    )
    {
        self.actionType = actionType
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceUri = sourceUri
    }
}

struct ListActionsInputBody: Swift.Equatable {
    let sourceUri: Swift.String?
    let actionType: Swift.String?
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortActionsBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType = "ActionType"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceUri = "SourceUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUri)
        sourceUri = sourceUriDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortActionsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListActionsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionSummaries = output.actionSummaries
            self.nextToken = output.nextToken
        } else {
            self.actionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListActionsOutputResponse: Swift.Equatable {
    /// A list of actions and their properties.
    public var actionSummaries: [SageMakerClientTypes.ActionSummary]?
    /// A token for getting the next set of actions, if there are any.
    public var nextToken: Swift.String?

    public init (
        actionSummaries: [SageMakerClientTypes.ActionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionSummaries = actionSummaries
        self.nextToken = nextToken
    }
}

struct ListActionsOutputResponseBody: Swift.Equatable {
    let actionSummaries: [SageMakerClientTypes.ActionSummary]?
    let nextToken: Swift.String?
}

extension ListActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionSummaries = "ActionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ActionSummary?].self, forKey: .actionSummaries)
        var actionSummariesDecoded0:[SageMakerClientTypes.ActionSummary]? = nil
        if let actionSummariesContainer = actionSummariesContainer {
            actionSummariesDecoded0 = [SageMakerClientTypes.ActionSummary]()
            for structure0 in actionSummariesContainer {
                if let structure0 = structure0 {
                    actionSummariesDecoded0?.append(structure0)
                }
            }
        }
        actionSummaries = actionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAlgorithmsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListAlgorithmsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAlgorithmsInput: Swift.Equatable {
    /// A filter that returns only algorithms created after the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only algorithms created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// The maximum number of algorithms to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the algorithm name. This filter returns only algorithms whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListAlgorithms request was truncated, the response includes a NextToken. To retrieve the next set of algorithms, use the token in the next request.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.AlgorithmSortBy?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.AlgorithmSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListAlgorithmsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let nextToken: Swift.String?
    let sortBy: SageMakerClientTypes.AlgorithmSortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListAlgorithmsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListAlgorithmsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAlgorithmsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAlgorithmsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAlgorithmsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAlgorithmsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.algorithmSummaryList = output.algorithmSummaryList
            self.nextToken = output.nextToken
        } else {
            self.algorithmSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListAlgorithmsOutputResponse: Swift.Equatable {
    /// >An array of AlgorithmSummary objects, each of which lists an algorithm.
    /// This member is required.
    public var algorithmSummaryList: [SageMakerClientTypes.AlgorithmSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        algorithmSummaryList: [SageMakerClientTypes.AlgorithmSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.algorithmSummaryList = algorithmSummaryList
        self.nextToken = nextToken
    }
}

struct ListAlgorithmsOutputResponseBody: Swift.Equatable {
    let algorithmSummaryList: [SageMakerClientTypes.AlgorithmSummary]?
    let nextToken: Swift.String?
}

extension ListAlgorithmsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSummaryList = "AlgorithmSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmSummaryListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AlgorithmSummary?].self, forKey: .algorithmSummaryList)
        var algorithmSummaryListDecoded0:[SageMakerClientTypes.AlgorithmSummary]? = nil
        if let algorithmSummaryListContainer = algorithmSummaryListContainer {
            algorithmSummaryListDecoded0 = [SageMakerClientTypes.AlgorithmSummary]()
            for structure0 in algorithmSummaryListContainer {
                if let structure0 = structure0 {
                    algorithmSummaryListDecoded0?.append(structure0)
                }
            }
        }
        algorithmSummaryList = algorithmSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAppImageConfigsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case modifiedTimeAfter = "ModifiedTimeAfter"
        case modifiedTimeBefore = "ModifiedTimeBefore"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modifiedTimeAfter = modifiedTimeAfter {
            try encodeContainer.encode(modifiedTimeAfter.timeIntervalSince1970, forKey: .modifiedTimeAfter)
        }
        if let modifiedTimeBefore = modifiedTimeBefore {
            try encodeContainer.encode(modifiedTimeBefore.timeIntervalSince1970, forKey: .modifiedTimeBefore)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListAppImageConfigsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAppImageConfigsInput: Swift.Equatable {
    /// A filter that returns only AppImageConfigs created on or after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only AppImageConfigs created on or before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// The maximum number of AppImageConfigs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// A filter that returns only AppImageConfigs modified on or after the specified time.
    public var modifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only AppImageConfigs modified on or before the specified time.
    public var modifiedTimeBefore: ClientRuntime.Date?
    /// A filter that returns only AppImageConfigs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the previous call to ListImages didn't return the full set of AppImageConfigs, the call returns a token for getting the next set of AppImageConfigs.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.AppImageConfigSortKey?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        modifiedTimeAfter: ClientRuntime.Date? = nil,
        modifiedTimeBefore: ClientRuntime.Date? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.AppImageConfigSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.modifiedTimeAfter = modifiedTimeAfter
        self.modifiedTimeBefore = modifiedTimeBefore
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListAppImageConfigsInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
    let modifiedTimeBefore: ClientRuntime.Date?
    let modifiedTimeAfter: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.AppImageConfigSortKey?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListAppImageConfigsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case modifiedTimeAfter = "ModifiedTimeAfter"
        case modifiedTimeBefore = "ModifiedTimeBefore"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let modifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modifiedTimeBefore)
        modifiedTimeBefore = modifiedTimeBeforeDecoded
        let modifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modifiedTimeAfter)
        modifiedTimeAfter = modifiedTimeAfterDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppImageConfigSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListAppImageConfigsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAppImageConfigsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAppImageConfigsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAppImageConfigsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAppImageConfigsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appImageConfigs = output.appImageConfigs
            self.nextToken = output.nextToken
        } else {
            self.appImageConfigs = nil
            self.nextToken = nil
        }
    }
}

public struct ListAppImageConfigsOutputResponse: Swift.Equatable {
    /// A list of AppImageConfigs and their properties.
    public var appImageConfigs: [SageMakerClientTypes.AppImageConfigDetails]?
    /// A token for getting the next set of AppImageConfigs, if there are any.
    public var nextToken: Swift.String?

    public init (
        appImageConfigs: [SageMakerClientTypes.AppImageConfigDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appImageConfigs = appImageConfigs
        self.nextToken = nextToken
    }
}

struct ListAppImageConfigsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let appImageConfigs: [SageMakerClientTypes.AppImageConfigDetails]?
}

extension ListAppImageConfigsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigs = "AppImageConfigs"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let appImageConfigsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AppImageConfigDetails?].self, forKey: .appImageConfigs)
        var appImageConfigsDecoded0:[SageMakerClientTypes.AppImageConfigDetails]? = nil
        if let appImageConfigsContainer = appImageConfigsContainer {
            appImageConfigsDecoded0 = [SageMakerClientTypes.AppImageConfigDetails]()
            for structure0 in appImageConfigsContainer {
                if let structure0 = structure0 {
                    appImageConfigsDecoded0?.append(structure0)
                }
            }
        }
        appImageConfigs = appImageConfigsDecoded0
    }
}

extension ListAppsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIdEquals = "DomainIdEquals"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case userProfileNameEquals = "UserProfileNameEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainIdEquals = domainIdEquals {
            try encodeContainer.encode(domainIdEquals, forKey: .domainIdEquals)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let userProfileNameEquals = userProfileNameEquals {
            try encodeContainer.encode(userProfileNameEquals, forKey: .userProfileNameEquals)
        }
    }
}

extension ListAppsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAppsInput: Swift.Equatable {
    /// A parameter to search for the domain ID.
    public var domainIdEquals: Swift.String?
    /// Returns a list up to a specified limit.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.AppSortKey?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A parameter to search by user profile name.
    public var userProfileNameEquals: Swift.String?

    public init (
        domainIdEquals: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.AppSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        userProfileNameEquals: Swift.String? = nil
    )
    {
        self.domainIdEquals = domainIdEquals
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.userProfileNameEquals = userProfileNameEquals
    }
}

struct ListAppsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let sortBy: SageMakerClientTypes.AppSortKey?
    let domainIdEquals: Swift.String?
    let userProfileNameEquals: Swift.String?
}

extension ListAppsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIdEquals = "DomainIdEquals"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case userProfileNameEquals = "UserProfileNameEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let domainIdEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainIdEquals)
        domainIdEquals = domainIdEqualsDecoded
        let userProfileNameEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileNameEquals)
        userProfileNameEquals = userProfileNameEqualsDecoded
    }
}

extension ListAppsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAppsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAppsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAppsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAppsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.apps = output.apps
            self.nextToken = output.nextToken
        } else {
            self.apps = nil
            self.nextToken = nil
        }
    }
}

public struct ListAppsOutputResponse: Swift.Equatable {
    /// The list of apps.
    public var apps: [SageMakerClientTypes.AppDetails]?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init (
        apps: [SageMakerClientTypes.AppDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.apps = apps
        self.nextToken = nextToken
    }
}

struct ListAppsOutputResponseBody: Swift.Equatable {
    let apps: [SageMakerClientTypes.AppDetails]?
    let nextToken: Swift.String?
}

extension ListAppsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apps = "Apps"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AppDetails?].self, forKey: .apps)
        var appsDecoded0:[SageMakerClientTypes.AppDetails]? = nil
        if let appsContainer = appsContainer {
            appsDecoded0 = [SageMakerClientTypes.AppDetails]()
            for structure0 in appsContainer {
                if let structure0 = structure0 {
                    appsDecoded0?.append(structure0)
                }
            }
        }
        apps = appsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListArtifactsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactType = "ArtifactType"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceUri = "SourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactType = artifactType {
            try encodeContainer.encode(artifactType, forKey: .artifactType)
        }
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let sourceUri = sourceUri {
            try encodeContainer.encode(sourceUri, forKey: .sourceUri)
        }
    }
}

extension ListArtifactsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListArtifactsInput: Swift.Equatable {
    /// A filter that returns only artifacts of the specified type.
    public var artifactType: Swift.String?
    /// A filter that returns only artifacts created on or after the specified time.
    public var createdAfter: ClientRuntime.Date?
    /// A filter that returns only artifacts created on or before the specified time.
    public var createdBefore: ClientRuntime.Date?
    /// The maximum number of artifacts to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListArtifacts didn't return the full set of artifacts, the call returns a token for getting the next set of artifacts.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortArtifactsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only artifacts with the specified source URI.
    public var sourceUri: Swift.String?

    public init (
        artifactType: Swift.String? = nil,
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortArtifactsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceUri: Swift.String? = nil
    )
    {
        self.artifactType = artifactType
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceUri = sourceUri
    }
}

struct ListArtifactsInputBody: Swift.Equatable {
    let sourceUri: Swift.String?
    let artifactType: Swift.String?
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortArtifactsBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListArtifactsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactType = "ArtifactType"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceUri = "SourceUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUri)
        sourceUri = sourceUriDecoded
        let artifactTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactType)
        artifactType = artifactTypeDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortArtifactsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListArtifactsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListArtifactsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListArtifactsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListArtifactsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListArtifactsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.artifactSummaries = output.artifactSummaries
            self.nextToken = output.nextToken
        } else {
            self.artifactSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListArtifactsOutputResponse: Swift.Equatable {
    /// A list of artifacts and their properties.
    public var artifactSummaries: [SageMakerClientTypes.ArtifactSummary]?
    /// A token for getting the next set of artifacts, if there are any.
    public var nextToken: Swift.String?

    public init (
        artifactSummaries: [SageMakerClientTypes.ArtifactSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.artifactSummaries = artifactSummaries
        self.nextToken = nextToken
    }
}

struct ListArtifactsOutputResponseBody: Swift.Equatable {
    let artifactSummaries: [SageMakerClientTypes.ArtifactSummary]?
    let nextToken: Swift.String?
}

extension ListArtifactsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactSummaries = "ArtifactSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ArtifactSummary?].self, forKey: .artifactSummaries)
        var artifactSummariesDecoded0:[SageMakerClientTypes.ArtifactSummary]? = nil
        if let artifactSummariesContainer = artifactSummariesContainer {
            artifactSummariesDecoded0 = [SageMakerClientTypes.ArtifactSummary]()
            for structure0 in artifactSummariesContainer {
                if let structure0 = structure0 {
                    artifactSummariesDecoded0?.append(structure0)
                }
            }
        }
        artifactSummaries = artifactSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAssociationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationType = "AssociationType"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case destinationArn = "DestinationArn"
        case destinationType = "DestinationType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceArn = "SourceArn"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationType = associationType {
            try encodeContainer.encode(associationType.rawValue, forKey: .associationType)
        }
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let destinationType = destinationType {
            try encodeContainer.encode(destinationType, forKey: .destinationType)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
    }
}

extension ListAssociationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAssociationsInput: Swift.Equatable {
    /// A filter that returns only associations of the specified type.
    public var associationType: SageMakerClientTypes.AssociationEdgeType?
    /// A filter that returns only associations created on or after the specified time.
    public var createdAfter: ClientRuntime.Date?
    /// A filter that returns only associations created on or before the specified time.
    public var createdBefore: ClientRuntime.Date?
    /// A filter that returns only associations with the specified destination Amazon Resource Name (ARN).
    public var destinationArn: Swift.String?
    /// A filter that returns only associations with the specified destination type.
    public var destinationType: Swift.String?
    /// The maximum number of associations to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListAssociations didn't return the full set of associations, the call returns a token for getting the next set of associations.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortAssociationsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only associations with the specified source ARN.
    public var sourceArn: Swift.String?
    /// A filter that returns only associations with the specified source type.
    public var sourceType: Swift.String?

    public init (
        associationType: SageMakerClientTypes.AssociationEdgeType? = nil,
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        destinationArn: Swift.String? = nil,
        destinationType: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortAssociationsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceArn: Swift.String? = nil,
        sourceType: Swift.String? = nil
    )
    {
        self.associationType = associationType
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.destinationArn = destinationArn
        self.destinationType = destinationType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceArn = sourceArn
        self.sourceType = sourceType
    }
}

struct ListAssociationsInputBody: Swift.Equatable {
    let sourceArn: Swift.String?
    let destinationArn: Swift.String?
    let sourceType: Swift.String?
    let destinationType: Swift.String?
    let associationType: SageMakerClientTypes.AssociationEdgeType?
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortAssociationsBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListAssociationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationType = "AssociationType"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case destinationArn = "DestinationArn"
        case destinationType = "DestinationType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceArn = "SourceArn"
        case sourceType = "SourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let associationTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AssociationEdgeType.self, forKey: .associationType)
        associationType = associationTypeDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortAssociationsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListAssociationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAssociationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAssociationsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAssociationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAssociationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.associationSummaries = output.associationSummaries
            self.nextToken = output.nextToken
        } else {
            self.associationSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListAssociationsOutputResponse: Swift.Equatable {
    /// A list of associations and their properties.
    public var associationSummaries: [SageMakerClientTypes.AssociationSummary]?
    /// A token for getting the next set of associations, if there are any.
    public var nextToken: Swift.String?

    public init (
        associationSummaries: [SageMakerClientTypes.AssociationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.associationSummaries = associationSummaries
        self.nextToken = nextToken
    }
}

struct ListAssociationsOutputResponseBody: Swift.Equatable {
    let associationSummaries: [SageMakerClientTypes.AssociationSummary]?
    let nextToken: Swift.String?
}

extension ListAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationSummaries = "AssociationSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AssociationSummary?].self, forKey: .associationSummaries)
        var associationSummariesDecoded0:[SageMakerClientTypes.AssociationSummary]? = nil
        if let associationSummariesContainer = associationSummariesContainer {
            associationSummariesDecoded0 = [SageMakerClientTypes.AssociationSummary]()
            for structure0 in associationSummariesContainer {
                if let structure0 = structure0 {
                    associationSummariesDecoded0?.append(structure0)
                }
            }
        }
        associationSummaries = associationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAutoMLJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListAutoMLJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAutoMLJobsInput: Swift.Equatable {
    /// Request a list of jobs, using a filter for time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// Request a list of jobs, using a filter for time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// Request a list of jobs, using a filter for time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// Request a list of jobs, using a filter for time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// Request a list of jobs up to a specified limit.
    public var maxResults: Swift.Int
    /// Request a list of jobs, using a search filter for name.
    public var nameContains: Swift.String?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is Name.
    public var sortBy: SageMakerClientTypes.AutoMLSortBy?
    /// The sort order for the results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.AutoMLSortOrder?
    /// Request a list of jobs, using a filter for status.
    public var statusEquals: SageMakerClientTypes.AutoMLJobStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int = 0,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.AutoMLSortBy? = nil,
        sortOrder: SageMakerClientTypes.AutoMLSortOrder? = nil,
        statusEquals: SageMakerClientTypes.AutoMLJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListAutoMLJobsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let nameContains: Swift.String?
    let statusEquals: SageMakerClientTypes.AutoMLJobStatus?
    let sortOrder: SageMakerClientTypes.AutoMLSortOrder?
    let sortBy: SageMakerClientTypes.AutoMLSortBy?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension ListAutoMLJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAutoMLJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAutoMLJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAutoMLJobsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAutoMLJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAutoMLJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoMLJobSummaries = output.autoMLJobSummaries
            self.nextToken = output.nextToken
        } else {
            self.autoMLJobSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListAutoMLJobsOutputResponse: Swift.Equatable {
    /// Returns a summary list of jobs.
    /// This member is required.
    public var autoMLJobSummaries: [SageMakerClientTypes.AutoMLJobSummary]?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init (
        autoMLJobSummaries: [SageMakerClientTypes.AutoMLJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoMLJobSummaries = autoMLJobSummaries
        self.nextToken = nextToken
    }
}

struct ListAutoMLJobsOutputResponseBody: Swift.Equatable {
    let autoMLJobSummaries: [SageMakerClientTypes.AutoMLJobSummary]?
    let nextToken: Swift.String?
}

extension ListAutoMLJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobSummaries = "AutoMLJobSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AutoMLJobSummary?].self, forKey: .autoMLJobSummaries)
        var autoMLJobSummariesDecoded0:[SageMakerClientTypes.AutoMLJobSummary]? = nil
        if let autoMLJobSummariesContainer = autoMLJobSummariesContainer {
            autoMLJobSummariesDecoded0 = [SageMakerClientTypes.AutoMLJobSummary]()
            for structure0 in autoMLJobSummariesContainer {
                if let structure0 = structure0 {
                    autoMLJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        autoMLJobSummaries = autoMLJobSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCandidatesForAutoMLJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobName = "AutoMLJobName"
        case candidateNameEquals = "CandidateNameEquals"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobName = autoMLJobName {
            try encodeContainer.encode(autoMLJobName, forKey: .autoMLJobName)
        }
        if let candidateNameEquals = candidateNameEquals {
            try encodeContainer.encode(candidateNameEquals, forKey: .candidateNameEquals)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListCandidatesForAutoMLJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListCandidatesForAutoMLJobInput: Swift.Equatable {
    /// List the candidates created for the job by providing the job's name.
    /// This member is required.
    public var autoMLJobName: Swift.String?
    /// List the candidates for the job and filter by candidate name.
    public var candidateNameEquals: Swift.String?
    /// List the job's candidates up to a specified limit.
    public var maxResults: Swift.Int
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is Descending.
    public var sortBy: SageMakerClientTypes.CandidateSortBy?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.AutoMLSortOrder?
    /// List the candidates for the job and filter by status.
    public var statusEquals: SageMakerClientTypes.CandidateStatus?

    public init (
        autoMLJobName: Swift.String? = nil,
        candidateNameEquals: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.CandidateSortBy? = nil,
        sortOrder: SageMakerClientTypes.AutoMLSortOrder? = nil,
        statusEquals: SageMakerClientTypes.CandidateStatus? = nil
    )
    {
        self.autoMLJobName = autoMLJobName
        self.candidateNameEquals = candidateNameEquals
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListCandidatesForAutoMLJobInputBody: Swift.Equatable {
    let autoMLJobName: Swift.String?
    let statusEquals: SageMakerClientTypes.CandidateStatus?
    let candidateNameEquals: Swift.String?
    let sortOrder: SageMakerClientTypes.AutoMLSortOrder?
    let sortBy: SageMakerClientTypes.CandidateSortBy?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension ListCandidatesForAutoMLJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobName = "AutoMLJobName"
        case candidateNameEquals = "CandidateNameEquals"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobName)
        autoMLJobName = autoMLJobNameDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CandidateStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let candidateNameEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .candidateNameEquals)
        candidateNameEquals = candidateNameEqualsDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CandidateSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCandidatesForAutoMLJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCandidatesForAutoMLJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCandidatesForAutoMLJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCandidatesForAutoMLJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCandidatesForAutoMLJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.candidates = output.candidates
            self.nextToken = output.nextToken
        } else {
            self.candidates = nil
            self.nextToken = nil
        }
    }
}

public struct ListCandidatesForAutoMLJobOutputResponse: Swift.Equatable {
    /// Summaries about the AutoMLCandidates.
    /// This member is required.
    public var candidates: [SageMakerClientTypes.AutoMLCandidate]?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init (
        candidates: [SageMakerClientTypes.AutoMLCandidate]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.candidates = candidates
        self.nextToken = nextToken
    }
}

struct ListCandidatesForAutoMLJobOutputResponseBody: Swift.Equatable {
    let candidates: [SageMakerClientTypes.AutoMLCandidate]?
    let nextToken: Swift.String?
}

extension ListCandidatesForAutoMLJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case candidates = "Candidates"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let candidatesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AutoMLCandidate?].self, forKey: .candidates)
        var candidatesDecoded0:[SageMakerClientTypes.AutoMLCandidate]? = nil
        if let candidatesContainer = candidatesContainer {
            candidatesDecoded0 = [SageMakerClientTypes.AutoMLCandidate]()
            for structure0 in candidatesContainer {
                if let structure0 = structure0 {
                    candidatesDecoded0?.append(structure0)
                }
            }
        }
        candidates = candidatesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCodeRepositoriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListCodeRepositoriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListCodeRepositoriesInput: Swift.Equatable {
    /// A filter that returns only Git repositories that were created after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only Git repositories that were created before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only Git repositories that were last modified after the specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only Git repositories that were last modified before the specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of Git repositories to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the Git repositories name. This filter returns only repositories whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of a ListCodeRepositoriesOutput request was truncated, the response includes a NextToken. To get the next set of Git repositories, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is Name.
    public var sortBy: SageMakerClientTypes.CodeRepositorySortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.CodeRepositorySortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.CodeRepositorySortBy? = nil,
        sortOrder: SageMakerClientTypes.CodeRepositorySortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListCodeRepositoriesInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let nextToken: Swift.String?
    let sortBy: SageMakerClientTypes.CodeRepositorySortBy?
    let sortOrder: SageMakerClientTypes.CodeRepositorySortOrder?
}

extension ListCodeRepositoriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CodeRepositorySortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CodeRepositorySortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListCodeRepositoriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCodeRepositoriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCodeRepositoriesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCodeRepositoriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCodeRepositoriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeRepositorySummaryList = output.codeRepositorySummaryList
            self.nextToken = output.nextToken
        } else {
            self.codeRepositorySummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListCodeRepositoriesOutputResponse: Swift.Equatable {
    /// Gets a list of summaries of the Git repositories. Each summary specifies the following values for the repository:
    ///
    /// * Name
    ///
    /// * Amazon Resource Name (ARN)
    ///
    /// * Creation time
    ///
    /// * Last modified time
    ///
    /// * Configuration information, including the URL location of the repository and the ARN of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository.
    /// This member is required.
    public var codeRepositorySummaryList: [SageMakerClientTypes.CodeRepositorySummary]?
    /// If the result of a ListCodeRepositoriesOutput request was truncated, the response includes a NextToken. To get the next set of Git repositories, use the token in the next request.
    public var nextToken: Swift.String?

    public init (
        codeRepositorySummaryList: [SageMakerClientTypes.CodeRepositorySummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.codeRepositorySummaryList = codeRepositorySummaryList
        self.nextToken = nextToken
    }
}

struct ListCodeRepositoriesOutputResponseBody: Swift.Equatable {
    let codeRepositorySummaryList: [SageMakerClientTypes.CodeRepositorySummary]?
    let nextToken: Swift.String?
}

extension ListCodeRepositoriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositorySummaryList = "CodeRepositorySummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositorySummaryListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.CodeRepositorySummary?].self, forKey: .codeRepositorySummaryList)
        var codeRepositorySummaryListDecoded0:[SageMakerClientTypes.CodeRepositorySummary]? = nil
        if let codeRepositorySummaryListContainer = codeRepositorySummaryListContainer {
            codeRepositorySummaryListDecoded0 = [SageMakerClientTypes.CodeRepositorySummary]()
            for structure0 in codeRepositorySummaryListContainer {
                if let structure0 = structure0 {
                    codeRepositorySummaryListDecoded0?.append(structure0)
                }
            }
        }
        codeRepositorySummaryList = codeRepositorySummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCompilationJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListCompilationJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListCompilationJobsInput: Swift.Equatable {
    /// A filter that returns the model compilation jobs that were created after a specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns the model compilation jobs that were created before a specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns the model compilation jobs that were modified after a specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns the model compilation jobs that were modified before a specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of model compilation jobs to return in the response.
    public var maxResults: Swift.Int?
    /// A filter that returns the model compilation jobs whose name contains a specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListCompilationJobs request was truncated, the response includes a NextToken. To retrieve the next set of model compilation jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field by which to sort results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ListCompilationJobsSortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves model compilation jobs with a specific [DescribeCompilationJobResponse$CompilationJobStatus] status.
    public var statusEquals: SageMakerClientTypes.CompilationJobStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListCompilationJobsSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.CompilationJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListCompilationJobsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let nameContains: Swift.String?
    let statusEquals: SageMakerClientTypes.CompilationJobStatus?
    let sortBy: SageMakerClientTypes.ListCompilationJobsSortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListCompilationJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CompilationJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ListCompilationJobsSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListCompilationJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCompilationJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCompilationJobsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCompilationJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCompilationJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compilationJobSummaries = output.compilationJobSummaries
            self.nextToken = output.nextToken
        } else {
            self.compilationJobSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListCompilationJobsOutputResponse: Swift.Equatable {
    /// An array of [CompilationJobSummary] objects, each describing a model compilation job.
    /// This member is required.
    public var compilationJobSummaries: [SageMakerClientTypes.CompilationJobSummary]?
    /// If the response is truncated, Amazon SageMaker returns this NextToken. To retrieve the next set of model compilation jobs, use this token in the next request.
    public var nextToken: Swift.String?

    public init (
        compilationJobSummaries: [SageMakerClientTypes.CompilationJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.compilationJobSummaries = compilationJobSummaries
        self.nextToken = nextToken
    }
}

struct ListCompilationJobsOutputResponseBody: Swift.Equatable {
    let compilationJobSummaries: [SageMakerClientTypes.CompilationJobSummary]?
    let nextToken: Swift.String?
}

extension ListCompilationJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobSummaries = "CompilationJobSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compilationJobSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.CompilationJobSummary?].self, forKey: .compilationJobSummaries)
        var compilationJobSummariesDecoded0:[SageMakerClientTypes.CompilationJobSummary]? = nil
        if let compilationJobSummariesContainer = compilationJobSummariesContainer {
            compilationJobSummariesDecoded0 = [SageMakerClientTypes.CompilationJobSummary]()
            for structure0 in compilationJobSummariesContainer {
                if let structure0 = structure0 {
                    compilationJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        compilationJobSummaries = compilationJobSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SageMakerClientTypes {
    public enum ListCompilationJobsSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [ListCompilationJobsSortBy] {
            return [
                .creationTime,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListCompilationJobsSortBy(rawValue: rawValue) ?? ListCompilationJobsSortBy.sdkUnknown(rawValue)
        }
    }
}

extension ListContextsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextType = "ContextType"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceUri = "SourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contextType = contextType {
            try encodeContainer.encode(contextType, forKey: .contextType)
        }
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let sourceUri = sourceUri {
            try encodeContainer.encode(sourceUri, forKey: .sourceUri)
        }
    }
}

extension ListContextsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListContextsInput: Swift.Equatable {
    /// A filter that returns only contexts of the specified type.
    public var contextType: Swift.String?
    /// A filter that returns only contexts created on or after the specified time.
    public var createdAfter: ClientRuntime.Date?
    /// A filter that returns only contexts created on or before the specified time.
    public var createdBefore: ClientRuntime.Date?
    /// The maximum number of contexts to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListContexts didn't return the full set of contexts, the call returns a token for getting the next set of contexts.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortContextsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only contexts with the specified source URI.
    public var sourceUri: Swift.String?

    public init (
        contextType: Swift.String? = nil,
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortContextsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceUri: Swift.String? = nil
    )
    {
        self.contextType = contextType
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceUri = sourceUri
    }
}

struct ListContextsInputBody: Swift.Equatable {
    let sourceUri: Swift.String?
    let contextType: Swift.String?
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortContextsBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListContextsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextType = "ContextType"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceUri = "SourceUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUri)
        sourceUri = sourceUriDecoded
        let contextTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextType)
        contextType = contextTypeDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortContextsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListContextsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListContextsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListContextsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListContextsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListContextsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contextSummaries = output.contextSummaries
            self.nextToken = output.nextToken
        } else {
            self.contextSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListContextsOutputResponse: Swift.Equatable {
    /// A list of contexts and their properties.
    public var contextSummaries: [SageMakerClientTypes.ContextSummary]?
    /// A token for getting the next set of contexts, if there are any.
    public var nextToken: Swift.String?

    public init (
        contextSummaries: [SageMakerClientTypes.ContextSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contextSummaries = contextSummaries
        self.nextToken = nextToken
    }
}

struct ListContextsOutputResponseBody: Swift.Equatable {
    let contextSummaries: [SageMakerClientTypes.ContextSummary]?
    let nextToken: Swift.String?
}

extension ListContextsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextSummaries = "ContextSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ContextSummary?].self, forKey: .contextSummaries)
        var contextSummariesDecoded0:[SageMakerClientTypes.ContextSummary]? = nil
        if let contextSummariesContainer = contextSummariesContainer {
            contextSummariesDecoded0 = [SageMakerClientTypes.ContextSummary]()
            for structure0 in contextSummariesContainer {
                if let structure0 = structure0 {
                    contextSummariesDecoded0?.append(structure0)
                }
            }
        }
        contextSummaries = contextSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDataQualityJobDefinitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListDataQualityJobDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDataQualityJobDefinitionsInput: Swift.Equatable {
    /// A filter that returns only data quality monitoring job definitions created after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only data quality monitoring job definitions created before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that lists the data quality job definitions associated with the specified endpoint.
    public var endpointName: Swift.String?
    /// The maximum number of data quality monitoring job definitions to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the data quality monitoring job definition name. This filter returns only data quality monitoring job definitions whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListDataQualityJobDefinitions request was truncated, the response includes a NextToken. To retrieve the next set of transform jobs, use the token in the next request.>
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListDataQualityJobDefinitionsInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
}

extension ListDataQualityJobDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringJobDefinitionSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
    }
}

extension ListDataQualityJobDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDataQualityJobDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDataQualityJobDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDataQualityJobDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDataQualityJobDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionSummaries = output.jobDefinitionSummaries
            self.nextToken = output.nextToken
        } else {
            self.jobDefinitionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDataQualityJobDefinitionsOutputResponse: Swift.Equatable {
    /// A list of data quality monitoring job definitions.
    /// This member is required.
    public var jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    /// If the result of the previous ListDataQualityJobDefinitions request was truncated, the response includes a NextToken. To retrieve the next set of data quality monitoring job definitions, use the token in the next request.
    public var nextToken: Swift.String?

    public init (
        jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitionSummaries = jobDefinitionSummaries
        self.nextToken = nextToken
    }
}

struct ListDataQualityJobDefinitionsOutputResponseBody: Swift.Equatable {
    let jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    let nextToken: Swift.String?
}

extension ListDataQualityJobDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionSummaries = "JobDefinitionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringJobDefinitionSummary?].self, forKey: .jobDefinitionSummaries)
        var jobDefinitionSummariesDecoded0:[SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil
        if let jobDefinitionSummariesContainer = jobDefinitionSummariesContainer {
            jobDefinitionSummariesDecoded0 = [SageMakerClientTypes.MonitoringJobDefinitionSummary]()
            for structure0 in jobDefinitionSummariesContainer {
                if let structure0 = structure0 {
                    jobDefinitionSummariesDecoded0?.append(structure0)
                }
            }
        }
        jobDefinitionSummaries = jobDefinitionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeviceFleetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListDeviceFleetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDeviceFleetsInput: Swift.Equatable {
    /// Filter fleets where packaging job was created after specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// Filter fleets where the edge packaging job was created before specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// Select fleets where the job was updated after X
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// Select fleets where the job was updated before X
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of results to select.
    public var maxResults: Swift.Int
    /// Filter for fleets containing this name in their fleet device name.
    public var nameContains: Swift.String?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?
    /// The column to sort by.
    public var sortBy: SageMakerClientTypes.ListDeviceFleetsSortBy?
    /// What direction to sort in.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int = 0,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListDeviceFleetsSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListDeviceFleetsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let nameContains: Swift.String?
    let sortBy: SageMakerClientTypes.ListDeviceFleetsSortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListDeviceFleetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ListDeviceFleetsSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListDeviceFleetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeviceFleetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDeviceFleetsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeviceFleetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDeviceFleetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deviceFleetSummaries = output.deviceFleetSummaries
            self.nextToken = output.nextToken
        } else {
            self.deviceFleetSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDeviceFleetsOutputResponse: Swift.Equatable {
    /// Summary of the device fleet.
    /// This member is required.
    public var deviceFleetSummaries: [SageMakerClientTypes.DeviceFleetSummary]?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?

    public init (
        deviceFleetSummaries: [SageMakerClientTypes.DeviceFleetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deviceFleetSummaries = deviceFleetSummaries
        self.nextToken = nextToken
    }
}

struct ListDeviceFleetsOutputResponseBody: Swift.Equatable {
    let deviceFleetSummaries: [SageMakerClientTypes.DeviceFleetSummary]?
    let nextToken: Swift.String?
}

extension ListDeviceFleetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetSummaries = "DeviceFleetSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DeviceFleetSummary?].self, forKey: .deviceFleetSummaries)
        var deviceFleetSummariesDecoded0:[SageMakerClientTypes.DeviceFleetSummary]? = nil
        if let deviceFleetSummariesContainer = deviceFleetSummariesContainer {
            deviceFleetSummariesDecoded0 = [SageMakerClientTypes.DeviceFleetSummary]()
            for structure0 in deviceFleetSummariesContainer {
                if let structure0 = structure0 {
                    deviceFleetSummariesDecoded0?.append(structure0)
                }
            }
        }
        deviceFleetSummaries = deviceFleetSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SageMakerClientTypes {
    public enum ListDeviceFleetsSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case lastmodifiedtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListDeviceFleetsSortBy] {
            return [
                .creationtime,
                .lastmodifiedtime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CREATION_TIME"
            case .lastmodifiedtime: return "LAST_MODIFIED_TIME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListDeviceFleetsSortBy(rawValue: rawValue) ?? ListDeviceFleetsSortBy.sdkUnknown(rawValue)
        }
    }
}

extension ListDevicesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case latestHeartbeatAfter = "LatestHeartbeatAfter"
        case maxResults = "MaxResults"
        case modelName = "ModelName"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let latestHeartbeatAfter = latestHeartbeatAfter {
            try encodeContainer.encode(latestHeartbeatAfter.timeIntervalSince1970, forKey: .latestHeartbeatAfter)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDevicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDevicesInput: Swift.Equatable {
    /// Filter for fleets containing this name in their device fleet name.
    public var deviceFleetName: Swift.String?
    /// Select fleets where the job was updated after X
    public var latestHeartbeatAfter: ClientRuntime.Date?
    /// Maximum number of results to select.
    public var maxResults: Swift.Int
    /// A filter that searches devices that contains this name in any of their models.
    public var modelName: Swift.String?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?

    public init (
        deviceFleetName: Swift.String? = nil,
        latestHeartbeatAfter: ClientRuntime.Date? = nil,
        maxResults: Swift.Int = 0,
        modelName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.latestHeartbeatAfter = latestHeartbeatAfter
        self.maxResults = maxResults
        self.modelName = modelName
        self.nextToken = nextToken
    }
}

struct ListDevicesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int
    let latestHeartbeatAfter: ClientRuntime.Date?
    let modelName: Swift.String?
    let deviceFleetName: Swift.String?
}

extension ListDevicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case latestHeartbeatAfter = "LatestHeartbeatAfter"
        case maxResults = "MaxResults"
        case modelName = "ModelName"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let latestHeartbeatAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .latestHeartbeatAfter)
        latestHeartbeatAfter = latestHeartbeatAfterDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
    }
}

extension ListDevicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDevicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDevicesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDevicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDevicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deviceSummaries = output.deviceSummaries
            self.nextToken = output.nextToken
        } else {
            self.deviceSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDevicesOutputResponse: Swift.Equatable {
    /// Summary of devices.
    /// This member is required.
    public var deviceSummaries: [SageMakerClientTypes.DeviceSummary]?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?

    public init (
        deviceSummaries: [SageMakerClientTypes.DeviceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deviceSummaries = deviceSummaries
        self.nextToken = nextToken
    }
}

struct ListDevicesOutputResponseBody: Swift.Equatable {
    let deviceSummaries: [SageMakerClientTypes.DeviceSummary]?
    let nextToken: Swift.String?
}

extension ListDevicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceSummaries = "DeviceSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DeviceSummary?].self, forKey: .deviceSummaries)
        var deviceSummariesDecoded0:[SageMakerClientTypes.DeviceSummary]? = nil
        if let deviceSummariesContainer = deviceSummariesContainer {
            deviceSummariesDecoded0 = [SageMakerClientTypes.DeviceSummary]()
            for structure0 in deviceSummariesContainer {
                if let structure0 = structure0 {
                    deviceSummariesDecoded0?.append(structure0)
                }
            }
        }
        deviceSummaries = deviceSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDomainsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDomainsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDomainsInput: Swift.Equatable {
    /// Returns a list up to a specified limit.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDomainsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDomainsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDomainsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDomainsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDomainsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domains = output.domains
            self.nextToken = output.nextToken
        } else {
            self.domains = nil
            self.nextToken = nil
        }
    }
}

public struct ListDomainsOutputResponse: Swift.Equatable {
    /// The list of domains.
    public var domains: [SageMakerClientTypes.DomainDetails]?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init (
        domains: [SageMakerClientTypes.DomainDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domains = domains
        self.nextToken = nextToken
    }
}

struct ListDomainsOutputResponseBody: Swift.Equatable {
    let domains: [SageMakerClientTypes.DomainDetails]?
    let nextToken: Swift.String?
}

extension ListDomainsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domains = "Domains"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DomainDetails?].self, forKey: .domains)
        var domainsDecoded0:[SageMakerClientTypes.DomainDetails]? = nil
        if let domainsContainer = domainsContainer {
            domainsDecoded0 = [SageMakerClientTypes.DomainDetails]()
            for structure0 in domainsContainer {
                if let structure0 = structure0 {
                    domainsDecoded0?.append(structure0)
                }
            }
        }
        domains = domainsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEdgePackagingJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case modelNameContains = "ModelNameContains"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelNameContains = modelNameContains {
            try encodeContainer.encode(modelNameContains, forKey: .modelNameContains)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListEdgePackagingJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEdgePackagingJobsInput: Swift.Equatable {
    /// Select jobs where the job was created after specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// Select jobs where the job was created before specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// Select jobs where the job was updated after specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// Select jobs where the job was updated before specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// Maximum number of results to select.
    public var maxResults: Swift.Int
    /// Filter for jobs where the model name contains this string.
    public var modelNameContains: Swift.String?
    /// Filter for jobs containing this name in their packaging job name.
    public var nameContains: Swift.String?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?
    /// Use to specify what column to sort by.
    public var sortBy: SageMakerClientTypes.ListEdgePackagingJobsSortBy?
    /// What direction to sort by.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// The job status to filter for.
    public var statusEquals: SageMakerClientTypes.EdgePackagingJobStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int = 0,
        modelNameContains: Swift.String? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListEdgePackagingJobsSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.EdgePackagingJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.modelNameContains = modelNameContains
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListEdgePackagingJobsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let nameContains: Swift.String?
    let modelNameContains: Swift.String?
    let statusEquals: SageMakerClientTypes.EdgePackagingJobStatus?
    let sortBy: SageMakerClientTypes.ListEdgePackagingJobsSortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListEdgePackagingJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case modelNameContains = "ModelNameContains"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let modelNameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelNameContains)
        modelNameContains = modelNameContainsDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgePackagingJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ListEdgePackagingJobsSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListEdgePackagingJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEdgePackagingJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListEdgePackagingJobsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEdgePackagingJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListEdgePackagingJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.edgePackagingJobSummaries = output.edgePackagingJobSummaries
            self.nextToken = output.nextToken
        } else {
            self.edgePackagingJobSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListEdgePackagingJobsOutputResponse: Swift.Equatable {
    /// Summaries of edge packaging jobs.
    /// This member is required.
    public var edgePackagingJobSummaries: [SageMakerClientTypes.EdgePackagingJobSummary]?
    /// Token to use when calling the next page of results.
    public var nextToken: Swift.String?

    public init (
        edgePackagingJobSummaries: [SageMakerClientTypes.EdgePackagingJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.edgePackagingJobSummaries = edgePackagingJobSummaries
        self.nextToken = nextToken
    }
}

struct ListEdgePackagingJobsOutputResponseBody: Swift.Equatable {
    let edgePackagingJobSummaries: [SageMakerClientTypes.EdgePackagingJobSummary]?
    let nextToken: Swift.String?
}

extension ListEdgePackagingJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edgePackagingJobSummaries = "EdgePackagingJobSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgePackagingJobSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EdgePackagingJobSummary?].self, forKey: .edgePackagingJobSummaries)
        var edgePackagingJobSummariesDecoded0:[SageMakerClientTypes.EdgePackagingJobSummary]? = nil
        if let edgePackagingJobSummariesContainer = edgePackagingJobSummariesContainer {
            edgePackagingJobSummariesDecoded0 = [SageMakerClientTypes.EdgePackagingJobSummary]()
            for structure0 in edgePackagingJobSummariesContainer {
                if let structure0 = structure0 {
                    edgePackagingJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        edgePackagingJobSummaries = edgePackagingJobSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SageMakerClientTypes {
    public enum ListEdgePackagingJobsSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case edgepackagingjobstatus
        case lastmodifiedtime
        case modelname
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListEdgePackagingJobsSortBy] {
            return [
                .creationtime,
                .edgepackagingjobstatus,
                .lastmodifiedtime,
                .modelname,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CREATION_TIME"
            case .edgepackagingjobstatus: return "STATUS"
            case .lastmodifiedtime: return "LAST_MODIFIED_TIME"
            case .modelname: return "MODEL_NAME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListEdgePackagingJobsSortBy(rawValue: rawValue) ?? ListEdgePackagingJobsSortBy.sdkUnknown(rawValue)
        }
    }
}

extension ListEndpointConfigsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListEndpointConfigsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEndpointConfigsInput: Swift.Equatable {
    /// A filter that returns only endpoint configurations with a creation time greater than or equal to the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only endpoint configurations created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// The maximum number of training jobs to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the endpoint configuration name. This filter returns only endpoint configurations whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListEndpointConfig request was truncated, the response includes a NextToken. To retrieve the next set of endpoint configurations, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.EndpointConfigSortKey?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.OrderKey?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.EndpointConfigSortKey? = nil,
        sortOrder: SageMakerClientTypes.OrderKey? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListEndpointConfigsInputBody: Swift.Equatable {
    let sortBy: SageMakerClientTypes.EndpointConfigSortKey?
    let sortOrder: SageMakerClientTypes.OrderKey?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
}

extension ListEndpointConfigsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointConfigSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OrderKey.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
    }
}

extension ListEndpointConfigsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEndpointConfigsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListEndpointConfigsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEndpointConfigsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListEndpointConfigsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpointConfigs = output.endpointConfigs
            self.nextToken = output.nextToken
        } else {
            self.endpointConfigs = nil
            self.nextToken = nil
        }
    }
}

public struct ListEndpointConfigsOutputResponse: Swift.Equatable {
    /// An array of endpoint configurations.
    /// This member is required.
    public var endpointConfigs: [SageMakerClientTypes.EndpointConfigSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of endpoint configurations, use it in the subsequent request
    public var nextToken: Swift.String?

    public init (
        endpointConfigs: [SageMakerClientTypes.EndpointConfigSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpointConfigs = endpointConfigs
        self.nextToken = nextToken
    }
}

struct ListEndpointConfigsOutputResponseBody: Swift.Equatable {
    let endpointConfigs: [SageMakerClientTypes.EndpointConfigSummary]?
    let nextToken: Swift.String?
}

extension ListEndpointConfigsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointConfigs = "EndpointConfigs"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EndpointConfigSummary?].self, forKey: .endpointConfigs)
        var endpointConfigsDecoded0:[SageMakerClientTypes.EndpointConfigSummary]? = nil
        if let endpointConfigsContainer = endpointConfigsContainer {
            endpointConfigsDecoded0 = [SageMakerClientTypes.EndpointConfigSummary]()
            for structure0 in endpointConfigsContainer {
                if let structure0 = structure0 {
                    endpointConfigsDecoded0?.append(structure0)
                }
            }
        }
        endpointConfigs = endpointConfigsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEndpointsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEndpointsInput: Swift.Equatable {
    /// A filter that returns only endpoints with a creation time greater than or equal to the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only endpoints that were created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only endpoints that were modified after the specified timestamp.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only endpoints that were modified before the specified timestamp.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of endpoints to return in the response. This value defaults to 10.
    public var maxResults: Swift.Int?
    /// A string in endpoint names. This filter returns only endpoints whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of a ListEndpoints request was truncated, the response includes a NextToken. To retrieve the next set of endpoints, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sorts the list of results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.EndpointSortKey?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.OrderKey?
    /// A filter that returns only endpoints with the specified status.
    public var statusEquals: SageMakerClientTypes.EndpointStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.EndpointSortKey? = nil,
        sortOrder: SageMakerClientTypes.OrderKey? = nil,
        statusEquals: SageMakerClientTypes.EndpointStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListEndpointsInputBody: Swift.Equatable {
    let sortBy: SageMakerClientTypes.EndpointSortKey?
    let sortOrder: SageMakerClientTypes.OrderKey?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let statusEquals: SageMakerClientTypes.EndpointStatus?
}

extension ListEndpointsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OrderKey.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
    }
}

extension ListEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListEndpointsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpoints = output.endpoints
            self.nextToken = output.nextToken
        } else {
            self.endpoints = nil
            self.nextToken = nil
        }
    }
}

public struct ListEndpointsOutputResponse: Swift.Equatable {
    /// An array or endpoint objects.
    /// This member is required.
    public var endpoints: [SageMakerClientTypes.EndpointSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of training jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        endpoints: [SageMakerClientTypes.EndpointSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpoints = endpoints
        self.nextToken = nextToken
    }
}

struct ListEndpointsOutputResponseBody: Swift.Equatable {
    let endpoints: [SageMakerClientTypes.EndpointSummary]?
    let nextToken: Swift.String?
}

extension ListEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoints = "Endpoints"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EndpointSummary?].self, forKey: .endpoints)
        var endpointsDecoded0:[SageMakerClientTypes.EndpointSummary]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [SageMakerClientTypes.EndpointSummary]()
            for structure0 in endpointsContainer {
                if let structure0 = structure0 {
                    endpointsDecoded0?.append(structure0)
                }
            }
        }
        endpoints = endpointsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExperimentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListExperimentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListExperimentsInput: Swift.Equatable {
    /// A filter that returns only experiments created after the specified time.
    public var createdAfter: ClientRuntime.Date?
    /// A filter that returns only experiments created before the specified time.
    public var createdBefore: ClientRuntime.Date?
    /// The maximum number of experiments to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListExperiments didn't return the full set of experiments, the call returns a token for getting the next set of experiments.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortExperimentsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortExperimentsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListExperimentsInputBody: Swift.Equatable {
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortExperimentsBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListExperimentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortExperimentsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListExperimentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListExperimentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListExperimentsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListExperimentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListExperimentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.experimentSummaries = output.experimentSummaries
            self.nextToken = output.nextToken
        } else {
            self.experimentSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListExperimentsOutputResponse: Swift.Equatable {
    /// A list of the summaries of your experiments.
    public var experimentSummaries: [SageMakerClientTypes.ExperimentSummary]?
    /// A token for getting the next set of experiments, if there are any.
    public var nextToken: Swift.String?

    public init (
        experimentSummaries: [SageMakerClientTypes.ExperimentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.experimentSummaries = experimentSummaries
        self.nextToken = nextToken
    }
}

struct ListExperimentsOutputResponseBody: Swift.Equatable {
    let experimentSummaries: [SageMakerClientTypes.ExperimentSummary]?
    let nextToken: Swift.String?
}

extension ListExperimentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentSummaries = "ExperimentSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ExperimentSummary?].self, forKey: .experimentSummaries)
        var experimentSummariesDecoded0:[SageMakerClientTypes.ExperimentSummary]? = nil
        if let experimentSummariesContainer = experimentSummariesContainer {
            experimentSummariesDecoded0 = [SageMakerClientTypes.ExperimentSummary]()
            for structure0 in experimentSummariesContainer {
                if let structure0 = structure0 {
                    experimentSummariesDecoded0?.append(structure0)
                }
            }
        }
        experimentSummaries = experimentSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFeatureGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case featureGroupStatusEquals = "FeatureGroupStatusEquals"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case offlineStoreStatusEquals = "OfflineStoreStatusEquals"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let featureGroupStatusEquals = featureGroupStatusEquals {
            try encodeContainer.encode(featureGroupStatusEquals.rawValue, forKey: .featureGroupStatusEquals)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let offlineStoreStatusEquals = offlineStoreStatusEquals {
            try encodeContainer.encode(offlineStoreStatusEquals.rawValue, forKey: .offlineStoreStatusEquals)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListFeatureGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListFeatureGroupsInput: Swift.Equatable {
    /// Use this parameter to search for FeatureGroupss created after a specific date and time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// Use this parameter to search for FeatureGroupss created before a specific date and time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// A FeatureGroup status. Filters by FeatureGroup status.
    public var featureGroupStatusEquals: SageMakerClientTypes.FeatureGroupStatus?
    /// The maximum number of results returned by ListFeatureGroups.
    public var maxResults: Swift.Int?
    /// A string that partially matches one or more FeatureGroups names. Filters FeatureGroups by name.
    public var nameContains: Swift.String?
    /// A token to resume pagination of ListFeatureGroups results.
    public var nextToken: Swift.String?
    /// An OfflineStore status. Filters by OfflineStore status.
    public var offlineStoreStatusEquals: SageMakerClientTypes.OfflineStoreStatusValue?
    /// The value on which the feature group list is sorted.
    public var sortBy: SageMakerClientTypes.FeatureGroupSortBy?
    /// The order in which feature groups are listed.
    public var sortOrder: SageMakerClientTypes.FeatureGroupSortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        featureGroupStatusEquals: SageMakerClientTypes.FeatureGroupStatus? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        offlineStoreStatusEquals: SageMakerClientTypes.OfflineStoreStatusValue? = nil,
        sortBy: SageMakerClientTypes.FeatureGroupSortBy? = nil,
        sortOrder: SageMakerClientTypes.FeatureGroupSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.featureGroupStatusEquals = featureGroupStatusEquals
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.offlineStoreStatusEquals = offlineStoreStatusEquals
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListFeatureGroupsInputBody: Swift.Equatable {
    let nameContains: Swift.String?
    let featureGroupStatusEquals: SageMakerClientTypes.FeatureGroupStatus?
    let offlineStoreStatusEquals: SageMakerClientTypes.OfflineStoreStatusValue?
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let sortOrder: SageMakerClientTypes.FeatureGroupSortOrder?
    let sortBy: SageMakerClientTypes.FeatureGroupSortBy?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListFeatureGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case featureGroupStatusEquals = "FeatureGroupStatusEquals"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case offlineStoreStatusEquals = "OfflineStoreStatusEquals"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let featureGroupStatusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureGroupStatus.self, forKey: .featureGroupStatusEquals)
        featureGroupStatusEquals = featureGroupStatusEqualsDecoded
        let offlineStoreStatusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OfflineStoreStatusValue.self, forKey: .offlineStoreStatusEquals)
        offlineStoreStatusEquals = offlineStoreStatusEqualsDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureGroupSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureGroupSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFeatureGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFeatureGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListFeatureGroupsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFeatureGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListFeatureGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.featureGroupSummaries = output.featureGroupSummaries
            self.nextToken = output.nextToken
        } else {
            self.featureGroupSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListFeatureGroupsOutputResponse: Swift.Equatable {
    /// A summary of feature groups.
    /// This member is required.
    public var featureGroupSummaries: [SageMakerClientTypes.FeatureGroupSummary]?
    /// A token to resume pagination of ListFeatureGroups results.
    /// This member is required.
    public var nextToken: Swift.String?

    public init (
        featureGroupSummaries: [SageMakerClientTypes.FeatureGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.featureGroupSummaries = featureGroupSummaries
        self.nextToken = nextToken
    }
}

struct ListFeatureGroupsOutputResponseBody: Swift.Equatable {
    let featureGroupSummaries: [SageMakerClientTypes.FeatureGroupSummary]?
    let nextToken: Swift.String?
}

extension ListFeatureGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureGroupSummaries = "FeatureGroupSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.FeatureGroupSummary?].self, forKey: .featureGroupSummaries)
        var featureGroupSummariesDecoded0:[SageMakerClientTypes.FeatureGroupSummary]? = nil
        if let featureGroupSummariesContainer = featureGroupSummariesContainer {
            featureGroupSummariesDecoded0 = [SageMakerClientTypes.FeatureGroupSummary]()
            for structure0 in featureGroupSummariesContainer {
                if let structure0 = structure0 {
                    featureGroupSummariesDecoded0?.append(structure0)
                }
            }
        }
        featureGroupSummaries = featureGroupSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFlowDefinitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListFlowDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListFlowDefinitionsInput: Swift.Equatable {
    /// A filter that returns only flow definitions with a creation time greater than or equal to the specified timestamp.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only flow definitions that were created before the specified timestamp.
    public var creationTimeBefore: ClientRuntime.Date?
    /// The total number of items to return. If the total number of available items is more than the value specified in MaxResults, then a NextToken will be provided in the output that you can use to resume pagination.
    public var maxResults: Swift.Int?
    /// A token to resume pagination.
    public var nextToken: Swift.String?
    /// An optional value that specifies whether you want the results sorted in Ascending or Descending order.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

struct ListFlowDefinitionsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListFlowDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListFlowDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFlowDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListFlowDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFlowDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListFlowDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.flowDefinitionSummaries = output.flowDefinitionSummaries
            self.nextToken = output.nextToken
        } else {
            self.flowDefinitionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListFlowDefinitionsOutputResponse: Swift.Equatable {
    /// An array of objects describing the flow definitions.
    /// This member is required.
    public var flowDefinitionSummaries: [SageMakerClientTypes.FlowDefinitionSummary]?
    /// A token to resume pagination.
    public var nextToken: Swift.String?

    public init (
        flowDefinitionSummaries: [SageMakerClientTypes.FlowDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.flowDefinitionSummaries = flowDefinitionSummaries
        self.nextToken = nextToken
    }
}

struct ListFlowDefinitionsOutputResponseBody: Swift.Equatable {
    let flowDefinitionSummaries: [SageMakerClientTypes.FlowDefinitionSummary]?
    let nextToken: Swift.String?
}

extension ListFlowDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowDefinitionSummaries = "FlowDefinitionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowDefinitionSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.FlowDefinitionSummary?].self, forKey: .flowDefinitionSummaries)
        var flowDefinitionSummariesDecoded0:[SageMakerClientTypes.FlowDefinitionSummary]? = nil
        if let flowDefinitionSummariesContainer = flowDefinitionSummariesContainer {
            flowDefinitionSummariesDecoded0 = [SageMakerClientTypes.FlowDefinitionSummary]()
            for structure0 in flowDefinitionSummariesContainer {
                if let structure0 = structure0 {
                    flowDefinitionSummariesDecoded0?.append(structure0)
                }
            }
        }
        flowDefinitionSummaries = flowDefinitionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListHumanTaskUisInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListHumanTaskUisInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListHumanTaskUisInput: Swift.Equatable {
    /// A filter that returns only human task user interfaces with a creation time greater than or equal to the specified timestamp.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only human task user interfaces that were created before the specified timestamp.
    public var creationTimeBefore: ClientRuntime.Date?
    /// The total number of items to return. If the total number of available items is more than the value specified in MaxResults, then a NextToken will be provided in the output that you can use to resume pagination.
    public var maxResults: Swift.Int?
    /// A token to resume pagination.
    public var nextToken: Swift.String?
    /// An optional value that specifies whether you want the results sorted in Ascending or Descending order.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

struct ListHumanTaskUisInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListHumanTaskUisInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListHumanTaskUisOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListHumanTaskUisOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListHumanTaskUisOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHumanTaskUisOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListHumanTaskUisOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.humanTaskUiSummaries = output.humanTaskUiSummaries
            self.nextToken = output.nextToken
        } else {
            self.humanTaskUiSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListHumanTaskUisOutputResponse: Swift.Equatable {
    /// An array of objects describing the human task user interfaces.
    /// This member is required.
    public var humanTaskUiSummaries: [SageMakerClientTypes.HumanTaskUiSummary]?
    /// A token to resume pagination.
    public var nextToken: Swift.String?

    public init (
        humanTaskUiSummaries: [SageMakerClientTypes.HumanTaskUiSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.humanTaskUiSummaries = humanTaskUiSummaries
        self.nextToken = nextToken
    }
}

struct ListHumanTaskUisOutputResponseBody: Swift.Equatable {
    let humanTaskUiSummaries: [SageMakerClientTypes.HumanTaskUiSummary]?
    let nextToken: Swift.String?
}

extension ListHumanTaskUisOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiSummaries = "HumanTaskUiSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanTaskUiSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HumanTaskUiSummary?].self, forKey: .humanTaskUiSummaries)
        var humanTaskUiSummariesDecoded0:[SageMakerClientTypes.HumanTaskUiSummary]? = nil
        if let humanTaskUiSummariesContainer = humanTaskUiSummariesContainer {
            humanTaskUiSummariesDecoded0 = [SageMakerClientTypes.HumanTaskUiSummary]()
            for structure0 in humanTaskUiSummariesContainer {
                if let structure0 = structure0 {
                    humanTaskUiSummariesDecoded0?.append(structure0)
                }
            }
        }
        humanTaskUiSummaries = humanTaskUiSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListHyperParameterTuningJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListHyperParameterTuningJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListHyperParameterTuningJobsInput: Swift.Equatable {
    /// A filter that returns only tuning jobs that were created after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only tuning jobs that were created before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only tuning jobs that were modified after the specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only tuning jobs that were modified before the specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of tuning jobs to return. The default value is 10.
    public var maxResults: Swift.Int?
    /// A string in the tuning job name. This filter returns only tuning jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListHyperParameterTuningJobs request was truncated, the response includes a NextToken. To retrieve the next set of tuning jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is Name.
    public var sortBy: SageMakerClientTypes.HyperParameterTuningJobSortByOptions?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only tuning jobs with the specified status.
    public var statusEquals: SageMakerClientTypes.HyperParameterTuningJobStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.HyperParameterTuningJobSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.HyperParameterTuningJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListHyperParameterTuningJobsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let sortBy: SageMakerClientTypes.HyperParameterTuningJobSortByOptions?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nameContains: Swift.String?
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let statusEquals: SageMakerClientTypes.HyperParameterTuningJobStatus?
}

extension ListHyperParameterTuningJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobSortByOptions.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
    }
}

extension ListHyperParameterTuningJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListHyperParameterTuningJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListHyperParameterTuningJobsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHyperParameterTuningJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListHyperParameterTuningJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hyperParameterTuningJobSummaries = output.hyperParameterTuningJobSummaries
            self.nextToken = output.nextToken
        } else {
            self.hyperParameterTuningJobSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListHyperParameterTuningJobsOutputResponse: Swift.Equatable {
    /// A list of [HyperParameterTuningJobSummary] objects that describe the tuning jobs that the ListHyperParameterTuningJobs request returned.
    /// This member is required.
    public var hyperParameterTuningJobSummaries: [SageMakerClientTypes.HyperParameterTuningJobSummary]?
    /// If the result of this ListHyperParameterTuningJobs request was truncated, the response includes a NextToken. To retrieve the next set of tuning jobs, use the token in the next request.
    public var nextToken: Swift.String?

    public init (
        hyperParameterTuningJobSummaries: [SageMakerClientTypes.HyperParameterTuningJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hyperParameterTuningJobSummaries = hyperParameterTuningJobSummaries
        self.nextToken = nextToken
    }
}

struct ListHyperParameterTuningJobsOutputResponseBody: Swift.Equatable {
    let hyperParameterTuningJobSummaries: [SageMakerClientTypes.HyperParameterTuningJobSummary]?
    let nextToken: Swift.String?
}

extension ListHyperParameterTuningJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobSummaries = "HyperParameterTuningJobSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterTuningJobSummary?].self, forKey: .hyperParameterTuningJobSummaries)
        var hyperParameterTuningJobSummariesDecoded0:[SageMakerClientTypes.HyperParameterTuningJobSummary]? = nil
        if let hyperParameterTuningJobSummariesContainer = hyperParameterTuningJobSummariesContainer {
            hyperParameterTuningJobSummariesDecoded0 = [SageMakerClientTypes.HyperParameterTuningJobSummary]()
            for structure0 in hyperParameterTuningJobSummariesContainer {
                if let structure0 = structure0 {
                    hyperParameterTuningJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        hyperParameterTuningJobSummaries = hyperParameterTuningJobSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListImageVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case imageName = "ImageName"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListImageVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListImageVersionsInput: Swift.Equatable {
    /// A filter that returns only versions created on or after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only versions created on or before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// The name of the image to list the versions of.
    /// This member is required.
    public var imageName: Swift.String?
    /// A filter that returns only versions modified on or after the specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only versions modified on or before the specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of versions to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListImageVersions didn't return the full set of versions, the call returns a token for getting the next set of versions.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CREATION_TIME.
    public var sortBy: SageMakerClientTypes.ImageVersionSortBy?
    /// The sort order. The default value is DESCENDING.
    public var sortOrder: SageMakerClientTypes.ImageVersionSortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        imageName: Swift.String? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ImageVersionSortBy? = nil,
        sortOrder: SageMakerClientTypes.ImageVersionSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.imageName = imageName
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListImageVersionsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let imageName: Swift.String?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let sortBy: SageMakerClientTypes.ImageVersionSortBy?
    let sortOrder: SageMakerClientTypes.ImageVersionSortOrder?
}

extension ListImageVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case imageName = "ImageName"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageVersionSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageVersionSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListImageVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListImageVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListImageVersionsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListImageVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListImageVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.imageVersions = output.imageVersions
            self.nextToken = output.nextToken
        } else {
            self.imageVersions = nil
            self.nextToken = nil
        }
    }
}

public struct ListImageVersionsOutputResponse: Swift.Equatable {
    /// A list of versions and their properties.
    public var imageVersions: [SageMakerClientTypes.ImageVersion]?
    /// A token for getting the next set of versions, if there are any.
    public var nextToken: Swift.String?

    public init (
        imageVersions: [SageMakerClientTypes.ImageVersion]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.imageVersions = imageVersions
        self.nextToken = nextToken
    }
}

struct ListImageVersionsOutputResponseBody: Swift.Equatable {
    let imageVersions: [SageMakerClientTypes.ImageVersion]?
    let nextToken: Swift.String?
}

extension ListImageVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageVersions = "ImageVersions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageVersionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ImageVersion?].self, forKey: .imageVersions)
        var imageVersionsDecoded0:[SageMakerClientTypes.ImageVersion]? = nil
        if let imageVersionsContainer = imageVersionsContainer {
            imageVersionsDecoded0 = [SageMakerClientTypes.ImageVersion]()
            for structure0 in imageVersionsContainer {
                if let structure0 = structure0 {
                    imageVersionsDecoded0?.append(structure0)
                }
            }
        }
        imageVersions = imageVersionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListImagesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListImagesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListImagesInput: Swift.Equatable {
    /// A filter that returns only images created on or after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only images created on or before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only images modified on or after the specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only images modified on or before the specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of images to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// A filter that returns only images whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the previous call to ListImages didn't return the full set of images, the call returns a token for getting the next set of images.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CREATION_TIME.
    public var sortBy: SageMakerClientTypes.ImageSortBy?
    /// The sort order. The default value is DESCENDING.
    public var sortOrder: SageMakerClientTypes.ImageSortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ImageSortBy? = nil,
        sortOrder: SageMakerClientTypes.ImageSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListImagesInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let nextToken: Swift.String?
    let sortBy: SageMakerClientTypes.ImageSortBy?
    let sortOrder: SageMakerClientTypes.ImageSortOrder?
}

extension ListImagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListImagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListImagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListImagesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListImagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListImagesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.images = output.images
            self.nextToken = output.nextToken
        } else {
            self.images = nil
            self.nextToken = nil
        }
    }
}

public struct ListImagesOutputResponse: Swift.Equatable {
    /// A list of images and their properties.
    public var images: [SageMakerClientTypes.Image]?
    /// A token for getting the next set of images, if there are any.
    public var nextToken: Swift.String?

    public init (
        images: [SageMakerClientTypes.Image]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.images = images
        self.nextToken = nextToken
    }
}

struct ListImagesOutputResponseBody: Swift.Equatable {
    let images: [SageMakerClientTypes.Image]?
    let nextToken: Swift.String?
}

extension ListImagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case images = "Images"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imagesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Image?].self, forKey: .images)
        var imagesDecoded0:[SageMakerClientTypes.Image]? = nil
        if let imagesContainer = imagesContainer {
            imagesDecoded0 = [SageMakerClientTypes.Image]()
            for structure0 in imagesContainer {
                if let structure0 = structure0 {
                    imagesDecoded0?.append(structure0)
                }
            }
        }
        images = imagesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInferenceRecommendationsJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListInferenceRecommendationsJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInferenceRecommendationsJobsInput: Swift.Equatable {
    /// A filter that returns only jobs created after the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only jobs created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only jobs that were last modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only jobs that were last modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of recommendations to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the job name. This filter returns only recommendations whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListInferenceRecommendationsJobsRequest request was truncated, the response includes a NextToken. To retrieve the next set of recommendations, use the token in the next request.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results.
    public var sortBy: SageMakerClientTypes.ListInferenceRecommendationsJobsSortBy?
    /// The sort order for the results.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only inference recommendations jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.RecommendationJobStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListInferenceRecommendationsJobsSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.RecommendationJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListInferenceRecommendationsJobsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let nameContains: Swift.String?
    let statusEquals: SageMakerClientTypes.RecommendationJobStatus?
    let sortBy: SageMakerClientTypes.ListInferenceRecommendationsJobsSortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListInferenceRecommendationsJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ListInferenceRecommendationsJobsSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListInferenceRecommendationsJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInferenceRecommendationsJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInferenceRecommendationsJobsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInferenceRecommendationsJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInferenceRecommendationsJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceRecommendationsJobs = output.inferenceRecommendationsJobs
            self.nextToken = output.nextToken
        } else {
            self.inferenceRecommendationsJobs = nil
            self.nextToken = nil
        }
    }
}

public struct ListInferenceRecommendationsJobsOutputResponse: Swift.Equatable {
    /// The recommendations created from the Amazon SageMaker Inference Recommender job.
    /// This member is required.
    public var inferenceRecommendationsJobs: [SageMakerClientTypes.InferenceRecommendationsJob]?
    /// A token for getting the next set of recommendations, if there are any.
    public var nextToken: Swift.String?

    public init (
        inferenceRecommendationsJobs: [SageMakerClientTypes.InferenceRecommendationsJob]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceRecommendationsJobs = inferenceRecommendationsJobs
        self.nextToken = nextToken
    }
}

struct ListInferenceRecommendationsJobsOutputResponseBody: Swift.Equatable {
    let inferenceRecommendationsJobs: [SageMakerClientTypes.InferenceRecommendationsJob]?
    let nextToken: Swift.String?
}

extension ListInferenceRecommendationsJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceRecommendationsJobs = "InferenceRecommendationsJobs"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceRecommendationsJobsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.InferenceRecommendationsJob?].self, forKey: .inferenceRecommendationsJobs)
        var inferenceRecommendationsJobsDecoded0:[SageMakerClientTypes.InferenceRecommendationsJob]? = nil
        if let inferenceRecommendationsJobsContainer = inferenceRecommendationsJobsContainer {
            inferenceRecommendationsJobsDecoded0 = [SageMakerClientTypes.InferenceRecommendationsJob]()
            for structure0 in inferenceRecommendationsJobsContainer {
                if let structure0 = structure0 {
                    inferenceRecommendationsJobsDecoded0?.append(structure0)
                }
            }
        }
        inferenceRecommendationsJobs = inferenceRecommendationsJobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SageMakerClientTypes {
    public enum ListInferenceRecommendationsJobsSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [ListInferenceRecommendationsJobsSortBy] {
            return [
                .creationTime,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListInferenceRecommendationsJobsSortBy(rawValue: rawValue) ?? ListInferenceRecommendationsJobsSortBy.sdkUnknown(rawValue)
        }
    }
}

extension ListLabelingJobsForWorkteamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case jobReferenceCodeContains = "JobReferenceCodeContains"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case workteamArn = "WorkteamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let jobReferenceCodeContains = jobReferenceCodeContains {
            try encodeContainer.encode(jobReferenceCodeContains, forKey: .jobReferenceCodeContains)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let workteamArn = workteamArn {
            try encodeContainer.encode(workteamArn, forKey: .workteamArn)
        }
    }
}

extension ListLabelingJobsForWorkteamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLabelingJobsForWorkteamInput: Swift.Equatable {
    /// A filter that returns only labeling jobs created after the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only labeling jobs created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter the limits jobs to only the ones whose job reference code contains the specified string.
    public var jobReferenceCodeContains: Swift.String?
    /// The maximum number of labeling jobs to return in each page of the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListLabelingJobsForWorkteam request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ListLabelingJobsForWorkteamSortByOptions?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.
    /// This member is required.
    public var workteamArn: Swift.String?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        jobReferenceCodeContains: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListLabelingJobsForWorkteamSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        workteamArn: Swift.String? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.jobReferenceCodeContains = jobReferenceCodeContains
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.workteamArn = workteamArn
    }
}

struct ListLabelingJobsForWorkteamInputBody: Swift.Equatable {
    let workteamArn: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let jobReferenceCodeContains: Swift.String?
    let sortBy: SageMakerClientTypes.ListLabelingJobsForWorkteamSortByOptions?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListLabelingJobsForWorkteamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case jobReferenceCodeContains = "JobReferenceCodeContains"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case workteamArn = "WorkteamArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let jobReferenceCodeContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobReferenceCodeContains)
        jobReferenceCodeContains = jobReferenceCodeContainsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ListLabelingJobsForWorkteamSortByOptions.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListLabelingJobsForWorkteamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLabelingJobsForWorkteamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLabelingJobsForWorkteamOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLabelingJobsForWorkteamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLabelingJobsForWorkteamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.labelingJobSummaryList = output.labelingJobSummaryList
            self.nextToken = output.nextToken
        } else {
            self.labelingJobSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListLabelingJobsForWorkteamOutputResponse: Swift.Equatable {
    /// An array of LabelingJobSummary objects, each describing a labeling job.
    /// This member is required.
    public var labelingJobSummaryList: [SageMakerClientTypes.LabelingJobForWorkteamSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of labeling jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        labelingJobSummaryList: [SageMakerClientTypes.LabelingJobForWorkteamSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelingJobSummaryList = labelingJobSummaryList
        self.nextToken = nextToken
    }
}

struct ListLabelingJobsForWorkteamOutputResponseBody: Swift.Equatable {
    let labelingJobSummaryList: [SageMakerClientTypes.LabelingJobForWorkteamSummary]?
    let nextToken: Swift.String?
}

extension ListLabelingJobsForWorkteamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelingJobSummaryList = "LabelingJobSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobSummaryListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.LabelingJobForWorkteamSummary?].self, forKey: .labelingJobSummaryList)
        var labelingJobSummaryListDecoded0:[SageMakerClientTypes.LabelingJobForWorkteamSummary]? = nil
        if let labelingJobSummaryListContainer = labelingJobSummaryListContainer {
            labelingJobSummaryListDecoded0 = [SageMakerClientTypes.LabelingJobForWorkteamSummary]()
            for structure0 in labelingJobSummaryListContainer {
                if let structure0 = structure0 {
                    labelingJobSummaryListDecoded0?.append(structure0)
                }
            }
        }
        labelingJobSummaryList = labelingJobSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SageMakerClientTypes {
    public enum ListLabelingJobsForWorkteamSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case sdkUnknown(Swift.String)

        public static var allCases: [ListLabelingJobsForWorkteamSortByOptions] {
            return [
                .creationTime,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListLabelingJobsForWorkteamSortByOptions(rawValue: rawValue) ?? ListLabelingJobsForWorkteamSortByOptions.sdkUnknown(rawValue)
        }
    }
}

extension ListLabelingJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListLabelingJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLabelingJobsInput: Swift.Equatable {
    /// A filter that returns only labeling jobs created after the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only labeling jobs created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only labeling jobs modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only labeling jobs modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of labeling jobs to return in each page of the response.
    public var maxResults: Swift.Int?
    /// A string in the labeling job name. This filter returns only labeling jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListLabelingJobs request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only labeling jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.LabelingJobStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.LabelingJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListLabelingJobsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let nameContains: Swift.String?
    let sortBy: SageMakerClientTypes.SortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let statusEquals: SageMakerClientTypes.LabelingJobStatus?
}

extension ListLabelingJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
    }
}

extension ListLabelingJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLabelingJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLabelingJobsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLabelingJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLabelingJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.labelingJobSummaryList = output.labelingJobSummaryList
            self.nextToken = output.nextToken
        } else {
            self.labelingJobSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListLabelingJobsOutputResponse: Swift.Equatable {
    /// An array of LabelingJobSummary objects, each describing a labeling job.
    public var labelingJobSummaryList: [SageMakerClientTypes.LabelingJobSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of labeling jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        labelingJobSummaryList: [SageMakerClientTypes.LabelingJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelingJobSummaryList = labelingJobSummaryList
        self.nextToken = nextToken
    }
}

struct ListLabelingJobsOutputResponseBody: Swift.Equatable {
    let labelingJobSummaryList: [SageMakerClientTypes.LabelingJobSummary]?
    let nextToken: Swift.String?
}

extension ListLabelingJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelingJobSummaryList = "LabelingJobSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobSummaryListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.LabelingJobSummary?].self, forKey: .labelingJobSummaryList)
        var labelingJobSummaryListDecoded0:[SageMakerClientTypes.LabelingJobSummary]? = nil
        if let labelingJobSummaryListContainer = labelingJobSummaryListContainer {
            labelingJobSummaryListDecoded0 = [SageMakerClientTypes.LabelingJobSummary]()
            for structure0 in labelingJobSummaryListContainer {
                if let structure0 = structure0 {
                    labelingJobSummaryListDecoded0?.append(structure0)
                }
            }
        }
        labelingJobSummaryList = labelingJobSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListLineageGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListLineageGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLineageGroupsInput: Swift.Equatable {
    /// A timestamp to filter against lineage groups created after a certain point in time.
    public var createdAfter: ClientRuntime.Date?
    /// A timestamp to filter against lineage groups created before a certain point in time.
    public var createdBefore: ClientRuntime.Date?
    /// The maximum number of endpoints to return in the response. This value defaults to 10.
    public var maxResults: Swift.Int?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortLineageGroupsBy?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortLineageGroupsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListLineageGroupsInputBody: Swift.Equatable {
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortLineageGroupsBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListLineageGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortLineageGroupsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListLineageGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLineageGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLineageGroupsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLineageGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLineageGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lineageGroupSummaries = output.lineageGroupSummaries
            self.nextToken = output.nextToken
        } else {
            self.lineageGroupSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListLineageGroupsOutputResponse: Swift.Equatable {
    /// A list of lineage groups and their properties.
    public var lineageGroupSummaries: [SageMakerClientTypes.LineageGroupSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        lineageGroupSummaries: [SageMakerClientTypes.LineageGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lineageGroupSummaries = lineageGroupSummaries
        self.nextToken = nextToken
    }
}

struct ListLineageGroupsOutputResponseBody: Swift.Equatable {
    let lineageGroupSummaries: [SageMakerClientTypes.LineageGroupSummary]?
    let nextToken: Swift.String?
}

extension ListLineageGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineageGroupSummaries = "LineageGroupSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineageGroupSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.LineageGroupSummary?].self, forKey: .lineageGroupSummaries)
        var lineageGroupSummariesDecoded0:[SageMakerClientTypes.LineageGroupSummary]? = nil
        if let lineageGroupSummariesContainer = lineageGroupSummariesContainer {
            lineageGroupSummariesDecoded0 = [SageMakerClientTypes.LineageGroupSummary]()
            for structure0 in lineageGroupSummariesContainer {
                if let structure0 = structure0 {
                    lineageGroupSummariesDecoded0?.append(structure0)
                }
            }
        }
        lineageGroupSummaries = lineageGroupSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListModelBiasJobDefinitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListModelBiasJobDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelBiasJobDefinitionsInput: Swift.Equatable {
    /// A filter that returns only model bias jobs created after a specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only model bias jobs created before a specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// Name of the endpoint to monitor for model bias.
    public var endpointName: Swift.String?
    /// The maximum number of model bias jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// Filter for model bias jobs whose name contains a specified string.
    public var nameContains: Swift.String?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?
    /// Whether to sort results by the Name or CreationTime field. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListModelBiasJobDefinitionsInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
}

extension ListModelBiasJobDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringJobDefinitionSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
    }
}

extension ListModelBiasJobDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListModelBiasJobDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListModelBiasJobDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListModelBiasJobDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListModelBiasJobDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionSummaries = output.jobDefinitionSummaries
            self.nextToken = output.nextToken
        } else {
            self.jobDefinitionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelBiasJobDefinitionsOutputResponse: Swift.Equatable {
    /// A JSON array in which each element is a summary for a model bias jobs.
    /// This member is required.
    public var jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitionSummaries = jobDefinitionSummaries
        self.nextToken = nextToken
    }
}

struct ListModelBiasJobDefinitionsOutputResponseBody: Swift.Equatable {
    let jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    let nextToken: Swift.String?
}

extension ListModelBiasJobDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionSummaries = "JobDefinitionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringJobDefinitionSummary?].self, forKey: .jobDefinitionSummaries)
        var jobDefinitionSummariesDecoded0:[SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil
        if let jobDefinitionSummariesContainer = jobDefinitionSummariesContainer {
            jobDefinitionSummariesDecoded0 = [SageMakerClientTypes.MonitoringJobDefinitionSummary]()
            for structure0 in jobDefinitionSummariesContainer {
                if let structure0 = structure0 {
                    jobDefinitionSummariesDecoded0?.append(structure0)
                }
            }
        }
        jobDefinitionSummaries = jobDefinitionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListModelExplainabilityJobDefinitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListModelExplainabilityJobDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelExplainabilityJobDefinitionsInput: Swift.Equatable {
    /// A filter that returns only model explainability jobs created after a specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only model explainability jobs created before a specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// Name of the endpoint to monitor for model explainability.
    public var endpointName: Swift.String?
    /// The maximum number of jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// Filter for model explainability jobs whose name contains a specified string.
    public var nameContains: Swift.String?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?
    /// Whether to sort results by the Name or CreationTime field. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListModelExplainabilityJobDefinitionsInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
}

extension ListModelExplainabilityJobDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringJobDefinitionSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
    }
}

extension ListModelExplainabilityJobDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListModelExplainabilityJobDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListModelExplainabilityJobDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListModelExplainabilityJobDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListModelExplainabilityJobDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionSummaries = output.jobDefinitionSummaries
            self.nextToken = output.nextToken
        } else {
            self.jobDefinitionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelExplainabilityJobDefinitionsOutputResponse: Swift.Equatable {
    /// A JSON array in which each element is a summary for a explainability bias jobs.
    /// This member is required.
    public var jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitionSummaries = jobDefinitionSummaries
        self.nextToken = nextToken
    }
}

struct ListModelExplainabilityJobDefinitionsOutputResponseBody: Swift.Equatable {
    let jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    let nextToken: Swift.String?
}

extension ListModelExplainabilityJobDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionSummaries = "JobDefinitionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringJobDefinitionSummary?].self, forKey: .jobDefinitionSummaries)
        var jobDefinitionSummariesDecoded0:[SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil
        if let jobDefinitionSummariesContainer = jobDefinitionSummariesContainer {
            jobDefinitionSummariesDecoded0 = [SageMakerClientTypes.MonitoringJobDefinitionSummary]()
            for structure0 in jobDefinitionSummariesContainer {
                if let structure0 = structure0 {
                    jobDefinitionSummariesDecoded0?.append(structure0)
                }
            }
        }
        jobDefinitionSummaries = jobDefinitionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListModelMetadataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case searchExpression = "SearchExpression"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let searchExpression = searchExpression {
            try encodeContainer.encode(searchExpression, forKey: .searchExpression)
        }
    }
}

extension ListModelMetadataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelMetadataInput: Swift.Equatable {
    /// The maximum number of models to return in the response.
    public var maxResults: Swift.Int?
    /// If the response to a previous ListModelMetadataResponse request was truncated, the response includes a NextToken. To retrieve the next set of model metadata, use the token in the next request.
    public var nextToken: Swift.String?
    /// One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. Specify the Framework, FrameworkVersion, Domain or Task to filter supported. Filter names and values are case-sensitive.
    public var searchExpression: SageMakerClientTypes.ModelMetadataSearchExpression?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        searchExpression: SageMakerClientTypes.ModelMetadataSearchExpression? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.searchExpression = searchExpression
    }
}

struct ListModelMetadataInputBody: Swift.Equatable {
    let searchExpression: SageMakerClientTypes.ModelMetadataSearchExpression?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListModelMetadataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case searchExpression = "SearchExpression"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let searchExpressionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelMetadataSearchExpression.self, forKey: .searchExpression)
        searchExpression = searchExpressionDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListModelMetadataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListModelMetadataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListModelMetadataOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListModelMetadataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListModelMetadataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelMetadataSummaries = output.modelMetadataSummaries
            self.nextToken = output.nextToken
        } else {
            self.modelMetadataSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelMetadataOutputResponse: Swift.Equatable {
    /// A structure that holds model metadata.
    /// This member is required.
    public var modelMetadataSummaries: [SageMakerClientTypes.ModelMetadataSummary]?
    /// A token for getting the next set of recommendations, if there are any.
    public var nextToken: Swift.String?

    public init (
        modelMetadataSummaries: [SageMakerClientTypes.ModelMetadataSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelMetadataSummaries = modelMetadataSummaries
        self.nextToken = nextToken
    }
}

struct ListModelMetadataOutputResponseBody: Swift.Equatable {
    let modelMetadataSummaries: [SageMakerClientTypes.ModelMetadataSummary]?
    let nextToken: Swift.String?
}

extension ListModelMetadataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelMetadataSummaries = "ModelMetadataSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelMetadataSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelMetadataSummary?].self, forKey: .modelMetadataSummaries)
        var modelMetadataSummariesDecoded0:[SageMakerClientTypes.ModelMetadataSummary]? = nil
        if let modelMetadataSummariesContainer = modelMetadataSummariesContainer {
            modelMetadataSummariesDecoded0 = [SageMakerClientTypes.ModelMetadataSummary]()
            for structure0 in modelMetadataSummariesContainer {
                if let structure0 = structure0 {
                    modelMetadataSummariesDecoded0?.append(structure0)
                }
            }
        }
        modelMetadataSummaries = modelMetadataSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListModelPackageGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListModelPackageGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelPackageGroupsInput: Swift.Equatable {
    /// A filter that returns only model groups created after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only model groups created before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the model group name. This filter returns only model groups whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListModelPackageGroups request was truncated, the response includes a NextToken. To retrieve the next set of model groups, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ModelPackageGroupSortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ModelPackageGroupSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListModelPackageGroupsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let nextToken: Swift.String?
    let sortBy: SageMakerClientTypes.ModelPackageGroupSortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListModelPackageGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageGroupSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListModelPackageGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListModelPackageGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListModelPackageGroupsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListModelPackageGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListModelPackageGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelPackageGroupSummaryList = output.modelPackageGroupSummaryList
            self.nextToken = output.nextToken
        } else {
            self.modelPackageGroupSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelPackageGroupsOutputResponse: Swift.Equatable {
    /// A list of summaries of the model groups in your Amazon Web Services account.
    /// This member is required.
    public var modelPackageGroupSummaryList: [SageMakerClientTypes.ModelPackageGroupSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of model groups, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        modelPackageGroupSummaryList: [SageMakerClientTypes.ModelPackageGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelPackageGroupSummaryList = modelPackageGroupSummaryList
        self.nextToken = nextToken
    }
}

struct ListModelPackageGroupsOutputResponseBody: Swift.Equatable {
    let modelPackageGroupSummaryList: [SageMakerClientTypes.ModelPackageGroupSummary]?
    let nextToken: Swift.String?
}

extension ListModelPackageGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupSummaryList = "ModelPackageGroupSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupSummaryListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelPackageGroupSummary?].self, forKey: .modelPackageGroupSummaryList)
        var modelPackageGroupSummaryListDecoded0:[SageMakerClientTypes.ModelPackageGroupSummary]? = nil
        if let modelPackageGroupSummaryListContainer = modelPackageGroupSummaryListContainer {
            modelPackageGroupSummaryListDecoded0 = [SageMakerClientTypes.ModelPackageGroupSummary]()
            for structure0 in modelPackageGroupSummaryListContainer {
                if let structure0 = structure0 {
                    modelPackageGroupSummaryListDecoded0?.append(structure0)
                }
            }
        }
        modelPackageGroupSummaryList = modelPackageGroupSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListModelPackagesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageType = "ModelPackageType"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelApprovalStatus = modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageType = modelPackageType {
            try encodeContainer.encode(modelPackageType.rawValue, forKey: .modelPackageType)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListModelPackagesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelPackagesInput: Swift.Equatable {
    /// A filter that returns only model packages created after the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only model packages created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// The maximum number of model packages to return in the response.
    public var maxResults: Swift.Int?
    /// A filter that returns only the model packages with the specified approval status.
    public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    /// A filter that returns only model versions that belong to the specified model group.
    public var modelPackageGroupName: Swift.String?
    /// A filter that returns onlyl the model packages of the specified type. This can be one of the following values.
    ///
    /// * VERSIONED - List only versioned models.
    ///
    /// * UNVERSIONED - List only unversioined models.
    ///
    /// * BOTH - List both versioned and unversioned models.
    public var modelPackageType: SageMakerClientTypes.ModelPackageType?
    /// A string in the model package name. This filter returns only model packages whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListModelPackages request was truncated, the response includes a NextToken. To retrieve the next set of model packages, use the token in the next request.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ModelPackageSortBy?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
        modelPackageGroupName: Swift.String? = nil,
        modelPackageType: SageMakerClientTypes.ModelPackageType? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ModelPackageSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.modelApprovalStatus = modelApprovalStatus
        self.modelPackageGroupName = modelPackageGroupName
        self.modelPackageType = modelPackageType
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListModelPackagesInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    let modelPackageGroupName: Swift.String?
    let modelPackageType: SageMakerClientTypes.ModelPackageType?
    let nextToken: Swift.String?
    let sortBy: SageMakerClientTypes.ModelPackageSortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListModelPackagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageType = "ModelPackageType"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageType.self, forKey: .modelPackageType)
        modelPackageType = modelPackageTypeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListModelPackagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListModelPackagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListModelPackagesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListModelPackagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListModelPackagesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelPackageSummaryList = output.modelPackageSummaryList
            self.nextToken = output.nextToken
        } else {
            self.modelPackageSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelPackagesOutputResponse: Swift.Equatable {
    /// An array of ModelPackageSummary objects, each of which lists a model package.
    /// This member is required.
    public var modelPackageSummaryList: [SageMakerClientTypes.ModelPackageSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of model packages, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        modelPackageSummaryList: [SageMakerClientTypes.ModelPackageSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelPackageSummaryList = modelPackageSummaryList
        self.nextToken = nextToken
    }
}

struct ListModelPackagesOutputResponseBody: Swift.Equatable {
    let modelPackageSummaryList: [SageMakerClientTypes.ModelPackageSummary]?
    let nextToken: Swift.String?
}

extension ListModelPackagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageSummaryList = "ModelPackageSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageSummaryListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelPackageSummary?].self, forKey: .modelPackageSummaryList)
        var modelPackageSummaryListDecoded0:[SageMakerClientTypes.ModelPackageSummary]? = nil
        if let modelPackageSummaryListContainer = modelPackageSummaryListContainer {
            modelPackageSummaryListDecoded0 = [SageMakerClientTypes.ModelPackageSummary]()
            for structure0 in modelPackageSummaryListContainer {
                if let structure0 = structure0 {
                    modelPackageSummaryListDecoded0?.append(structure0)
                }
            }
        }
        modelPackageSummaryList = modelPackageSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListModelQualityJobDefinitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListModelQualityJobDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelQualityJobDefinitionsInput: Swift.Equatable {
    /// A filter that returns only model quality monitoring job definitions created after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only model quality monitoring job definitions created before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only model quality monitoring job definitions that are associated with the specified endpoint.
    public var endpointName: Swift.String?
    /// The maximum number of results to return in a call to ListModelQualityJobDefinitions.
    public var maxResults: Swift.Int?
    /// A string in the transform job name. This filter returns only model quality monitoring job definitions whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListModelQualityJobDefinitions request was truncated, the response includes a NextToken. To retrieve the next set of model quality monitoring job definitions, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListModelQualityJobDefinitionsInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
}

extension ListModelQualityJobDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringJobDefinitionSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
    }
}

extension ListModelQualityJobDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListModelQualityJobDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListModelQualityJobDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListModelQualityJobDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListModelQualityJobDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionSummaries = output.jobDefinitionSummaries
            self.nextToken = output.nextToken
        } else {
            self.jobDefinitionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelQualityJobDefinitionsOutputResponse: Swift.Equatable {
    /// A list of summaries of model quality monitoring job definitions.
    /// This member is required.
    public var jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of model quality monitoring job definitions, use it in the next request.
    public var nextToken: Swift.String?

    public init (
        jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitionSummaries = jobDefinitionSummaries
        self.nextToken = nextToken
    }
}

struct ListModelQualityJobDefinitionsOutputResponseBody: Swift.Equatable {
    let jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    let nextToken: Swift.String?
}

extension ListModelQualityJobDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionSummaries = "JobDefinitionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringJobDefinitionSummary?].self, forKey: .jobDefinitionSummaries)
        var jobDefinitionSummariesDecoded0:[SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil
        if let jobDefinitionSummariesContainer = jobDefinitionSummariesContainer {
            jobDefinitionSummariesDecoded0 = [SageMakerClientTypes.MonitoringJobDefinitionSummary]()
            for structure0 in jobDefinitionSummariesContainer {
                if let structure0 = structure0 {
                    jobDefinitionSummariesDecoded0?.append(structure0)
                }
            }
        }
        jobDefinitionSummaries = jobDefinitionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListModelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListModelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListModelsInput: Swift.Equatable {
    /// A filter that returns only models with a creation time greater than or equal to the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only models created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// The maximum number of models to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the model name. This filter returns only models whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListModels request was truncated, the response includes a NextToken. To retrieve the next set of models, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sorts the list of results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ModelSortKey?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.OrderKey?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ModelSortKey? = nil,
        sortOrder: SageMakerClientTypes.OrderKey? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListModelsInputBody: Swift.Equatable {
    let sortBy: SageMakerClientTypes.ModelSortKey?
    let sortOrder: SageMakerClientTypes.OrderKey?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
}

extension ListModelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OrderKey.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
    }
}

extension ListModelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListModelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListModelsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListModelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListModelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.models = output.models
            self.nextToken = output.nextToken
        } else {
            self.models = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelsOutputResponse: Swift.Equatable {
    /// An array of ModelSummary objects, each of which lists a model.
    /// This member is required.
    public var models: [SageMakerClientTypes.ModelSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of models, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        models: [SageMakerClientTypes.ModelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.models = models
        self.nextToken = nextToken
    }
}

struct ListModelsOutputResponseBody: Swift.Equatable {
    let models: [SageMakerClientTypes.ModelSummary]?
    let nextToken: Swift.String?
}

extension ListModelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case models = "Models"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelSummary?].self, forKey: .models)
        var modelsDecoded0:[SageMakerClientTypes.ModelSummary]? = nil
        if let modelsContainer = modelsContainer {
            modelsDecoded0 = [SageMakerClientTypes.ModelSummary]()
            for structure0 in modelsContainer {
                if let structure0 = structure0 {
                    modelsDecoded0?.append(structure0)
                }
            }
        }
        models = modelsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMonitoringExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringTypeEquals = "MonitoringTypeEquals"
        case nextToken = "NextToken"
        case scheduledTimeAfter = "ScheduledTimeAfter"
        case scheduledTimeBefore = "ScheduledTimeBefore"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let monitoringJobDefinitionName = monitoringJobDefinitionName {
            try encodeContainer.encode(monitoringJobDefinitionName, forKey: .monitoringJobDefinitionName)
        }
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
        if let monitoringTypeEquals = monitoringTypeEquals {
            try encodeContainer.encode(monitoringTypeEquals.rawValue, forKey: .monitoringTypeEquals)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let scheduledTimeAfter = scheduledTimeAfter {
            try encodeContainer.encode(scheduledTimeAfter.timeIntervalSince1970, forKey: .scheduledTimeAfter)
        }
        if let scheduledTimeBefore = scheduledTimeBefore {
            try encodeContainer.encode(scheduledTimeBefore.timeIntervalSince1970, forKey: .scheduledTimeBefore)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListMonitoringExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMonitoringExecutionsInput: Swift.Equatable {
    /// A filter that returns only jobs created after a specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only jobs created before a specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// Name of a specific endpoint to fetch jobs for.
    public var endpointName: Swift.String?
    /// A filter that returns only jobs modified before a specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only jobs modified after a specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// Gets a list of the monitoring job runs of the specified monitoring job definitions.
    public var monitoringJobDefinitionName: Swift.String?
    /// Name of a specific schedule to fetch jobs for.
    public var monitoringScheduleName: Swift.String?
    /// A filter that returns only the monitoring job runs of the specified monitoring type.
    public var monitoringTypeEquals: SageMakerClientTypes.MonitoringType?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?
    /// Filter for jobs scheduled after a specified time.
    public var scheduledTimeAfter: ClientRuntime.Date?
    /// Filter for jobs scheduled before a specified time.
    public var scheduledTimeBefore: ClientRuntime.Date?
    /// Whether to sort results by Status, CreationTime, ScheduledTime field. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringExecutionSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.ExecutionStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        monitoringJobDefinitionName: Swift.String? = nil,
        monitoringScheduleName: Swift.String? = nil,
        monitoringTypeEquals: SageMakerClientTypes.MonitoringType? = nil,
        nextToken: Swift.String? = nil,
        scheduledTimeAfter: ClientRuntime.Date? = nil,
        scheduledTimeBefore: ClientRuntime.Date? = nil,
        sortBy: SageMakerClientTypes.MonitoringExecutionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.ExecutionStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.monitoringJobDefinitionName = monitoringJobDefinitionName
        self.monitoringScheduleName = monitoringScheduleName
        self.monitoringTypeEquals = monitoringTypeEquals
        self.nextToken = nextToken
        self.scheduledTimeAfter = scheduledTimeAfter
        self.scheduledTimeBefore = scheduledTimeBefore
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListMonitoringExecutionsInputBody: Swift.Equatable {
    let monitoringScheduleName: Swift.String?
    let endpointName: Swift.String?
    let sortBy: SageMakerClientTypes.MonitoringExecutionSortKey?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let scheduledTimeBefore: ClientRuntime.Date?
    let scheduledTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let statusEquals: SageMakerClientTypes.ExecutionStatus?
    let monitoringJobDefinitionName: Swift.String?
    let monitoringTypeEquals: SageMakerClientTypes.MonitoringType?
}

extension ListMonitoringExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringTypeEquals = "MonitoringTypeEquals"
        case nextToken = "NextToken"
        case scheduledTimeAfter = "ScheduledTimeAfter"
        case scheduledTimeBefore = "ScheduledTimeBefore"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringExecutionSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let scheduledTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scheduledTimeBefore)
        scheduledTimeBefore = scheduledTimeBeforeDecoded
        let scheduledTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scheduledTimeAfter)
        scheduledTimeAfter = scheduledTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExecutionStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringTypeEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringType.self, forKey: .monitoringTypeEquals)
        monitoringTypeEquals = monitoringTypeEqualsDecoded
    }
}

extension ListMonitoringExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMonitoringExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMonitoringExecutionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMonitoringExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMonitoringExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.monitoringExecutionSummaries = output.monitoringExecutionSummaries
            self.nextToken = output.nextToken
        } else {
            self.monitoringExecutionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListMonitoringExecutionsOutputResponse: Swift.Equatable {
    /// A JSON array in which each element is a summary for a monitoring execution.
    /// This member is required.
    public var monitoringExecutionSummaries: [SageMakerClientTypes.MonitoringExecutionSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs, use it in the subsequent reques
    public var nextToken: Swift.String?

    public init (
        monitoringExecutionSummaries: [SageMakerClientTypes.MonitoringExecutionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.monitoringExecutionSummaries = monitoringExecutionSummaries
        self.nextToken = nextToken
    }
}

struct ListMonitoringExecutionsOutputResponseBody: Swift.Equatable {
    let monitoringExecutionSummaries: [SageMakerClientTypes.MonitoringExecutionSummary]?
    let nextToken: Swift.String?
}

extension ListMonitoringExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringExecutionSummaries = "MonitoringExecutionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringExecutionSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringExecutionSummary?].self, forKey: .monitoringExecutionSummaries)
        var monitoringExecutionSummariesDecoded0:[SageMakerClientTypes.MonitoringExecutionSummary]? = nil
        if let monitoringExecutionSummariesContainer = monitoringExecutionSummariesContainer {
            monitoringExecutionSummariesDecoded0 = [SageMakerClientTypes.MonitoringExecutionSummary]()
            for structure0 in monitoringExecutionSummariesContainer {
                if let structure0 = structure0 {
                    monitoringExecutionSummariesDecoded0?.append(structure0)
                }
            }
        }
        monitoringExecutionSummaries = monitoringExecutionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMonitoringSchedulesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringTypeEquals = "MonitoringTypeEquals"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let monitoringJobDefinitionName = monitoringJobDefinitionName {
            try encodeContainer.encode(monitoringJobDefinitionName, forKey: .monitoringJobDefinitionName)
        }
        if let monitoringTypeEquals = monitoringTypeEquals {
            try encodeContainer.encode(monitoringTypeEquals.rawValue, forKey: .monitoringTypeEquals)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListMonitoringSchedulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMonitoringSchedulesInput: Swift.Equatable {
    /// A filter that returns only monitoring schedules created after a specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only monitoring schedules created before a specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// Name of a specific endpoint to fetch schedules for.
    public var endpointName: Swift.String?
    /// A filter that returns only monitoring schedules modified after a specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only monitoring schedules modified before a specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// Gets a list of the monitoring schedules for the specified monitoring job definition.
    public var monitoringJobDefinitionName: Swift.String?
    /// A filter that returns only the monitoring schedules for the specified monitoring type.
    public var monitoringTypeEquals: SageMakerClientTypes.MonitoringType?
    /// Filter for monitoring schedules whose name contains a specified string.
    public var nameContains: Swift.String?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?
    /// Whether to sort results by Status, CreationTime, ScheduledTime field. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringScheduleSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only monitoring schedules modified before a specified time.
    public var statusEquals: SageMakerClientTypes.ScheduleStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        monitoringJobDefinitionName: Swift.String? = nil,
        monitoringTypeEquals: SageMakerClientTypes.MonitoringType? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringScheduleSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.ScheduleStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.monitoringJobDefinitionName = monitoringJobDefinitionName
        self.monitoringTypeEquals = monitoringTypeEquals
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListMonitoringSchedulesInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let sortBy: SageMakerClientTypes.MonitoringScheduleSortKey?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let statusEquals: SageMakerClientTypes.ScheduleStatus?
    let monitoringJobDefinitionName: Swift.String?
    let monitoringTypeEquals: SageMakerClientTypes.MonitoringType?
}

extension ListMonitoringSchedulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringTypeEquals = "MonitoringTypeEquals"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringScheduleSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ScheduleStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringTypeEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringType.self, forKey: .monitoringTypeEquals)
        monitoringTypeEquals = monitoringTypeEqualsDecoded
    }
}

extension ListMonitoringSchedulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMonitoringSchedulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMonitoringSchedulesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMonitoringSchedulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMonitoringSchedulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.monitoringScheduleSummaries = output.monitoringScheduleSummaries
            self.nextToken = output.nextToken
        } else {
            self.monitoringScheduleSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListMonitoringSchedulesOutputResponse: Swift.Equatable {
    /// A JSON array in which each element is a summary for a monitoring schedule.
    /// This member is required.
    public var monitoringScheduleSummaries: [SageMakerClientTypes.MonitoringScheduleSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init (
        monitoringScheduleSummaries: [SageMakerClientTypes.MonitoringScheduleSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.monitoringScheduleSummaries = monitoringScheduleSummaries
        self.nextToken = nextToken
    }
}

struct ListMonitoringSchedulesOutputResponseBody: Swift.Equatable {
    let monitoringScheduleSummaries: [SageMakerClientTypes.MonitoringScheduleSummary]?
    let nextToken: Swift.String?
}

extension ListMonitoringSchedulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleSummaries = "MonitoringScheduleSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringScheduleSummary?].self, forKey: .monitoringScheduleSummaries)
        var monitoringScheduleSummariesDecoded0:[SageMakerClientTypes.MonitoringScheduleSummary]? = nil
        if let monitoringScheduleSummariesContainer = monitoringScheduleSummariesContainer {
            monitoringScheduleSummariesDecoded0 = [SageMakerClientTypes.MonitoringScheduleSummary]()
            for structure0 in monitoringScheduleSummariesContainer {
                if let structure0 = structure0 {
                    monitoringScheduleSummariesDecoded0?.append(structure0)
                }
            }
        }
        monitoringScheduleSummaries = monitoringScheduleSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListNotebookInstanceLifecycleConfigsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListNotebookInstanceLifecycleConfigsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListNotebookInstanceLifecycleConfigsInput: Swift.Equatable {
    /// A filter that returns only lifecycle configurations that were created after the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only lifecycle configurations that were created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only lifecycle configurations that were modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only lifecycle configurations that were modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of lifecycle configurations to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the lifecycle configuration name. This filter returns only lifecycle configurations whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of a ListNotebookInstanceLifecycleConfigs request was truncated, the response includes a NextToken. To get the next set of lifecycle configurations, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sorts the list of results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortKey?
    /// The sort order for results.
    public var sortOrder: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortKey? = nil,
        sortOrder: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListNotebookInstanceLifecycleConfigsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let sortBy: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortKey?
    let sortOrder: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortOrder?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
}

extension ListNotebookInstanceLifecycleConfigsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceLifecycleConfigSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceLifecycleConfigSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
    }
}

extension ListNotebookInstanceLifecycleConfigsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNotebookInstanceLifecycleConfigsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListNotebookInstanceLifecycleConfigsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNotebookInstanceLifecycleConfigsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListNotebookInstanceLifecycleConfigsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.notebookInstanceLifecycleConfigs = output.notebookInstanceLifecycleConfigs
        } else {
            self.nextToken = nil
            self.notebookInstanceLifecycleConfigs = nil
        }
    }
}

public struct ListNotebookInstanceLifecycleConfigsOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon SageMaker returns this token. To get the next set of lifecycle configurations, use it in the next request.
    public var nextToken: Swift.String?
    /// An array of NotebookInstanceLifecycleConfiguration objects, each listing a lifecycle configuration.
    public var notebookInstanceLifecycleConfigs: [SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary]?

    public init (
        nextToken: Swift.String? = nil,
        notebookInstanceLifecycleConfigs: [SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.notebookInstanceLifecycleConfigs = notebookInstanceLifecycleConfigs
    }
}

struct ListNotebookInstanceLifecycleConfigsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let notebookInstanceLifecycleConfigs: [SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary]?
}

extension ListNotebookInstanceLifecycleConfigsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case notebookInstanceLifecycleConfigs = "NotebookInstanceLifecycleConfigs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let notebookInstanceLifecycleConfigsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary?].self, forKey: .notebookInstanceLifecycleConfigs)
        var notebookInstanceLifecycleConfigsDecoded0:[SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary]? = nil
        if let notebookInstanceLifecycleConfigsContainer = notebookInstanceLifecycleConfigsContainer {
            notebookInstanceLifecycleConfigsDecoded0 = [SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary]()
            for structure0 in notebookInstanceLifecycleConfigsContainer {
                if let structure0 = structure0 {
                    notebookInstanceLifecycleConfigsDecoded0?.append(structure0)
                }
            }
        }
        notebookInstanceLifecycleConfigs = notebookInstanceLifecycleConfigsDecoded0
    }
}

extension ListNotebookInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalCodeRepositoryEquals = "AdditionalCodeRepositoryEquals"
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case defaultCodeRepositoryContains = "DefaultCodeRepositoryContains"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case notebookInstanceLifecycleConfigNameContains = "NotebookInstanceLifecycleConfigNameContains"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalCodeRepositoryEquals = additionalCodeRepositoryEquals {
            try encodeContainer.encode(additionalCodeRepositoryEquals, forKey: .additionalCodeRepositoryEquals)
        }
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let defaultCodeRepositoryContains = defaultCodeRepositoryContains {
            try encodeContainer.encode(defaultCodeRepositoryContains, forKey: .defaultCodeRepositoryContains)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let notebookInstanceLifecycleConfigNameContains = notebookInstanceLifecycleConfigNameContains {
            try encodeContainer.encode(notebookInstanceLifecycleConfigNameContains, forKey: .notebookInstanceLifecycleConfigNameContains)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListNotebookInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListNotebookInstancesInput: Swift.Equatable {
    /// A filter that returns only notebook instances with associated with the specified git repository.
    public var additionalCodeRepositoryEquals: Swift.String?
    /// A filter that returns only notebook instances that were created after the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only notebook instances that were created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.
    public var defaultCodeRepositoryContains: Swift.String?
    /// A filter that returns only notebook instances that were modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only notebook instances that were modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of notebook instances to return.
    public var maxResults: Swift.Int?
    /// A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the previous call to the ListNotebookInstances is truncated, the response includes a NextToken. You can use this token in your subsequent ListNotebookInstances request to fetch the next set of notebook instances. You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request.
    public var nextToken: Swift.String?
    /// A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.
    public var notebookInstanceLifecycleConfigNameContains: Swift.String?
    /// The field to sort results by. The default is Name.
    public var sortBy: SageMakerClientTypes.NotebookInstanceSortKey?
    /// The sort order for results.
    public var sortOrder: SageMakerClientTypes.NotebookInstanceSortOrder?
    /// A filter that returns only notebook instances with the specified status.
    public var statusEquals: SageMakerClientTypes.NotebookInstanceStatus?

    public init (
        additionalCodeRepositoryEquals: Swift.String? = nil,
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        defaultCodeRepositoryContains: Swift.String? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        notebookInstanceLifecycleConfigNameContains: Swift.String? = nil,
        sortBy: SageMakerClientTypes.NotebookInstanceSortKey? = nil,
        sortOrder: SageMakerClientTypes.NotebookInstanceSortOrder? = nil,
        statusEquals: SageMakerClientTypes.NotebookInstanceStatus? = nil
    )
    {
        self.additionalCodeRepositoryEquals = additionalCodeRepositoryEquals
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.defaultCodeRepositoryContains = defaultCodeRepositoryContains
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.notebookInstanceLifecycleConfigNameContains = notebookInstanceLifecycleConfigNameContains
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListNotebookInstancesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let sortBy: SageMakerClientTypes.NotebookInstanceSortKey?
    let sortOrder: SageMakerClientTypes.NotebookInstanceSortOrder?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let statusEquals: SageMakerClientTypes.NotebookInstanceStatus?
    let notebookInstanceLifecycleConfigNameContains: Swift.String?
    let defaultCodeRepositoryContains: Swift.String?
    let additionalCodeRepositoryEquals: Swift.String?
}

extension ListNotebookInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalCodeRepositoryEquals = "AdditionalCodeRepositoryEquals"
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case defaultCodeRepositoryContains = "DefaultCodeRepositoryContains"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case notebookInstanceLifecycleConfigNameContains = "NotebookInstanceLifecycleConfigNameContains"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let notebookInstanceLifecycleConfigNameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigNameContains)
        notebookInstanceLifecycleConfigNameContains = notebookInstanceLifecycleConfigNameContainsDecoded
        let defaultCodeRepositoryContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultCodeRepositoryContains)
        defaultCodeRepositoryContains = defaultCodeRepositoryContainsDecoded
        let additionalCodeRepositoryEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalCodeRepositoryEquals)
        additionalCodeRepositoryEquals = additionalCodeRepositoryEqualsDecoded
    }
}

extension ListNotebookInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNotebookInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListNotebookInstancesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNotebookInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListNotebookInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.notebookInstances = output.notebookInstances
        } else {
            self.nextToken = nil
            self.notebookInstances = nil
        }
    }
}

public struct ListNotebookInstancesOutputResponse: Swift.Equatable {
    /// If the response to the previous ListNotebookInstances request was truncated, Amazon SageMaker returns this token. To retrieve the next set of notebook instances, use the token in the next request.
    public var nextToken: Swift.String?
    /// An array of NotebookInstanceSummary objects, one for each notebook instance.
    public var notebookInstances: [SageMakerClientTypes.NotebookInstanceSummary]?

    public init (
        nextToken: Swift.String? = nil,
        notebookInstances: [SageMakerClientTypes.NotebookInstanceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.notebookInstances = notebookInstances
    }
}

struct ListNotebookInstancesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let notebookInstances: [SageMakerClientTypes.NotebookInstanceSummary]?
}

extension ListNotebookInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case notebookInstances = "NotebookInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let notebookInstancesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceSummary?].self, forKey: .notebookInstances)
        var notebookInstancesDecoded0:[SageMakerClientTypes.NotebookInstanceSummary]? = nil
        if let notebookInstancesContainer = notebookInstancesContainer {
            notebookInstancesDecoded0 = [SageMakerClientTypes.NotebookInstanceSummary]()
            for structure0 in notebookInstancesContainer {
                if let structure0 = structure0 {
                    notebookInstancesDecoded0?.append(structure0)
                }
            }
        }
        notebookInstances = notebookInstancesDecoded0
    }
}

extension ListPipelineExecutionStepsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pipelineExecutionArn = "PipelineExecutionArn"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListPipelineExecutionStepsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPipelineExecutionStepsInput: Swift.Equatable {
    /// The maximum number of pipeline execution steps to return in the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListPipelineExecutionSteps request was truncated, the response includes a NextToken. To retrieve the next set of pipeline execution steps, use the token in the next request.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?
    /// The field by which to sort results. The default is CreatedTime.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineExecutionArn: Swift.String? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineExecutionArn = pipelineExecutionArn
        self.sortOrder = sortOrder
    }
}

struct ListPipelineExecutionStepsInputBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListPipelineExecutionStepsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pipelineExecutionArn = "PipelineExecutionArn"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListPipelineExecutionStepsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPipelineExecutionStepsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPipelineExecutionStepsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPipelineExecutionStepsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPipelineExecutionStepsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.pipelineExecutionSteps = output.pipelineExecutionSteps
        } else {
            self.nextToken = nil
            self.pipelineExecutionSteps = nil
        }
    }
}

public struct ListPipelineExecutionStepsOutputResponse: Swift.Equatable {
    /// If the result of the previous ListPipelineExecutionSteps request was truncated, the response includes a NextToken. To retrieve the next set of pipeline execution steps, use the token in the next request.
    public var nextToken: Swift.String?
    /// A list of PipeLineExecutionStep objects. Each PipeLineExecutionStep consists of StepName, StartTime, EndTime, StepStatus, and Metadata. Metadata is an object with properties for each job that contains relevant information about the job created by the step.
    public var pipelineExecutionSteps: [SageMakerClientTypes.PipelineExecutionStep]?

    public init (
        nextToken: Swift.String? = nil,
        pipelineExecutionSteps: [SageMakerClientTypes.PipelineExecutionStep]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineExecutionSteps = pipelineExecutionSteps
    }
}

struct ListPipelineExecutionStepsOutputResponseBody: Swift.Equatable {
    let pipelineExecutionSteps: [SageMakerClientTypes.PipelineExecutionStep]?
    let nextToken: Swift.String?
}

extension ListPipelineExecutionStepsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case pipelineExecutionSteps = "PipelineExecutionSteps"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionStepsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.PipelineExecutionStep?].self, forKey: .pipelineExecutionSteps)
        var pipelineExecutionStepsDecoded0:[SageMakerClientTypes.PipelineExecutionStep]? = nil
        if let pipelineExecutionStepsContainer = pipelineExecutionStepsContainer {
            pipelineExecutionStepsDecoded0 = [SageMakerClientTypes.PipelineExecutionStep]()
            for structure0 in pipelineExecutionStepsContainer {
                if let structure0 = structure0 {
                    pipelineExecutionStepsDecoded0?.append(structure0)
                }
            }
        }
        pipelineExecutionSteps = pipelineExecutionStepsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPipelineExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pipelineName = "PipelineName"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListPipelineExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPipelineExecutionsInput: Swift.Equatable {
    /// A filter that returns the pipeline executions that were created after a specified time.
    public var createdAfter: ClientRuntime.Date?
    /// A filter that returns the pipeline executions that were created before a specified time.
    public var createdBefore: ClientRuntime.Date?
    /// The maximum number of pipeline executions to return in the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListPipelineExecutions request was truncated, the response includes a NextToken. To retrieve the next set of pipeline executions, use the token in the next request.
    public var nextToken: Swift.String?
    /// The name of the pipeline.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The field by which to sort results. The default is CreatedTime.
    public var sortBy: SageMakerClientTypes.SortPipelineExecutionsBy?
    /// The sort order for results.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortPipelineExecutionsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineName = pipelineName
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListPipelineExecutionsInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortPipelineExecutionsBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListPipelineExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pipelineName = "PipelineName"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortPipelineExecutionsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListPipelineExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPipelineExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPipelineExecutionsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPipelineExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPipelineExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.pipelineExecutionSummaries = output.pipelineExecutionSummaries
        } else {
            self.nextToken = nil
            self.pipelineExecutionSummaries = nil
        }
    }
}

public struct ListPipelineExecutionsOutputResponse: Swift.Equatable {
    /// If the result of the previous ListPipelineExecutions request was truncated, the response includes a NextToken. To retrieve the next set of pipeline executions, use the token in the next request.
    public var nextToken: Swift.String?
    /// Contains a sorted list of pipeline execution summary objects matching the specified filters. Each run summary includes the Amazon Resource Name (ARN) of the pipeline execution, the run date, and the status. This list can be empty.
    public var pipelineExecutionSummaries: [SageMakerClientTypes.PipelineExecutionSummary]?

    public init (
        nextToken: Swift.String? = nil,
        pipelineExecutionSummaries: [SageMakerClientTypes.PipelineExecutionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineExecutionSummaries = pipelineExecutionSummaries
    }
}

struct ListPipelineExecutionsOutputResponseBody: Swift.Equatable {
    let pipelineExecutionSummaries: [SageMakerClientTypes.PipelineExecutionSummary]?
    let nextToken: Swift.String?
}

extension ListPipelineExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case pipelineExecutionSummaries = "PipelineExecutionSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.PipelineExecutionSummary?].self, forKey: .pipelineExecutionSummaries)
        var pipelineExecutionSummariesDecoded0:[SageMakerClientTypes.PipelineExecutionSummary]? = nil
        if let pipelineExecutionSummariesContainer = pipelineExecutionSummariesContainer {
            pipelineExecutionSummariesDecoded0 = [SageMakerClientTypes.PipelineExecutionSummary]()
            for structure0 in pipelineExecutionSummariesContainer {
                if let structure0 = structure0 {
                    pipelineExecutionSummariesDecoded0?.append(structure0)
                }
            }
        }
        pipelineExecutionSummaries = pipelineExecutionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPipelineParametersForExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
    }
}

extension ListPipelineParametersForExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPipelineParametersForExecutionInput: Swift.Equatable {
    /// The maximum number of parameters to return in the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListPipelineParametersForExecution request was truncated, the response includes a NextToken. To retrieve the next set of parameters, use the token in the next request.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct ListPipelineParametersForExecutionInputBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListPipelineParametersForExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListPipelineParametersForExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPipelineParametersForExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPipelineParametersForExecutionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPipelineParametersForExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPipelineParametersForExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.pipelineParameters = output.pipelineParameters
        } else {
            self.nextToken = nil
            self.pipelineParameters = nil
        }
    }
}

public struct ListPipelineParametersForExecutionOutputResponse: Swift.Equatable {
    /// If the result of the previous ListPipelineParametersForExecution request was truncated, the response includes a NextToken. To retrieve the next set of parameters, use the token in the next request.
    public var nextToken: Swift.String?
    /// Contains a list of pipeline parameters. This list can be empty.
    public var pipelineParameters: [SageMakerClientTypes.Parameter]?

    public init (
        nextToken: Swift.String? = nil,
        pipelineParameters: [SageMakerClientTypes.Parameter]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineParameters = pipelineParameters
    }
}

struct ListPipelineParametersForExecutionOutputResponseBody: Swift.Equatable {
    let pipelineParameters: [SageMakerClientTypes.Parameter]?
    let nextToken: Swift.String?
}

extension ListPipelineParametersForExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case pipelineParameters = "PipelineParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Parameter?].self, forKey: .pipelineParameters)
        var pipelineParametersDecoded0:[SageMakerClientTypes.Parameter]? = nil
        if let pipelineParametersContainer = pipelineParametersContainer {
            pipelineParametersDecoded0 = [SageMakerClientTypes.Parameter]()
            for structure0 in pipelineParametersContainer {
                if let structure0 = structure0 {
                    pipelineParametersDecoded0?.append(structure0)
                }
            }
        }
        pipelineParameters = pipelineParametersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPipelinesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pipelineNamePrefix = "PipelineNamePrefix"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pipelineNamePrefix = pipelineNamePrefix {
            try encodeContainer.encode(pipelineNamePrefix, forKey: .pipelineNamePrefix)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListPipelinesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPipelinesInput: Swift.Equatable {
    /// A filter that returns the pipelines that were created after a specified time.
    public var createdAfter: ClientRuntime.Date?
    /// A filter that returns the pipelines that were created before a specified time.
    public var createdBefore: ClientRuntime.Date?
    /// The maximum number of pipelines to return in the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListPipelines request was truncated, the response includes a NextToken. To retrieve the next set of pipelines, use the token in the next request.
    public var nextToken: Swift.String?
    /// The prefix of the pipeline name.
    public var pipelineNamePrefix: Swift.String?
    /// The field by which to sort results. The default is CreatedTime.
    public var sortBy: SageMakerClientTypes.SortPipelinesBy?
    /// The sort order for results.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineNamePrefix: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortPipelinesBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineNamePrefix = pipelineNamePrefix
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListPipelinesInputBody: Swift.Equatable {
    let pipelineNamePrefix: Swift.String?
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortPipelinesBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListPipelinesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case pipelineNamePrefix = "PipelineNamePrefix"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineNamePrefix)
        pipelineNamePrefix = pipelineNamePrefixDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortPipelinesBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListPipelinesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPipelinesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPipelinesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPipelinesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPipelinesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.pipelineSummaries = output.pipelineSummaries
        } else {
            self.nextToken = nil
            self.pipelineSummaries = nil
        }
    }
}

public struct ListPipelinesOutputResponse: Swift.Equatable {
    /// If the result of the previous ListPipelines request was truncated, the response includes a NextToken. To retrieve the next set of pipelines, use the token in the next request.
    public var nextToken: Swift.String?
    /// Contains a sorted list of PipelineSummary objects matching the specified filters. Each PipelineSummary consists of PipelineArn, PipelineName, ExperimentName, PipelineDescription, CreationTime, LastModifiedTime, LastRunTime, and RoleArn. This list can be empty.
    public var pipelineSummaries: [SageMakerClientTypes.PipelineSummary]?

    public init (
        nextToken: Swift.String? = nil,
        pipelineSummaries: [SageMakerClientTypes.PipelineSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineSummaries = pipelineSummaries
    }
}

struct ListPipelinesOutputResponseBody: Swift.Equatable {
    let pipelineSummaries: [SageMakerClientTypes.PipelineSummary]?
    let nextToken: Swift.String?
}

extension ListPipelinesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case pipelineSummaries = "PipelineSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.PipelineSummary?].self, forKey: .pipelineSummaries)
        var pipelineSummariesDecoded0:[SageMakerClientTypes.PipelineSummary]? = nil
        if let pipelineSummariesContainer = pipelineSummariesContainer {
            pipelineSummariesDecoded0 = [SageMakerClientTypes.PipelineSummary]()
            for structure0 in pipelineSummariesContainer {
                if let structure0 = structure0 {
                    pipelineSummariesDecoded0?.append(structure0)
                }
            }
        }
        pipelineSummaries = pipelineSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListProcessingJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListProcessingJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListProcessingJobsInput: Swift.Equatable {
    /// A filter that returns only processing jobs created after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only processing jobs created after the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only processing jobs modified after the specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only processing jobs modified before the specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of processing jobs to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the processing job name. This filter returns only processing jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListProcessingJobs request was truncated, the response includes a NextToken. To retrieve the next set of processing jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only processing jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.ProcessingJobStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.ProcessingJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListProcessingJobsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let nameContains: Swift.String?
    let statusEquals: SageMakerClientTypes.ProcessingJobStatus?
    let sortBy: SageMakerClientTypes.SortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListProcessingJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListProcessingJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProcessingJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListProcessingJobsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProcessingJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListProcessingJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.processingJobSummaries = output.processingJobSummaries
        } else {
            self.nextToken = nil
            self.processingJobSummaries = nil
        }
    }
}

public struct ListProcessingJobsOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of processing jobs, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// An array of ProcessingJobSummary objects, each listing a processing job.
    /// This member is required.
    public var processingJobSummaries: [SageMakerClientTypes.ProcessingJobSummary]?

    public init (
        nextToken: Swift.String? = nil,
        processingJobSummaries: [SageMakerClientTypes.ProcessingJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.processingJobSummaries = processingJobSummaries
    }
}

struct ListProcessingJobsOutputResponseBody: Swift.Equatable {
    let processingJobSummaries: [SageMakerClientTypes.ProcessingJobSummary]?
    let nextToken: Swift.String?
}

extension ListProcessingJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case processingJobSummaries = "ProcessingJobSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingJobSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProcessingJobSummary?].self, forKey: .processingJobSummaries)
        var processingJobSummariesDecoded0:[SageMakerClientTypes.ProcessingJobSummary]? = nil
        if let processingJobSummariesContainer = processingJobSummariesContainer {
            processingJobSummariesDecoded0 = [SageMakerClientTypes.ProcessingJobSummary]()
            for structure0 in processingJobSummariesContainer {
                if let structure0 = structure0 {
                    processingJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        processingJobSummaries = processingJobSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListProjectsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListProjectsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListProjectsInput: Swift.Equatable {
    /// A filter that returns the projects that were created after a specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns the projects that were created before a specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// The maximum number of projects to return in the response.
    public var maxResults: Swift.Int?
    /// A filter that returns the projects whose name contains a specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListProjects request was truncated, the response includes a NextToken. To retrieve the next set of projects, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field by which to sort results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ProjectSortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.ProjectSortOrder?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ProjectSortBy? = nil,
        sortOrder: SageMakerClientTypes.ProjectSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListProjectsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let maxResults: Swift.Int?
    let nameContains: Swift.String?
    let nextToken: Swift.String?
    let sortBy: SageMakerClientTypes.ProjectSortBy?
    let sortOrder: SageMakerClientTypes.ProjectSortOrder?
}

extension ListProjectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProjectSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProjectSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListProjectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProjectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListProjectsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProjectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListProjectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.projectSummaryList = output.projectSummaryList
        } else {
            self.nextToken = nil
            self.projectSummaryList = nil
        }
    }
}

public struct ListProjectsOutputResponse: Swift.Equatable {
    /// If the result of the previous ListCompilationJobs request was truncated, the response includes a NextToken. To retrieve the next set of model compilation jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// A list of summaries of projects.
    /// This member is required.
    public var projectSummaryList: [SageMakerClientTypes.ProjectSummary]?

    public init (
        nextToken: Swift.String? = nil,
        projectSummaryList: [SageMakerClientTypes.ProjectSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.projectSummaryList = projectSummaryList
    }
}

struct ListProjectsOutputResponseBody: Swift.Equatable {
    let projectSummaryList: [SageMakerClientTypes.ProjectSummary]?
    let nextToken: Swift.String?
}

extension ListProjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case projectSummaryList = "ProjectSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectSummaryListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProjectSummary?].self, forKey: .projectSummaryList)
        var projectSummaryListDecoded0:[SageMakerClientTypes.ProjectSummary]? = nil
        if let projectSummaryListContainer = projectSummaryListContainer {
            projectSummaryListDecoded0 = [SageMakerClientTypes.ProjectSummary]()
            for structure0 in projectSummaryListContainer {
                if let structure0 = structure0 {
                    projectSummaryListDecoded0?.append(structure0)
                }
            }
        }
        projectSummaryList = projectSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStudioLifecycleConfigsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appTypeEquals = "AppTypeEquals"
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case modifiedTimeAfter = "ModifiedTimeAfter"
        case modifiedTimeBefore = "ModifiedTimeBefore"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appTypeEquals = appTypeEquals {
            try encodeContainer.encode(appTypeEquals.rawValue, forKey: .appTypeEquals)
        }
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modifiedTimeAfter = modifiedTimeAfter {
            try encodeContainer.encode(modifiedTimeAfter.timeIntervalSince1970, forKey: .modifiedTimeAfter)
        }
        if let modifiedTimeBefore = modifiedTimeBefore {
            try encodeContainer.encode(modifiedTimeBefore.timeIntervalSince1970, forKey: .modifiedTimeBefore)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListStudioLifecycleConfigsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStudioLifecycleConfigsInput: Swift.Equatable {
    /// A parameter to search for the App Type to which the Lifecycle Configuration is attached.
    public var appTypeEquals: SageMakerClientTypes.StudioLifecycleConfigAppType?
    /// A filter that returns only Lifecycle Configurations created on or after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only Lifecycle Configurations created on or before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// The maximum number of Studio Lifecycle Configurations to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// A filter that returns only Lifecycle Configurations modified after the specified time.
    public var modifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only Lifecycle Configurations modified before the specified time.
    public var modifiedTimeBefore: ClientRuntime.Date?
    /// A string in the Lifecycle Configuration name. This filter returns only Lifecycle Configurations whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the previous call to ListStudioLifecycleConfigs didn't return the full set of Lifecycle Configurations, the call returns a token for getting the next set of Lifecycle Configurations.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.StudioLifecycleConfigSortKey?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        appTypeEquals: SageMakerClientTypes.StudioLifecycleConfigAppType? = nil,
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        modifiedTimeAfter: ClientRuntime.Date? = nil,
        modifiedTimeBefore: ClientRuntime.Date? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.StudioLifecycleConfigSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.appTypeEquals = appTypeEquals
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.modifiedTimeAfter = modifiedTimeAfter
        self.modifiedTimeBefore = modifiedTimeBefore
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListStudioLifecycleConfigsInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let nameContains: Swift.String?
    let appTypeEquals: SageMakerClientTypes.StudioLifecycleConfigAppType?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
    let modifiedTimeBefore: ClientRuntime.Date?
    let modifiedTimeAfter: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.StudioLifecycleConfigSortKey?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListStudioLifecycleConfigsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appTypeEquals = "AppTypeEquals"
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case maxResults = "MaxResults"
        case modifiedTimeAfter = "ModifiedTimeAfter"
        case modifiedTimeBefore = "ModifiedTimeBefore"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let appTypeEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StudioLifecycleConfigAppType.self, forKey: .appTypeEquals)
        appTypeEquals = appTypeEqualsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let modifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modifiedTimeBefore)
        modifiedTimeBefore = modifiedTimeBeforeDecoded
        let modifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modifiedTimeAfter)
        modifiedTimeAfter = modifiedTimeAfterDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StudioLifecycleConfigSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListStudioLifecycleConfigsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStudioLifecycleConfigsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStudioLifecycleConfigsOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStudioLifecycleConfigsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStudioLifecycleConfigsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.studioLifecycleConfigs = output.studioLifecycleConfigs
        } else {
            self.nextToken = nil
            self.studioLifecycleConfigs = nil
        }
    }
}

public struct ListStudioLifecycleConfigsOutputResponse: Swift.Equatable {
    /// A token for getting the next set of actions, if there are any.
    public var nextToken: Swift.String?
    /// A list of Lifecycle Configurations and their properties.
    public var studioLifecycleConfigs: [SageMakerClientTypes.StudioLifecycleConfigDetails]?

    public init (
        nextToken: Swift.String? = nil,
        studioLifecycleConfigs: [SageMakerClientTypes.StudioLifecycleConfigDetails]? = nil
    )
    {
        self.nextToken = nextToken
        self.studioLifecycleConfigs = studioLifecycleConfigs
    }
}

struct ListStudioLifecycleConfigsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let studioLifecycleConfigs: [SageMakerClientTypes.StudioLifecycleConfigDetails]?
}

extension ListStudioLifecycleConfigsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case studioLifecycleConfigs = "StudioLifecycleConfigs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let studioLifecycleConfigsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.StudioLifecycleConfigDetails?].self, forKey: .studioLifecycleConfigs)
        var studioLifecycleConfigsDecoded0:[SageMakerClientTypes.StudioLifecycleConfigDetails]? = nil
        if let studioLifecycleConfigsContainer = studioLifecycleConfigsContainer {
            studioLifecycleConfigsDecoded0 = [SageMakerClientTypes.StudioLifecycleConfigDetails]()
            for structure0 in studioLifecycleConfigsContainer {
                if let structure0 = structure0 {
                    studioLifecycleConfigsDecoded0?.append(structure0)
                }
            }
        }
        studioLifecycleConfigs = studioLifecycleConfigsDecoded0
    }
}

extension ListSubscribedWorkteamsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListSubscribedWorkteamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSubscribedWorkteamsInput: Swift.Equatable {
    /// The maximum number of work teams to return in each page of the response.
    public var maxResults: Swift.Int?
    /// A string in the work team name. This filter returns only work teams whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListSubscribedWorkteams request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

struct ListSubscribedWorkteamsInputBody: Swift.Equatable {
    let nameContains: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListSubscribedWorkteamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListSubscribedWorkteamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSubscribedWorkteamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSubscribedWorkteamsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSubscribedWorkteamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSubscribedWorkteamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.subscribedWorkteams = output.subscribedWorkteams
        } else {
            self.nextToken = nil
            self.subscribedWorkteams = nil
        }
    }
}

public struct ListSubscribedWorkteamsOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of work teams, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// An array of Workteam objects, each describing a work team.
    /// This member is required.
    public var subscribedWorkteams: [SageMakerClientTypes.SubscribedWorkteam]?

    public init (
        nextToken: Swift.String? = nil,
        subscribedWorkteams: [SageMakerClientTypes.SubscribedWorkteam]? = nil
    )
    {
        self.nextToken = nextToken
        self.subscribedWorkteams = subscribedWorkteams
    }
}

struct ListSubscribedWorkteamsOutputResponseBody: Swift.Equatable {
    let subscribedWorkteams: [SageMakerClientTypes.SubscribedWorkteam]?
    let nextToken: Swift.String?
}

extension ListSubscribedWorkteamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case subscribedWorkteams = "SubscribedWorkteams"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscribedWorkteamsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.SubscribedWorkteam?].self, forKey: .subscribedWorkteams)
        var subscribedWorkteamsDecoded0:[SageMakerClientTypes.SubscribedWorkteam]? = nil
        if let subscribedWorkteamsContainer = subscribedWorkteamsContainer {
            subscribedWorkteamsDecoded0 = [SageMakerClientTypes.SubscribedWorkteam]()
            for structure0 in subscribedWorkteamsContainer {
                if let structure0 = structure0 {
                    subscribedWorkteamsDecoded0?.append(structure0)
                }
            }
        }
        subscribedWorkteams = subscribedWorkteamsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsInput: Swift.Equatable {
    /// Maximum number of tags to return.
    public var maxResults: Swift.Int?
    /// If the response to the previous ListTags request is truncated, Amazon SageMaker returns this token. To retrieve the next set of tags, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsOutputResponse: Swift.Equatable {
    /// If response is truncated, Amazon SageMaker includes a token in the response. You can use this token in your subsequent request to fetch next set of tokens.
    public var nextToken: Swift.String?
    /// An array of Tag objects, each with a tag key and a value.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsOutputResponseBody: Swift.Equatable {
    let tags: [SageMakerClientTypes.Tag]?
    let nextToken: Swift.String?
}

extension ListTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTrainingJobsForHyperParameterTuningJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hyperParameterTuningJobName = hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListTrainingJobsForHyperParameterTuningJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTrainingJobsForHyperParameterTuningJobInput: Swift.Equatable {
    /// The name of the tuning job whose training jobs you want to list.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?
    /// The maximum number of training jobs to return. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListTrainingJobsForHyperParameterTuningJob request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is Name. If the value of this field is FinalObjectiveMetricValue, any training jobs that did not return an objective metric are not listed.
    public var sortBy: SageMakerClientTypes.TrainingJobSortByOptions?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only training jobs with the specified status.
    public var statusEquals: SageMakerClientTypes.TrainingJobStatus?

    public init (
        hyperParameterTuningJobName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.TrainingJobSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.TrainingJobStatus? = nil
    )
    {
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListTrainingJobsForHyperParameterTuningJobInputBody: Swift.Equatable {
    let hyperParameterTuningJobName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let statusEquals: SageMakerClientTypes.TrainingJobStatus?
    let sortBy: SageMakerClientTypes.TrainingJobSortByOptions?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListTrainingJobsForHyperParameterTuningJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobSortByOptions.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListTrainingJobsForHyperParameterTuningJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTrainingJobsForHyperParameterTuningJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTrainingJobsForHyperParameterTuningJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTrainingJobsForHyperParameterTuningJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTrainingJobsForHyperParameterTuningJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.trainingJobSummaries = output.trainingJobSummaries
        } else {
            self.nextToken = nil
            self.trainingJobSummaries = nil
        }
    }
}

public struct ListTrainingJobsForHyperParameterTuningJobOutputResponse: Swift.Equatable {
    /// If the result of this ListTrainingJobsForHyperParameterTuningJob request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// A list of [TrainingJobSummary] objects that describe the training jobs that the ListTrainingJobsForHyperParameterTuningJob request returned.
    /// This member is required.
    public var trainingJobSummaries: [SageMakerClientTypes.HyperParameterTrainingJobSummary]?

    public init (
        nextToken: Swift.String? = nil,
        trainingJobSummaries: [SageMakerClientTypes.HyperParameterTrainingJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trainingJobSummaries = trainingJobSummaries
    }
}

struct ListTrainingJobsForHyperParameterTuningJobOutputResponseBody: Swift.Equatable {
    let trainingJobSummaries: [SageMakerClientTypes.HyperParameterTrainingJobSummary]?
    let nextToken: Swift.String?
}

extension ListTrainingJobsForHyperParameterTuningJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case trainingJobSummaries = "TrainingJobSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterTrainingJobSummary?].self, forKey: .trainingJobSummaries)
        var trainingJobSummariesDecoded0:[SageMakerClientTypes.HyperParameterTrainingJobSummary]? = nil
        if let trainingJobSummariesContainer = trainingJobSummariesContainer {
            trainingJobSummariesDecoded0 = [SageMakerClientTypes.HyperParameterTrainingJobSummary]()
            for structure0 in trainingJobSummariesContainer {
                if let structure0 = structure0 {
                    trainingJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        trainingJobSummaries = trainingJobSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTrainingJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListTrainingJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTrainingJobsInput: Swift.Equatable {
    /// A filter that returns only training jobs created after the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only training jobs created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only training jobs modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only training jobs modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of training jobs to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the training job name. This filter returns only training jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListTrainingJobs request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only training jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.TrainingJobStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.TrainingJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListTrainingJobsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let nameContains: Swift.String?
    let statusEquals: SageMakerClientTypes.TrainingJobStatus?
    let sortBy: SageMakerClientTypes.SortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
}

extension ListTrainingJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension ListTrainingJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTrainingJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTrainingJobsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTrainingJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTrainingJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.trainingJobSummaries = output.trainingJobSummaries
        } else {
            self.nextToken = nil
            self.trainingJobSummaries = nil
        }
    }
}

public struct ListTrainingJobsOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of training jobs, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// An array of TrainingJobSummary objects, each listing a training job.
    /// This member is required.
    public var trainingJobSummaries: [SageMakerClientTypes.TrainingJobSummary]?

    public init (
        nextToken: Swift.String? = nil,
        trainingJobSummaries: [SageMakerClientTypes.TrainingJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trainingJobSummaries = trainingJobSummaries
    }
}

struct ListTrainingJobsOutputResponseBody: Swift.Equatable {
    let trainingJobSummaries: [SageMakerClientTypes.TrainingJobSummary]?
    let nextToken: Swift.String?
}

extension ListTrainingJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case trainingJobSummaries = "TrainingJobSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrainingJobSummary?].self, forKey: .trainingJobSummaries)
        var trainingJobSummariesDecoded0:[SageMakerClientTypes.TrainingJobSummary]? = nil
        if let trainingJobSummariesContainer = trainingJobSummariesContainer {
            trainingJobSummariesDecoded0 = [SageMakerClientTypes.TrainingJobSummary]()
            for structure0 in trainingJobSummariesContainer {
                if let structure0 = structure0 {
                    trainingJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        trainingJobSummaries = trainingJobSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTransformJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let lastModifiedTimeAfter = lastModifiedTimeAfter {
            try encodeContainer.encode(lastModifiedTimeAfter.timeIntervalSince1970, forKey: .lastModifiedTimeAfter)
        }
        if let lastModifiedTimeBefore = lastModifiedTimeBefore {
            try encodeContainer.encode(lastModifiedTimeBefore.timeIntervalSince1970, forKey: .lastModifiedTimeBefore)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let statusEquals = statusEquals {
            try encodeContainer.encode(statusEquals.rawValue, forKey: .statusEquals)
        }
    }
}

extension ListTransformJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTransformJobsInput: Swift.Equatable {
    /// A filter that returns only transform jobs created after the specified time.
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only transform jobs created before the specified time.
    public var creationTimeBefore: ClientRuntime.Date?
    /// A filter that returns only transform jobs modified after the specified time.
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only transform jobs modified before the specified time.
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of transform jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// A string in the transform job name. This filter returns only transform jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListTransformJobs request was truncated, the response includes a NextToken. To retrieve the next set of transform jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortBy?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only transform jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.TransformJobStatus?

    public init (
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.TransformJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

struct ListTransformJobsInputBody: Swift.Equatable {
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let nameContains: Swift.String?
    let statusEquals: SageMakerClientTypes.TransformJobStatus?
    let sortBy: SageMakerClientTypes.SortBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListTransformJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJobStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListTransformJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTransformJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTransformJobsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTransformJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTransformJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.transformJobSummaries = output.transformJobSummaries
        } else {
            self.nextToken = nil
            self.transformJobSummaries = nil
        }
    }
}

public struct ListTransformJobsOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of transform jobs, use it in the next request.
    public var nextToken: Swift.String?
    /// An array of TransformJobSummary objects.
    /// This member is required.
    public var transformJobSummaries: [SageMakerClientTypes.TransformJobSummary]?

    public init (
        nextToken: Swift.String? = nil,
        transformJobSummaries: [SageMakerClientTypes.TransformJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.transformJobSummaries = transformJobSummaries
    }
}

struct ListTransformJobsOutputResponseBody: Swift.Equatable {
    let transformJobSummaries: [SageMakerClientTypes.TransformJobSummary]?
    let nextToken: Swift.String?
}

extension ListTransformJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case transformJobSummaries = "TransformJobSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TransformJobSummary?].self, forKey: .transformJobSummaries)
        var transformJobSummariesDecoded0:[SageMakerClientTypes.TransformJobSummary]? = nil
        if let transformJobSummariesContainer = transformJobSummariesContainer {
            transformJobSummariesDecoded0 = [SageMakerClientTypes.TransformJobSummary]()
            for structure0 in transformJobSummariesContainer {
                if let structure0 = structure0 {
                    transformJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        transformJobSummaries = transformJobSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTrialComponentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case experimentName = "ExperimentName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceArn = "SourceArn"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }
}

extension ListTrialComponentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTrialComponentsInput: Swift.Equatable {
    /// A filter that returns only components created after the specified time.
    public var createdAfter: ClientRuntime.Date?
    /// A filter that returns only components created before the specified time.
    public var createdBefore: ClientRuntime.Date?
    /// A filter that returns only components that are part of the specified experiment. If you specify ExperimentName, you can't filter by SourceArn or TrialName.
    public var experimentName: Swift.String?
    /// The maximum number of components to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListTrialComponents didn't return the full set of components, the call returns a token for getting the next set of components.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortTrialComponentsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only components that have the specified source Amazon Resource Name (ARN). If you specify SourceArn, you can't filter by ExperimentName or TrialName.
    public var sourceArn: Swift.String?
    /// A filter that returns only components that are part of the specified trial. If you specify TrialName, you can't filter by ExperimentName or SourceArn.
    public var trialName: Swift.String?

    public init (
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        experimentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortTrialComponentsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceArn: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.experimentName = experimentName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceArn = sourceArn
        self.trialName = trialName
    }
}

struct ListTrialComponentsInputBody: Swift.Equatable {
    let experimentName: Swift.String?
    let trialName: Swift.String?
    let sourceArn: Swift.String?
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortTrialComponentsBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListTrialComponentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case experimentName = "ExperimentName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceArn = "SourceArn"
        case trialName = "TrialName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortTrialComponentsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTrialComponentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTrialComponentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTrialComponentsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTrialComponentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTrialComponentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.trialComponentSummaries = output.trialComponentSummaries
        } else {
            self.nextToken = nil
            self.trialComponentSummaries = nil
        }
    }
}

public struct ListTrialComponentsOutputResponse: Swift.Equatable {
    /// A token for getting the next set of components, if there are any.
    public var nextToken: Swift.String?
    /// A list of the summaries of your trial components.
    public var trialComponentSummaries: [SageMakerClientTypes.TrialComponentSummary]?

    public init (
        nextToken: Swift.String? = nil,
        trialComponentSummaries: [SageMakerClientTypes.TrialComponentSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trialComponentSummaries = trialComponentSummaries
    }
}

struct ListTrialComponentsOutputResponseBody: Swift.Equatable {
    let trialComponentSummaries: [SageMakerClientTypes.TrialComponentSummary]?
    let nextToken: Swift.String?
}

extension ListTrialComponentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case trialComponentSummaries = "TrialComponentSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrialComponentSummary?].self, forKey: .trialComponentSummaries)
        var trialComponentSummariesDecoded0:[SageMakerClientTypes.TrialComponentSummary]? = nil
        if let trialComponentSummariesContainer = trialComponentSummariesContainer {
            trialComponentSummariesDecoded0 = [SageMakerClientTypes.TrialComponentSummary]()
            for structure0 in trialComponentSummariesContainer {
                if let structure0 = structure0 {
                    trialComponentSummariesDecoded0?.append(structure0)
                }
            }
        }
        trialComponentSummaries = trialComponentSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTrialsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case experimentName = "ExperimentName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case trialComponentName = "TrialComponentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
    }
}

extension ListTrialsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTrialsInput: Swift.Equatable {
    /// A filter that returns only trials created after the specified time.
    public var createdAfter: ClientRuntime.Date?
    /// A filter that returns only trials created before the specified time.
    public var createdBefore: ClientRuntime.Date?
    /// A filter that returns only trials that are part of the specified experiment.
    public var experimentName: Swift.String?
    /// The maximum number of trials to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListTrials didn't return the full set of trials, the call returns a token for getting the next set of trials.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortTrialsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only trials that are associated with the specified trial component.
    public var trialComponentName: Swift.String?

    public init (
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        experimentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortTrialsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        trialComponentName: Swift.String? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.experimentName = experimentName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.trialComponentName = trialComponentName
    }
}

struct ListTrialsInputBody: Swift.Equatable {
    let experimentName: Swift.String?
    let trialComponentName: Swift.String?
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let sortBy: SageMakerClientTypes.SortTrialsBy?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListTrialsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case experimentName = "ExperimentName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case trialComponentName = "TrialComponentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortTrialsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTrialsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTrialsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTrialsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTrialsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTrialsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.trialSummaries = output.trialSummaries
        } else {
            self.nextToken = nil
            self.trialSummaries = nil
        }
    }
}

public struct ListTrialsOutputResponse: Swift.Equatable {
    /// A token for getting the next set of trials, if there are any.
    public var nextToken: Swift.String?
    /// A list of the summaries of your trials.
    public var trialSummaries: [SageMakerClientTypes.TrialSummary]?

    public init (
        nextToken: Swift.String? = nil,
        trialSummaries: [SageMakerClientTypes.TrialSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trialSummaries = trialSummaries
    }
}

struct ListTrialsOutputResponseBody: Swift.Equatable {
    let trialSummaries: [SageMakerClientTypes.TrialSummary]?
    let nextToken: Swift.String?
}

extension ListTrialsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case trialSummaries = "TrialSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrialSummary?].self, forKey: .trialSummaries)
        var trialSummariesDecoded0:[SageMakerClientTypes.TrialSummary]? = nil
        if let trialSummariesContainer = trialSummariesContainer {
            trialSummariesDecoded0 = [SageMakerClientTypes.TrialSummary]()
            for structure0 in trialSummariesContainer {
                if let structure0 = structure0 {
                    trialSummariesDecoded0?.append(structure0)
                }
            }
        }
        trialSummaries = trialSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListUserProfilesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIdEquals = "DomainIdEquals"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case userProfileNameContains = "UserProfileNameContains"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainIdEquals = domainIdEquals {
            try encodeContainer.encode(domainIdEquals, forKey: .domainIdEquals)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let userProfileNameContains = userProfileNameContains {
            try encodeContainer.encode(userProfileNameContains, forKey: .userProfileNameContains)
        }
    }
}

extension ListUserProfilesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListUserProfilesInput: Swift.Equatable {
    /// A parameter by which to filter the results.
    public var domainIdEquals: Swift.String?
    /// Returns a list up to a specified limit.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.UserProfileSortKey?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A parameter by which to filter the results.
    public var userProfileNameContains: Swift.String?

    public init (
        domainIdEquals: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.UserProfileSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        userProfileNameContains: Swift.String? = nil
    )
    {
        self.domainIdEquals = domainIdEquals
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.userProfileNameContains = userProfileNameContains
    }
}

struct ListUserProfilesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let sortBy: SageMakerClientTypes.UserProfileSortKey?
    let domainIdEquals: Swift.String?
    let userProfileNameContains: Swift.String?
}

extension ListUserProfilesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIdEquals = "DomainIdEquals"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case userProfileNameContains = "UserProfileNameContains"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserProfileSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let domainIdEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainIdEquals)
        domainIdEquals = domainIdEqualsDecoded
        let userProfileNameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileNameContains)
        userProfileNameContains = userProfileNameContainsDecoded
    }
}

extension ListUserProfilesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUserProfilesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListUserProfilesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUserProfilesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListUserProfilesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.userProfiles = output.userProfiles
        } else {
            self.nextToken = nil
            self.userProfiles = nil
        }
    }
}

public struct ListUserProfilesOutputResponse: Swift.Equatable {
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The list of user profiles.
    public var userProfiles: [SageMakerClientTypes.UserProfileDetails]?

    public init (
        nextToken: Swift.String? = nil,
        userProfiles: [SageMakerClientTypes.UserProfileDetails]? = nil
    )
    {
        self.nextToken = nextToken
        self.userProfiles = userProfiles
    }
}

struct ListUserProfilesOutputResponseBody: Swift.Equatable {
    let userProfiles: [SageMakerClientTypes.UserProfileDetails]?
    let nextToken: Swift.String?
}

extension ListUserProfilesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case userProfiles = "UserProfiles"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userProfilesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.UserProfileDetails?].self, forKey: .userProfiles)
        var userProfilesDecoded0:[SageMakerClientTypes.UserProfileDetails]? = nil
        if let userProfilesContainer = userProfilesContainer {
            userProfilesDecoded0 = [SageMakerClientTypes.UserProfileDetails]()
            for structure0 in userProfilesContainer {
                if let structure0 = structure0 {
                    userProfilesDecoded0?.append(structure0)
                }
            }
        }
        userProfiles = userProfilesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListWorkforcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListWorkforcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListWorkforcesInput: Swift.Equatable {
    /// The maximum number of workforces returned in the response.
    public var maxResults: Swift.Int?
    /// A filter you can use to search for workforces using part of the workforce name.
    public var nameContains: Swift.String?
    /// A token to resume pagination.
    public var nextToken: Swift.String?
    /// Sort workforces using the workforce name or creation date.
    public var sortBy: SageMakerClientTypes.ListWorkforcesSortByOptions?
    /// Sort workforces in ascending or descending order.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListWorkforcesSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListWorkforcesInputBody: Swift.Equatable {
    let sortBy: SageMakerClientTypes.ListWorkforcesSortByOptions?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nameContains: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListWorkforcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ListWorkforcesSortByOptions.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListWorkforcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWorkforcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListWorkforcesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWorkforcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListWorkforcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.workforces = output.workforces
        } else {
            self.nextToken = nil
            self.workforces = nil
        }
    }
}

public struct ListWorkforcesOutputResponse: Swift.Equatable {
    /// A token to resume pagination.
    public var nextToken: Swift.String?
    /// A list containing information about your workforce.
    /// This member is required.
    public var workforces: [SageMakerClientTypes.Workforce]?

    public init (
        nextToken: Swift.String? = nil,
        workforces: [SageMakerClientTypes.Workforce]? = nil
    )
    {
        self.nextToken = nextToken
        self.workforces = workforces
    }
}

struct ListWorkforcesOutputResponseBody: Swift.Equatable {
    let workforces: [SageMakerClientTypes.Workforce]?
    let nextToken: Swift.String?
}

extension ListWorkforcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case workforces = "Workforces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforcesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Workforce?].self, forKey: .workforces)
        var workforcesDecoded0:[SageMakerClientTypes.Workforce]? = nil
        if let workforcesContainer = workforcesContainer {
            workforcesDecoded0 = [SageMakerClientTypes.Workforce]()
            for structure0 in workforcesContainer {
                if let structure0 = structure0 {
                    workforcesDecoded0?.append(structure0)
                }
            }
        }
        workforces = workforcesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SageMakerClientTypes {
    public enum ListWorkforcesSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdate
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListWorkforcesSortByOptions] {
            return [
                .createdate,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdate: return "CreateDate"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListWorkforcesSortByOptions(rawValue: rawValue) ?? ListWorkforcesSortByOptions.sdkUnknown(rawValue)
        }
    }
}

extension ListWorkteamsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nameContains = nameContains {
            try encodeContainer.encode(nameContains, forKey: .nameContains)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListWorkteamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListWorkteamsInput: Swift.Equatable {
    /// The maximum number of work teams to return in each page of the response.
    public var maxResults: Swift.Int?
    /// A string in the work team's name. This filter returns only work teams whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListWorkteams request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ListWorkteamsSortByOptions?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListWorkteamsSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListWorkteamsInputBody: Swift.Equatable {
    let sortBy: SageMakerClientTypes.ListWorkteamsSortByOptions?
    let sortOrder: SageMakerClientTypes.SortOrder?
    let nameContains: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListWorkteamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ListWorkteamsSortByOptions.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListWorkteamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWorkteamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListWorkteamsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWorkteamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListWorkteamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.workteams = output.workteams
        } else {
            self.nextToken = nil
            self.workteams = nil
        }
    }
}

public struct ListWorkteamsOutputResponse: Swift.Equatable {
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of work teams, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// An array of Workteam objects, each describing a work team.
    /// This member is required.
    public var workteams: [SageMakerClientTypes.Workteam]?

    public init (
        nextToken: Swift.String? = nil,
        workteams: [SageMakerClientTypes.Workteam]? = nil
    )
    {
        self.nextToken = nextToken
        self.workteams = workteams
    }
}

struct ListWorkteamsOutputResponseBody: Swift.Equatable {
    let workteams: [SageMakerClientTypes.Workteam]?
    let nextToken: Swift.String?
}

extension ListWorkteamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case workteams = "Workteams"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Workteam?].self, forKey: .workteams)
        var workteamsDecoded0:[SageMakerClientTypes.Workteam]? = nil
        if let workteamsContainer = workteamsContainer {
            workteamsDecoded0 = [SageMakerClientTypes.Workteam]()
            for structure0 in workteamsContainer {
                if let structure0 = structure0 {
                    workteamsDecoded0?.append(structure0)
                }
            }
        }
        workteams = workteamsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SageMakerClientTypes {
    public enum ListWorkteamsSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdate
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListWorkteamsSortByOptions] {
            return [
                .createdate,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdate: return "CreateDate"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListWorkteamsSortByOptions(rawValue: rawValue) ?? ListWorkteamsSortByOptions.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.MemberDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cognitoMemberDefinition = "CognitoMemberDefinition"
        case oidcMemberDefinition = "OidcMemberDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cognitoMemberDefinition = cognitoMemberDefinition {
            try encodeContainer.encode(cognitoMemberDefinition, forKey: .cognitoMemberDefinition)
        }
        if let oidcMemberDefinition = oidcMemberDefinition {
            try encodeContainer.encode(oidcMemberDefinition, forKey: .oidcMemberDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cognitoMemberDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CognitoMemberDefinition.self, forKey: .cognitoMemberDefinition)
        cognitoMemberDefinition = cognitoMemberDefinitionDecoded
        let oidcMemberDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OidcMemberDefinition.self, forKey: .oidcMemberDefinition)
        oidcMemberDefinition = oidcMemberDefinitionDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines an Amazon Cognito or your own OIDC IdP user group that is part of a work team.
    public struct MemberDefinition: Swift.Equatable {
        /// The Amazon Cognito user group that is part of the work team.
        public var cognitoMemberDefinition: SageMakerClientTypes.CognitoMemberDefinition?
        /// A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of Groups, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.
        public var oidcMemberDefinition: SageMakerClientTypes.OidcMemberDefinition?

        public init (
            cognitoMemberDefinition: SageMakerClientTypes.CognitoMemberDefinition? = nil,
            oidcMemberDefinition: SageMakerClientTypes.OidcMemberDefinition? = nil
        )
        {
            self.cognitoMemberDefinition = cognitoMemberDefinition
            self.oidcMemberDefinition = oidcMemberDefinition
        }
    }

}

extension SageMakerClientTypes.MetadataProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitId = "CommitId"
        case generatedBy = "GeneratedBy"
        case projectId = "ProjectId"
        case repository = "Repository"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitId = commitId {
            try encodeContainer.encode(commitId, forKey: .commitId)
        }
        if let generatedBy = generatedBy {
            try encodeContainer.encode(generatedBy, forKey: .generatedBy)
        }
        if let projectId = projectId {
            try encodeContainer.encode(projectId, forKey: .projectId)
        }
        if let repository = repository {
            try encodeContainer.encode(repository, forKey: .repository)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitId)
        commitId = commitIdDecoded
        let repositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repository)
        repository = repositoryDecoded
        let generatedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generatedBy)
        generatedBy = generatedByDecoded
        let projectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectId)
        projectId = projectIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Metadata properties of the tracking entity, trial, or trial component.
    public struct MetadataProperties: Swift.Equatable {
        /// The commit ID.
        public var commitId: Swift.String?
        /// The entity this entity was generated by.
        public var generatedBy: Swift.String?
        /// The project ID.
        public var projectId: Swift.String?
        /// The repository.
        public var repository: Swift.String?

        public init (
            commitId: Swift.String? = nil,
            generatedBy: Swift.String? = nil,
            projectId: Swift.String? = nil,
            repository: Swift.String? = nil
        )
        {
            self.commitId = commitId
            self.generatedBy = generatedBy
            self.projectId = projectId
            self.repository = repository
        }
    }

}

extension SageMakerClientTypes.MetricData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case timestamp = "Timestamp"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let valueDecoded = try containerValues.decode(Swift.Float.self, forKey: .value)
        value = valueDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension SageMakerClientTypes {
    /// The name, value, and date and time of a metric that was emitted to Amazon CloudWatch.
    public struct MetricData: Swift.Equatable {
        /// The name of the metric.
        public var metricName: Swift.String?
        /// The date and time that the algorithm emitted the metric.
        public var timestamp: ClientRuntime.Date?
        /// The value of the metric.
        public var value: Swift.Float

        public init (
            metricName: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil,
            value: Swift.Float = 0.0
        )
        {
            self.metricName = metricName
            self.timestamp = timestamp
            self.value = value
        }
    }

}

extension SageMakerClientTypes.MetricDatum: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case `set` = "Set"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let `set` = `set` {
            try encodeContainer.encode(`set`.rawValue, forKey: .`set`)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLMetricEnum.self, forKey: .metricName)
        metricName = metricNameDecoded
        let valueDecoded = try containerValues.decode(Swift.Float.self, forKey: .value)
        value = valueDecoded
        let setDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricSetSource.self, forKey: .set)
        `set` = setDecoded
    }
}

extension SageMakerClientTypes {
    /// Information about the metric for a candidate produced by an AutoML job.
    public struct MetricDatum: Swift.Equatable {
        /// The name of the metric.
        public var metricName: SageMakerClientTypes.AutoMLMetricEnum?
        /// The dataset split from which the AutoML job produced the metric.
        public var `set`: SageMakerClientTypes.MetricSetSource?
        /// The value of the metric.
        public var value: Swift.Float

        public init (
            metricName: SageMakerClientTypes.AutoMLMetricEnum? = nil,
            `set`: SageMakerClientTypes.MetricSetSource? = nil,
            value: Swift.Float = 0.0
        )
        {
            self.metricName = metricName
            self.`set` = `set`
            self.value = value
        }
    }

}

extension SageMakerClientTypes.MetricDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case regex = "Regex"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regex = regex {
            try encodeContainer.encode(regex, forKey: .regex)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let regexDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regex)
        regex = regexDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies a metric that the training algorithm writes to stderr or stdout. Amazon SageMakerhyperparameter tuning captures all defined metrics. You specify one metric that a hyperparameter tuning job uses as its objective metric to choose the best training job.
    public struct MetricDefinition: Swift.Equatable {
        /// The name of the metric.
        /// This member is required.
        public var name: Swift.String?
        /// A regular expression that searches the output of a training job and gets the value of the metric. For more information about using regular expressions to define metrics, see [Defining Objective Metrics](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics.html).
        /// This member is required.
        public var regex: Swift.String?

        public init (
            name: Swift.String? = nil,
            regex: Swift.String? = nil
        )
        {
            self.name = name
            self.regex = regex
        }
    }

}

extension SageMakerClientTypes {
    public enum MetricSetSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case test
        case train
        case validation
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricSetSource] {
            return [
                .test,
                .train,
                .validation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .test: return "Test"
            case .train: return "Train"
            case .validation: return "Validation"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricSetSource(rawValue: rawValue) ?? MetricSetSource.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.MetricsSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentDigest = "ContentDigest"
        case contentType = "ContentType"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentDigest = contentDigest {
            try encodeContainer.encode(contentDigest, forKey: .contentDigest)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let contentDigestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentDigest)
        contentDigest = contentDigestDecoded
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
    }
}

extension SageMakerClientTypes {
    ///
    public struct MetricsSource: Swift.Equatable {
        ///
        public var contentDigest: Swift.String?
        ///
        /// This member is required.
        public var contentType: Swift.String?
        ///
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            contentDigest: Swift.String? = nil,
            contentType: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.contentDigest = contentDigest
            self.contentType = contentType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    public enum ModelApprovalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case approved
        case pendingManualApproval
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelApprovalStatus] {
            return [
                .approved,
                .pendingManualApproval,
                .rejected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .approved: return "Approved"
            case .pendingManualApproval: return "PendingManualApproval"
            case .rejected: return "Rejected"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelApprovalStatus(rawValue: rawValue) ?? ModelApprovalStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ModelArtifacts: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3ModelArtifacts = "S3ModelArtifacts"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3ModelArtifacts = s3ModelArtifacts {
            try encodeContainer.encode(s3ModelArtifacts, forKey: .s3ModelArtifacts)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ModelArtifactsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3ModelArtifacts)
        s3ModelArtifacts = s3ModelArtifactsDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides information about the location that is configured for storing model artifacts. Model artifacts are the output that results from training a model, and typically consist of trained parameters, a model definition that describes how to compute inferences, and other metadata.
    public struct ModelArtifacts: Swift.Equatable {
        /// The path of the S3 object that contains the model artifacts. For example, s3://bucket-name/keynameprefix/model.tar.gz.
        /// This member is required.
        public var s3ModelArtifacts: Swift.String?

        public init (
            s3ModelArtifacts: Swift.String? = nil
        )
        {
            self.s3ModelArtifacts = s3ModelArtifacts
        }
    }

}

extension SageMakerClientTypes.ModelBiasAppSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configUri = "ConfigUri"
        case environment = "Environment"
        case imageUri = "ImageUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configUri = configUri {
            try encodeContainer.encode(configUri, forKey: .configUri)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, monitoringenvironmentmap0) in environment {
                try environmentContainer.encode(monitoringenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let imageUri = imageUri {
            try encodeContainer.encode(imageUri, forKey: .imageUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let configUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configUri)
        configUri = configUriDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
    }
}

extension SageMakerClientTypes {
    /// Docker container image configuration object for the model bias job.
    public struct ModelBiasAppSpecification: Swift.Equatable {
        /// JSON formatted S3 file that defines bias parameters. For more information on this JSON configuration file, see [Configure bias parameters](https://docs.aws.amazon.com/sagemaker/latest/json-bias-parameter-config.html).
        /// This member is required.
        public var configUri: Swift.String?
        /// Sets the environment variables in the Docker container.
        public var environment: [Swift.String:Swift.String]?
        /// The container image to be run by the model bias job.
        /// This member is required.
        public var imageUri: Swift.String?

        public init (
            configUri: Swift.String? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            imageUri: Swift.String? = nil
        )
        {
            self.configUri = configUri
            self.environment = environment
            self.imageUri = imageUri
        }
    }

}

extension SageMakerClientTypes.ModelBiasBaselineConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseliningJobName = "BaseliningJobName"
        case constraintsResource = "ConstraintsResource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseliningJobName = baseliningJobName {
            try encodeContainer.encode(baseliningJobName, forKey: .baseliningJobName)
        }
        if let constraintsResource = constraintsResource {
            try encodeContainer.encode(constraintsResource, forKey: .constraintsResource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseliningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseliningJobName)
        baseliningJobName = baseliningJobNameDecoded
        let constraintsResourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringConstraintsResource.self, forKey: .constraintsResource)
        constraintsResource = constraintsResourceDecoded
    }
}

extension SageMakerClientTypes {
    /// The configuration for a baseline model bias job.
    public struct ModelBiasBaselineConfig: Swift.Equatable {
        /// The name of the baseline model bias job.
        public var baseliningJobName: Swift.String?
        /// The constraints resource for a monitoring job.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?

        public init (
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
        }
    }

}

extension SageMakerClientTypes.ModelBiasJobInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointInput = "EndpointInput"
        case groundTruthS3Input = "GroundTruthS3Input"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointInput = endpointInput {
            try encodeContainer.encode(endpointInput, forKey: .endpointInput)
        }
        if let groundTruthS3Input = groundTruthS3Input {
            try encodeContainer.encode(groundTruthS3Input, forKey: .groundTruthS3Input)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointInput.self, forKey: .endpointInput)
        endpointInput = endpointInputDecoded
        let groundTruthS3InputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringGroundTruthS3Input.self, forKey: .groundTruthS3Input)
        groundTruthS3Input = groundTruthS3InputDecoded
    }
}

extension SageMakerClientTypes {
    /// Inputs for the model bias job.
    public struct ModelBiasJobInput: Swift.Equatable {
        /// Input object for the endpoint
        /// This member is required.
        public var endpointInput: SageMakerClientTypes.EndpointInput?
        /// Location of ground truth labels to use in model bias job.
        /// This member is required.
        public var groundTruthS3Input: SageMakerClientTypes.MonitoringGroundTruthS3Input?

        public init (
            endpointInput: SageMakerClientTypes.EndpointInput? = nil,
            groundTruthS3Input: SageMakerClientTypes.MonitoringGroundTruthS3Input? = nil
        )
        {
            self.endpointInput = endpointInput
            self.groundTruthS3Input = groundTruthS3Input
        }
    }

}

extension SageMakerClientTypes {
    public enum ModelCacheSetting: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCacheSetting] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelCacheSetting(rawValue: rawValue) ?? ModelCacheSetting.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ModelClientConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invocationsMaxRetries = "InvocationsMaxRetries"
        case invocationsTimeoutInSeconds = "InvocationsTimeoutInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invocationsMaxRetries = invocationsMaxRetries {
            try encodeContainer.encode(invocationsMaxRetries, forKey: .invocationsMaxRetries)
        }
        if let invocationsTimeoutInSeconds = invocationsTimeoutInSeconds {
            try encodeContainer.encode(invocationsTimeoutInSeconds, forKey: .invocationsTimeoutInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invocationsTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .invocationsTimeoutInSeconds)
        invocationsTimeoutInSeconds = invocationsTimeoutInSecondsDecoded
        let invocationsMaxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .invocationsMaxRetries)
        invocationsMaxRetries = invocationsMaxRetriesDecoded
    }
}

extension SageMakerClientTypes {
    /// Configures the timeout and maximum number of retries for processing a transform job invocation.
    public struct ModelClientConfig: Swift.Equatable {
        /// The maximum number of retries when invocation requests are failing.
        public var invocationsMaxRetries: Swift.Int?
        /// The timeout value in seconds for an invocation request.
        public var invocationsTimeoutInSeconds: Swift.Int?

        public init (
            invocationsMaxRetries: Swift.Int? = nil,
            invocationsTimeoutInSeconds: Swift.Int? = nil
        )
        {
            self.invocationsMaxRetries = invocationsMaxRetries
            self.invocationsTimeoutInSeconds = invocationsTimeoutInSeconds
        }
    }

}

extension SageMakerClientTypes.ModelConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentParameters = "EnvironmentParameters"
        case inferenceSpecificationName = "InferenceSpecificationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let environmentParameters = environmentParameters {
            var environmentParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentParameters)
            for environmentparameters0 in environmentParameters {
                try environmentParametersContainer.encode(environmentparameters0)
            }
        }
        if let inferenceSpecificationName = inferenceSpecificationName {
            try encodeContainer.encode(inferenceSpecificationName, forKey: .inferenceSpecificationName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSpecificationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSpecificationName)
        inferenceSpecificationName = inferenceSpecificationNameDecoded
        let environmentParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EnvironmentParameter?].self, forKey: .environmentParameters)
        var environmentParametersDecoded0:[SageMakerClientTypes.EnvironmentParameter]? = nil
        if let environmentParametersContainer = environmentParametersContainer {
            environmentParametersDecoded0 = [SageMakerClientTypes.EnvironmentParameter]()
            for structure0 in environmentParametersContainer {
                if let structure0 = structure0 {
                    environmentParametersDecoded0?.append(structure0)
                }
            }
        }
        environmentParameters = environmentParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Defines the model configuration. Includes the specification name and environment parameters.
    public struct ModelConfiguration: Swift.Equatable {
        /// Defines the environment parameters that includes key, value types, and values.
        public var environmentParameters: [SageMakerClientTypes.EnvironmentParameter]?
        /// The inference specification name in the model package version.
        public var inferenceSpecificationName: Swift.String?

        public init (
            environmentParameters: [SageMakerClientTypes.EnvironmentParameter]? = nil,
            inferenceSpecificationName: Swift.String? = nil
        )
        {
            self.environmentParameters = environmentParameters
            self.inferenceSpecificationName = inferenceSpecificationName
        }
    }

}

extension SageMakerClientTypes.ModelDataQuality: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints = "Constraints"
        case statistics = "Statistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let statistics = statistics {
            try encodeContainer.encode(statistics, forKey: .statistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statisticsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .statistics)
        statistics = statisticsDecoded
        let constraintsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .constraints)
        constraints = constraintsDecoded
    }
}

extension SageMakerClientTypes {
    /// Data quality constraints and statistics for a model.
    public struct ModelDataQuality: Swift.Equatable {
        /// Data quality constraints for a model.
        public var constraints: SageMakerClientTypes.MetricsSource?
        /// Data quality statistics for a model.
        public var statistics: SageMakerClientTypes.MetricsSource?

        public init (
            constraints: SageMakerClientTypes.MetricsSource? = nil,
            statistics: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.constraints = constraints
            self.statistics = statistics
        }
    }

}

extension SageMakerClientTypes.ModelDeployConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoGenerateEndpointName = "AutoGenerateEndpointName"
        case endpointName = "EndpointName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if autoGenerateEndpointName != false {
            try encodeContainer.encode(autoGenerateEndpointName, forKey: .autoGenerateEndpointName)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoGenerateEndpointNameDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoGenerateEndpointName)
        autoGenerateEndpointName = autoGenerateEndpointNameDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.
    public struct ModelDeployConfig: Swift.Equatable {
        /// Set to True to automatically generate an endpoint name for a one-click Autopilot model deployment; set to False otherwise. The default value is False. If you set AutoGenerateEndpointName to True, do not specify the EndpointName; otherwise a 400 error is thrown.
        public var autoGenerateEndpointName: Swift.Bool
        /// Specifies the endpoint name to use for a one-click Autopilot model deployment if the endpoint name is not generated automatically. Specify the EndpointName if and only if you set AutoGenerateEndpointName to False; otherwise a 400 error is thrown.
        public var endpointName: Swift.String?

        public init (
            autoGenerateEndpointName: Swift.Bool = false,
            endpointName: Swift.String? = nil
        )
        {
            self.autoGenerateEndpointName = autoGenerateEndpointName
            self.endpointName = endpointName
        }
    }

}

extension SageMakerClientTypes.ModelDeployResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides information about the endpoint of the model deployment.
    public struct ModelDeployResult: Swift.Equatable {
        /// The name of the endpoint to which the model has been deployed. If model deployment fails, this field is omitted from the response.
        public var endpointName: Swift.String?

        public init (
            endpointName: Swift.String? = nil
        )
        {
            self.endpointName = endpointName
        }
    }

}

extension SageMakerClientTypes.ModelDigests: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactDigest = "ArtifactDigest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactDigest = artifactDigest {
            try encodeContainer.encode(artifactDigest, forKey: .artifactDigest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactDigestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactDigest)
        artifactDigest = artifactDigestDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides information to verify the integrity of stored model artifacts.
    public struct ModelDigests: Swift.Equatable {
        /// Provides a hash value that uniquely identifies the stored model artifacts.
        public var artifactDigest: Swift.String?

        public init (
            artifactDigest: Swift.String? = nil
        )
        {
            self.artifactDigest = artifactDigest
        }
    }

}

extension SageMakerClientTypes.ModelExplainabilityAppSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configUri = "ConfigUri"
        case environment = "Environment"
        case imageUri = "ImageUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configUri = configUri {
            try encodeContainer.encode(configUri, forKey: .configUri)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, monitoringenvironmentmap0) in environment {
                try environmentContainer.encode(monitoringenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let imageUri = imageUri {
            try encodeContainer.encode(imageUri, forKey: .imageUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let configUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configUri)
        configUri = configUriDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
    }
}

extension SageMakerClientTypes {
    /// Docker container image configuration object for the model explainability job.
    public struct ModelExplainabilityAppSpecification: Swift.Equatable {
        /// JSON formatted S3 file that defines explainability parameters. For more information on this JSON configuration file, see [Configure model explainability parameters](https://docs.aws.amazon.com/sagemaker/latest/json-model-explainability-parameter-config.html).
        /// This member is required.
        public var configUri: Swift.String?
        /// Sets the environment variables in the Docker container.
        public var environment: [Swift.String:Swift.String]?
        /// The container image to be run by the model explainability job.
        /// This member is required.
        public var imageUri: Swift.String?

        public init (
            configUri: Swift.String? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            imageUri: Swift.String? = nil
        )
        {
            self.configUri = configUri
            self.environment = environment
            self.imageUri = imageUri
        }
    }

}

extension SageMakerClientTypes.ModelExplainabilityBaselineConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseliningJobName = "BaseliningJobName"
        case constraintsResource = "ConstraintsResource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseliningJobName = baseliningJobName {
            try encodeContainer.encode(baseliningJobName, forKey: .baseliningJobName)
        }
        if let constraintsResource = constraintsResource {
            try encodeContainer.encode(constraintsResource, forKey: .constraintsResource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseliningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseliningJobName)
        baseliningJobName = baseliningJobNameDecoded
        let constraintsResourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringConstraintsResource.self, forKey: .constraintsResource)
        constraintsResource = constraintsResourceDecoded
    }
}

extension SageMakerClientTypes {
    /// The configuration for a baseline model explainability job.
    public struct ModelExplainabilityBaselineConfig: Swift.Equatable {
        /// The name of the baseline model explainability job.
        public var baseliningJobName: Swift.String?
        /// The constraints resource for a monitoring job.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?

        public init (
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
        }
    }

}

extension SageMakerClientTypes.ModelExplainabilityJobInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointInput = "EndpointInput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointInput = endpointInput {
            try encodeContainer.encode(endpointInput, forKey: .endpointInput)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointInput.self, forKey: .endpointInput)
        endpointInput = endpointInputDecoded
    }
}

extension SageMakerClientTypes {
    /// Inputs for the model explainability job.
    public struct ModelExplainabilityJobInput: Swift.Equatable {
        /// Input object for the endpoint
        /// This member is required.
        public var endpointInput: SageMakerClientTypes.EndpointInput?

        public init (
            endpointInput: SageMakerClientTypes.EndpointInput? = nil
        )
        {
            self.endpointInput = endpointInput
        }
    }

}

extension SageMakerClientTypes.ModelInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataInputConfig = "DataInputConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataInputConfig = dataInputConfig {
            try encodeContainer.encode(dataInputConfig, forKey: .dataInputConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataInputConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataInputConfig)
        dataInputConfig = dataInputConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Input object for the model.
    public struct ModelInput: Swift.Equatable {
        /// The input configuration object for the model.
        /// This member is required.
        public var dataInputConfig: Swift.String?

        public init (
            dataInputConfig: Swift.String? = nil
        )
        {
            self.dataInputConfig = dataInputConfig
        }
    }

}

extension SageMakerClientTypes.ModelLatencyThreshold: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case percentile = "Percentile"
        case valueInMilliseconds = "ValueInMilliseconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let percentile = percentile {
            try encodeContainer.encode(percentile, forKey: .percentile)
        }
        if valueInMilliseconds != 0 {
            try encodeContainer.encode(valueInMilliseconds, forKey: .valueInMilliseconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .percentile)
        percentile = percentileDecoded
        let valueInMillisecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .valueInMilliseconds)
        valueInMilliseconds = valueInMillisecondsDecoded
    }
}

extension SageMakerClientTypes {
    /// The model latency threshold.
    public struct ModelLatencyThreshold: Swift.Equatable {
        /// The model latency percentile threshold.
        public var percentile: Swift.String?
        /// The model latency percentile value in milliseconds.
        public var valueInMilliseconds: Swift.Int

        public init (
            percentile: Swift.String? = nil,
            valueInMilliseconds: Swift.Int = 0
        )
        {
            self.percentile = percentile
            self.valueInMilliseconds = valueInMilliseconds
        }
    }

}

extension SageMakerClientTypes.ModelMetadataFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelMetadataFilterType.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// Part of the search expression. You can specify the name and value (domain, task, framework, framework version, task, and model).
    public struct ModelMetadataFilter: Swift.Equatable {
        /// The name of the of the model to filter by.
        /// This member is required.
        public var name: SageMakerClientTypes.ModelMetadataFilterType?
        /// The value to filter the model metadata.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: SageMakerClientTypes.ModelMetadataFilterType? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    public enum ModelMetadataFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domain
        case framework
        case frameworkversion
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelMetadataFilterType] {
            return [
                .domain,
                .framework,
                .frameworkversion,
                .task,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domain: return "Domain"
            case .framework: return "Framework"
            case .frameworkversion: return "FrameworkVersion"
            case .task: return "Task"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelMetadataFilterType(rawValue: rawValue) ?? ModelMetadataFilterType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ModelMetadataSearchExpression: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for modelmetadatafilters0 in filters {
                try filtersContainer.encode(modelmetadatafilters0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelMetadataFilter?].self, forKey: .filters)
        var filtersDecoded0:[SageMakerClientTypes.ModelMetadataFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SageMakerClientTypes.ModelMetadataFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

extension SageMakerClientTypes {
    /// One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results
    public struct ModelMetadataSearchExpression: Swift.Equatable {
        /// A list of filter objects.
        public var filters: [SageMakerClientTypes.ModelMetadataFilter]?

        public init (
            filters: [SageMakerClientTypes.ModelMetadataFilter]? = nil
        )
        {
            self.filters = filters
        }
    }

}

extension SageMakerClientTypes.ModelMetadataSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case framework = "Framework"
        case frameworkVersion = "FrameworkVersion"
        case model = "Model"
        case task = "Task"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let framework = framework {
            try encodeContainer.encode(framework, forKey: .framework)
        }
        if let frameworkVersion = frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let model = model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let task = task {
            try encodeContainer.encode(task, forKey: .task)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .framework)
        framework = frameworkDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .task)
        task = taskDecoded
        let modelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .model)
        model = modelDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
    }
}

extension SageMakerClientTypes {
    /// A summary of the model metadata.
    public struct ModelMetadataSummary: Swift.Equatable {
        /// The machine learning domain of the model.
        /// This member is required.
        public var domain: Swift.String?
        /// The machine learning framework of the model.
        /// This member is required.
        public var framework: Swift.String?
        /// The framework version of the model.
        /// This member is required.
        public var frameworkVersion: Swift.String?
        /// The name of the model.
        /// This member is required.
        public var model: Swift.String?
        /// The machine learning task of the model.
        /// This member is required.
        public var task: Swift.String?

        public init (
            domain: Swift.String? = nil,
            framework: Swift.String? = nil,
            frameworkVersion: Swift.String? = nil,
            model: Swift.String? = nil,
            task: Swift.String? = nil
        )
        {
            self.domain = domain
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.model = model
            self.task = task
        }
    }

}

extension SageMakerClientTypes.ModelMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bias = "Bias"
        case explainability = "Explainability"
        case modelDataQuality = "ModelDataQuality"
        case modelQuality = "ModelQuality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bias = bias {
            try encodeContainer.encode(bias, forKey: .bias)
        }
        if let explainability = explainability {
            try encodeContainer.encode(explainability, forKey: .explainability)
        }
        if let modelDataQuality = modelDataQuality {
            try encodeContainer.encode(modelDataQuality, forKey: .modelDataQuality)
        }
        if let modelQuality = modelQuality {
            try encodeContainer.encode(modelQuality, forKey: .modelQuality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelQualityDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQuality.self, forKey: .modelQuality)
        modelQuality = modelQualityDecoded
        let modelDataQualityDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelDataQuality.self, forKey: .modelDataQuality)
        modelDataQuality = modelDataQualityDecoded
        let biasDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Bias.self, forKey: .bias)
        bias = biasDecoded
        let explainabilityDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Explainability.self, forKey: .explainability)
        explainability = explainabilityDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains metrics captured from a model.
    public struct ModelMetrics: Swift.Equatable {
        /// Metrics that measure bais in a model.
        public var bias: SageMakerClientTypes.Bias?
        /// Metrics that help explain a model.
        public var explainability: SageMakerClientTypes.Explainability?
        /// Metrics that measure the quality of the input data for a model.
        public var modelDataQuality: SageMakerClientTypes.ModelDataQuality?
        /// Metrics that measure the quality of a model.
        public var modelQuality: SageMakerClientTypes.ModelQuality?

        public init (
            bias: SageMakerClientTypes.Bias? = nil,
            explainability: SageMakerClientTypes.Explainability? = nil,
            modelDataQuality: SageMakerClientTypes.ModelDataQuality? = nil,
            modelQuality: SageMakerClientTypes.ModelQuality? = nil
        )
        {
            self.bias = bias
            self.explainability = explainability
            self.modelDataQuality = modelDataQuality
            self.modelQuality = modelQuality
        }
    }

}

extension SageMakerClientTypes.ModelPackage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecifications = "AdditionalInferenceSpecifications"
        case approvalDescription = "ApprovalDescription"
        case certifyForMarketplace = "CertifyForMarketplace"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case domain = "Domain"
        case driftCheckBaselines = "DriftCheckBaselines"
        case inferenceSpecification = "InferenceSpecification"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageArn = "ModelPackageArn"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case modelPackageStatus = "ModelPackageStatus"
        case modelPackageStatusDetails = "ModelPackageStatusDetails"
        case modelPackageVersion = "ModelPackageVersion"
        case samplePayloadUrl = "SamplePayloadUrl"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case tags = "Tags"
        case task = "Task"
        case validationSpecification = "ValidationSpecification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInferenceSpecifications = additionalInferenceSpecifications {
            var additionalInferenceSpecificationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalInferenceSpecifications)
            for additionalinferencespecifications0 in additionalInferenceSpecifications {
                try additionalInferenceSpecificationsContainer.encode(additionalinferencespecifications0)
            }
        }
        if let approvalDescription = approvalDescription {
            try encodeContainer.encode(approvalDescription, forKey: .approvalDescription)
        }
        if certifyForMarketplace != false {
            try encodeContainer.encode(certifyForMarketplace, forKey: .certifyForMarketplace)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let customerMetadataProperties = customerMetadataProperties {
            var customerMetadataPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customerMetadataProperties)
            for (dictKey0, customermetadatamap0) in customerMetadataProperties {
                try customerMetadataPropertiesContainer.encode(customermetadatamap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let driftCheckBaselines = driftCheckBaselines {
            try encodeContainer.encode(driftCheckBaselines, forKey: .driftCheckBaselines)
        }
        if let inferenceSpecification = inferenceSpecification {
            try encodeContainer.encode(inferenceSpecification, forKey: .inferenceSpecification)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let modelApprovalStatus = modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelMetrics = modelMetrics {
            try encodeContainer.encode(modelMetrics, forKey: .modelMetrics)
        }
        if let modelPackageArn = modelPackageArn {
            try encodeContainer.encode(modelPackageArn, forKey: .modelPackageArn)
        }
        if let modelPackageDescription = modelPackageDescription {
            try encodeContainer.encode(modelPackageDescription, forKey: .modelPackageDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageName = modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
        if let modelPackageStatus = modelPackageStatus {
            try encodeContainer.encode(modelPackageStatus.rawValue, forKey: .modelPackageStatus)
        }
        if let modelPackageStatusDetails = modelPackageStatusDetails {
            try encodeContainer.encode(modelPackageStatusDetails, forKey: .modelPackageStatusDetails)
        }
        if let modelPackageVersion = modelPackageVersion {
            try encodeContainer.encode(modelPackageVersion, forKey: .modelPackageVersion)
        }
        if let samplePayloadUrl = samplePayloadUrl {
            try encodeContainer.encode(samplePayloadUrl, forKey: .samplePayloadUrl)
        }
        if let sourceAlgorithmSpecification = sourceAlgorithmSpecification {
            try encodeContainer.encode(sourceAlgorithmSpecification, forKey: .sourceAlgorithmSpecification)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let task = task {
            try encodeContainer.encode(task, forKey: .task)
        }
        if let validationSpecification = validationSpecification {
            try encodeContainer.encode(validationSpecification, forKey: .validationSpecification)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelPackageVersion)
        modelPackageVersion = modelPackageVersionDecoded
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
        let modelPackageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageDescription)
        modelPackageDescription = modelPackageDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let sourceAlgorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SourceAlgorithmSpecification.self, forKey: .sourceAlgorithmSpecification)
        sourceAlgorithmSpecification = sourceAlgorithmSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let modelPackageStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageStatus.self, forKey: .modelPackageStatus)
        modelPackageStatus = modelPackageStatusDecoded
        let modelPackageStatusDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageStatusDetails.self, forKey: .modelPackageStatusDetails)
        modelPackageStatusDetails = modelPackageStatusDetailsDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Swift.Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelMetrics.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let approvalDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalDescription)
        approvalDescription = approvalDescriptionDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .task)
        task = taskDecoded
        let samplePayloadUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .samplePayloadUrl)
        samplePayloadUrl = samplePayloadUrlDecoded
        let additionalInferenceSpecificationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AdditionalInferenceSpecificationDefinition?].self, forKey: .additionalInferenceSpecifications)
        var additionalInferenceSpecificationsDecoded0:[SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil
        if let additionalInferenceSpecificationsContainer = additionalInferenceSpecificationsContainer {
            additionalInferenceSpecificationsDecoded0 = [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]()
            for structure0 in additionalInferenceSpecificationsContainer {
                if let structure0 = structure0 {
                    additionalInferenceSpecificationsDecoded0?.append(structure0)
                }
            }
        }
        additionalInferenceSpecifications = additionalInferenceSpecificationsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let customerMetadataPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customerMetadataProperties)
        var customerMetadataPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let customerMetadataPropertiesContainer = customerMetadataPropertiesContainer {
            customerMetadataPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, customermetadatavalue0) in customerMetadataPropertiesContainer {
                if let customermetadatavalue0 = customermetadatavalue0 {
                    customerMetadataPropertiesDecoded0?[key0] = customermetadatavalue0
                }
            }
        }
        customerMetadataProperties = customerMetadataPropertiesDecoded0
        let driftCheckBaselinesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DriftCheckBaselines.self, forKey: .driftCheckBaselines)
        driftCheckBaselines = driftCheckBaselinesDecoded
    }
}

extension SageMakerClientTypes {
    /// A versioned model that can be deployed for SageMaker inference.
    public struct ModelPackage: Swift.Equatable {
        /// An array of additional Inference Specification objects.
        public var additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
        /// A description provided when the model approval is set.
        public var approvalDescription: Swift.String?
        /// Whether the model package is to be certified to be listed on Amazon Web Services Marketplace. For information about listing model packages on Amazon Web Services Marketplace, see [List Your Algorithm or Model Package on Amazon Web Services Marketplace](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html).
        public var certifyForMarketplace: Swift.Bool
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// The time that the model package was created.
        public var creationTime: ClientRuntime.Date?
        /// The metadata properties for the model package.
        public var customerMetadataProperties: [Swift.String:Swift.String]?
        /// The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.
        public var domain: Swift.String?
        /// Represents the drift check baselines that can be used when the model monitor is set using the model package.
        public var driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines?
        /// Defines how to perform inference generation after a training job is run.
        public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// The last time the model package was modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// Metadata properties of the tracking entity, trial, or trial component.
        public var metadataProperties: SageMakerClientTypes.MetadataProperties?
        /// The approval status of the model. This can be one of the following values.
        ///
        /// * APPROVED - The model is approved
        ///
        /// * REJECTED - The model is rejected.
        ///
        /// * PENDING_MANUAL_APPROVAL - The model is waiting for manual approval.
        public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
        /// Metrics for the model.
        public var modelMetrics: SageMakerClientTypes.ModelMetrics?
        /// The Amazon Resource Name (ARN) of the model package.
        public var modelPackageArn: Swift.String?
        /// The description of the model package.
        public var modelPackageDescription: Swift.String?
        /// The model group to which the model belongs.
        public var modelPackageGroupName: Swift.String?
        /// The name of the model.
        public var modelPackageName: Swift.String?
        /// The status of the model package. This can be one of the following values.
        ///
        /// * PENDING - The model package is pending being created.
        ///
        /// * IN_PROGRESS - The model package is in the process of being created.
        ///
        /// * COMPLETED - The model package was successfully created.
        ///
        /// * FAILED - The model package failed.
        ///
        /// * DELETING - The model package is in the process of being deleted.
        public var modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
        /// Specifies the validation and image scan statuses of the model package.
        public var modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails?
        /// The version number of a versioned model.
        public var modelPackageVersion: Swift.Int?
        /// The Amazon Simple Storage Service path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        public var samplePayloadUrl: Swift.String?
        /// A list of algorithms that were used to create a model package.
        public var sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification?
        /// A list of the tags associated with the model package. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
        public var tags: [SageMakerClientTypes.Tag]?
        /// The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification.
        public var task: Swift.String?
        /// Specifies batch transform jobs that Amazon SageMaker runs to validate your model package.
        public var validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification?

        public init (
            additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil,
            approvalDescription: Swift.String? = nil,
            certifyForMarketplace: Swift.Bool = false,
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            customerMetadataProperties: [Swift.String:Swift.String]? = nil,
            domain: Swift.String? = nil,
            driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines? = nil,
            inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
            modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
            modelMetrics: SageMakerClientTypes.ModelMetrics? = nil,
            modelPackageArn: Swift.String? = nil,
            modelPackageDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageName: Swift.String? = nil,
            modelPackageStatus: SageMakerClientTypes.ModelPackageStatus? = nil,
            modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails? = nil,
            modelPackageVersion: Swift.Int? = nil,
            samplePayloadUrl: Swift.String? = nil,
            sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            task: Swift.String? = nil,
            validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification? = nil
        )
        {
            self.additionalInferenceSpecifications = additionalInferenceSpecifications
            self.approvalDescription = approvalDescription
            self.certifyForMarketplace = certifyForMarketplace
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.customerMetadataProperties = customerMetadataProperties
            self.domain = domain
            self.driftCheckBaselines = driftCheckBaselines
            self.inferenceSpecification = inferenceSpecification
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.metadataProperties = metadataProperties
            self.modelApprovalStatus = modelApprovalStatus
            self.modelMetrics = modelMetrics
            self.modelPackageArn = modelPackageArn
            self.modelPackageDescription = modelPackageDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageName = modelPackageName
            self.modelPackageStatus = modelPackageStatus
            self.modelPackageStatusDetails = modelPackageStatusDetails
            self.modelPackageVersion = modelPackageVersion
            self.samplePayloadUrl = samplePayloadUrl
            self.sourceAlgorithmSpecification = sourceAlgorithmSpecification
            self.tags = tags
            self.task = task
            self.validationSpecification = validationSpecification
        }
    }

}

extension SageMakerClientTypes.ModelPackageContainerDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerHostname = "ContainerHostname"
        case environment = "Environment"
        case framework = "Framework"
        case frameworkVersion = "FrameworkVersion"
        case image = "Image"
        case imageDigest = "ImageDigest"
        case modelDataUrl = "ModelDataUrl"
        case modelInput = "ModelInput"
        case nearestModelName = "NearestModelName"
        case productId = "ProductId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerHostname = containerHostname {
            try encodeContainer.encode(containerHostname, forKey: .containerHostname)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, environmentmap0) in environment {
                try environmentContainer.encode(environmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let framework = framework {
            try encodeContainer.encode(framework, forKey: .framework)
        }
        if let frameworkVersion = frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imageDigest = imageDigest {
            try encodeContainer.encode(imageDigest, forKey: .imageDigest)
        }
        if let modelDataUrl = modelDataUrl {
            try encodeContainer.encode(modelDataUrl, forKey: .modelDataUrl)
        }
        if let modelInput = modelInput {
            try encodeContainer.encode(modelInput, forKey: .modelInput)
        }
        if let nearestModelName = nearestModelName {
            try encodeContainer.encode(nearestModelName, forKey: .nearestModelName)
        }
        if let productId = productId {
            try encodeContainer.encode(productId, forKey: .productId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerHostname)
        containerHostname = containerHostnameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let imageDigestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageDigest)
        imageDigest = imageDigestDecoded
        let modelDataUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelDataUrl)
        modelDataUrl = modelDataUrlDecoded
        let productIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productId)
        productId = productIdDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, environmentvalue0) in environmentContainer {
                if let environmentvalue0 = environmentvalue0 {
                    environmentDecoded0?[key0] = environmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let modelInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelInput.self, forKey: .modelInput)
        modelInput = modelInputDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let nearestModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nearestModelName)
        nearestModelName = nearestModelNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the Docker container for the model package.
    public struct ModelPackageContainerDefinition: Swift.Equatable {
        /// The DNS host name for the Docker container.
        public var containerHostname: Swift.String?
        /// The environment variables to set in the Docker container. Each key and value in the Environment string to string map can have length of up to 1024. We support up to 16 entries in the map.
        public var environment: [Swift.String:Swift.String]?
        /// The machine learning framework of the model package container image.
        public var framework: Swift.String?
        /// The framework version of the Model Package Container Image.
        public var frameworkVersion: Swift.String?
        /// The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored. If you are using your own custom algorithm instead of an algorithm provided by Amazon SageMaker, the inference code must meet Amazon SageMaker requirements. Amazon SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
        /// This member is required.
        public var image: Swift.String?
        /// An MD5 hash of the training algorithm that identifies the Docker image used for training.
        public var imageDigest: Swift.String?
        /// The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The model artifacts must be in an S3 bucket that is in the same region as the model package.
        public var modelDataUrl: Swift.String?
        /// A structure with Model Input details.
        public var modelInput: SageMakerClientTypes.ModelInput?
        /// The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model. You can find a list of benchmarked models by calling ListModelMetadata.
        public var nearestModelName: Swift.String?
        /// The Amazon Web Services Marketplace product ID of the model package.
        public var productId: Swift.String?

        public init (
            containerHostname: Swift.String? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            framework: Swift.String? = nil,
            frameworkVersion: Swift.String? = nil,
            image: Swift.String? = nil,
            imageDigest: Swift.String? = nil,
            modelDataUrl: Swift.String? = nil,
            modelInput: SageMakerClientTypes.ModelInput? = nil,
            nearestModelName: Swift.String? = nil,
            productId: Swift.String? = nil
        )
        {
            self.containerHostname = containerHostname
            self.environment = environment
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.image = image
            self.imageDigest = imageDigest
            self.modelDataUrl = modelDataUrl
            self.modelInput = modelInput
            self.nearestModelName = nearestModelName
            self.productId = productId
        }
    }

}

extension SageMakerClientTypes.ModelPackageGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case modelPackageGroupArn = "ModelPackageGroupArn"
        case modelPackageGroupDescription = "ModelPackageGroupDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageGroupStatus = "ModelPackageGroupStatus"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let modelPackageGroupArn = modelPackageGroupArn {
            try encodeContainer.encode(modelPackageGroupArn, forKey: .modelPackageGroupArn)
        }
        if let modelPackageGroupDescription = modelPackageGroupDescription {
            try encodeContainer.encode(modelPackageGroupDescription, forKey: .modelPackageGroupDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageGroupStatus = modelPackageGroupStatus {
            try encodeContainer.encode(modelPackageGroupStatus.rawValue, forKey: .modelPackageGroupStatus)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupArn)
        modelPackageGroupArn = modelPackageGroupArnDecoded
        let modelPackageGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupDescription)
        modelPackageGroupDescription = modelPackageGroupDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let modelPackageGroupStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageGroupStatus.self, forKey: .modelPackageGroupStatus)
        modelPackageGroupStatus = modelPackageGroupStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes {
    /// A group of versioned models in the model registry.
    public struct ModelPackageGroup: Swift.Equatable {
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// The time that the model group was created.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the model group.
        public var modelPackageGroupArn: Swift.String?
        /// The description for the model group.
        public var modelPackageGroupDescription: Swift.String?
        /// The name of the model group.
        public var modelPackageGroupName: Swift.String?
        /// The status of the model group. This can be one of the following values.
        ///
        /// * PENDING - The model group is pending being created.
        ///
        /// * IN_PROGRESS - The model group is in the process of being created.
        ///
        /// * COMPLETED - The model group was successfully created.
        ///
        /// * FAILED - The model group failed.
        ///
        /// * DELETING - The model group is in the process of being deleted.
        ///
        /// * DELETE_FAILED - SageMaker failed to delete the model group.
        public var modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus?
        /// A list of the tags associated with the model group. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
        public var tags: [SageMakerClientTypes.Tag]?

        public init (
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            modelPackageGroupArn: Swift.String? = nil,
            modelPackageGroupDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.modelPackageGroupArn = modelPackageGroupArn
            self.modelPackageGroupDescription = modelPackageGroupDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageGroupStatus = modelPackageGroupStatus
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {
    public enum ModelPackageGroupSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageGroupSortBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelPackageGroupSortBy(rawValue: rawValue) ?? ModelPackageGroupSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ModelPackageGroupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case deleteFailed
        case deleting
        case failed
        case inProgress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageGroupStatus] {
            return [
                .completed,
                .deleteFailed,
                .deleting,
                .failed,
                .inProgress,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleteFailed: return "DeleteFailed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelPackageGroupStatus(rawValue: rawValue) ?? ModelPackageGroupStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ModelPackageGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case modelPackageGroupArn = "ModelPackageGroupArn"
        case modelPackageGroupDescription = "ModelPackageGroupDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageGroupStatus = "ModelPackageGroupStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let modelPackageGroupArn = modelPackageGroupArn {
            try encodeContainer.encode(modelPackageGroupArn, forKey: .modelPackageGroupArn)
        }
        if let modelPackageGroupDescription = modelPackageGroupDescription {
            try encodeContainer.encode(modelPackageGroupDescription, forKey: .modelPackageGroupDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageGroupStatus = modelPackageGroupStatus {
            try encodeContainer.encode(modelPackageGroupStatus.rawValue, forKey: .modelPackageGroupStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupArn)
        modelPackageGroupArn = modelPackageGroupArnDecoded
        let modelPackageGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupDescription)
        modelPackageGroupDescription = modelPackageGroupDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let modelPackageGroupStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageGroupStatus.self, forKey: .modelPackageGroupStatus)
        modelPackageGroupStatus = modelPackageGroupStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// Summary information about a model group.
    public struct ModelPackageGroupSummary: Swift.Equatable {
        /// The time that the model group was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the model group.
        /// This member is required.
        public var modelPackageGroupArn: Swift.String?
        /// A description of the model group.
        public var modelPackageGroupDescription: Swift.String?
        /// The name of the model group.
        /// This member is required.
        public var modelPackageGroupName: Swift.String?
        /// The status of the model group.
        /// This member is required.
        public var modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            modelPackageGroupArn: Swift.String? = nil,
            modelPackageGroupDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.modelPackageGroupArn = modelPackageGroupArn
            self.modelPackageGroupDescription = modelPackageGroupDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageGroupStatus = modelPackageGroupStatus
        }
    }

}

extension SageMakerClientTypes {
    public enum ModelPackageSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageSortBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelPackageSortBy(rawValue: rawValue) ?? ModelPackageSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ModelPackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case deleting
        case failed
        case inProgress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageStatus] {
            return [
                .completed,
                .deleting,
                .failed,
                .inProgress,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelPackageStatus(rawValue: rawValue) ?? ModelPackageStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ModelPackageStatusDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageScanStatuses = "ImageScanStatuses"
        case validationStatuses = "ValidationStatuses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let imageScanStatuses = imageScanStatuses {
            var imageScanStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .imageScanStatuses)
            for modelpackagestatusitemlist0 in imageScanStatuses {
                try imageScanStatusesContainer.encode(modelpackagestatusitemlist0)
            }
        }
        if let validationStatuses = validationStatuses {
            var validationStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationStatuses)
            for modelpackagestatusitemlist0 in validationStatuses {
                try validationStatusesContainer.encode(modelpackagestatusitemlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validationStatusesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelPackageStatusItem?].self, forKey: .validationStatuses)
        var validationStatusesDecoded0:[SageMakerClientTypes.ModelPackageStatusItem]? = nil
        if let validationStatusesContainer = validationStatusesContainer {
            validationStatusesDecoded0 = [SageMakerClientTypes.ModelPackageStatusItem]()
            for structure0 in validationStatusesContainer {
                if let structure0 = structure0 {
                    validationStatusesDecoded0?.append(structure0)
                }
            }
        }
        validationStatuses = validationStatusesDecoded0
        let imageScanStatusesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelPackageStatusItem?].self, forKey: .imageScanStatuses)
        var imageScanStatusesDecoded0:[SageMakerClientTypes.ModelPackageStatusItem]? = nil
        if let imageScanStatusesContainer = imageScanStatusesContainer {
            imageScanStatusesDecoded0 = [SageMakerClientTypes.ModelPackageStatusItem]()
            for structure0 in imageScanStatusesContainer {
                if let structure0 = structure0 {
                    imageScanStatusesDecoded0?.append(structure0)
                }
            }
        }
        imageScanStatuses = imageScanStatusesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Specifies the validation and image scan statuses of the model package.
    public struct ModelPackageStatusDetails: Swift.Equatable {
        /// The status of the scan of the Docker image container for the model package.
        public var imageScanStatuses: [SageMakerClientTypes.ModelPackageStatusItem]?
        /// The validation status of the model package.
        /// This member is required.
        public var validationStatuses: [SageMakerClientTypes.ModelPackageStatusItem]?

        public init (
            imageScanStatuses: [SageMakerClientTypes.ModelPackageStatusItem]? = nil,
            validationStatuses: [SageMakerClientTypes.ModelPackageStatusItem]? = nil
        )
        {
            self.imageScanStatuses = imageScanStatuses
            self.validationStatuses = validationStatuses
        }
    }

}

extension SageMakerClientTypes.ModelPackageStatusItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureReason = "FailureReason"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DetailedModelPackageStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension SageMakerClientTypes {
    /// Represents the overall status of a model package.
    public struct ModelPackageStatusItem: Swift.Equatable {
        /// if the overall status is Failed, the reason for the failure.
        public var failureReason: Swift.String?
        /// The name of the model package for which the overall status is being reported.
        /// This member is required.
        public var name: Swift.String?
        /// The current status.
        /// This member is required.
        public var status: SageMakerClientTypes.DetailedModelPackageStatus?

        public init (
            failureReason: Swift.String? = nil,
            name: Swift.String? = nil,
            status: SageMakerClientTypes.DetailedModelPackageStatus? = nil
        )
        {
            self.failureReason = failureReason
            self.name = name
            self.status = status
        }
    }

}

extension SageMakerClientTypes.ModelPackageSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelPackageArn = "ModelPackageArn"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case modelPackageStatus = "ModelPackageStatus"
        case modelPackageVersion = "ModelPackageVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let modelApprovalStatus = modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelPackageArn = modelPackageArn {
            try encodeContainer.encode(modelPackageArn, forKey: .modelPackageArn)
        }
        if let modelPackageDescription = modelPackageDescription {
            try encodeContainer.encode(modelPackageDescription, forKey: .modelPackageDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageName = modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
        if let modelPackageStatus = modelPackageStatus {
            try encodeContainer.encode(modelPackageStatus.rawValue, forKey: .modelPackageStatus)
        }
        if let modelPackageVersion = modelPackageVersion {
            try encodeContainer.encode(modelPackageVersion, forKey: .modelPackageVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelPackageVersion)
        modelPackageVersion = modelPackageVersionDecoded
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
        let modelPackageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageDescription)
        modelPackageDescription = modelPackageDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let modelPackageStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageStatus.self, forKey: .modelPackageStatus)
        modelPackageStatus = modelPackageStatusDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about a model package.
    public struct ModelPackageSummary: Swift.Equatable {
        /// A timestamp that shows when the model package was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The approval status of the model. This can be one of the following values.
        ///
        /// * APPROVED - The model is approved
        ///
        /// * REJECTED - The model is rejected.
        ///
        /// * PENDING_MANUAL_APPROVAL - The model is waiting for manual approval.
        public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
        /// The Amazon Resource Name (ARN) of the model package.
        /// This member is required.
        public var modelPackageArn: Swift.String?
        /// A brief description of the model package.
        public var modelPackageDescription: Swift.String?
        /// If the model package is a versioned model, the model group that the versioned model belongs to.
        public var modelPackageGroupName: Swift.String?
        /// The name of the model package.
        /// This member is required.
        public var modelPackageName: Swift.String?
        /// The overall status of the model package.
        /// This member is required.
        public var modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
        /// If the model package is a versioned model, the version of the model.
        public var modelPackageVersion: Swift.Int?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
            modelPackageArn: Swift.String? = nil,
            modelPackageDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageName: Swift.String? = nil,
            modelPackageStatus: SageMakerClientTypes.ModelPackageStatus? = nil,
            modelPackageVersion: Swift.Int? = nil
        )
        {
            self.creationTime = creationTime
            self.modelApprovalStatus = modelApprovalStatus
            self.modelPackageArn = modelPackageArn
            self.modelPackageDescription = modelPackageDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageName = modelPackageName
            self.modelPackageStatus = modelPackageStatus
            self.modelPackageVersion = modelPackageVersion
        }
    }

}

extension SageMakerClientTypes {
    public enum ModelPackageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case both
        case unversioned
        case versioned
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageType] {
            return [
                .both,
                .unversioned,
                .versioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .both: return "Both"
            case .unversioned: return "Unversioned"
            case .versioned: return "Versioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelPackageType(rawValue: rawValue) ?? ModelPackageType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ModelPackageValidationProfile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case profileName = "ProfileName"
        case transformJobDefinition = "TransformJobDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let profileName = profileName {
            try encodeContainer.encode(profileName, forKey: .profileName)
        }
        if let transformJobDefinition = transformJobDefinition {
            try encodeContainer.encode(transformJobDefinition, forKey: .transformJobDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileName)
        profileName = profileNameDecoded
        let transformJobDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJobDefinition.self, forKey: .transformJobDefinition)
        transformJobDefinition = transformJobDefinitionDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package. The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.
    public struct ModelPackageValidationProfile: Swift.Equatable {
        /// The name of the profile for the model package.
        /// This member is required.
        public var profileName: Swift.String?
        /// The TransformJobDefinition object that describes the transform job used for the validation of the model package.
        /// This member is required.
        public var transformJobDefinition: SageMakerClientTypes.TransformJobDefinition?

        public init (
            profileName: Swift.String? = nil,
            transformJobDefinition: SageMakerClientTypes.TransformJobDefinition? = nil
        )
        {
            self.profileName = profileName
            self.transformJobDefinition = transformJobDefinition
        }
    }

}

extension SageMakerClientTypes.ModelPackageValidationSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case validationProfiles = "ValidationProfiles"
        case validationRole = "ValidationRole"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let validationProfiles = validationProfiles {
            var validationProfilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationProfiles)
            for modelpackagevalidationprofiles0 in validationProfiles {
                try validationProfilesContainer.encode(modelpackagevalidationprofiles0)
            }
        }
        if let validationRole = validationRole {
            try encodeContainer.encode(validationRole, forKey: .validationRole)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validationRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationRole)
        validationRole = validationRoleDecoded
        let validationProfilesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelPackageValidationProfile?].self, forKey: .validationProfiles)
        var validationProfilesDecoded0:[SageMakerClientTypes.ModelPackageValidationProfile]? = nil
        if let validationProfilesContainer = validationProfilesContainer {
            validationProfilesDecoded0 = [SageMakerClientTypes.ModelPackageValidationProfile]()
            for structure0 in validationProfilesContainer {
                if let structure0 = structure0 {
                    validationProfilesDecoded0?.append(structure0)
                }
            }
        }
        validationProfiles = validationProfilesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Specifies batch transform jobs that Amazon SageMaker runs to validate your model package.
    public struct ModelPackageValidationSpecification: Swift.Equatable {
        /// An array of ModelPackageValidationProfile objects, each of which specifies a batch transform job that Amazon SageMaker runs to validate your model package.
        /// This member is required.
        public var validationProfiles: [SageMakerClientTypes.ModelPackageValidationProfile]?
        /// The IAM roles to be used for the validation of the model package.
        /// This member is required.
        public var validationRole: Swift.String?

        public init (
            validationProfiles: [SageMakerClientTypes.ModelPackageValidationProfile]? = nil,
            validationRole: Swift.String? = nil
        )
        {
            self.validationProfiles = validationProfiles
            self.validationRole = validationRole
        }
    }

}

extension SageMakerClientTypes.ModelQuality: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints = "Constraints"
        case statistics = "Statistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let statistics = statistics {
            try encodeContainer.encode(statistics, forKey: .statistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statisticsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .statistics)
        statistics = statisticsDecoded
        let constraintsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetricsSource.self, forKey: .constraints)
        constraints = constraintsDecoded
    }
}

extension SageMakerClientTypes {
    /// Model quality statistics and constraints.
    public struct ModelQuality: Swift.Equatable {
        /// Model quality constraints.
        public var constraints: SageMakerClientTypes.MetricsSource?
        /// Model quality statistics.
        public var statistics: SageMakerClientTypes.MetricsSource?

        public init (
            constraints: SageMakerClientTypes.MetricsSource? = nil,
            statistics: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.constraints = constraints
            self.statistics = statistics
        }
    }

}

extension SageMakerClientTypes.ModelQualityAppSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerArguments = "ContainerArguments"
        case containerEntrypoint = "ContainerEntrypoint"
        case environment = "Environment"
        case imageUri = "ImageUri"
        case postAnalyticsProcessorSourceUri = "PostAnalyticsProcessorSourceUri"
        case problemType = "ProblemType"
        case recordPreprocessorSourceUri = "RecordPreprocessorSourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerArguments = containerArguments {
            var containerArgumentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerArguments)
            for monitoringcontainerarguments0 in containerArguments {
                try containerArgumentsContainer.encode(monitoringcontainerarguments0)
            }
        }
        if let containerEntrypoint = containerEntrypoint {
            var containerEntrypointContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerEntrypoint)
            for containerentrypoint0 in containerEntrypoint {
                try containerEntrypointContainer.encode(containerentrypoint0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, monitoringenvironmentmap0) in environment {
                try environmentContainer.encode(monitoringenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let imageUri = imageUri {
            try encodeContainer.encode(imageUri, forKey: .imageUri)
        }
        if let postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri {
            try encodeContainer.encode(postAnalyticsProcessorSourceUri, forKey: .postAnalyticsProcessorSourceUri)
        }
        if let problemType = problemType {
            try encodeContainer.encode(problemType.rawValue, forKey: .problemType)
        }
        if let recordPreprocessorSourceUri = recordPreprocessorSourceUri {
            try encodeContainer.encode(recordPreprocessorSourceUri, forKey: .recordPreprocessorSourceUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let containerEntrypointContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerEntrypoint)
        var containerEntrypointDecoded0:[Swift.String]? = nil
        if let containerEntrypointContainer = containerEntrypointContainer {
            containerEntrypointDecoded0 = [Swift.String]()
            for string0 in containerEntrypointContainer {
                if let string0 = string0 {
                    containerEntrypointDecoded0?.append(string0)
                }
            }
        }
        containerEntrypoint = containerEntrypointDecoded0
        let containerArgumentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerArguments)
        var containerArgumentsDecoded0:[Swift.String]? = nil
        if let containerArgumentsContainer = containerArgumentsContainer {
            containerArgumentsDecoded0 = [Swift.String]()
            for string0 in containerArgumentsContainer {
                if let string0 = string0 {
                    containerArgumentsDecoded0?.append(string0)
                }
            }
        }
        containerArguments = containerArgumentsDecoded0
        let recordPreprocessorSourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordPreprocessorSourceUri)
        recordPreprocessorSourceUri = recordPreprocessorSourceUriDecoded
        let postAnalyticsProcessorSourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postAnalyticsProcessorSourceUri)
        postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUriDecoded
        let problemTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringProblemType.self, forKey: .problemType)
        problemType = problemTypeDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
    }
}

extension SageMakerClientTypes {
    /// Container image configuration object for the monitoring job.
    public struct ModelQualityAppSpecification: Swift.Equatable {
        /// An array of arguments for the container used to run the monitoring job.
        public var containerArguments: [Swift.String]?
        /// Specifies the entrypoint for a container that the monitoring job runs.
        public var containerEntrypoint: [Swift.String]?
        /// Sets the environment variables in the container that the monitoring job runs.
        public var environment: [Swift.String:Swift.String]?
        /// The address of the container image that the monitoring job runs.
        /// This member is required.
        public var imageUri: Swift.String?
        /// An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        public var postAnalyticsProcessorSourceUri: Swift.String?
        /// The machine learning problem type of the model that the monitoring job monitors.
        public var problemType: SageMakerClientTypes.MonitoringProblemType?
        /// An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        public var recordPreprocessorSourceUri: Swift.String?

        public init (
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            imageUri: Swift.String? = nil,
            postAnalyticsProcessorSourceUri: Swift.String? = nil,
            problemType: SageMakerClientTypes.MonitoringProblemType? = nil,
            recordPreprocessorSourceUri: Swift.String? = nil
        )
        {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.environment = environment
            self.imageUri = imageUri
            self.postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri
            self.problemType = problemType
            self.recordPreprocessorSourceUri = recordPreprocessorSourceUri
        }
    }

}

extension SageMakerClientTypes.ModelQualityBaselineConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseliningJobName = "BaseliningJobName"
        case constraintsResource = "ConstraintsResource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseliningJobName = baseliningJobName {
            try encodeContainer.encode(baseliningJobName, forKey: .baseliningJobName)
        }
        if let constraintsResource = constraintsResource {
            try encodeContainer.encode(constraintsResource, forKey: .constraintsResource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseliningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseliningJobName)
        baseliningJobName = baseliningJobNameDecoded
        let constraintsResourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringConstraintsResource.self, forKey: .constraintsResource)
        constraintsResource = constraintsResourceDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
    public struct ModelQualityBaselineConfig: Swift.Equatable {
        /// The name of the job that performs baselining for the monitoring job.
        public var baseliningJobName: Swift.String?
        /// The constraints resource for a monitoring job.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?

        public init (
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
        }
    }

}

extension SageMakerClientTypes.ModelQualityJobInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointInput = "EndpointInput"
        case groundTruthS3Input = "GroundTruthS3Input"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointInput = endpointInput {
            try encodeContainer.encode(endpointInput, forKey: .endpointInput)
        }
        if let groundTruthS3Input = groundTruthS3Input {
            try encodeContainer.encode(groundTruthS3Input, forKey: .groundTruthS3Input)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointInput.self, forKey: .endpointInput)
        endpointInput = endpointInputDecoded
        let groundTruthS3InputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringGroundTruthS3Input.self, forKey: .groundTruthS3Input)
        groundTruthS3Input = groundTruthS3InputDecoded
    }
}

extension SageMakerClientTypes {
    /// The input for the model quality monitoring job. Currently endponts are supported for input for model quality monitoring jobs.
    public struct ModelQualityJobInput: Swift.Equatable {
        /// Input object for the endpoint
        /// This member is required.
        public var endpointInput: SageMakerClientTypes.EndpointInput?
        /// The ground truth label provided for the model.
        /// This member is required.
        public var groundTruthS3Input: SageMakerClientTypes.MonitoringGroundTruthS3Input?

        public init (
            endpointInput: SageMakerClientTypes.EndpointInput? = nil,
            groundTruthS3Input: SageMakerClientTypes.MonitoringGroundTruthS3Input? = nil
        )
        {
            self.endpointInput = endpointInput
            self.groundTruthS3Input = groundTruthS3Input
        }
    }

}

extension SageMakerClientTypes {
    public enum ModelSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelSortKey] {
            return [
                .creationtime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelSortKey(rawValue: rawValue) ?? ModelSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ModelStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension SageMakerClientTypes {
    /// Metadata for Model steps.
    public struct ModelStepMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the created model.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes.ModelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let modelArn = modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about a model.
    public struct ModelSummary: Swift.Equatable {
        /// A timestamp that indicates when the model was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the model.
        /// This member is required.
        public var modelArn: Swift.String?
        /// The name of the model that you want a summary for.
        /// This member is required.
        public var modelName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.modelArn = modelArn
            self.modelName = modelName
        }
    }

}

extension SageMakerClientTypes.MonitoringAppSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerArguments = "ContainerArguments"
        case containerEntrypoint = "ContainerEntrypoint"
        case imageUri = "ImageUri"
        case postAnalyticsProcessorSourceUri = "PostAnalyticsProcessorSourceUri"
        case recordPreprocessorSourceUri = "RecordPreprocessorSourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerArguments = containerArguments {
            var containerArgumentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerArguments)
            for monitoringcontainerarguments0 in containerArguments {
                try containerArgumentsContainer.encode(monitoringcontainerarguments0)
            }
        }
        if let containerEntrypoint = containerEntrypoint {
            var containerEntrypointContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerEntrypoint)
            for containerentrypoint0 in containerEntrypoint {
                try containerEntrypointContainer.encode(containerentrypoint0)
            }
        }
        if let imageUri = imageUri {
            try encodeContainer.encode(imageUri, forKey: .imageUri)
        }
        if let postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri {
            try encodeContainer.encode(postAnalyticsProcessorSourceUri, forKey: .postAnalyticsProcessorSourceUri)
        }
        if let recordPreprocessorSourceUri = recordPreprocessorSourceUri {
            try encodeContainer.encode(recordPreprocessorSourceUri, forKey: .recordPreprocessorSourceUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let containerEntrypointContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerEntrypoint)
        var containerEntrypointDecoded0:[Swift.String]? = nil
        if let containerEntrypointContainer = containerEntrypointContainer {
            containerEntrypointDecoded0 = [Swift.String]()
            for string0 in containerEntrypointContainer {
                if let string0 = string0 {
                    containerEntrypointDecoded0?.append(string0)
                }
            }
        }
        containerEntrypoint = containerEntrypointDecoded0
        let containerArgumentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerArguments)
        var containerArgumentsDecoded0:[Swift.String]? = nil
        if let containerArgumentsContainer = containerArgumentsContainer {
            containerArgumentsDecoded0 = [Swift.String]()
            for string0 in containerArgumentsContainer {
                if let string0 = string0 {
                    containerArgumentsDecoded0?.append(string0)
                }
            }
        }
        containerArguments = containerArgumentsDecoded0
        let recordPreprocessorSourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordPreprocessorSourceUri)
        recordPreprocessorSourceUri = recordPreprocessorSourceUriDecoded
        let postAnalyticsProcessorSourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postAnalyticsProcessorSourceUri)
        postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUriDecoded
    }
}

extension SageMakerClientTypes {
    /// Container image configuration object for the monitoring job.
    public struct MonitoringAppSpecification: Swift.Equatable {
        /// An array of arguments for the container used to run the monitoring job.
        public var containerArguments: [Swift.String]?
        /// Specifies the entrypoint for a container used to run the monitoring job.
        public var containerEntrypoint: [Swift.String]?
        /// The container image to be run by the monitoring job.
        /// This member is required.
        public var imageUri: Swift.String?
        /// An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        public var postAnalyticsProcessorSourceUri: Swift.String?
        /// An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        public var recordPreprocessorSourceUri: Swift.String?

        public init (
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            imageUri: Swift.String? = nil,
            postAnalyticsProcessorSourceUri: Swift.String? = nil,
            recordPreprocessorSourceUri: Swift.String? = nil
        )
        {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.imageUri = imageUri
            self.postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri
            self.recordPreprocessorSourceUri = recordPreprocessorSourceUri
        }
    }

}

extension SageMakerClientTypes.MonitoringBaselineConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseliningJobName = "BaseliningJobName"
        case constraintsResource = "ConstraintsResource"
        case statisticsResource = "StatisticsResource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseliningJobName = baseliningJobName {
            try encodeContainer.encode(baseliningJobName, forKey: .baseliningJobName)
        }
        if let constraintsResource = constraintsResource {
            try encodeContainer.encode(constraintsResource, forKey: .constraintsResource)
        }
        if let statisticsResource = statisticsResource {
            try encodeContainer.encode(statisticsResource, forKey: .statisticsResource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseliningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseliningJobName)
        baseliningJobName = baseliningJobNameDecoded
        let constraintsResourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringConstraintsResource.self, forKey: .constraintsResource)
        constraintsResource = constraintsResourceDecoded
        let statisticsResourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStatisticsResource.self, forKey: .statisticsResource)
        statisticsResource = statisticsResourceDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
    public struct MonitoringBaselineConfig: Swift.Equatable {
        /// The name of the job that performs baselining for the monitoring job.
        public var baseliningJobName: Swift.String?
        /// The baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?
        /// The baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        public var statisticsResource: SageMakerClientTypes.MonitoringStatisticsResource?

        public init (
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil,
            statisticsResource: SageMakerClientTypes.MonitoringStatisticsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
            self.statisticsResource = statisticsResource
        }
    }

}

extension SageMakerClientTypes.MonitoringClusterConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let volumeKmsKeyId = volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let volumeSizeInGB = volumeSizeInGB {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for the cluster used to run model monitoring jobs.
    public struct MonitoringClusterConfig: Swift.Equatable {
        /// The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The ML compute instance type for the processing job.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.ProcessingInstanceType?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        public var volumeKmsKeyId: Swift.String?
        /// The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        /// This member is required.
        public var volumeSizeInGB: Swift.Int?

        public init (
            instanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.ProcessingInstanceType? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes.MonitoringConstraintsResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
    }
}

extension SageMakerClientTypes {
    /// The constraints resource for a monitoring job.
    public struct MonitoringConstraintsResource: Swift.Equatable {
        /// The Amazon S3 URI for the constraints resource.
        public var s3Uri: Swift.String?

        public init (
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    public enum MonitoringExecutionSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case scheduledTime
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringExecutionSortKey] {
            return [
                .creationTime,
                .scheduledTime,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .scheduledTime: return "ScheduledTime"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MonitoringExecutionSortKey(rawValue: rawValue) ?? MonitoringExecutionSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.MonitoringExecutionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endpointName = "EndpointName"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringExecutionStatus = "MonitoringExecutionStatus"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringType = "MonitoringType"
        case processingJobArn = "ProcessingJobArn"
        case scheduledTime = "ScheduledTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let monitoringExecutionStatus = monitoringExecutionStatus {
            try encodeContainer.encode(monitoringExecutionStatus.rawValue, forKey: .monitoringExecutionStatus)
        }
        if let monitoringJobDefinitionName = monitoringJobDefinitionName {
            try encodeContainer.encode(monitoringJobDefinitionName, forKey: .monitoringJobDefinitionName)
        }
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
        if let monitoringType = monitoringType {
            try encodeContainer.encode(monitoringType.rawValue, forKey: .monitoringType)
        }
        if let processingJobArn = processingJobArn {
            try encodeContainer.encode(processingJobArn, forKey: .processingJobArn)
        }
        if let scheduledTime = scheduledTime {
            try encodeContainer.encode(scheduledTime.timeIntervalSince1970, forKey: .scheduledTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let scheduledTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scheduledTime)
        scheduledTime = scheduledTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringExecutionStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExecutionStatus.self, forKey: .monitoringExecutionStatus)
        monitoringExecutionStatus = monitoringExecutionStatusDecoded
        let processingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringType.self, forKey: .monitoringType)
        monitoringType = monitoringTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// Summary of information about the last monitoring job to run.
    public struct MonitoringExecutionSummary: Swift.Equatable {
        /// The time at which the monitoring job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The name of the endpoint used to run the monitoring job.
        public var endpointName: Swift.String?
        /// Contains the reason a monitoring job failed, if it failed.
        public var failureReason: Swift.String?
        /// A timestamp that indicates the last time the monitoring job was modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The status of the monitoring job.
        /// This member is required.
        public var monitoringExecutionStatus: SageMakerClientTypes.ExecutionStatus?
        /// The name of the monitoring job.
        public var monitoringJobDefinitionName: Swift.String?
        /// The name of the monitoring schedule.
        /// This member is required.
        public var monitoringScheduleName: Swift.String?
        /// The type of the monitoring job.
        public var monitoringType: SageMakerClientTypes.MonitoringType?
        /// The Amazon Resource Name (ARN) of the monitoring job.
        public var processingJobArn: Swift.String?
        /// The time the monitoring job was scheduled.
        /// This member is required.
        public var scheduledTime: ClientRuntime.Date?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            endpointName: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            monitoringExecutionStatus: SageMakerClientTypes.ExecutionStatus? = nil,
            monitoringJobDefinitionName: Swift.String? = nil,
            monitoringScheduleName: Swift.String? = nil,
            monitoringType: SageMakerClientTypes.MonitoringType? = nil,
            processingJobArn: Swift.String? = nil,
            scheduledTime: ClientRuntime.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.monitoringExecutionStatus = monitoringExecutionStatus
            self.monitoringJobDefinitionName = monitoringJobDefinitionName
            self.monitoringScheduleName = monitoringScheduleName
            self.monitoringType = monitoringType
            self.processingJobArn = processingJobArn
            self.scheduledTime = scheduledTime
        }
    }

}

extension SageMakerClientTypes.MonitoringGroundTruthS3Input: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
    }
}

extension SageMakerClientTypes {
    /// The ground truth labels for the dataset used for the monitoring job.
    public struct MonitoringGroundTruthS3Input: Swift.Equatable {
        /// The address of the Amazon S3 location of the ground truth labels.
        public var s3Uri: Swift.String?

        public init (
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes.MonitoringInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointInput = "EndpointInput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointInput = endpointInput {
            try encodeContainer.encode(endpointInput, forKey: .endpointInput)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointInput.self, forKey: .endpointInput)
        endpointInput = endpointInputDecoded
    }
}

extension SageMakerClientTypes {
    /// The inputs for a monitoring job.
    public struct MonitoringInput: Swift.Equatable {
        /// The endpoint for a monitoring job.
        /// This member is required.
        public var endpointInput: SageMakerClientTypes.EndpointInput?

        public init (
            endpointInput: SageMakerClientTypes.EndpointInput? = nil
        )
        {
            self.endpointInput = endpointInput
        }
    }

}

extension SageMakerClientTypes.MonitoringJobDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baselineConfig = "BaselineConfig"
        case environment = "Environment"
        case monitoringAppSpecification = "MonitoringAppSpecification"
        case monitoringInputs = "MonitoringInputs"
        case monitoringOutputConfig = "MonitoringOutputConfig"
        case monitoringResources = "MonitoringResources"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baselineConfig = baselineConfig {
            try encodeContainer.encode(baselineConfig, forKey: .baselineConfig)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, monitoringenvironmentmap0) in environment {
                try environmentContainer.encode(monitoringenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let monitoringAppSpecification = monitoringAppSpecification {
            try encodeContainer.encode(monitoringAppSpecification, forKey: .monitoringAppSpecification)
        }
        if let monitoringInputs = monitoringInputs {
            var monitoringInputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .monitoringInputs)
            for monitoringinputs0 in monitoringInputs {
                try monitoringInputsContainer.encode(monitoringinputs0)
            }
        }
        if let monitoringOutputConfig = monitoringOutputConfig {
            try encodeContainer.encode(monitoringOutputConfig, forKey: .monitoringOutputConfig)
        }
        if let monitoringResources = monitoringResources {
            try encodeContainer.encode(monitoringResources, forKey: .monitoringResources)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringBaselineConfig.self, forKey: .baselineConfig)
        baselineConfig = baselineConfigDecoded
        let monitoringInputsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringInput?].self, forKey: .monitoringInputs)
        var monitoringInputsDecoded0:[SageMakerClientTypes.MonitoringInput]? = nil
        if let monitoringInputsContainer = monitoringInputsContainer {
            monitoringInputsDecoded0 = [SageMakerClientTypes.MonitoringInput]()
            for structure0 in monitoringInputsContainer {
                if let structure0 = structure0 {
                    monitoringInputsDecoded0?.append(structure0)
                }
            }
        }
        monitoringInputs = monitoringInputsDecoded0
        let monitoringOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .monitoringOutputConfig)
        monitoringOutputConfig = monitoringOutputConfigDecoded
        let monitoringResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .monitoringResources)
        monitoringResources = monitoringResourcesDecoded
        let monitoringAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringAppSpecification.self, forKey: .monitoringAppSpecification)
        monitoringAppSpecification = monitoringAppSpecificationDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the monitoring job.
    public struct MonitoringJobDefinition: Swift.Equatable {
        /// Baseline configuration used to validate that the data conforms to the specified constraints and statistics
        public var baselineConfig: SageMakerClientTypes.MonitoringBaselineConfig?
        /// Sets the environment variables in the Docker container.
        public var environment: [Swift.String:Swift.String]?
        /// Configures the monitoring job to run a specified Docker container image.
        /// This member is required.
        public var monitoringAppSpecification: SageMakerClientTypes.MonitoringAppSpecification?
        /// The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker Endpoint.
        /// This member is required.
        public var monitoringInputs: [SageMakerClientTypes.MonitoringInput]?
        /// The array of outputs from the monitoring job to be uploaded to Amazon Simple Storage Service (Amazon S3).
        /// This member is required.
        public var monitoringOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
        /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a monitoring job. In distributed processing, you specify more than one instance.
        /// This member is required.
        public var monitoringResources: SageMakerClientTypes.MonitoringResources?
        /// Specifies networking options for an monitoring job.
        public var networkConfig: SageMakerClientTypes.NetworkConfig?
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        /// This member is required.
        public var roleArn: Swift.String?
        /// Specifies a time limit for how long the monitoring job is allowed to run.
        public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

        public init (
            baselineConfig: SageMakerClientTypes.MonitoringBaselineConfig? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            monitoringAppSpecification: SageMakerClientTypes.MonitoringAppSpecification? = nil,
            monitoringInputs: [SageMakerClientTypes.MonitoringInput]? = nil,
            monitoringOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
            monitoringResources: SageMakerClientTypes.MonitoringResources? = nil,
            networkConfig: SageMakerClientTypes.NetworkConfig? = nil,
            roleArn: Swift.String? = nil,
            stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
        )
        {
            self.baselineConfig = baselineConfig
            self.environment = environment
            self.monitoringAppSpecification = monitoringAppSpecification
            self.monitoringInputs = monitoringInputs
            self.monitoringOutputConfig = monitoringOutputConfig
            self.monitoringResources = monitoringResources
            self.networkConfig = networkConfig
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
        }
    }

}

extension SageMakerClientTypes {
    public enum MonitoringJobDefinitionSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringJobDefinitionSortKey] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MonitoringJobDefinitionSortKey(rawValue: rawValue) ?? MonitoringJobDefinitionSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.MonitoringJobDefinitionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endpointName = "EndpointName"
        case monitoringJobDefinitionArn = "MonitoringJobDefinitionArn"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let monitoringJobDefinitionArn = monitoringJobDefinitionArn {
            try encodeContainer.encode(monitoringJobDefinitionArn, forKey: .monitoringJobDefinitionArn)
        }
        if let monitoringJobDefinitionName = monitoringJobDefinitionName {
            try encodeContainer.encode(monitoringJobDefinitionName, forKey: .monitoringJobDefinitionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringJobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringJobDefinitionArn)
        monitoringJobDefinitionArn = monitoringJobDefinitionArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Summary information about a monitoring job.
    public struct MonitoringJobDefinitionSummary: Swift.Equatable {
        /// The time that the monitoring job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The name of the endpoint that the job monitors.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The Amazon Resource Name (ARN) of the monitoring job.
        /// This member is required.
        public var monitoringJobDefinitionArn: Swift.String?
        /// The name of the monitoring job.
        /// This member is required.
        public var monitoringJobDefinitionName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            endpointName: Swift.String? = nil,
            monitoringJobDefinitionArn: Swift.String? = nil,
            monitoringJobDefinitionName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.monitoringJobDefinitionArn = monitoringJobDefinitionArn
            self.monitoringJobDefinitionName = monitoringJobDefinitionName
        }
    }

}

extension SageMakerClientTypes.MonitoringNetworkConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableNetworkIsolationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// The networking configuration for the monitoring job.
    public struct MonitoringNetworkConfig: Swift.Equatable {
        /// Whether to encrypt all communications between the instances used for the monitoring jobs. Choose True to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.
        public var enableInterContainerTrafficEncryption: Swift.Bool
        /// Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.
        public var enableNetworkIsolation: Swift.Bool
        /// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init (
            enableInterContainerTrafficEncryption: Swift.Bool = false,
            enableNetworkIsolation: Swift.Bool = false,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableNetworkIsolation = enableNetworkIsolation
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes.MonitoringOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Output = "S3Output"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Output = s3Output {
            try encodeContainer.encode(s3Output, forKey: .s3Output)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringS3Output.self, forKey: .s3Output)
        s3Output = s3OutputDecoded
    }
}

extension SageMakerClientTypes {
    /// The output object for a monitoring job.
    public struct MonitoringOutput: Swift.Equatable {
        /// The Amazon S3 storage location where the results of a monitoring job are saved.
        /// This member is required.
        public var s3Output: SageMakerClientTypes.MonitoringS3Output?

        public init (
            s3Output: SageMakerClientTypes.MonitoringS3Output? = nil
        )
        {
            self.s3Output = s3Output
        }
    }

}

extension SageMakerClientTypes.MonitoringOutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case monitoringOutputs = "MonitoringOutputs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let monitoringOutputs = monitoringOutputs {
            var monitoringOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .monitoringOutputs)
            for monitoringoutputs0 in monitoringOutputs {
                try monitoringOutputsContainer.encode(monitoringoutputs0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringOutputsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringOutput?].self, forKey: .monitoringOutputs)
        var monitoringOutputsDecoded0:[SageMakerClientTypes.MonitoringOutput]? = nil
        if let monitoringOutputsContainer = monitoringOutputsContainer {
            monitoringOutputsDecoded0 = [SageMakerClientTypes.MonitoringOutput]()
            for structure0 in monitoringOutputsContainer {
                if let structure0 = structure0 {
                    monitoringOutputsDecoded0?.append(structure0)
                }
            }
        }
        monitoringOutputs = monitoringOutputsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// The output configuration for monitoring jobs.
    public struct MonitoringOutputConfig: Swift.Equatable {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        public var kmsKeyId: Swift.String?
        /// Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        /// This member is required.
        public var monitoringOutputs: [SageMakerClientTypes.MonitoringOutput]?

        public init (
            kmsKeyId: Swift.String? = nil,
            monitoringOutputs: [SageMakerClientTypes.MonitoringOutput]? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.monitoringOutputs = monitoringOutputs
        }
    }

}

extension SageMakerClientTypes {
    public enum MonitoringProblemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case binaryClassification
        case multiclassClassification
        case regression
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringProblemType] {
            return [
                .binaryClassification,
                .multiclassClassification,
                .regression,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .binaryClassification: return "BinaryClassification"
            case .multiclassClassification: return "MulticlassClassification"
            case .regression: return "Regression"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MonitoringProblemType(rawValue: rawValue) ?? MonitoringProblemType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.MonitoringResources: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterConfig = "ClusterConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterConfig = clusterConfig {
            try encodeContainer.encode(clusterConfig, forKey: .clusterConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringClusterConfig.self, forKey: .clusterConfig)
        clusterConfig = clusterConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Identifies the resources to deploy for a monitoring job.
    public struct MonitoringResources: Swift.Equatable {
        /// The configuration for the cluster resources used to run the processing job.
        /// This member is required.
        public var clusterConfig: SageMakerClientTypes.MonitoringClusterConfig?

        public init (
            clusterConfig: SageMakerClientTypes.MonitoringClusterConfig? = nil
        )
        {
            self.clusterConfig = clusterConfig
        }
    }

}

extension SageMakerClientTypes.MonitoringS3Output: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case localPath = "LocalPath"
        case s3UploadMode = "S3UploadMode"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let s3UploadMode = s3UploadMode {
            try encodeContainer.encode(s3UploadMode.rawValue, forKey: .s3UploadMode)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3UploadModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3UploadMode.self, forKey: .s3UploadMode)
        s3UploadMode = s3UploadModeDecoded
    }
}

extension SageMakerClientTypes {
    /// Information about where and how you want to store the results of a monitoring job.
    public struct MonitoringS3Output: Swift.Equatable {
        /// The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        /// This member is required.
        public var localPath: Swift.String?
        /// Whether to upload the results of the monitoring job continuously or after the job completes.
        public var s3UploadMode: SageMakerClientTypes.ProcessingS3UploadMode?
        /// A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            localPath: Swift.String? = nil,
            s3UploadMode: SageMakerClientTypes.ProcessingS3UploadMode? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3UploadMode = s3UploadMode
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes.MonitoringSchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endpointName = "EndpointName"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case lastMonitoringExecutionSummary = "LastMonitoringExecutionSummary"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case monitoringScheduleConfig = "MonitoringScheduleConfig"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringScheduleStatus = "MonitoringScheduleStatus"
        case monitoringType = "MonitoringType"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let lastMonitoringExecutionSummary = lastMonitoringExecutionSummary {
            try encodeContainer.encode(lastMonitoringExecutionSummary, forKey: .lastMonitoringExecutionSummary)
        }
        if let monitoringScheduleArn = monitoringScheduleArn {
            try encodeContainer.encode(monitoringScheduleArn, forKey: .monitoringScheduleArn)
        }
        if let monitoringScheduleConfig = monitoringScheduleConfig {
            try encodeContainer.encode(monitoringScheduleConfig, forKey: .monitoringScheduleConfig)
        }
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
        if let monitoringScheduleStatus = monitoringScheduleStatus {
            try encodeContainer.encode(monitoringScheduleStatus.rawValue, forKey: .monitoringScheduleStatus)
        }
        if let monitoringType = monitoringType {
            try encodeContainer.encode(monitoringType.rawValue, forKey: .monitoringType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let monitoringScheduleStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ScheduleStatus.self, forKey: .monitoringScheduleStatus)
        monitoringScheduleStatus = monitoringScheduleStatusDecoded
        let monitoringTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringType.self, forKey: .monitoringType)
        monitoringType = monitoringTypeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringScheduleConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringScheduleConfig.self, forKey: .monitoringScheduleConfig)
        monitoringScheduleConfig = monitoringScheduleConfigDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let lastMonitoringExecutionSummaryDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringExecutionSummary.self, forKey: .lastMonitoringExecutionSummary)
        lastMonitoringExecutionSummary = lastMonitoringExecutionSummaryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes {
    /// A schedule for a model monitoring job. For information about model monitor, see [Amazon SageMaker Model Monitor](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html).
    public struct MonitoringSchedule: Swift.Equatable {
        /// The time that the monitoring schedule was created.
        public var creationTime: ClientRuntime.Date?
        /// The endpoint that hosts the model being monitored.
        public var endpointName: Swift.String?
        /// If the monitoring schedule failed, the reason it failed.
        public var failureReason: Swift.String?
        /// The last time the monitoring schedule was changed.
        public var lastModifiedTime: ClientRuntime.Date?
        /// Summary of information about the last monitoring job to run.
        public var lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary?
        /// The Amazon Resource Name (ARN) of the monitoring schedule.
        public var monitoringScheduleArn: Swift.String?
        /// Configures the monitoring schedule and defines the monitoring job.
        public var monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
        /// The name of the monitoring schedule.
        public var monitoringScheduleName: Swift.String?
        /// The status of the monitoring schedule. This can be one of the following values.
        ///
        /// * PENDING - The schedule is pending being created.
        ///
        /// * FAILED - The schedule failed.
        ///
        /// * SCHEDULED - The schedule was successfully created.
        ///
        /// * STOPPED - The schedule was stopped.
        public var monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus?
        /// The type of the monitoring job definition to schedule.
        public var monitoringType: SageMakerClientTypes.MonitoringType?
        /// A list of the tags associated with the monitoring schedlue. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
        public var tags: [SageMakerClientTypes.Tag]?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            endpointName: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary? = nil,
            monitoringScheduleArn: Swift.String? = nil,
            monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig? = nil,
            monitoringScheduleName: Swift.String? = nil,
            monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus? = nil,
            monitoringType: SageMakerClientTypes.MonitoringType? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.lastMonitoringExecutionSummary = lastMonitoringExecutionSummary
            self.monitoringScheduleArn = monitoringScheduleArn
            self.monitoringScheduleConfig = monitoringScheduleConfig
            self.monitoringScheduleName = monitoringScheduleName
            self.monitoringScheduleStatus = monitoringScheduleStatus
            self.monitoringType = monitoringType
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes.MonitoringScheduleConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringJobDefinition = "MonitoringJobDefinition"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringType = "MonitoringType"
        case scheduleConfig = "ScheduleConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monitoringJobDefinition = monitoringJobDefinition {
            try encodeContainer.encode(monitoringJobDefinition, forKey: .monitoringJobDefinition)
        }
        if let monitoringJobDefinitionName = monitoringJobDefinitionName {
            try encodeContainer.encode(monitoringJobDefinitionName, forKey: .monitoringJobDefinitionName)
        }
        if let monitoringType = monitoringType {
            try encodeContainer.encode(monitoringType.rawValue, forKey: .monitoringType)
        }
        if let scheduleConfig = scheduleConfig {
            try encodeContainer.encode(scheduleConfig, forKey: .scheduleConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ScheduleConfig.self, forKey: .scheduleConfig)
        scheduleConfig = scheduleConfigDecoded
        let monitoringJobDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringJobDefinition.self, forKey: .monitoringJobDefinition)
        monitoringJobDefinition = monitoringJobDefinitionDecoded
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringType.self, forKey: .monitoringType)
        monitoringType = monitoringTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// Configures the monitoring schedule and defines the monitoring job.
    public struct MonitoringScheduleConfig: Swift.Equatable {
        /// Defines the monitoring job.
        public var monitoringJobDefinition: SageMakerClientTypes.MonitoringJobDefinition?
        /// The name of the monitoring job definition to schedule.
        public var monitoringJobDefinitionName: Swift.String?
        /// The type of the monitoring job definition to schedule.
        public var monitoringType: SageMakerClientTypes.MonitoringType?
        /// Configures the monitoring schedule.
        public var scheduleConfig: SageMakerClientTypes.ScheduleConfig?

        public init (
            monitoringJobDefinition: SageMakerClientTypes.MonitoringJobDefinition? = nil,
            monitoringJobDefinitionName: Swift.String? = nil,
            monitoringType: SageMakerClientTypes.MonitoringType? = nil,
            scheduleConfig: SageMakerClientTypes.ScheduleConfig? = nil
        )
        {
            self.monitoringJobDefinition = monitoringJobDefinition
            self.monitoringJobDefinitionName = monitoringJobDefinitionName
            self.monitoringType = monitoringType
            self.scheduleConfig = scheduleConfig
        }
    }

}

extension SageMakerClientTypes {
    public enum MonitoringScheduleSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringScheduleSortKey] {
            return [
                .creationTime,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MonitoringScheduleSortKey(rawValue: rawValue) ?? MonitoringScheduleSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.MonitoringScheduleSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endpointName = "EndpointName"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringScheduleStatus = "MonitoringScheduleStatus"
        case monitoringType = "MonitoringType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let monitoringJobDefinitionName = monitoringJobDefinitionName {
            try encodeContainer.encode(monitoringJobDefinitionName, forKey: .monitoringJobDefinitionName)
        }
        if let monitoringScheduleArn = monitoringScheduleArn {
            try encodeContainer.encode(monitoringScheduleArn, forKey: .monitoringScheduleArn)
        }
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
        if let monitoringScheduleStatus = monitoringScheduleStatus {
            try encodeContainer.encode(monitoringScheduleStatus.rawValue, forKey: .monitoringScheduleStatus)
        }
        if let monitoringType = monitoringType {
            try encodeContainer.encode(monitoringType.rawValue, forKey: .monitoringType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringScheduleStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ScheduleStatus.self, forKey: .monitoringScheduleStatus)
        monitoringScheduleStatus = monitoringScheduleStatusDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringType.self, forKey: .monitoringType)
        monitoringType = monitoringTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// Summarizes the monitoring schedule.
    public struct MonitoringScheduleSummary: Swift.Equatable {
        /// The creation time of the monitoring schedule.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The name of the endpoint using the monitoring schedule.
        public var endpointName: Swift.String?
        /// The last time the monitoring schedule was modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The name of the monitoring job definition that the schedule is for.
        public var monitoringJobDefinitionName: Swift.String?
        /// The Amazon Resource Name (ARN) of the monitoring schedule.
        /// This member is required.
        public var monitoringScheduleArn: Swift.String?
        /// The name of the monitoring schedule.
        /// This member is required.
        public var monitoringScheduleName: Swift.String?
        /// The status of the monitoring schedule.
        /// This member is required.
        public var monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus?
        /// The type of the monitoring job definition that the schedule is for.
        public var monitoringType: SageMakerClientTypes.MonitoringType?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            endpointName: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            monitoringJobDefinitionName: Swift.String? = nil,
            monitoringScheduleArn: Swift.String? = nil,
            monitoringScheduleName: Swift.String? = nil,
            monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus? = nil,
            monitoringType: SageMakerClientTypes.MonitoringType? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.lastModifiedTime = lastModifiedTime
            self.monitoringJobDefinitionName = monitoringJobDefinitionName
            self.monitoringScheduleArn = monitoringScheduleArn
            self.monitoringScheduleName = monitoringScheduleName
            self.monitoringScheduleStatus = monitoringScheduleStatus
            self.monitoringType = monitoringType
        }
    }

}

extension SageMakerClientTypes.MonitoringStatisticsResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
    }
}

extension SageMakerClientTypes {
    /// The statistics resource for a monitoring job.
    public struct MonitoringStatisticsResource: Swift.Equatable {
        /// The Amazon S3 URI for the statistics resource.
        public var s3Uri: Swift.String?

        public init (
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes.MonitoringStoppingCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxRuntimeInSeconds = "MaxRuntimeInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxRuntimeInSeconds != 0 {
            try encodeContainer.encode(maxRuntimeInSeconds, forKey: .maxRuntimeInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxRuntimeInSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRuntimeInSeconds)
        maxRuntimeInSeconds = maxRuntimeInSecondsDecoded
    }
}

extension SageMakerClientTypes {
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public struct MonitoringStoppingCondition: Swift.Equatable {
        /// The maximum runtime allowed in seconds. The MaxRuntimeInSeconds cannot exceed the frequency of the job. For data quality and model explainability, this can be up to 3600 seconds for an hourly schedule. For model bias and model quality hourly schedules, this can be up to 1800 seconds.
        /// This member is required.
        public var maxRuntimeInSeconds: Swift.Int

        public init (
            maxRuntimeInSeconds: Swift.Int = 0
        )
        {
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
        }
    }

}

extension SageMakerClientTypes {
    public enum MonitoringType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dataQuality
        case modelBias
        case modelExplainability
        case modelQuality
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringType] {
            return [
                .dataQuality,
                .modelBias,
                .modelExplainability,
                .modelQuality,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dataQuality: return "DataQuality"
            case .modelBias: return "ModelBias"
            case .modelExplainability: return "ModelExplainability"
            case .modelQuality: return "ModelQuality"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MonitoringType(rawValue: rawValue) ?? MonitoringType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.MultiModelConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelCacheSetting = "ModelCacheSetting"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelCacheSetting = modelCacheSetting {
            try encodeContainer.encode(modelCacheSetting.rawValue, forKey: .modelCacheSetting)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelCacheSettingDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelCacheSetting.self, forKey: .modelCacheSetting)
        modelCacheSetting = modelCacheSettingDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies additional configuration for hosting multi-model endpoints.
    public struct MultiModelConfig: Swift.Equatable {
        /// Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled.
        public var modelCacheSetting: SageMakerClientTypes.ModelCacheSetting?

        public init (
            modelCacheSetting: SageMakerClientTypes.ModelCacheSetting? = nil
        )
        {
            self.modelCacheSetting = modelCacheSetting
        }
    }

}

extension SageMakerClientTypes.NeoVpcConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
        case subnets = "Subnets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for neovpcsecuritygroupids0 in securityGroupIds {
                try securityGroupIdsContainer.encode(neovpcsecuritygroupids0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for neovpcsubnets0 in subnets {
                try subnetsContainer.encode(neovpcsubnets0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
    }
}

extension SageMakerClientTypes {
    /// The [VpcConfig] configuration object that specifies the VPC that you want the compilation jobs to connect to. For more information on controlling access to your Amazon S3 buckets used for compilation job, see [Give Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html).
    public struct NeoVpcConfig: Swift.Equatable {
        /// The VPC security group IDs. IDs have the form of sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The ID of the subnets in the VPC that you want to connect the compilation job to for accessing the model in Amazon S3.
        /// This member is required.
        public var subnets: [Swift.String]?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }
    }

}

extension SageMakerClientTypes.NestedFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case nestedPropertyName = "NestedPropertyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filterlist0 in filters {
                try filtersContainer.encode(filterlist0)
            }
        }
        if let nestedPropertyName = nestedPropertyName {
            try encodeContainer.encode(nestedPropertyName, forKey: .nestedPropertyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nestedPropertyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nestedPropertyName)
        nestedPropertyName = nestedPropertyNameDecoded
        let filtersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[SageMakerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SageMakerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

extension SageMakerClientTypes {
    /// A list of nested [Filter] objects. A resource must satisfy the conditions of all filters to be included in the results returned from the [Search] API. For example, to filter on a training job's InputDataConfig property with a specific channel name and S3Uri prefix, define the following filters:
    ///
    /// * '{Name:"InputDataConfig.ChannelName", "Operator":"Equals", "Value":"train"}',
    ///
    /// * '{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri", "Operator":"Contains", "Value":"mybucket/catdata"}'
    public struct NestedFilters: Swift.Equatable {
        /// A list of filters. Each filter acts on a property. Filters must contain at least one Filters value. For example, a NestedFilters call might include a filter on the PropertyName parameter of the InputDataConfig property: InputDataConfig.DataSource.S3DataSource.S3Uri.
        /// This member is required.
        public var filters: [SageMakerClientTypes.Filter]?
        /// The name of the property to use in the nested filters. The value must match a listed property name, such as InputDataConfig.
        /// This member is required.
        public var nestedPropertyName: Swift.String?

        public init (
            filters: [SageMakerClientTypes.Filter]? = nil,
            nestedPropertyName: Swift.String? = nil
        )
        {
            self.filters = filters
            self.nestedPropertyName = nestedPropertyName
        }
    }

}

extension SageMakerClientTypes.NetworkConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableNetworkIsolationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
    public struct NetworkConfig: Swift.Equatable {
        /// Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        public var enableInterContainerTrafficEncryption: Swift.Bool
        /// Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        public var enableNetworkIsolation: Swift.Bool
        /// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init (
            enableInterContainerTrafficEncryption: Swift.Bool = false,
            enableNetworkIsolation: Swift.Bool = false,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableNetworkIsolation = enableNetworkIsolation
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {
    public enum NotebookInstanceAcceleratorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mlEia1Large
        case mlEia1Medium
        case mlEia1Xlarge
        case mlEia2Large
        case mlEia2Medium
        case mlEia2Xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceAcceleratorType] {
            return [
                .mlEia1Large,
                .mlEia1Medium,
                .mlEia1Xlarge,
                .mlEia2Large,
                .mlEia2Medium,
                .mlEia2Xlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mlEia1Large: return "ml.eia1.large"
            case .mlEia1Medium: return "ml.eia1.medium"
            case .mlEia1Xlarge: return "ml.eia1.xlarge"
            case .mlEia2Large: return "ml.eia2.large"
            case .mlEia2Medium: return "ml.eia2.medium"
            case .mlEia2Xlarge: return "ml.eia2.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotebookInstanceAcceleratorType(rawValue: rawValue) ?? NotebookInstanceAcceleratorType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum NotebookInstanceLifecycleConfigSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case lastModifiedTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceLifecycleConfigSortKey] {
            return [
                .creationTime,
                .lastModifiedTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .lastModifiedTime: return "LastModifiedTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotebookInstanceLifecycleConfigSortKey(rawValue: rawValue) ?? NotebookInstanceLifecycleConfigSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum NotebookInstanceLifecycleConfigSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceLifecycleConfigSortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotebookInstanceLifecycleConfigSortOrder(rawValue: rawValue) ?? NotebookInstanceLifecycleConfigSortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case notebookInstanceLifecycleConfigArn = "NotebookInstanceLifecycleConfigArn"
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn {
            try encodeContainer.encode(notebookInstanceLifecycleConfigArn, forKey: .notebookInstanceLifecycleConfigArn)
        }
        if let notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName {
            try encodeContainer.encode(notebookInstanceLifecycleConfigName, forKey: .notebookInstanceLifecycleConfigName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let notebookInstanceLifecycleConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigArn)
        notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides a summary of a notebook instance lifecycle configuration.
    public struct NotebookInstanceLifecycleConfigSummary: Swift.Equatable {
        /// A timestamp that tells when the lifecycle configuration was created.
        public var creationTime: ClientRuntime.Date?
        /// A timestamp that tells when the lifecycle configuration was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the lifecycle configuration.
        /// This member is required.
        public var notebookInstanceLifecycleConfigArn: Swift.String?
        /// The name of the lifecycle configuration.
        /// This member is required.
        public var notebookInstanceLifecycleConfigName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            notebookInstanceLifecycleConfigArn: Swift.String? = nil,
            notebookInstanceLifecycleConfigName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        }
    }

}

extension SageMakerClientTypes.NotebookInstanceLifecycleHook: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains the notebook instance lifecycle configuration script. Each lifecycle configuration script has a limit of 16384 characters. The value of the $PATH environment variable that is available to both scripts is /sbin:bin:/usr/sbin:/usr/bin. View CloudWatch Logs for notebook instance lifecycle configurations in log group /aws/sagemaker/NotebookInstances in log stream [notebook-instance-name]/[LifecycleConfigHook]. Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started. For information about notebook instance lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
    public struct NotebookInstanceLifecycleHook: Swift.Equatable {
        /// A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration.
        public var content: Swift.String?

        public init (
            content: Swift.String? = nil
        )
        {
            self.content = content
        }
    }

}

extension SageMakerClientTypes {
    public enum NotebookInstanceSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceSortKey] {
            return [
                .creationTime,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotebookInstanceSortKey(rawValue: rawValue) ?? NotebookInstanceSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum NotebookInstanceSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceSortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotebookInstanceSortOrder(rawValue: rawValue) ?? NotebookInstanceSortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum NotebookInstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleting
        case failed
        case inservice
        case pending
        case stopped
        case stopping
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceStatus] {
            return [
                .deleting,
                .failed,
                .inservice,
                .pending,
                .stopped,
                .stopping,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .pending: return "Pending"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotebookInstanceStatus(rawValue: rawValue) ?? NotebookInstanceStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.NotebookInstanceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case creationTime = "CreationTime"
        case defaultCodeRepository = "DefaultCodeRepository"
        case instanceType = "InstanceType"
        case lastModifiedTime = "LastModifiedTime"
        case notebookInstanceArn = "NotebookInstanceArn"
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case notebookInstanceStatus = "NotebookInstanceStatus"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalCodeRepositories = additionalCodeRepositories {
            var additionalCodeRepositoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalCodeRepositories)
            for additionalcoderepositorynamesorurls0 in additionalCodeRepositories {
                try additionalCodeRepositoriesContainer.encode(additionalcoderepositorynamesorurls0)
            }
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let defaultCodeRepository = defaultCodeRepository {
            try encodeContainer.encode(defaultCodeRepository, forKey: .defaultCodeRepository)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let notebookInstanceArn = notebookInstanceArn {
            try encodeContainer.encode(notebookInstanceArn, forKey: .notebookInstanceArn)
        }
        if let notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName {
            try encodeContainer.encode(notebookInstanceLifecycleConfigName, forKey: .notebookInstanceLifecycleConfigName)
        }
        if let notebookInstanceName = notebookInstanceName {
            try encodeContainer.encode(notebookInstanceName, forKey: .notebookInstanceName)
        }
        if let notebookInstanceStatus = notebookInstanceStatus {
            try encodeContainer.encode(notebookInstanceStatus.rawValue, forKey: .notebookInstanceStatus)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let notebookInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceArn)
        notebookInstanceArn = notebookInstanceArnDecoded
        let notebookInstanceStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceStatus.self, forKey: .notebookInstanceStatus)
        notebookInstanceStatus = notebookInstanceStatusDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let defaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultCodeRepository)
        defaultCodeRepository = defaultCodeRepositoryDecoded
        let additionalCodeRepositoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalCodeRepositories)
        var additionalCodeRepositoriesDecoded0:[Swift.String]? = nil
        if let additionalCodeRepositoriesContainer = additionalCodeRepositoriesContainer {
            additionalCodeRepositoriesDecoded0 = [Swift.String]()
            for string0 in additionalCodeRepositoriesContainer {
                if let string0 = string0 {
                    additionalCodeRepositoriesDecoded0?.append(string0)
                }
            }
        }
        additionalCodeRepositories = additionalCodeRepositoriesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Provides summary information for an Amazon SageMaker notebook instance.
    public struct NotebookInstanceSummary: Swift.Equatable {
        /// An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with Amazon SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
        public var additionalCodeRepositories: [Swift.String]?
        /// A timestamp that shows when the notebook instance was created.
        public var creationTime: ClientRuntime.Date?
        /// The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with Amazon SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
        public var defaultCodeRepository: Swift.String?
        /// The type of ML compute instance that the notebook instance is running on.
        public var instanceType: SageMakerClientTypes.InstanceType?
        /// A timestamp that shows when the notebook instance was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the notebook instance.
        /// This member is required.
        public var notebookInstanceArn: Swift.String?
        /// The name of a notebook instance lifecycle configuration associated with this notebook instance. For information about notebook instance lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
        public var notebookInstanceLifecycleConfigName: Swift.String?
        /// The name of the notebook instance that you want a summary for.
        /// This member is required.
        public var notebookInstanceName: Swift.String?
        /// The status of the notebook instance.
        public var notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus?
        /// The URL that you use to connect to the Jupyter instance running in your notebook instance.
        public var url: Swift.String?

        public init (
            additionalCodeRepositories: [Swift.String]? = nil,
            creationTime: ClientRuntime.Date? = nil,
            defaultCodeRepository: Swift.String? = nil,
            instanceType: SageMakerClientTypes.InstanceType? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            notebookInstanceArn: Swift.String? = nil,
            notebookInstanceLifecycleConfigName: Swift.String? = nil,
            notebookInstanceName: Swift.String? = nil,
            notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus? = nil,
            url: Swift.String? = nil
        )
        {
            self.additionalCodeRepositories = additionalCodeRepositories
            self.creationTime = creationTime
            self.defaultCodeRepository = defaultCodeRepository
            self.instanceType = instanceType
            self.lastModifiedTime = lastModifiedTime
            self.notebookInstanceArn = notebookInstanceArn
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
            self.notebookInstanceName = notebookInstanceName
            self.notebookInstanceStatus = notebookInstanceStatus
            self.url = url
        }
    }

}

extension SageMakerClientTypes {
    public enum NotebookOutputOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allowed
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookOutputOption] {
            return [
                .allowed,
                .disabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allowed: return "Allowed"
            case .disabled: return "Disabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotebookOutputOption(rawValue: rawValue) ?? NotebookOutputOption.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.NotificationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notificationTopicArn = "NotificationTopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notificationTopicArn = notificationTopicArn {
            try encodeContainer.encode(notificationTopicArn, forKey: .notificationTopicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notificationTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTopicArn)
        notificationTopicArn = notificationTopicArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Configures Amazon SNS notifications of available or expiring work items for work teams.
    public struct NotificationConfiguration: Swift.Equatable {
        /// The ARN for the Amazon SNS topic to which notifications should be published.
        public var notificationTopicArn: Swift.String?

        public init (
            notificationTopicArn: Swift.String? = nil
        )
        {
            self.notificationTopicArn = notificationTopicArn
        }
    }

}

extension SageMakerClientTypes {
    public enum ObjectiveStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectiveStatus] {
            return [
                .failed,
                .pending,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pending: return "Pending"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectiveStatus(rawValue: rawValue) ?? ObjectiveStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ObjectiveStatusCounters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "Failed"
        case pending = "Pending"
        case succeeded = "Succeeded"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if failed != 0 {
            try encodeContainer.encode(failed, forKey: .failed)
        }
        if pending != 0 {
            try encodeContainer.encode(pending, forKey: .pending)
        }
        if succeeded != 0 {
            try encodeContainer.encode(succeeded, forKey: .succeeded)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let succeededDecoded = try containerValues.decode(Swift.Int.self, forKey: .succeeded)
        succeeded = succeededDecoded
        let pendingDecoded = try containerValues.decode(Swift.Int.self, forKey: .pending)
        pending = pendingDecoded
        let failedDecoded = try containerValues.decode(Swift.Int.self, forKey: .failed)
        failed = failedDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.
    public struct ObjectiveStatusCounters: Swift.Equatable {
        /// The number of training jobs whose final objective metric was not evaluated and used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.
        public var failed: Swift.Int
        /// The number of training jobs that are in progress and pending evaluation of their final objective metric.
        public var pending: Swift.Int
        /// The number of training jobs whose final objective metric was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.
        public var succeeded: Swift.Int

        public init (
            failed: Swift.Int = 0,
            pending: Swift.Int = 0,
            succeeded: Swift.Int = 0
        )
        {
            self.failed = failed
            self.pending = pending
            self.succeeded = succeeded
        }
    }

}

extension SageMakerClientTypes.OfflineStoreConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataCatalogConfig = "DataCatalogConfig"
        case disableGlueTableCreation = "DisableGlueTableCreation"
        case s3StorageConfig = "S3StorageConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataCatalogConfig = dataCatalogConfig {
            try encodeContainer.encode(dataCatalogConfig, forKey: .dataCatalogConfig)
        }
        if disableGlueTableCreation != false {
            try encodeContainer.encode(disableGlueTableCreation, forKey: .disableGlueTableCreation)
        }
        if let s3StorageConfig = s3StorageConfig {
            try encodeContainer.encode(s3StorageConfig, forKey: .s3StorageConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3StorageConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.S3StorageConfig.self, forKey: .s3StorageConfig)
        s3StorageConfig = s3StorageConfigDecoded
        let disableGlueTableCreationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disableGlueTableCreation)
        disableGlueTableCreation = disableGlueTableCreationDecoded
        let dataCatalogConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataCatalogConfig.self, forKey: .dataCatalogConfig)
        dataCatalogConfig = dataCatalogConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// The configuration of an OfflineStore. Provide an OfflineStoreConfig in a request to CreateFeatureGroup to create an OfflineStore. To encrypt an OfflineStore using at rest data encryption, specify Amazon Web Services Key Management Service (KMS) key ID, or KMSKeyId, in S3StorageConfig.
    public struct OfflineStoreConfig: Swift.Equatable {
        /// The meta data of the Glue table that is autogenerated when an OfflineStore is created.
        public var dataCatalogConfig: SageMakerClientTypes.DataCatalogConfig?
        /// Set to True to disable the automatic creation of an Amazon Web Services Glue table when configuring an OfflineStore.
        public var disableGlueTableCreation: Swift.Bool
        /// The Amazon Simple Storage (Amazon S3) location of OfflineStore.
        /// This member is required.
        public var s3StorageConfig: SageMakerClientTypes.S3StorageConfig?

        public init (
            dataCatalogConfig: SageMakerClientTypes.DataCatalogConfig? = nil,
            disableGlueTableCreation: Swift.Bool = false,
            s3StorageConfig: SageMakerClientTypes.S3StorageConfig? = nil
        )
        {
            self.dataCatalogConfig = dataCatalogConfig
            self.disableGlueTableCreation = disableGlueTableCreation
            self.s3StorageConfig = s3StorageConfig
        }
    }

}

extension SageMakerClientTypes.OfflineStoreStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockedReason = "BlockedReason"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockedReason = blockedReason {
            try encodeContainer.encode(blockedReason, forKey: .blockedReason)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OfflineStoreStatusValue.self, forKey: .status)
        status = statusDecoded
        let blockedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blockedReason)
        blockedReason = blockedReasonDecoded
    }
}

extension SageMakerClientTypes {
    /// The status of OfflineStore.
    public struct OfflineStoreStatus: Swift.Equatable {
        /// The justification for why the OfflineStoreStatus is Blocked (if applicable).
        public var blockedReason: Swift.String?
        /// An OfflineStore status.
        /// This member is required.
        public var status: SageMakerClientTypes.OfflineStoreStatusValue?

        public init (
            blockedReason: Swift.String? = nil,
            status: SageMakerClientTypes.OfflineStoreStatusValue? = nil
        )
        {
            self.blockedReason = blockedReason
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    public enum OfflineStoreStatusValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case blocked
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [OfflineStoreStatusValue] {
            return [
                .active,
                .blocked,
                .disabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .blocked: return "Blocked"
            case .disabled: return "Disabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OfflineStoreStatusValue(rawValue: rawValue) ?? OfflineStoreStatusValue.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.OidcConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizationEndpoint = "AuthorizationEndpoint"
        case clientId = "ClientId"
        case clientSecret = "ClientSecret"
        case issuer = "Issuer"
        case jwksUri = "JwksUri"
        case logoutEndpoint = "LogoutEndpoint"
        case tokenEndpoint = "TokenEndpoint"
        case userInfoEndpoint = "UserInfoEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizationEndpoint = authorizationEndpoint {
            try encodeContainer.encode(authorizationEndpoint, forKey: .authorizationEndpoint)
        }
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientSecret = clientSecret {
            try encodeContainer.encode(clientSecret, forKey: .clientSecret)
        }
        if let issuer = issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let jwksUri = jwksUri {
            try encodeContainer.encode(jwksUri, forKey: .jwksUri)
        }
        if let logoutEndpoint = logoutEndpoint {
            try encodeContainer.encode(logoutEndpoint, forKey: .logoutEndpoint)
        }
        if let tokenEndpoint = tokenEndpoint {
            try encodeContainer.encode(tokenEndpoint, forKey: .tokenEndpoint)
        }
        if let userInfoEndpoint = userInfoEndpoint {
            try encodeContainer.encode(userInfoEndpoint, forKey: .userInfoEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let authorizationEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizationEndpoint)
        authorizationEndpoint = authorizationEndpointDecoded
        let tokenEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenEndpoint)
        tokenEndpoint = tokenEndpointDecoded
        let userInfoEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userInfoEndpoint)
        userInfoEndpoint = userInfoEndpointDecoded
        let logoutEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logoutEndpoint)
        logoutEndpoint = logoutEndpointDecoded
        let jwksUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jwksUri)
        jwksUri = jwksUriDecoded
    }
}

extension SageMakerClientTypes {
    /// Use this parameter to configure your OIDC Identity Provider (IdP).
    public struct OidcConfig: Swift.Equatable {
        /// The OIDC IdP authorization endpoint used to configure your private workforce.
        /// This member is required.
        public var authorizationEndpoint: Swift.String?
        /// The OIDC IdP client ID used to configure your private workforce.
        /// This member is required.
        public var clientId: Swift.String?
        /// The OIDC IdP client secret used to configure your private workforce.
        /// This member is required.
        public var clientSecret: Swift.String?
        /// The OIDC IdP issuer used to configure your private workforce.
        /// This member is required.
        public var issuer: Swift.String?
        /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        /// This member is required.
        public var jwksUri: Swift.String?
        /// The OIDC IdP logout endpoint used to configure your private workforce.
        /// This member is required.
        public var logoutEndpoint: Swift.String?
        /// The OIDC IdP token endpoint used to configure your private workforce.
        /// This member is required.
        public var tokenEndpoint: Swift.String?
        /// The OIDC IdP user information endpoint used to configure your private workforce.
        /// This member is required.
        public var userInfoEndpoint: Swift.String?

        public init (
            authorizationEndpoint: Swift.String? = nil,
            clientId: Swift.String? = nil,
            clientSecret: Swift.String? = nil,
            issuer: Swift.String? = nil,
            jwksUri: Swift.String? = nil,
            logoutEndpoint: Swift.String? = nil,
            tokenEndpoint: Swift.String? = nil,
            userInfoEndpoint: Swift.String? = nil
        )
        {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.issuer = issuer
            self.jwksUri = jwksUri
            self.logoutEndpoint = logoutEndpoint
            self.tokenEndpoint = tokenEndpoint
            self.userInfoEndpoint = userInfoEndpoint
        }
    }

}

extension SageMakerClientTypes.OidcConfigForResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizationEndpoint = "AuthorizationEndpoint"
        case clientId = "ClientId"
        case issuer = "Issuer"
        case jwksUri = "JwksUri"
        case logoutEndpoint = "LogoutEndpoint"
        case tokenEndpoint = "TokenEndpoint"
        case userInfoEndpoint = "UserInfoEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizationEndpoint = authorizationEndpoint {
            try encodeContainer.encode(authorizationEndpoint, forKey: .authorizationEndpoint)
        }
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let issuer = issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let jwksUri = jwksUri {
            try encodeContainer.encode(jwksUri, forKey: .jwksUri)
        }
        if let logoutEndpoint = logoutEndpoint {
            try encodeContainer.encode(logoutEndpoint, forKey: .logoutEndpoint)
        }
        if let tokenEndpoint = tokenEndpoint {
            try encodeContainer.encode(tokenEndpoint, forKey: .tokenEndpoint)
        }
        if let userInfoEndpoint = userInfoEndpoint {
            try encodeContainer.encode(userInfoEndpoint, forKey: .userInfoEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let authorizationEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizationEndpoint)
        authorizationEndpoint = authorizationEndpointDecoded
        let tokenEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenEndpoint)
        tokenEndpoint = tokenEndpointDecoded
        let userInfoEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userInfoEndpoint)
        userInfoEndpoint = userInfoEndpointDecoded
        let logoutEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logoutEndpoint)
        logoutEndpoint = logoutEndpointDecoded
        let jwksUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jwksUri)
        jwksUri = jwksUriDecoded
    }
}

extension SageMakerClientTypes {
    /// Your OIDC IdP workforce configuration.
    public struct OidcConfigForResponse: Swift.Equatable {
        /// The OIDC IdP authorization endpoint used to configure your private workforce.
        public var authorizationEndpoint: Swift.String?
        /// The OIDC IdP client ID used to configure your private workforce.
        public var clientId: Swift.String?
        /// The OIDC IdP issuer used to configure your private workforce.
        public var issuer: Swift.String?
        /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        public var jwksUri: Swift.String?
        /// The OIDC IdP logout endpoint used to configure your private workforce.
        public var logoutEndpoint: Swift.String?
        /// The OIDC IdP token endpoint used to configure your private workforce.
        public var tokenEndpoint: Swift.String?
        /// The OIDC IdP user information endpoint used to configure your private workforce.
        public var userInfoEndpoint: Swift.String?

        public init (
            authorizationEndpoint: Swift.String? = nil,
            clientId: Swift.String? = nil,
            issuer: Swift.String? = nil,
            jwksUri: Swift.String? = nil,
            logoutEndpoint: Swift.String? = nil,
            tokenEndpoint: Swift.String? = nil,
            userInfoEndpoint: Swift.String? = nil
        )
        {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.issuer = issuer
            self.jwksUri = jwksUri
            self.logoutEndpoint = logoutEndpoint
            self.tokenEndpoint = tokenEndpoint
            self.userInfoEndpoint = userInfoEndpoint
        }
    }

}

extension SageMakerClientTypes.OidcMemberDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groups = "Groups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for groups0 in groups {
                try groupsContainer.encode(groups0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .groups)
        var groupsDecoded0:[Swift.String]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [Swift.String]()
            for string0 in groupsContainer {
                if let string0 = string0 {
                    groupsDecoded0?.append(string0)
                }
            }
        }
        groups = groupsDecoded0
    }
}

extension SageMakerClientTypes {
    /// A list of user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of Groups, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.
    public struct OidcMemberDefinition: Swift.Equatable {
        /// A list of comma seperated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
        /// This member is required.
        public var groups: [Swift.String]?

        public init (
            groups: [Swift.String]? = nil
        )
        {
            self.groups = groups
        }
    }

}

extension SageMakerClientTypes.OnlineStoreConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableOnlineStore = "EnableOnlineStore"
        case securityConfig = "SecurityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enableOnlineStore != false {
            try encodeContainer.encode(enableOnlineStore, forKey: .enableOnlineStore)
        }
        if let securityConfig = securityConfig {
            try encodeContainer.encode(securityConfig, forKey: .securityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OnlineStoreSecurityConfig.self, forKey: .securityConfig)
        securityConfig = securityConfigDecoded
        let enableOnlineStoreDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableOnlineStore)
        enableOnlineStore = enableOnlineStoreDecoded
    }
}

extension SageMakerClientTypes {
    /// Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or KMSKeyId, for at rest data encryption. You can turn OnlineStore on or off by specifying the EnableOnlineStore flag at General Assembly; the default value is False.
    public struct OnlineStoreConfig: Swift.Equatable {
        /// Turn OnlineStore off by specifying False for the EnableOnlineStore flag. Turn OnlineStore on by specifying True for the EnableOnlineStore flag. The default value is False.
        public var enableOnlineStore: Swift.Bool
        /// Use to specify KMS Key ID (KMSKeyId) for at-rest encryption of your OnlineStore.
        public var securityConfig: SageMakerClientTypes.OnlineStoreSecurityConfig?

        public init (
            enableOnlineStore: Swift.Bool = false,
            securityConfig: SageMakerClientTypes.OnlineStoreSecurityConfig? = nil
        )
        {
            self.enableOnlineStore = enableOnlineStore
            self.securityConfig = securityConfig
        }
    }

}

extension SageMakerClientTypes.OnlineStoreSecurityConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// The security configuration for OnlineStore.
    public struct OnlineStoreSecurityConfig: Swift.Equatable {
        /// The ID of the Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption. The caller (either IAM user or IAM role) of CreateFeatureGroup must have below permissions to the OnlineStoreKmsKeyId:
        ///
        /// * "kms:Encrypt"
        ///
        /// * "kms:Decrypt"
        ///
        /// * "kms:DescribeKey"
        ///
        /// * "kms:CreateGrant"
        ///
        /// * "kms:RetireGrant"
        ///
        /// * "kms:ReEncryptFrom"
        ///
        /// * "kms:ReEncryptTo"
        ///
        /// * "kms:GenerateDataKey"
        ///
        /// * "kms:ListAliases"
        ///
        /// * "kms:ListGrants"
        ///
        /// * "kms:RevokeGrant"
        ///
        ///
        /// The caller (either IAM user or IAM role) to all DataPlane operations (PutRecord, GetRecord, DeleteRecord) must have the following permissions to the KmsKeyId:
        ///
        /// * "kms:Decrypt"
        public var kmsKeyId: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes {
    public enum Operator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contains
        case equals
        case exists
        case greaterThan
        case greaterThanOrEqualTo
        case `in`
        case lessThan
        case lessThanOrEqualTo
        case notEquals
        case notExists
        case sdkUnknown(Swift.String)

        public static var allCases: [Operator] {
            return [
                .contains,
                .equals,
                .exists,
                .greaterThan,
                .greaterThanOrEqualTo,
                .in,
                .lessThan,
                .lessThanOrEqualTo,
                .notEquals,
                .notExists,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contains: return "Contains"
            case .equals: return "Equals"
            case .exists: return "Exists"
            case .greaterThan: return "GreaterThan"
            case .greaterThanOrEqualTo: return "GreaterThanOrEqualTo"
            case .in: return "In"
            case .lessThan: return "LessThan"
            case .lessThanOrEqualTo: return "LessThanOrEqualTo"
            case .notEquals: return "NotEquals"
            case .notExists: return "NotExists"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Operator(rawValue: rawValue) ?? Operator.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum OrderKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [OrderKey] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrderKey(rawValue: rawValue) ?? OrderKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.OutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilerOptions = "CompilerOptions"
        case kmsKeyId = "KmsKeyId"
        case s3OutputLocation = "S3OutputLocation"
        case targetDevice = "TargetDevice"
        case targetPlatform = "TargetPlatform"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compilerOptions = compilerOptions {
            try encodeContainer.encode(compilerOptions, forKey: .compilerOptions)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputLocation = s3OutputLocation {
            try encodeContainer.encode(s3OutputLocation, forKey: .s3OutputLocation)
        }
        if let targetDevice = targetDevice {
            try encodeContainer.encode(targetDevice.rawValue, forKey: .targetDevice)
        }
        if let targetPlatform = targetPlatform {
            try encodeContainer.encode(targetPlatform, forKey: .targetPlatform)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputLocation)
        s3OutputLocation = s3OutputLocationDecoded
        let targetDeviceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TargetDevice.self, forKey: .targetDevice)
        targetDevice = targetDeviceDecoded
        let targetPlatformDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TargetPlatform.self, forKey: .targetPlatform)
        targetPlatform = targetPlatformDecoded
        let compilerOptionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilerOptions)
        compilerOptions = compilerOptionsDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains information about the output location for the compiled model and the target device that the model runs on. TargetDevice and TargetPlatform are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the TargetDevice list, use TargetPlatform to describe the platform of your edge device and CompilerOptions if there are specific settings that are required or recommended to use for particular TargetPlatform.
    public struct OutputConfig: Swift.Equatable {
        /// Specifies additional parameters for compiler options in JSON format. The compiler options are TargetPlatform specific. It is required for NVIDIA accelerators and highly recommended for CPU compilations. For any other cases, it is optional to specify CompilerOptions.
        ///
        /// * DTYPE: Specifies the data type for the input. When compiling for ml_* (except for ml_inf) instances using PyTorch framework, provide the data type (dtype) of the model's input. "float32" is used if "DTYPE" is not specified. Options for data type are:
        ///
        /// * float32: Use either "float" or "float32".
        ///
        /// * int64: Use either "int64" or "long".
        ///
        ///
        /// For example, {"dtype" : "float32"}.
        ///
        /// * CPU: Compilation for CPU supports the following compiler options.
        ///
        /// * mcpu: CPU micro-architecture. For example, {'mcpu': 'skylake-avx512'}
        ///
        /// * mattr: CPU flags. For example, {'mattr': ['+neon', '+vfpv4']}
        ///
        ///
        ///
        ///
        /// * ARM: Details of ARM CPU compilations.
        ///
        /// * NEON: NEON is an implementation of the Advanced SIMD extension used in ARMv7 processors. For example, add {'mattr': ['+neon']} to the compiler options if compiling for ARM 32-bit platform with the NEON support.
        ///
        ///
        ///
        ///
        /// * NVIDIA: Compilation for NVIDIA GPU supports the following compiler options.
        ///
        /// * gpu_code: Specifies the targeted architecture.
        ///
        /// * trt-ver: Specifies the TensorRT versions in x.y.z. format.
        ///
        /// * cuda-ver: Specifies the CUDA version in x.y format.
        ///
        ///
        /// For example, {'gpu-code': 'sm_72', 'trt-ver': '6.0.1', 'cuda-ver': '10.1'}
        ///
        /// * ANDROID: Compilation for the Android OS supports the following compiler options:
        ///
        /// * ANDROID_PLATFORM: Specifies the Android API levels. Available levels range from 21 to 29. For example, {'ANDROID_PLATFORM': 28}.
        ///
        /// * mattr: Add {'mattr': ['+neon']} to compiler options if compiling for ARM 32-bit platform with NEON support.
        ///
        ///
        ///
        ///
        /// * INFERENTIA: Compilation for target ml_inf1 uses compiler options passed in as a JSON string. For example, "CompilerOptions": "\"--verbose 1 --num-neuroncores 2 -O2\"". For information about supported compiler options, see [ Neuron Compiler CLI](https://github.com/aws/aws-neuron-sdk/blob/master/docs/neuron-cc/command-line-reference.md).
        ///
        /// * CoreML: Compilation for the CoreML [OutputConfig$TargetDevice] supports the following compiler options:
        ///
        /// * class_labels: Specifies the classification labels file name inside input tar.gz file. For example, {"class_labels": "imagenet_labels_1000.txt"}. Labels inside the txt file should be separated by newlines.
        ///
        ///
        ///
        ///
        /// * EIA: Compilation for the Elastic Inference Accelerator supports the following compiler options:
        ///
        /// * precision_mode: Specifies the precision of compiled artifacts. Supported values are "FP16" and "FP32". Default is "FP32".
        ///
        /// * signature_def_key: Specifies the signature to use for models in SavedModel format. Defaults is TensorFlow's default signature def key.
        ///
        /// * output_names: Specifies a list of output tensor names for models in FrozenGraph format. Set at most one API field, either: signature_def_key or output_names.
        ///
        ///
        /// For example: {"precision_mode": "FP32", "output_names": ["output:0"]}
        public var compilerOptions: Swift.String?
        /// The Amazon Web Services Key Management Service key (Amazon Web Services KMS) that Amazon SageMaker uses to encrypt your output models with Amazon S3 server-side encryption after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KmsKeyId can be any of the following formats:
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Alias name: alias/ExampleAlias
        ///
        /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
        public var kmsKeyId: Swift.String?
        /// Identifies the S3 bucket where you want Amazon SageMaker to store the model artifacts. For example, s3://bucket-name/key-name-prefix.
        /// This member is required.
        public var s3OutputLocation: Swift.String?
        /// Identifies the target device or the machine learning instance that you want to run your model on after the compilation has completed. Alternatively, you can specify OS, architecture, and accelerator using [TargetPlatform] fields. It can be used instead of TargetPlatform.
        public var targetDevice: SageMakerClientTypes.TargetDevice?
        /// Contains information about a target platform that you want your model to run on, such as OS, architecture, and accelerators. It is an alternative of TargetDevice. The following examples show how to configure the TargetPlatform and CompilerOptions JSON strings for popular target platforms:
        ///
        /// * Raspberry Pi 3 Model B+ "TargetPlatform": {"Os": "LINUX", "Arch": "ARM_EABIHF"}, "CompilerOptions": {'mattr': ['+neon']}
        ///
        /// * Jetson TX2 "TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator": "NVIDIA"}, "CompilerOptions": {'gpu-code': 'sm_62', 'trt-ver': '6.0.1', 'cuda-ver': '10.0'}
        ///
        /// * EC2 m5.2xlarge instance OS "TargetPlatform": {"Os": "LINUX", "Arch": "X86_64", "Accelerator": "NVIDIA"}, "CompilerOptions": {'mcpu': 'skylake-avx512'}
        ///
        /// * RK3399 "TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator": "MALI"}
        ///
        /// * ARMv7 phone (CPU) "TargetPlatform": {"Os": "ANDROID", "Arch": "ARM_EABI"}, "CompilerOptions": {'ANDROID_PLATFORM': 25, 'mattr': ['+neon']}
        ///
        /// * ARMv8 phone (CPU) "TargetPlatform": {"Os": "ANDROID", "Arch": "ARM64"}, "CompilerOptions": {'ANDROID_PLATFORM': 29}
        public var targetPlatform: SageMakerClientTypes.TargetPlatform?

        public init (
            compilerOptions: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            s3OutputLocation: Swift.String? = nil,
            targetDevice: SageMakerClientTypes.TargetDevice? = nil,
            targetPlatform: SageMakerClientTypes.TargetPlatform? = nil
        )
        {
            self.compilerOptions = compilerOptions
            self.kmsKeyId = kmsKeyId
            self.s3OutputLocation = s3OutputLocation
            self.targetDevice = targetDevice
            self.targetPlatform = targetPlatform
        }
    }

}

extension SageMakerClientTypes.OutputDataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides information about how to store model training results (model artifacts).
    public struct OutputDataConfig: Swift.Equatable {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats:
        ///
        /// * // KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // KMS Key Alias "alias/ExampleAlias"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key Alias "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"
        ///
        ///
        /// If you use a KMS key ID or an alias of your KMS key, the Amazon SageMaker execution role must include permissions to call kms:Encrypt. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. Amazon SageMaker uses server-side encryption with KMS-managed keys for OutputDataConfig. If you use a bucket policy with an s3:PutObject permission that only allows objects with server-side encryption, set the condition key of s3:x-amz-server-side-encryption to "aws:kms". For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KMS key policy must grant permission to the IAM role that you specify in your CreateTrainingJob, CreateTransformJob, or CreateHyperParameterTuningJob requests. For more information, see [Using Key Policies in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsKeyId: Swift.String?
        /// Identifies the S3 path where you want Amazon SageMaker to store the model artifacts. For example, s3://bucket-name/key-name-prefix.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes.OutputParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// An output parameter of a pipeline step.
    public struct OutputParameter: Swift.Equatable {
        /// The name of the output parameter.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the output parameter.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SageMakerClientTypes.Parameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// Assigns a value to a named Pipeline parameter.
    public struct Parameter: Swift.Equatable {
        /// The name of the parameter to assign a value to. This parameter name must match a named parameter in the pipeline definition.
        /// This member is required.
        public var name: Swift.String?
        /// The literal value for the parameter.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SageMakerClientTypes.ParameterRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoricalParameterRangeSpecification = "CategoricalParameterRangeSpecification"
        case continuousParameterRangeSpecification = "ContinuousParameterRangeSpecification"
        case integerParameterRangeSpecification = "IntegerParameterRangeSpecification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categoricalParameterRangeSpecification = categoricalParameterRangeSpecification {
            try encodeContainer.encode(categoricalParameterRangeSpecification, forKey: .categoricalParameterRangeSpecification)
        }
        if let continuousParameterRangeSpecification = continuousParameterRangeSpecification {
            try encodeContainer.encode(continuousParameterRangeSpecification, forKey: .continuousParameterRangeSpecification)
        }
        if let integerParameterRangeSpecification = integerParameterRangeSpecification {
            try encodeContainer.encode(integerParameterRangeSpecification, forKey: .integerParameterRangeSpecification)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integerParameterRangeSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.IntegerParameterRangeSpecification.self, forKey: .integerParameterRangeSpecification)
        integerParameterRangeSpecification = integerParameterRangeSpecificationDecoded
        let continuousParameterRangeSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ContinuousParameterRangeSpecification.self, forKey: .continuousParameterRangeSpecification)
        continuousParameterRangeSpecification = continuousParameterRangeSpecificationDecoded
        let categoricalParameterRangeSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CategoricalParameterRangeSpecification.self, forKey: .categoricalParameterRangeSpecification)
        categoricalParameterRangeSpecification = categoricalParameterRangeSpecificationDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the possible values for categorical, continuous, and integer hyperparameters to be used by an algorithm.
    public struct ParameterRange: Swift.Equatable {
        /// A CategoricalParameterRangeSpecification object that defines the possible values for a categorical hyperparameter.
        public var categoricalParameterRangeSpecification: SageMakerClientTypes.CategoricalParameterRangeSpecification?
        /// A ContinuousParameterRangeSpecification object that defines the possible values for a continuous hyperparameter.
        public var continuousParameterRangeSpecification: SageMakerClientTypes.ContinuousParameterRangeSpecification?
        /// A IntegerParameterRangeSpecification object that defines the possible values for an integer hyperparameter.
        public var integerParameterRangeSpecification: SageMakerClientTypes.IntegerParameterRangeSpecification?

        public init (
            categoricalParameterRangeSpecification: SageMakerClientTypes.CategoricalParameterRangeSpecification? = nil,
            continuousParameterRangeSpecification: SageMakerClientTypes.ContinuousParameterRangeSpecification? = nil,
            integerParameterRangeSpecification: SageMakerClientTypes.IntegerParameterRangeSpecification? = nil
        )
        {
            self.categoricalParameterRangeSpecification = categoricalParameterRangeSpecification
            self.continuousParameterRangeSpecification = continuousParameterRangeSpecification
            self.integerParameterRangeSpecification = integerParameterRangeSpecification
        }
    }

}

extension SageMakerClientTypes.ParameterRanges: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoricalParameterRanges = "CategoricalParameterRanges"
        case continuousParameterRanges = "ContinuousParameterRanges"
        case integerParameterRanges = "IntegerParameterRanges"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categoricalParameterRanges = categoricalParameterRanges {
            var categoricalParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categoricalParameterRanges)
            for categoricalparameterranges0 in categoricalParameterRanges {
                try categoricalParameterRangesContainer.encode(categoricalparameterranges0)
            }
        }
        if let continuousParameterRanges = continuousParameterRanges {
            var continuousParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .continuousParameterRanges)
            for continuousparameterranges0 in continuousParameterRanges {
                try continuousParameterRangesContainer.encode(continuousparameterranges0)
            }
        }
        if let integerParameterRanges = integerParameterRanges {
            var integerParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integerParameterRanges)
            for integerparameterranges0 in integerParameterRanges {
                try integerParameterRangesContainer.encode(integerparameterranges0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integerParameterRangesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.IntegerParameterRange?].self, forKey: .integerParameterRanges)
        var integerParameterRangesDecoded0:[SageMakerClientTypes.IntegerParameterRange]? = nil
        if let integerParameterRangesContainer = integerParameterRangesContainer {
            integerParameterRangesDecoded0 = [SageMakerClientTypes.IntegerParameterRange]()
            for structure0 in integerParameterRangesContainer {
                if let structure0 = structure0 {
                    integerParameterRangesDecoded0?.append(structure0)
                }
            }
        }
        integerParameterRanges = integerParameterRangesDecoded0
        let continuousParameterRangesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ContinuousParameterRange?].self, forKey: .continuousParameterRanges)
        var continuousParameterRangesDecoded0:[SageMakerClientTypes.ContinuousParameterRange]? = nil
        if let continuousParameterRangesContainer = continuousParameterRangesContainer {
            continuousParameterRangesDecoded0 = [SageMakerClientTypes.ContinuousParameterRange]()
            for structure0 in continuousParameterRangesContainer {
                if let structure0 = structure0 {
                    continuousParameterRangesDecoded0?.append(structure0)
                }
            }
        }
        continuousParameterRanges = continuousParameterRangesDecoded0
        let categoricalParameterRangesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.CategoricalParameterRange?].self, forKey: .categoricalParameterRanges)
        var categoricalParameterRangesDecoded0:[SageMakerClientTypes.CategoricalParameterRange]? = nil
        if let categoricalParameterRangesContainer = categoricalParameterRangesContainer {
            categoricalParameterRangesDecoded0 = [SageMakerClientTypes.CategoricalParameterRange]()
            for structure0 in categoricalParameterRangesContainer {
                if let structure0 = structure0 {
                    categoricalParameterRangesDecoded0?.append(structure0)
                }
            }
        }
        categoricalParameterRanges = categoricalParameterRangesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job. You can specify a maximum of 20 hyperparameters that a hyperparameter tuning job can search over. Every possible value of a categorical parameter range counts against this limit.
    public struct ParameterRanges: Swift.Equatable {
        /// The array of [CategoricalParameterRange] objects that specify ranges of categorical hyperparameters that a hyperparameter tuning job searches.
        public var categoricalParameterRanges: [SageMakerClientTypes.CategoricalParameterRange]?
        /// The array of [ContinuousParameterRange] objects that specify ranges of continuous hyperparameters that a hyperparameter tuning job searches.
        public var continuousParameterRanges: [SageMakerClientTypes.ContinuousParameterRange]?
        /// The array of [IntegerParameterRange] objects that specify ranges of integer hyperparameters that a hyperparameter tuning job searches.
        public var integerParameterRanges: [SageMakerClientTypes.IntegerParameterRange]?

        public init (
            categoricalParameterRanges: [SageMakerClientTypes.CategoricalParameterRange]? = nil,
            continuousParameterRanges: [SageMakerClientTypes.ContinuousParameterRange]? = nil,
            integerParameterRanges: [SageMakerClientTypes.IntegerParameterRange]? = nil
        )
        {
            self.categoricalParameterRanges = categoricalParameterRanges
            self.continuousParameterRanges = continuousParameterRanges
            self.integerParameterRanges = integerParameterRanges
        }
    }

}

extension SageMakerClientTypes {
    public enum ParameterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case categorical
        case continuous
        case freeText
        case integer
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterType] {
            return [
                .categorical,
                .continuous,
                .freeText,
                .integer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .categorical: return "Categorical"
            case .continuous: return "Continuous"
            case .freeText: return "FreeText"
            case .integer: return "Integer"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParameterType(rawValue: rawValue) ?? ParameterType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.Parent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentName = "ExperimentName"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
    }
}

extension SageMakerClientTypes {
    /// The trial that a trial component is associated with and the experiment the trial is part of. A component might not be associated with a trial. A component can be associated with multiple trials.
    public struct Parent: Swift.Equatable {
        /// The name of the experiment.
        public var experimentName: Swift.String?
        /// The name of the trial.
        public var trialName: Swift.String?

        public init (
            experimentName: Swift.String? = nil,
            trialName: Swift.String? = nil
        )
        {
            self.experimentName = experimentName
            self.trialName = trialName
        }
    }

}

extension SageMakerClientTypes.ParentHyperParameterTuningJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hyperParameterTuningJobName = hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
    }
}

extension SageMakerClientTypes {
    /// A previously completed or stopped hyperparameter tuning job to be used as a starting point for a new hyperparameter tuning job.
    public struct ParentHyperParameterTuningJob: Swift.Equatable {
        /// The name of the hyperparameter tuning job to be used as a starting point for a new hyperparameter tuning job.
        public var hyperParameterTuningJobName: Swift.String?

        public init (
            hyperParameterTuningJobName: Swift.String? = nil
        )
        {
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
        }
    }

}

extension SageMakerClientTypes.PendingDeploymentSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointConfigName = "EndpointConfigName"
        case productionVariants = "ProductionVariants"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointConfigName = endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
        if let productionVariants = productionVariants {
            var productionVariantsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productionVariants)
            for pendingproductionvariantsummarylist0 in productionVariants {
                try productionVariantsContainer.encode(pendingproductionvariantsummarylist0)
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.PendingProductionVariantSummary?].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[SageMakerClientTypes.PendingProductionVariantSummary]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [SageMakerClientTypes.PendingProductionVariantSummary]()
            for structure0 in productionVariantsContainer {
                if let structure0 = structure0 {
                    productionVariantsDecoded0?.append(structure0)
                }
            }
        }
        productionVariants = productionVariantsDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// The summary of an in-progress deployment when an endpoint is creating or updating with a new endpoint configuration.
    public struct PendingDeploymentSummary: Swift.Equatable {
        /// The name of the endpoint configuration used in the deployment.
        /// This member is required.
        public var endpointConfigName: Swift.String?
        /// List of PendingProductionVariantSummary objects.
        public var productionVariants: [SageMakerClientTypes.PendingProductionVariantSummary]?
        /// The start time of the deployment.
        public var startTime: ClientRuntime.Date?

        public init (
            endpointConfigName: Swift.String? = nil,
            productionVariants: [SageMakerClientTypes.PendingProductionVariantSummary]? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endpointConfigName = endpointConfigName
            self.productionVariants = productionVariants
            self.startTime = startTime
        }
    }

}

extension SageMakerClientTypes.PendingProductionVariantSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorType = "AcceleratorType"
        case currentInstanceCount = "CurrentInstanceCount"
        case currentServerlessConfig = "CurrentServerlessConfig"
        case currentWeight = "CurrentWeight"
        case deployedImages = "DeployedImages"
        case desiredInstanceCount = "DesiredInstanceCount"
        case desiredServerlessConfig = "DesiredServerlessConfig"
        case desiredWeight = "DesiredWeight"
        case instanceType = "InstanceType"
        case variantName = "VariantName"
        case variantStatus = "VariantStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorType = acceleratorType {
            try encodeContainer.encode(acceleratorType.rawValue, forKey: .acceleratorType)
        }
        if let currentInstanceCount = currentInstanceCount {
            try encodeContainer.encode(currentInstanceCount, forKey: .currentInstanceCount)
        }
        if let currentServerlessConfig = currentServerlessConfig {
            try encodeContainer.encode(currentServerlessConfig, forKey: .currentServerlessConfig)
        }
        if let currentWeight = currentWeight {
            try encodeContainer.encode(currentWeight, forKey: .currentWeight)
        }
        if let deployedImages = deployedImages {
            var deployedImagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deployedImages)
            for deployedimages0 in deployedImages {
                try deployedImagesContainer.encode(deployedimages0)
            }
        }
        if let desiredInstanceCount = desiredInstanceCount {
            try encodeContainer.encode(desiredInstanceCount, forKey: .desiredInstanceCount)
        }
        if let desiredServerlessConfig = desiredServerlessConfig {
            try encodeContainer.encode(desiredServerlessConfig, forKey: .desiredServerlessConfig)
        }
        if let desiredWeight = desiredWeight {
            try encodeContainer.encode(desiredWeight, forKey: .desiredWeight)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let variantName = variantName {
            try encodeContainer.encode(variantName, forKey: .variantName)
        }
        if let variantStatus = variantStatus {
            var variantStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variantStatus)
            for productionvariantstatuslist0 in variantStatus {
                try variantStatusContainer.encode(productionvariantstatuslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .variantName)
        variantName = variantNameDecoded
        let deployedImagesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DeployedImage?].self, forKey: .deployedImages)
        var deployedImagesDecoded0:[SageMakerClientTypes.DeployedImage]? = nil
        if let deployedImagesContainer = deployedImagesContainer {
            deployedImagesDecoded0 = [SageMakerClientTypes.DeployedImage]()
            for structure0 in deployedImagesContainer {
                if let structure0 = structure0 {
                    deployedImagesDecoded0?.append(structure0)
                }
            }
        }
        deployedImages = deployedImagesDecoded0
        let currentWeightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .currentWeight)
        currentWeight = currentWeightDecoded
        let desiredWeightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .desiredWeight)
        desiredWeight = desiredWeightDecoded
        let currentInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentInstanceCount)
        currentInstanceCount = currentInstanceCountDecoded
        let desiredInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredInstanceCount)
        desiredInstanceCount = desiredInstanceCountDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let acceleratorTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantAcceleratorType.self, forKey: .acceleratorType)
        acceleratorType = acceleratorTypeDecoded
        let variantStatusContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariantStatus?].self, forKey: .variantStatus)
        var variantStatusDecoded0:[SageMakerClientTypes.ProductionVariantStatus]? = nil
        if let variantStatusContainer = variantStatusContainer {
            variantStatusDecoded0 = [SageMakerClientTypes.ProductionVariantStatus]()
            for structure0 in variantStatusContainer {
                if let structure0 = structure0 {
                    variantStatusDecoded0?.append(structure0)
                }
            }
        }
        variantStatus = variantStatusDecoded0
        let currentServerlessConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantServerlessConfig.self, forKey: .currentServerlessConfig)
        currentServerlessConfig = currentServerlessConfigDecoded
        let desiredServerlessConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantServerlessConfig.self, forKey: .desiredServerlessConfig)
        desiredServerlessConfig = desiredServerlessConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// The production variant summary for a deployment when an endpoint is creating or updating with the [CreateEndpoint] or [UpdateEndpoint] operations. Describes the VariantStatus , weight and capacity for a production variant associated with an endpoint.
    public struct PendingProductionVariantSummary: Swift.Equatable {
        /// The size of the Elastic Inference (EI) instance to use for the production variant. EI instances provide on-demand GPU computing for inference. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
        public var acceleratorType: SageMakerClientTypes.ProductionVariantAcceleratorType?
        /// The number of instances associated with the variant.
        public var currentInstanceCount: Swift.Int?
        /// The serverless configuration for the endpoint. Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.
        public var currentServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The weight associated with the variant.
        public var currentWeight: Swift.Float?
        /// An array of DeployedImage objects that specify the Amazon EC2 Container Registry paths of the inference images deployed on instances of this ProductionVariant.
        public var deployedImages: [SageMakerClientTypes.DeployedImage]?
        /// The number of instances requested in this deployment, as specified in the endpoint configuration for the endpoint. The value is taken from the request to the [CreateEndpointConfig] operation.
        public var desiredInstanceCount: Swift.Int?
        /// The serverless configuration requested for this deployment, as specified in the endpoint configuration for the endpoint. Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.
        public var desiredServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The requested weight for the variant in this deployment, as specified in the endpoint configuration for the endpoint. The value is taken from the request to the [CreateEndpointConfig] operation.
        public var desiredWeight: Swift.Float?
        /// The type of instances associated with the variant.
        public var instanceType: SageMakerClientTypes.ProductionVariantInstanceType?
        /// The name of the variant.
        /// This member is required.
        public var variantName: Swift.String?
        /// The endpoint variant status which describes the current deployment stage status or operational status.
        public var variantStatus: [SageMakerClientTypes.ProductionVariantStatus]?

        public init (
            acceleratorType: SageMakerClientTypes.ProductionVariantAcceleratorType? = nil,
            currentInstanceCount: Swift.Int? = nil,
            currentServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            currentWeight: Swift.Float? = nil,
            deployedImages: [SageMakerClientTypes.DeployedImage]? = nil,
            desiredInstanceCount: Swift.Int? = nil,
            desiredServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            desiredWeight: Swift.Float? = nil,
            instanceType: SageMakerClientTypes.ProductionVariantInstanceType? = nil,
            variantName: Swift.String? = nil,
            variantStatus: [SageMakerClientTypes.ProductionVariantStatus]? = nil
        )
        {
            self.acceleratorType = acceleratorType
            self.currentInstanceCount = currentInstanceCount
            self.currentServerlessConfig = currentServerlessConfig
            self.currentWeight = currentWeight
            self.deployedImages = deployedImages
            self.desiredInstanceCount = desiredInstanceCount
            self.desiredServerlessConfig = desiredServerlessConfig
            self.desiredWeight = desiredWeight
            self.instanceType = instanceType
            self.variantName = variantName
            self.variantStatus = variantStatus
        }
    }

}

extension SageMakerClientTypes.Phase: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInSeconds = "DurationInSeconds"
        case initialNumberOfUsers = "InitialNumberOfUsers"
        case spawnRate = "SpawnRate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInSeconds = durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
        if let initialNumberOfUsers = initialNumberOfUsers {
            try encodeContainer.encode(initialNumberOfUsers, forKey: .initialNumberOfUsers)
        }
        if let spawnRate = spawnRate {
            try encodeContainer.encode(spawnRate, forKey: .spawnRate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let initialNumberOfUsersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initialNumberOfUsers)
        initialNumberOfUsers = initialNumberOfUsersDecoded
        let spawnRateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spawnRate)
        spawnRate = spawnRateDecoded
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the traffic pattern.
    public struct Phase: Swift.Equatable {
        /// Specifies how long traffic phase should be.
        public var durationInSeconds: Swift.Int?
        /// Specifies how many concurrent users to start with.
        public var initialNumberOfUsers: Swift.Int?
        /// Specified how many new users to spawn in a minute.
        public var spawnRate: Swift.Int?

        public init (
            durationInSeconds: Swift.Int? = nil,
            initialNumberOfUsers: Swift.Int? = nil,
            spawnRate: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
            self.initialNumberOfUsers = initialNumberOfUsers
            self.spawnRate = spawnRate
        }
    }

}

extension SageMakerClientTypes.Pipeline: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lastRunTime = "LastRunTime"
        case pipelineArn = "PipelineArn"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case pipelineStatus = "PipelineStatus"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let lastRunTime = lastRunTime {
            try encodeContainer.encode(lastRunTime.timeIntervalSince1970, forKey: .lastRunTime)
        }
        if let pipelineArn = pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let pipelineDescription = pipelineDescription {
            try encodeContainer.encode(pipelineDescription, forKey: .pipelineDescription)
        }
        if let pipelineDisplayName = pipelineDisplayName {
            try encodeContainer.encode(pipelineDisplayName, forKey: .pipelineDisplayName)
        }
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let pipelineStatus = pipelineStatus {
            try encodeContainer.encode(pipelineStatus.rawValue, forKey: .pipelineStatus)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDisplayName)
        pipelineDisplayName = pipelineDisplayNameDecoded
        let pipelineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDescription)
        pipelineDescription = pipelineDescriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let pipelineStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineStatus.self, forKey: .pipelineStatus)
        pipelineStatus = pipelineStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastRunTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRunTime)
        lastRunTime = lastRunTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes {
    /// A SageMaker Model Building Pipeline instance.
    public struct Pipeline: Swift.Equatable {
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// The creation time of the pipeline.
        public var creationTime: ClientRuntime.Date?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// The time that the pipeline was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The time when the pipeline was last run.
        public var lastRunTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the pipeline.
        public var pipelineArn: Swift.String?
        /// The description of the pipeline.
        public var pipelineDescription: Swift.String?
        /// The display name of the pipeline.
        public var pipelineDisplayName: Swift.String?
        /// The name of the pipeline.
        public var pipelineName: Swift.String?
        /// The status of the pipeline.
        public var pipelineStatus: SageMakerClientTypes.PipelineStatus?
        /// The Amazon Resource Name (ARN) of the role that created the pipeline.
        public var roleArn: Swift.String?
        /// A list of tags that apply to the pipeline.
        public var tags: [SageMakerClientTypes.Tag]?

        public init (
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            lastRunTime: ClientRuntime.Date? = nil,
            pipelineArn: Swift.String? = nil,
            pipelineDescription: Swift.String? = nil,
            pipelineDisplayName: Swift.String? = nil,
            pipelineName: Swift.String? = nil,
            pipelineStatus: SageMakerClientTypes.PipelineStatus? = nil,
            roleArn: Swift.String? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.lastRunTime = lastRunTime
            self.pipelineArn = pipelineArn
            self.pipelineDescription = pipelineDescription
            self.pipelineDisplayName = pipelineDisplayName
            self.pipelineName = pipelineName
            self.pipelineStatus = pipelineStatus
            self.roleArn = roleArn
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes.PipelineExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case pipelineArn = "PipelineArn"
        case pipelineExecutionArn = "PipelineExecutionArn"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
        case pipelineExecutionStatus = "PipelineExecutionStatus"
        case pipelineExperimentConfig = "PipelineExperimentConfig"
        case pipelineParameters = "PipelineParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let pipelineArn = pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
        if let pipelineExecutionDescription = pipelineExecutionDescription {
            try encodeContainer.encode(pipelineExecutionDescription, forKey: .pipelineExecutionDescription)
        }
        if let pipelineExecutionDisplayName = pipelineExecutionDisplayName {
            try encodeContainer.encode(pipelineExecutionDisplayName, forKey: .pipelineExecutionDisplayName)
        }
        if let pipelineExecutionStatus = pipelineExecutionStatus {
            try encodeContainer.encode(pipelineExecutionStatus.rawValue, forKey: .pipelineExecutionStatus)
        }
        if let pipelineExperimentConfig = pipelineExperimentConfig {
            try encodeContainer.encode(pipelineExperimentConfig, forKey: .pipelineExperimentConfig)
        }
        if let pipelineParameters = pipelineParameters {
            var pipelineParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineParameters)
            for parameterlist0 in pipelineParameters {
                try pipelineParametersContainer.encode(parameterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let pipelineExecutionDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDisplayName)
        pipelineExecutionDisplayName = pipelineExecutionDisplayNameDecoded
        let pipelineExecutionStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExecutionStatus.self, forKey: .pipelineExecutionStatus)
        pipelineExecutionStatus = pipelineExecutionStatusDecoded
        let pipelineExecutionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDescription)
        pipelineExecutionDescription = pipelineExecutionDescriptionDecoded
        let pipelineExperimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExperimentConfig.self, forKey: .pipelineExperimentConfig)
        pipelineExperimentConfig = pipelineExperimentConfigDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let pipelineParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Parameter?].self, forKey: .pipelineParameters)
        var pipelineParametersDecoded0:[SageMakerClientTypes.Parameter]? = nil
        if let pipelineParametersContainer = pipelineParametersContainer {
            pipelineParametersDecoded0 = [SageMakerClientTypes.Parameter]()
            for structure0 in pipelineParametersContainer {
                if let structure0 = structure0 {
                    pipelineParametersDecoded0?.append(structure0)
                }
            }
        }
        pipelineParameters = pipelineParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// An execution of a pipeline.
    public struct PipelineExecution: Swift.Equatable {
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// The creation time of the pipeline execution.
        public var creationTime: ClientRuntime.Date?
        /// If the execution failed, a message describing why.
        public var failureReason: Swift.String?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// The time that the pipeline execution was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the pipeline that was executed.
        public var pipelineArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the pipeline execution.
        public var pipelineExecutionArn: Swift.String?
        /// The description of the pipeline execution.
        public var pipelineExecutionDescription: Swift.String?
        /// The display name of the pipeline execution.
        public var pipelineExecutionDisplayName: Swift.String?
        /// The status of the pipeline status.
        public var pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus?
        /// Specifies the names of the experiment and trial created by a pipeline.
        public var pipelineExperimentConfig: SageMakerClientTypes.PipelineExperimentConfig?
        /// Contains a list of pipeline parameters. This list can be empty.
        public var pipelineParameters: [SageMakerClientTypes.Parameter]?

        public init (
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            pipelineArn: Swift.String? = nil,
            pipelineExecutionArn: Swift.String? = nil,
            pipelineExecutionDescription: Swift.String? = nil,
            pipelineExecutionDisplayName: Swift.String? = nil,
            pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus? = nil,
            pipelineExperimentConfig: SageMakerClientTypes.PipelineExperimentConfig? = nil,
            pipelineParameters: [SageMakerClientTypes.Parameter]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.pipelineArn = pipelineArn
            self.pipelineExecutionArn = pipelineExecutionArn
            self.pipelineExecutionDescription = pipelineExecutionDescription
            self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
            self.pipelineExecutionStatus = pipelineExecutionStatus
            self.pipelineExperimentConfig = pipelineExperimentConfig
            self.pipelineParameters = pipelineParameters
        }
    }

}

extension SageMakerClientTypes {
    public enum PipelineExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case executing
        case failed
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineExecutionStatus] {
            return [
                .executing,
                .failed,
                .stopped,
                .stopping,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .executing: return "Executing"
            case .failed: return "Failed"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PipelineExecutionStatus(rawValue: rawValue) ?? PipelineExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.PipelineExecutionStep: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attemptCount = "AttemptCount"
        case cacheHitResult = "CacheHitResult"
        case endTime = "EndTime"
        case failureReason = "FailureReason"
        case metadata = "Metadata"
        case startTime = "StartTime"
        case stepName = "StepName"
        case stepStatus = "StepStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if attemptCount != 0 {
            try encodeContainer.encode(attemptCount, forKey: .attemptCount)
        }
        if let cacheHitResult = cacheHitResult {
            try encodeContainer.encode(cacheHitResult, forKey: .cacheHitResult)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let stepName = stepName {
            try encodeContainer.encode(stepName, forKey: .stepName)
        }
        if let stepStatus = stepStatus {
            try encodeContainer.encode(stepStatus.rawValue, forKey: .stepStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stepName)
        stepName = stepNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let stepStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StepStatus.self, forKey: .stepStatus)
        stepStatus = stepStatusDecoded
        let cacheHitResultDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CacheHitResult.self, forKey: .cacheHitResult)
        cacheHitResult = cacheHitResultDecoded
        let attemptCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .attemptCount)
        attemptCount = attemptCountDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExecutionStepMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
    }
}

extension SageMakerClientTypes {
    /// An execution of a step in a pipeline.
    public struct PipelineExecutionStep: Swift.Equatable {
        public var attemptCount: Swift.Int
        /// If this pipeline execution step was cached, details on the cache hit.
        public var cacheHitResult: SageMakerClientTypes.CacheHitResult?
        /// The time that the step stopped executing.
        public var endTime: ClientRuntime.Date?
        /// The reason why the step failed execution. This is only returned if the step failed its execution.
        public var failureReason: Swift.String?
        /// Metadata for the step execution.
        public var metadata: SageMakerClientTypes.PipelineExecutionStepMetadata?
        /// The time that the step started executing.
        public var startTime: ClientRuntime.Date?
        /// The name of the step that is executed.
        public var stepName: Swift.String?
        /// The status of the step execution.
        public var stepStatus: SageMakerClientTypes.StepStatus?

        public init (
            attemptCount: Swift.Int = 0,
            cacheHitResult: SageMakerClientTypes.CacheHitResult? = nil,
            endTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            metadata: SageMakerClientTypes.PipelineExecutionStepMetadata? = nil,
            startTime: ClientRuntime.Date? = nil,
            stepName: Swift.String? = nil,
            stepStatus: SageMakerClientTypes.StepStatus? = nil
        )
        {
            self.attemptCount = attemptCount
            self.cacheHitResult = cacheHitResult
            self.endTime = endTime
            self.failureReason = failureReason
            self.metadata = metadata
            self.startTime = startTime
            self.stepName = stepName
            self.stepStatus = stepStatus
        }
    }

}

extension SageMakerClientTypes.PipelineExecutionStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callback = "Callback"
        case clarifyCheck = "ClarifyCheck"
        case condition = "Condition"
        case lambda = "Lambda"
        case model = "Model"
        case processingJob = "ProcessingJob"
        case qualityCheck = "QualityCheck"
        case registerModel = "RegisterModel"
        case trainingJob = "TrainingJob"
        case transformJob = "TransformJob"
        case tuningJob = "TuningJob"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callback = callback {
            try encodeContainer.encode(callback, forKey: .callback)
        }
        if let clarifyCheck = clarifyCheck {
            try encodeContainer.encode(clarifyCheck, forKey: .clarifyCheck)
        }
        if let condition = condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let lambda = lambda {
            try encodeContainer.encode(lambda, forKey: .lambda)
        }
        if let model = model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let processingJob = processingJob {
            try encodeContainer.encode(processingJob, forKey: .processingJob)
        }
        if let qualityCheck = qualityCheck {
            try encodeContainer.encode(qualityCheck, forKey: .qualityCheck)
        }
        if let registerModel = registerModel {
            try encodeContainer.encode(registerModel, forKey: .registerModel)
        }
        if let trainingJob = trainingJob {
            try encodeContainer.encode(trainingJob, forKey: .trainingJob)
        }
        if let transformJob = transformJob {
            try encodeContainer.encode(transformJob, forKey: .transformJob)
        }
        if let tuningJob = tuningJob {
            try encodeContainer.encode(tuningJob, forKey: .tuningJob)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStepMetadata.self, forKey: .trainingJob)
        trainingJob = trainingJobDecoded
        let processingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingJobStepMetadata.self, forKey: .processingJob)
        processingJob = processingJobDecoded
        let transformJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJobStepMetadata.self, forKey: .transformJob)
        transformJob = transformJobDecoded
        let tuningJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TuningJobStepMetaData.self, forKey: .tuningJob)
        tuningJob = tuningJobDecoded
        let modelDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelStepMetadata.self, forKey: .model)
        model = modelDecoded
        let registerModelDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RegisterModelStepMetadata.self, forKey: .registerModel)
        registerModel = registerModelDecoded
        let conditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ConditionStepMetadata.self, forKey: .condition)
        condition = conditionDecoded
        let callbackDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CallbackStepMetadata.self, forKey: .callback)
        callback = callbackDecoded
        let lambdaDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LambdaStepMetadata.self, forKey: .lambda)
        lambda = lambdaDecoded
        let qualityCheckDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.QualityCheckStepMetadata.self, forKey: .qualityCheck)
        qualityCheck = qualityCheckDecoded
        let clarifyCheckDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ClarifyCheckStepMetadata.self, forKey: .clarifyCheck)
        clarifyCheck = clarifyCheckDecoded
    }
}

extension SageMakerClientTypes {
    /// Metadata for a step execution.
    public struct PipelineExecutionStepMetadata: Swift.Equatable {
        /// The URL of the Amazon SQS queue used by this step execution, the pipeline generated token, and a list of output parameters.
        public var callback: SageMakerClientTypes.CallbackStepMetadata?
        /// Container for the metadata for a Clarify check step. The configurations and outcomes of the check step execution. This includes:
        ///
        /// * The type of the check conducted,
        ///
        /// * The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.
        ///
        /// * The Amazon S3 URIs of newly calculated baseline constraints and statistics.
        ///
        /// * The model package group name provided.
        ///
        /// * The Amazon S3 URI of the violation report if violations detected.
        ///
        /// * The Amazon Resource Name (ARN) of check processing job initiated by the step execution.
        ///
        /// * The boolean flags indicating if the drift check is skipped.
        ///
        /// * If step property BaselineUsedForDriftCheck is set the same as CalculatedBaseline.
        public var clarifyCheck: SageMakerClientTypes.ClarifyCheckStepMetadata?
        /// The outcome of the condition evaluation that was run by this step execution.
        public var condition: SageMakerClientTypes.ConditionStepMetadata?
        /// The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution and a list of output parameters.
        public var lambda: SageMakerClientTypes.LambdaStepMetadata?
        /// The Amazon Resource Name (ARN) of the model that was created by this step execution.
        public var model: SageMakerClientTypes.ModelStepMetadata?
        /// The Amazon Resource Name (ARN) of the processing job that was run by this step execution.
        public var processingJob: SageMakerClientTypes.ProcessingJobStepMetadata?
        /// The configurations and outcomes of the check step execution. This includes:
        ///
        /// * The type of the check conducted,
        ///
        /// * The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.
        ///
        /// * The Amazon S3 URIs of newly calculated baseline constraints and statistics.
        ///
        /// * The model package group name provided.
        ///
        /// * The Amazon S3 URI of the violation report if violations detected.
        ///
        /// * The Amazon Resource Name (ARN) of check processing job initiated by the step execution.
        ///
        /// * The boolean flags indicating if the drift check is skipped.
        ///
        /// * If step property BaselineUsedForDriftCheck is set the same as CalculatedBaseline.
        public var qualityCheck: SageMakerClientTypes.QualityCheckStepMetadata?
        /// The Amazon Resource Name (ARN) of the model package the model was registered to by this step execution.
        public var registerModel: SageMakerClientTypes.RegisterModelStepMetadata?
        /// The Amazon Resource Name (ARN) of the training job that was run by this step execution.
        public var trainingJob: SageMakerClientTypes.TrainingJobStepMetadata?
        /// The Amazon Resource Name (ARN) of the transform job that was run by this step execution.
        public var transformJob: SageMakerClientTypes.TransformJobStepMetadata?
        /// The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.
        public var tuningJob: SageMakerClientTypes.TuningJobStepMetaData?

        public init (
            callback: SageMakerClientTypes.CallbackStepMetadata? = nil,
            clarifyCheck: SageMakerClientTypes.ClarifyCheckStepMetadata? = nil,
            condition: SageMakerClientTypes.ConditionStepMetadata? = nil,
            lambda: SageMakerClientTypes.LambdaStepMetadata? = nil,
            model: SageMakerClientTypes.ModelStepMetadata? = nil,
            processingJob: SageMakerClientTypes.ProcessingJobStepMetadata? = nil,
            qualityCheck: SageMakerClientTypes.QualityCheckStepMetadata? = nil,
            registerModel: SageMakerClientTypes.RegisterModelStepMetadata? = nil,
            trainingJob: SageMakerClientTypes.TrainingJobStepMetadata? = nil,
            transformJob: SageMakerClientTypes.TransformJobStepMetadata? = nil,
            tuningJob: SageMakerClientTypes.TuningJobStepMetaData? = nil
        )
        {
            self.callback = callback
            self.clarifyCheck = clarifyCheck
            self.condition = condition
            self.lambda = lambda
            self.model = model
            self.processingJob = processingJob
            self.qualityCheck = qualityCheck
            self.registerModel = registerModel
            self.trainingJob = trainingJob
            self.transformJob = transformJob
            self.tuningJob = tuningJob
        }
    }

}

extension SageMakerClientTypes.PipelineExecutionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
        case pipelineExecutionStatus = "PipelineExecutionStatus"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
        if let pipelineExecutionDescription = pipelineExecutionDescription {
            try encodeContainer.encode(pipelineExecutionDescription, forKey: .pipelineExecutionDescription)
        }
        if let pipelineExecutionDisplayName = pipelineExecutionDisplayName {
            try encodeContainer.encode(pipelineExecutionDisplayName, forKey: .pipelineExecutionDisplayName)
        }
        if let pipelineExecutionStatus = pipelineExecutionStatus {
            try encodeContainer.encode(pipelineExecutionStatus.rawValue, forKey: .pipelineExecutionStatus)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let pipelineExecutionStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExecutionStatus.self, forKey: .pipelineExecutionStatus)
        pipelineExecutionStatus = pipelineExecutionStatusDecoded
        let pipelineExecutionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDescription)
        pipelineExecutionDescription = pipelineExecutionDescriptionDecoded
        let pipelineExecutionDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDisplayName)
        pipelineExecutionDisplayName = pipelineExecutionDisplayNameDecoded
    }
}

extension SageMakerClientTypes {
    /// A pipeline execution summary.
    public struct PipelineExecutionSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the pipeline execution.
        public var pipelineExecutionArn: Swift.String?
        /// The description of the pipeline execution.
        public var pipelineExecutionDescription: Swift.String?
        /// The display name of the pipeline execution.
        public var pipelineExecutionDisplayName: Swift.String?
        /// The status of the pipeline execution.
        public var pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus?
        /// The start time of the pipeline execution.
        public var startTime: ClientRuntime.Date?

        public init (
            pipelineExecutionArn: Swift.String? = nil,
            pipelineExecutionDescription: Swift.String? = nil,
            pipelineExecutionDisplayName: Swift.String? = nil,
            pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.pipelineExecutionArn = pipelineExecutionArn
            self.pipelineExecutionDescription = pipelineExecutionDescription
            self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
            self.pipelineExecutionStatus = pipelineExecutionStatus
            self.startTime = startTime
        }
    }

}

extension SageMakerClientTypes.PipelineExperimentConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentName = "ExperimentName"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the names of the experiment and trial created by a pipeline.
    public struct PipelineExperimentConfig: Swift.Equatable {
        /// The name of the experiment.
        public var experimentName: Swift.String?
        /// The name of the trial.
        public var trialName: Swift.String?

        public init (
            experimentName: Swift.String? = nil,
            trialName: Swift.String? = nil
        )
        {
            self.experimentName = experimentName
            self.trialName = trialName
        }
    }

}

extension SageMakerClientTypes {
    public enum PipelineStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineStatus] {
            return [
                .active,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PipelineStatus(rawValue: rawValue) ?? PipelineStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.PipelineSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case lastExecutionTime = "LastExecutionTime"
        case lastModifiedTime = "LastModifiedTime"
        case pipelineArn = "PipelineArn"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastExecutionTime = lastExecutionTime {
            try encodeContainer.encode(lastExecutionTime.timeIntervalSince1970, forKey: .lastExecutionTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let pipelineArn = pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let pipelineDescription = pipelineDescription {
            try encodeContainer.encode(pipelineDescription, forKey: .pipelineDescription)
        }
        if let pipelineDisplayName = pipelineDisplayName {
            try encodeContainer.encode(pipelineDisplayName, forKey: .pipelineDisplayName)
        }
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDisplayName)
        pipelineDisplayName = pipelineDisplayNameDecoded
        let pipelineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDescription)
        pipelineDescription = pipelineDescriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastExecutionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastExecutionTime)
        lastExecutionTime = lastExecutionTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// A summary of a pipeline.
    public struct PipelineSummary: Swift.Equatable {
        /// The creation time of the pipeline.
        public var creationTime: ClientRuntime.Date?
        /// The last time that a pipeline execution began.
        public var lastExecutionTime: ClientRuntime.Date?
        /// The time that the pipeline was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the pipeline.
        public var pipelineArn: Swift.String?
        /// The description of the pipeline.
        public var pipelineDescription: Swift.String?
        /// The display name of the pipeline.
        public var pipelineDisplayName: Swift.String?
        /// The name of the pipeline.
        public var pipelineName: Swift.String?
        /// The Amazon Resource Name (ARN) that the pipeline used to execute.
        public var roleArn: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            lastExecutionTime: ClientRuntime.Date? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            pipelineArn: Swift.String? = nil,
            pipelineDescription: Swift.String? = nil,
            pipelineDisplayName: Swift.String? = nil,
            pipelineName: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.lastExecutionTime = lastExecutionTime
            self.lastModifiedTime = lastModifiedTime
            self.pipelineArn = pipelineArn
            self.pipelineDescription = pipelineDescription
            self.pipelineDisplayName = pipelineDisplayName
            self.pipelineName = pipelineName
            self.roleArn = roleArn
        }
    }

}

extension SageMakerClientTypes {
    public enum ProblemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case binaryClassification
        case multiclassClassification
        case regression
        case sdkUnknown(Swift.String)

        public static var allCases: [ProblemType] {
            return [
                .binaryClassification,
                .multiclassClassification,
                .regression,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .binaryClassification: return "BinaryClassification"
            case .multiclassClassification: return "MulticlassClassification"
            case .regression: return "Regression"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProblemType(rawValue: rawValue) ?? ProblemType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ProcessingClusterConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let volumeKmsKeyId = volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let volumeSizeInGB = volumeSizeInGB {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for the cluster used to run a processing job.
    public struct ProcessingClusterConfig: Swift.Equatable {
        /// The number of ML compute instances to use in the processing job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The ML compute instance type for the processing job.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.ProcessingInstanceType?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the processing job. Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a VolumeKmsKeyId when using an instance type with local storage. For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes). For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html).
        public var volumeKmsKeyId: Swift.String?
        /// The size of the ML storage volume in gigabytes that you want to provision. You must specify sufficient ML storage for your scenario. Certain Nitro-based instances include local storage with a fixed total size, dependent on the instance type. When using these instances for processing, Amazon SageMaker mounts the local instance storage instead of Amazon EBS gp2 storage. You can't request a VolumeSizeInGB greater than the total size of the local instance storage. For a list of instance types that support local instance storage, including the total size per instance type, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes).
        /// This member is required.
        public var volumeSizeInGB: Swift.Int?

        public init (
            instanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.ProcessingInstanceType? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes.ProcessingFeatureStoreOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureGroupName = "FeatureGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let featureGroupName = featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for processing job outputs in Amazon SageMaker Feature Store.
    public struct ProcessingFeatureStoreOutput: Swift.Equatable {
        /// The name of the Amazon SageMaker FeatureGroup to use as the destination for processing job output. Note that your processing script is responsible for putting records into your Feature Store.
        /// This member is required.
        public var featureGroupName: Swift.String?

        public init (
            featureGroupName: Swift.String? = nil
        )
        {
            self.featureGroupName = featureGroupName
        }
    }

}

extension SageMakerClientTypes.ProcessingInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appManaged = "AppManaged"
        case datasetDefinition = "DatasetDefinition"
        case inputName = "InputName"
        case s3Input = "S3Input"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if appManaged != false {
            try encodeContainer.encode(appManaged, forKey: .appManaged)
        }
        if let datasetDefinition = datasetDefinition {
            try encodeContainer.encode(datasetDefinition, forKey: .datasetDefinition)
        }
        if let inputName = inputName {
            try encodeContainer.encode(inputName, forKey: .inputName)
        }
        if let s3Input = s3Input {
            try encodeContainer.encode(s3Input, forKey: .s3Input)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputName)
        inputName = inputNameDecoded
        let appManagedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .appManaged)
        appManaged = appManagedDecoded
        let s3InputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3Input.self, forKey: .s3Input)
        s3Input = s3InputDecoded
        let datasetDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DatasetDefinition.self, forKey: .datasetDefinition)
        datasetDefinition = datasetDefinitionDecoded
    }
}

extension SageMakerClientTypes {
    /// The inputs for a processing job. The processing input must specify exactly one of either S3Input or DatasetDefinition types.
    public struct ProcessingInput: Swift.Equatable {
        /// When True, input operations such as data download are managed natively by the processing job application. When False (default), input operations are managed by Amazon SageMaker.
        public var appManaged: Swift.Bool
        /// Configuration for a Dataset Definition input.
        public var datasetDefinition: SageMakerClientTypes.DatasetDefinition?
        /// The name for the processing job input.
        /// This member is required.
        public var inputName: Swift.String?
        /// Configuration for downloading input data from Amazon S3 into the processing container.
        public var s3Input: SageMakerClientTypes.ProcessingS3Input?

        public init (
            appManaged: Swift.Bool = false,
            datasetDefinition: SageMakerClientTypes.DatasetDefinition? = nil,
            inputName: Swift.String? = nil,
            s3Input: SageMakerClientTypes.ProcessingS3Input? = nil
        )
        {
            self.appManaged = appManaged
            self.datasetDefinition = datasetDefinition
            self.inputName = inputName
            self.s3Input = s3Input
        }
    }

}

extension SageMakerClientTypes {
    public enum ProcessingInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Xlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Xlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlR512xlarge
        case mlR516xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR58xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlT32xlarge
        case mlT3Large
        case mlT3Medium
        case mlT3Xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingInstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Xlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Xlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlR512xlarge,
                .mlR516xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR58xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlT32xlarge,
                .mlT3Large,
                .mlT3Medium,
                .mlT3Xlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR516xlarge: return "ml.r5.16xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR58xlarge: return "ml.r5.8xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlT32xlarge: return "ml.t3.2xlarge"
            case .mlT3Large: return "ml.t3.large"
            case .mlT3Medium: return "ml.t3.medium"
            case .mlT3Xlarge: return "ml.t3.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessingInstanceType(rawValue: rawValue) ?? ProcessingInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ProcessingJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appSpecification = "AppSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case creationTime = "CreationTime"
        case environment = "Environment"
        case exitMessage = "ExitMessage"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case networkConfig = "NetworkConfig"
        case processingEndTime = "ProcessingEndTime"
        case processingInputs = "ProcessingInputs"
        case processingJobArn = "ProcessingJobArn"
        case processingJobName = "ProcessingJobName"
        case processingJobStatus = "ProcessingJobStatus"
        case processingOutputConfig = "ProcessingOutputConfig"
        case processingResources = "ProcessingResources"
        case processingStartTime = "ProcessingStartTime"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case trainingJobArn = "TrainingJobArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appSpecification = appSpecification {
            try encodeContainer.encode(appSpecification, forKey: .appSpecification)
        }
        if let autoMLJobArn = autoMLJobArn {
            try encodeContainer.encode(autoMLJobArn, forKey: .autoMLJobArn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, processingenvironmentmap0) in environment {
                try environmentContainer.encode(processingenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let exitMessage = exitMessage {
            try encodeContainer.encode(exitMessage, forKey: .exitMessage)
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let monitoringScheduleArn = monitoringScheduleArn {
            try encodeContainer.encode(monitoringScheduleArn, forKey: .monitoringScheduleArn)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let processingEndTime = processingEndTime {
            try encodeContainer.encode(processingEndTime.timeIntervalSince1970, forKey: .processingEndTime)
        }
        if let processingInputs = processingInputs {
            var processingInputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processingInputs)
            for processinginputs0 in processingInputs {
                try processingInputsContainer.encode(processinginputs0)
            }
        }
        if let processingJobArn = processingJobArn {
            try encodeContainer.encode(processingJobArn, forKey: .processingJobArn)
        }
        if let processingJobName = processingJobName {
            try encodeContainer.encode(processingJobName, forKey: .processingJobName)
        }
        if let processingJobStatus = processingJobStatus {
            try encodeContainer.encode(processingJobStatus.rawValue, forKey: .processingJobStatus)
        }
        if let processingOutputConfig = processingOutputConfig {
            try encodeContainer.encode(processingOutputConfig, forKey: .processingOutputConfig)
        }
        if let processingResources = processingResources {
            try encodeContainer.encode(processingResources, forKey: .processingResources)
        }
        if let processingStartTime = processingStartTime {
            try encodeContainer.encode(processingStartTime.timeIntervalSince1970, forKey: .processingStartTime)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingJobArn = trainingJobArn {
            try encodeContainer.encode(trainingJobArn, forKey: .trainingJobArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingInputsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProcessingInput?].self, forKey: .processingInputs)
        var processingInputsDecoded0:[SageMakerClientTypes.ProcessingInput]? = nil
        if let processingInputsContainer = processingInputsContainer {
            processingInputsDecoded0 = [SageMakerClientTypes.ProcessingInput]()
            for structure0 in processingInputsContainer {
                if let structure0 = structure0 {
                    processingInputsDecoded0?.append(structure0)
                }
            }
        }
        processingInputs = processingInputsDecoded0
        let processingOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingOutputConfig.self, forKey: .processingOutputConfig)
        processingOutputConfig = processingOutputConfigDecoded
        let processingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
        let processingResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingResources.self, forKey: .processingResources)
        processingResources = processingResourcesDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let appSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppSpecification.self, forKey: .appSpecification)
        appSpecification = appSpecificationDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let processingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
        let processingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingJobStatus.self, forKey: .processingJobStatus)
        processingJobStatus = processingJobStatusDecoded
        let exitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exitMessage)
        exitMessage = exitMessageDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let processingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .processingEndTime)
        processingEndTime = processingEndTimeDecoded
        let processingStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .processingStartTime)
        processingStartTime = processingStartTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes {
    /// An Amazon SageMaker processing job that is used to analyze data and evaluate models. For more information, see [Process Data and Evaluate Models](https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html).
    public struct ProcessingJob: Swift.Equatable {
        /// Configuration to run a processing job in a specified container image.
        public var appSpecification: SageMakerClientTypes.AppSpecification?
        /// The Amazon Resource Name (ARN) of the AutoML job associated with this processing job.
        public var autoMLJobArn: Swift.String?
        /// The time the processing job was created.
        public var creationTime: ClientRuntime.Date?
        /// Sets the environment variables in the Docker container.
        public var environment: [Swift.String:Swift.String]?
        /// A string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
        public var exitMessage: Swift.String?
        /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
        ///
        /// * [CreateProcessingJob]
        ///
        /// * [CreateTrainingJob]
        ///
        /// * [CreateTransformJob]
        public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
        /// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
        public var failureReason: Swift.String?
        /// The time the processing job was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The ARN of a monitoring schedule for an endpoint associated with this processing job.
        public var monitoringScheduleArn: Swift.String?
        /// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        public var networkConfig: SageMakerClientTypes.NetworkConfig?
        /// The time that the processing job ended.
        public var processingEndTime: ClientRuntime.Date?
        /// List of input configurations for the processing job.
        public var processingInputs: [SageMakerClientTypes.ProcessingInput]?
        /// The ARN of the processing job.
        public var processingJobArn: Swift.String?
        /// The name of the processing job.
        public var processingJobName: Swift.String?
        /// The status of the processing job.
        public var processingJobStatus: SageMakerClientTypes.ProcessingJobStatus?
        /// Configuration for uploading output from the processing container.
        public var processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig?
        /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
        public var processingResources: SageMakerClientTypes.ProcessingResources?
        /// The time that the processing job started.
        public var processingStartTime: ClientRuntime.Date?
        /// The ARN of the role used to create the processing job.
        public var roleArn: Swift.String?
        /// Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
        public var stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition?
        /// An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
        public var tags: [SageMakerClientTypes.Tag]?
        /// The ARN of the training job associated with this processing job.
        public var trainingJobArn: Swift.String?

        public init (
            appSpecification: SageMakerClientTypes.AppSpecification? = nil,
            autoMLJobArn: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            exitMessage: Swift.String? = nil,
            experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            monitoringScheduleArn: Swift.String? = nil,
            networkConfig: SageMakerClientTypes.NetworkConfig? = nil,
            processingEndTime: ClientRuntime.Date? = nil,
            processingInputs: [SageMakerClientTypes.ProcessingInput]? = nil,
            processingJobArn: Swift.String? = nil,
            processingJobName: Swift.String? = nil,
            processingJobStatus: SageMakerClientTypes.ProcessingJobStatus? = nil,
            processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig? = nil,
            processingResources: SageMakerClientTypes.ProcessingResources? = nil,
            processingStartTime: ClientRuntime.Date? = nil,
            roleArn: Swift.String? = nil,
            stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            trainingJobArn: Swift.String? = nil
        )
        {
            self.appSpecification = appSpecification
            self.autoMLJobArn = autoMLJobArn
            self.creationTime = creationTime
            self.environment = environment
            self.exitMessage = exitMessage
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.monitoringScheduleArn = monitoringScheduleArn
            self.networkConfig = networkConfig
            self.processingEndTime = processingEndTime
            self.processingInputs = processingInputs
            self.processingJobArn = processingJobArn
            self.processingJobName = processingJobName
            self.processingJobStatus = processingJobStatus
            self.processingOutputConfig = processingOutputConfig
            self.processingResources = processingResources
            self.processingStartTime = processingStartTime
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
            self.tags = tags
            self.trainingJobArn = trainingJobArn
        }
    }

}

extension SageMakerClientTypes {
    public enum ProcessingJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessingJobStatus(rawValue: rawValue) ?? ProcessingJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ProcessingJobStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension SageMakerClientTypes {
    /// Metadata for a processing job step.
    public struct ProcessingJobStepMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the processing job.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes.ProcessingJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case exitMessage = "ExitMessage"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case processingEndTime = "ProcessingEndTime"
        case processingJobArn = "ProcessingJobArn"
        case processingJobName = "ProcessingJobName"
        case processingJobStatus = "ProcessingJobStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let exitMessage = exitMessage {
            try encodeContainer.encode(exitMessage, forKey: .exitMessage)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let processingEndTime = processingEndTime {
            try encodeContainer.encode(processingEndTime.timeIntervalSince1970, forKey: .processingEndTime)
        }
        if let processingJobArn = processingJobArn {
            try encodeContainer.encode(processingJobArn, forKey: .processingJobArn)
        }
        if let processingJobName = processingJobName {
            try encodeContainer.encode(processingJobName, forKey: .processingJobName)
        }
        if let processingJobStatus = processingJobStatus {
            try encodeContainer.encode(processingJobStatus.rawValue, forKey: .processingJobStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
        let processingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let processingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .processingEndTime)
        processingEndTime = processingEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let processingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingJobStatus.self, forKey: .processingJobStatus)
        processingJobStatus = processingJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let exitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exitMessage)
        exitMessage = exitMessageDecoded
    }
}

extension SageMakerClientTypes {
    /// Summary of information about a processing job.
    public struct ProcessingJobSummary: Swift.Equatable {
        /// The time at which the processing job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
        public var exitMessage: Swift.String?
        /// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
        public var failureReason: Swift.String?
        /// A timestamp that indicates the last time the processing job was modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The time at which the processing job completed.
        public var processingEndTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the processing job..
        /// This member is required.
        public var processingJobArn: Swift.String?
        /// The name of the processing job.
        /// This member is required.
        public var processingJobName: Swift.String?
        /// The status of the processing job.
        /// This member is required.
        public var processingJobStatus: SageMakerClientTypes.ProcessingJobStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            exitMessage: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            processingEndTime: ClientRuntime.Date? = nil,
            processingJobArn: Swift.String? = nil,
            processingJobName: Swift.String? = nil,
            processingJobStatus: SageMakerClientTypes.ProcessingJobStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.exitMessage = exitMessage
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.processingEndTime = processingEndTime
            self.processingJobArn = processingJobArn
            self.processingJobName = processingJobName
            self.processingJobStatus = processingJobStatus
        }
    }

}

extension SageMakerClientTypes.ProcessingOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appManaged = "AppManaged"
        case featureStoreOutput = "FeatureStoreOutput"
        case outputName = "OutputName"
        case s3Output = "S3Output"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if appManaged != false {
            try encodeContainer.encode(appManaged, forKey: .appManaged)
        }
        if let featureStoreOutput = featureStoreOutput {
            try encodeContainer.encode(featureStoreOutput, forKey: .featureStoreOutput)
        }
        if let outputName = outputName {
            try encodeContainer.encode(outputName, forKey: .outputName)
        }
        if let s3Output = s3Output {
            try encodeContainer.encode(s3Output, forKey: .s3Output)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputName)
        outputName = outputNameDecoded
        let s3OutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3Output.self, forKey: .s3Output)
        s3Output = s3OutputDecoded
        let featureStoreOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingFeatureStoreOutput.self, forKey: .featureStoreOutput)
        featureStoreOutput = featureStoreOutputDecoded
        let appManagedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .appManaged)
        appManaged = appManagedDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the results of a processing job. The processing output must specify exactly one of either S3Output or FeatureStoreOutput types.
    public struct ProcessingOutput: Swift.Equatable {
        /// When True, output operations such as data upload are managed natively by the processing job application. When False (default), output operations are managed by Amazon SageMaker.
        public var appManaged: Swift.Bool
        /// Configuration for processing job outputs in Amazon SageMaker Feature Store. This processing output type is only supported when AppManaged is specified.
        public var featureStoreOutput: SageMakerClientTypes.ProcessingFeatureStoreOutput?
        /// The name for the processing job output.
        /// This member is required.
        public var outputName: Swift.String?
        /// Configuration for processing job outputs in Amazon S3.
        public var s3Output: SageMakerClientTypes.ProcessingS3Output?

        public init (
            appManaged: Swift.Bool = false,
            featureStoreOutput: SageMakerClientTypes.ProcessingFeatureStoreOutput? = nil,
            outputName: Swift.String? = nil,
            s3Output: SageMakerClientTypes.ProcessingS3Output? = nil
        )
        {
            self.appManaged = appManaged
            self.featureStoreOutput = featureStoreOutput
            self.outputName = outputName
            self.s3Output = s3Output
        }
    }

}

extension SageMakerClientTypes.ProcessingOutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case outputs = "Outputs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for processingoutputs0 in outputs {
                try outputsContainer.encode(processingoutputs0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProcessingOutput?].self, forKey: .outputs)
        var outputsDecoded0:[SageMakerClientTypes.ProcessingOutput]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [SageMakerClientTypes.ProcessingOutput]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for uploading output from the processing container.
    public struct ProcessingOutputConfig: Swift.Equatable {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the processing job output. KmsKeyId can be an ID of a KMS key, ARN of a KMS key, alias of a KMS key, or alias of a KMS key. The KmsKeyId is applied to all outputs.
        public var kmsKeyId: Swift.String?
        /// An array of outputs configuring the data to upload from the processing container.
        /// This member is required.
        public var outputs: [SageMakerClientTypes.ProcessingOutput]?

        public init (
            kmsKeyId: Swift.String? = nil,
            outputs: [SageMakerClientTypes.ProcessingOutput]? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.outputs = outputs
        }
    }

}

extension SageMakerClientTypes.ProcessingResources: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterConfig = "ClusterConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterConfig = clusterConfig {
            try encodeContainer.encode(clusterConfig, forKey: .clusterConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingClusterConfig.self, forKey: .clusterConfig)
        clusterConfig = clusterConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
    public struct ProcessingResources: Swift.Equatable {
        /// The configuration for the resources in a cluster used to run the processing job.
        /// This member is required.
        public var clusterConfig: SageMakerClientTypes.ProcessingClusterConfig?

        public init (
            clusterConfig: SageMakerClientTypes.ProcessingClusterConfig? = nil
        )
        {
            self.clusterConfig = clusterConfig
        }
    }

}

extension SageMakerClientTypes {
    public enum ProcessingS3CompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3CompressionType] {
            return [
                .gzip,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "Gzip"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessingS3CompressionType(rawValue: rawValue) ?? ProcessingS3CompressionType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ProcessingS3DataDistributionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullyreplicated
        case shardedbys3key
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3DataDistributionType] {
            return [
                .fullyreplicated,
                .shardedbys3key,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullyreplicated: return "FullyReplicated"
            case .shardedbys3key: return "ShardedByS3Key"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessingS3DataDistributionType(rawValue: rawValue) ?? ProcessingS3DataDistributionType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ProcessingS3DataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case manifestFile
        case s3Prefix
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3DataType] {
            return [
                .manifestFile,
                .s3Prefix,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .manifestFile: return "ManifestFile"
            case .s3Prefix: return "S3Prefix"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessingS3DataType(rawValue: rawValue) ?? ProcessingS3DataType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ProcessingS3Input: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case localPath = "LocalPath"
        case s3CompressionType = "S3CompressionType"
        case s3DataDistributionType = "S3DataDistributionType"
        case s3DataType = "S3DataType"
        case s3InputMode = "S3InputMode"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let s3CompressionType = s3CompressionType {
            try encodeContainer.encode(s3CompressionType.rawValue, forKey: .s3CompressionType)
        }
        if let s3DataDistributionType = s3DataDistributionType {
            try encodeContainer.encode(s3DataDistributionType.rawValue, forKey: .s3DataDistributionType)
        }
        if let s3DataType = s3DataType {
            try encodeContainer.encode(s3DataType.rawValue, forKey: .s3DataType)
        }
        if let s3InputMode = s3InputMode {
            try encodeContainer.encode(s3InputMode.rawValue, forKey: .s3InputMode)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3DataTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3DataType.self, forKey: .s3DataType)
        s3DataType = s3DataTypeDecoded
        let s3InputModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3InputMode.self, forKey: .s3InputMode)
        s3InputMode = s3InputModeDecoded
        let s3DataDistributionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3DataDistributionType.self, forKey: .s3DataDistributionType)
        s3DataDistributionType = s3DataDistributionTypeDecoded
        let s3CompressionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3CompressionType.self, forKey: .s3CompressionType)
        s3CompressionType = s3CompressionTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for downloading input data from Amazon S3 into the processing container.
    public struct ProcessingS3Input: Swift.Equatable {
        /// The local path in your container where you want Amazon SageMaker to write input data to. LocalPath is an absolute path to the input data and must begin with /opt/ml/processing/. LocalPath is a required parameter when AppManaged is False (default).
        public var localPath: Swift.String?
        /// Whether to GZIP-decompress the data in Amazon S3 as it is streamed into the processing container. Gzip can only be used when Pipe mode is specified as the S3InputMode. In Pipe mode, Amazon SageMaker streams input data from the source directly to your container without using the EBS volume.
        public var s3CompressionType: SageMakerClientTypes.ProcessingS3CompressionType?
        /// Whether to distribute the data from Amazon S3 to all processing instances with FullyReplicated, or whether the data from Amazon S3 is shared by Amazon S3 key, downloading one shard of data to each processing instance.
        public var s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType?
        /// Whether you use an S3Prefix or a ManifestFile for the data type. If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for the processing job. If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for the processing job.
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.ProcessingS3DataType?
        /// Whether to use File or Pipe input mode. In File mode, Amazon SageMaker copies the data from the input source onto the local ML storage volume before starting your processing container. This is the most commonly used input mode. In Pipe mode, Amazon SageMaker streams input data from the source directly to your processing container into named pipes without using the ML storage volume.
        public var s3InputMode: SageMakerClientTypes.ProcessingS3InputMode?
        /// The URI of the Amazon S3 prefix Amazon SageMaker downloads data required to run a processing job.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            localPath: Swift.String? = nil,
            s3CompressionType: SageMakerClientTypes.ProcessingS3CompressionType? = nil,
            s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType? = nil,
            s3DataType: SageMakerClientTypes.ProcessingS3DataType? = nil,
            s3InputMode: SageMakerClientTypes.ProcessingS3InputMode? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3CompressionType = s3CompressionType
            self.s3DataDistributionType = s3DataDistributionType
            self.s3DataType = s3DataType
            self.s3InputMode = s3InputMode
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    public enum ProcessingS3InputMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case file
        case pipe
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3InputMode] {
            return [
                .file,
                .pipe,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .file: return "File"
            case .pipe: return "Pipe"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessingS3InputMode(rawValue: rawValue) ?? ProcessingS3InputMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ProcessingS3Output: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case localPath = "LocalPath"
        case s3UploadMode = "S3UploadMode"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let s3UploadMode = s3UploadMode {
            try encodeContainer.encode(s3UploadMode.rawValue, forKey: .s3UploadMode)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3UploadModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingS3UploadMode.self, forKey: .s3UploadMode)
        s3UploadMode = s3UploadModeDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for uploading output data to Amazon S3 from the processing container.
    public struct ProcessingS3Output: Swift.Equatable {
        /// The local path of a directory where you want Amazon SageMaker to upload its contents to Amazon S3. LocalPath is an absolute path to a directory containing output files. This directory will be created by the platform and exist when your container's entrypoint is invoked.
        /// This member is required.
        public var localPath: Swift.String?
        /// Whether to upload the results of the processing job continuously or after the job completes.
        /// This member is required.
        public var s3UploadMode: SageMakerClientTypes.ProcessingS3UploadMode?
        /// A URI that identifies the Amazon S3 bucket where you want Amazon SageMaker to save the results of a processing job.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            localPath: Swift.String? = nil,
            s3UploadMode: SageMakerClientTypes.ProcessingS3UploadMode? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3UploadMode = s3UploadMode
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    public enum ProcessingS3UploadMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case continuous
        case endOfJob
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3UploadMode] {
            return [
                .continuous,
                .endOfJob,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .continuous: return "Continuous"
            case .endOfJob: return "EndOfJob"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessingS3UploadMode(rawValue: rawValue) ?? ProcessingS3UploadMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ProcessingStoppingCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxRuntimeInSeconds = "MaxRuntimeInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxRuntimeInSeconds != 0 {
            try encodeContainer.encode(maxRuntimeInSeconds, forKey: .maxRuntimeInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxRuntimeInSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRuntimeInSeconds)
        maxRuntimeInSeconds = maxRuntimeInSecondsDecoded
    }
}

extension SageMakerClientTypes {
    /// Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
    public struct ProcessingStoppingCondition: Swift.Equatable {
        /// Specifies the maximum runtime in seconds.
        /// This member is required.
        public var maxRuntimeInSeconds: Swift.Int

        public init (
            maxRuntimeInSeconds: Swift.Int = 0
        )
        {
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
        }
    }

}

extension SageMakerClientTypes.ProductionVariant: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorType = "AcceleratorType"
        case coreDumpConfig = "CoreDumpConfig"
        case initialInstanceCount = "InitialInstanceCount"
        case initialVariantWeight = "InitialVariantWeight"
        case instanceType = "InstanceType"
        case modelName = "ModelName"
        case serverlessConfig = "ServerlessConfig"
        case variantName = "VariantName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorType = acceleratorType {
            try encodeContainer.encode(acceleratorType.rawValue, forKey: .acceleratorType)
        }
        if let coreDumpConfig = coreDumpConfig {
            try encodeContainer.encode(coreDumpConfig, forKey: .coreDumpConfig)
        }
        if let initialInstanceCount = initialInstanceCount {
            try encodeContainer.encode(initialInstanceCount, forKey: .initialInstanceCount)
        }
        if let initialVariantWeight = initialVariantWeight {
            try encodeContainer.encode(initialVariantWeight, forKey: .initialVariantWeight)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let serverlessConfig = serverlessConfig {
            try encodeContainer.encode(serverlessConfig, forKey: .serverlessConfig)
        }
        if let variantName = variantName {
            try encodeContainer.encode(variantName, forKey: .variantName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .variantName)
        variantName = variantNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let initialInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initialInstanceCount)
        initialInstanceCount = initialInstanceCountDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let initialVariantWeightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .initialVariantWeight)
        initialVariantWeight = initialVariantWeightDecoded
        let acceleratorTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantAcceleratorType.self, forKey: .acceleratorType)
        acceleratorType = acceleratorTypeDecoded
        let coreDumpConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantCoreDumpConfig.self, forKey: .coreDumpConfig)
        coreDumpConfig = coreDumpConfigDecoded
        let serverlessConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantServerlessConfig.self, forKey: .serverlessConfig)
        serverlessConfig = serverlessConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell Amazon SageMaker how to distribute traffic among the models by specifying variant weights.
    public struct ProductionVariant: Swift.Equatable {
        /// The size of the Elastic Inference (EI) instance to use for the production variant. EI instances provide on-demand GPU computing for inference. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
        public var acceleratorType: SageMakerClientTypes.ProductionVariantAcceleratorType?
        /// Specifies configuration for a core dump from the model container when the process crashes.
        public var coreDumpConfig: SageMakerClientTypes.ProductionVariantCoreDumpConfig?
        /// Number of instances to launch initially.
        public var initialInstanceCount: Swift.Int?
        /// Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. The traffic to a production variant is determined by the ratio of the VariantWeight to the sum of all VariantWeight values across all ProductionVariants. If unspecified, it defaults to 1.0.
        public var initialVariantWeight: Swift.Float?
        /// The ML compute instance type.
        public var instanceType: SageMakerClientTypes.ProductionVariantInstanceType?
        /// The name of the model that you want to host. This is the name that you specified when creating the model.
        /// This member is required.
        public var modelName: Swift.String?
        /// The serverless configuration for an endpoint. Specifies a serverless endpoint configuration instead of an instance-based endpoint configuration. Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.
        public var serverlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The name of the production variant.
        /// This member is required.
        public var variantName: Swift.String?

        public init (
            acceleratorType: SageMakerClientTypes.ProductionVariantAcceleratorType? = nil,
            coreDumpConfig: SageMakerClientTypes.ProductionVariantCoreDumpConfig? = nil,
            initialInstanceCount: Swift.Int? = nil,
            initialVariantWeight: Swift.Float? = nil,
            instanceType: SageMakerClientTypes.ProductionVariantInstanceType? = nil,
            modelName: Swift.String? = nil,
            serverlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            variantName: Swift.String? = nil
        )
        {
            self.acceleratorType = acceleratorType
            self.coreDumpConfig = coreDumpConfig
            self.initialInstanceCount = initialInstanceCount
            self.initialVariantWeight = initialVariantWeight
            self.instanceType = instanceType
            self.modelName = modelName
            self.serverlessConfig = serverlessConfig
            self.variantName = variantName
        }
    }

}

extension SageMakerClientTypes {
    public enum ProductionVariantAcceleratorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mlEia1Large
        case mlEia1Medium
        case mlEia1Xlarge
        case mlEia2Large
        case mlEia2Medium
        case mlEia2Xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ProductionVariantAcceleratorType] {
            return [
                .mlEia1Large,
                .mlEia1Medium,
                .mlEia1Xlarge,
                .mlEia2Large,
                .mlEia2Medium,
                .mlEia2Xlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mlEia1Large: return "ml.eia1.large"
            case .mlEia1Medium: return "ml.eia1.medium"
            case .mlEia1Xlarge: return "ml.eia1.xlarge"
            case .mlEia2Large: return "ml.eia2.large"
            case .mlEia2Medium: return "ml.eia2.medium"
            case .mlEia2Xlarge: return "ml.eia2.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProductionVariantAcceleratorType(rawValue: rawValue) ?? ProductionVariantAcceleratorType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ProductionVariantCoreDumpConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationS3Uri = "DestinationS3Uri"
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationS3Uri = destinationS3Uri {
            try encodeContainer.encode(destinationS3Uri, forKey: .destinationS3Uri)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationS3Uri)
        destinationS3Uri = destinationS3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies configuration for a core dump from the model container when the process crashes.
    public struct ProductionVariantCoreDumpConfig: Swift.Equatable {
        /// The Amazon S3 bucket to send the core dump to.
        /// This member is required.
        public var destinationS3Uri: Swift.String?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats:
        ///
        /// * // KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // KMS Key Alias "alias/ExampleAlias"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key Alias "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"
        ///
        ///
        /// If you use a KMS key ID or an alias of your KMS key, the Amazon SageMaker execution role must include permissions to call kms:Encrypt. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. Amazon SageMaker uses server-side encryption with KMS-managed keys for OutputDataConfig. If you use a bucket policy with an s3:PutObject permission that only allows objects with server-side encryption, set the condition key of s3:x-amz-server-side-encryption to "aws:kms". For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KMS key policy must grant permission to the IAM role that you specify in your CreateEndpoint and UpdateEndpoint requests. For more information, see [Using Key Policies in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsKeyId: Swift.String?

        public init (
            destinationS3Uri: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.destinationS3Uri = destinationS3Uri
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes {
    public enum ProductionVariantInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Large
        case mlC4Xlarge
        case mlC5d18xlarge
        case mlC5d2xlarge
        case mlC5d4xlarge
        case mlC5d9xlarge
        case mlC5dLarge
        case mlC5dXlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Large
        case mlC5Xlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlInf124xlarge
        case mlInf12xlarge
        case mlInf16xlarge
        case mlInf1Xlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM5d12xlarge
        case mlM5d24xlarge
        case mlM5d2xlarge
        case mlM5d4xlarge
        case mlM5dLarge
        case mlM5dXlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlR5d12xlarge
        case mlR5d24xlarge
        case mlR5d2xlarge
        case mlR5d4xlarge
        case mlR5dLarge
        case mlR5dXlarge
        case mlR512xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlT22xlarge
        case mlT2Large
        case mlT2Medium
        case mlT2Xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ProductionVariantInstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Large,
                .mlC4Xlarge,
                .mlC5d18xlarge,
                .mlC5d2xlarge,
                .mlC5d4xlarge,
                .mlC5d9xlarge,
                .mlC5dLarge,
                .mlC5dXlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Large,
                .mlC5Xlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlInf124xlarge,
                .mlInf12xlarge,
                .mlInf16xlarge,
                .mlInf1Xlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM5d12xlarge,
                .mlM5d24xlarge,
                .mlM5d2xlarge,
                .mlM5d4xlarge,
                .mlM5dLarge,
                .mlM5dXlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlR5d12xlarge,
                .mlR5d24xlarge,
                .mlR5d2xlarge,
                .mlR5d4xlarge,
                .mlR5dLarge,
                .mlR5dXlarge,
                .mlR512xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlT22xlarge,
                .mlT2Large,
                .mlT2Medium,
                .mlT2Xlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Large: return "ml.c4.large"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC5d18xlarge: return "ml.c5d.18xlarge"
            case .mlC5d2xlarge: return "ml.c5d.2xlarge"
            case .mlC5d4xlarge: return "ml.c5d.4xlarge"
            case .mlC5d9xlarge: return "ml.c5d.9xlarge"
            case .mlC5dLarge: return "ml.c5d.large"
            case .mlC5dXlarge: return "ml.c5d.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Large: return "ml.c5.large"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlInf124xlarge: return "ml.inf1.24xlarge"
            case .mlInf12xlarge: return "ml.inf1.2xlarge"
            case .mlInf16xlarge: return "ml.inf1.6xlarge"
            case .mlInf1Xlarge: return "ml.inf1.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM5d12xlarge: return "ml.m5d.12xlarge"
            case .mlM5d24xlarge: return "ml.m5d.24xlarge"
            case .mlM5d2xlarge: return "ml.m5d.2xlarge"
            case .mlM5d4xlarge: return "ml.m5d.4xlarge"
            case .mlM5dLarge: return "ml.m5d.large"
            case .mlM5dXlarge: return "ml.m5d.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlR5d12xlarge: return "ml.r5d.12xlarge"
            case .mlR5d24xlarge: return "ml.r5d.24xlarge"
            case .mlR5d2xlarge: return "ml.r5d.2xlarge"
            case .mlR5d4xlarge: return "ml.r5d.4xlarge"
            case .mlR5dLarge: return "ml.r5d.large"
            case .mlR5dXlarge: return "ml.r5d.xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlT22xlarge: return "ml.t2.2xlarge"
            case .mlT2Large: return "ml.t2.large"
            case .mlT2Medium: return "ml.t2.medium"
            case .mlT2Xlarge: return "ml.t2.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProductionVariantInstanceType(rawValue: rawValue) ?? ProductionVariantInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ProductionVariantServerlessConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxConcurrency = "MaxConcurrency"
        case memorySizeInMB = "MemorySizeInMB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxConcurrency = maxConcurrency {
            try encodeContainer.encode(maxConcurrency, forKey: .maxConcurrency)
        }
        if let memorySizeInMB = memorySizeInMB {
            try encodeContainer.encode(memorySizeInMB, forKey: .memorySizeInMB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memorySizeInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memorySizeInMB)
        memorySizeInMB = memorySizeInMBDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
    }
}

extension SageMakerClientTypes {
    /// Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments. Specifies the serverless configuration for an endpoint variant.
    public struct ProductionVariantServerlessConfig: Swift.Equatable {
        /// The maximum number of concurrent invocations your serverless endpoint can process.
        /// This member is required.
        public var maxConcurrency: Swift.Int?
        /// The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.
        /// This member is required.
        public var memorySizeInMB: Swift.Int?

        public init (
            maxConcurrency: Swift.Int? = nil,
            memorySizeInMB: Swift.Int? = nil
        )
        {
            self.maxConcurrency = maxConcurrency
            self.memorySizeInMB = memorySizeInMB
        }
    }

}

extension SageMakerClientTypes.ProductionVariantStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startTime = "StartTime"
        case status = "Status"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VariantStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the status of the production variant.
    public struct ProductionVariantStatus: Swift.Equatable {
        /// The start time of the current status change.
        public var startTime: ClientRuntime.Date?
        /// The endpoint variant status which describes the current deployment stage status or operational status.
        ///
        /// * Creating: Creating inference resources for the production variant.
        ///
        /// * Deleting: Terminating inference resources for the production variant.
        ///
        /// * Updating: Updating capacity for the production variant.
        ///
        /// * ActivatingTraffic: Turning on traffic for the production variant.
        ///
        /// * Baking: Waiting period to monitor the CloudWatch alarms in the automatic rollback configuration.
        /// This member is required.
        public var status: SageMakerClientTypes.VariantStatus?
        /// A message that describes the status of the production variant.
        public var statusMessage: Swift.String?

        public init (
            startTime: ClientRuntime.Date? = nil,
            status: SageMakerClientTypes.VariantStatus? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

extension SageMakerClientTypes.ProductionVariantSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentInstanceCount = "CurrentInstanceCount"
        case currentServerlessConfig = "CurrentServerlessConfig"
        case currentWeight = "CurrentWeight"
        case deployedImages = "DeployedImages"
        case desiredInstanceCount = "DesiredInstanceCount"
        case desiredServerlessConfig = "DesiredServerlessConfig"
        case desiredWeight = "DesiredWeight"
        case variantName = "VariantName"
        case variantStatus = "VariantStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentInstanceCount = currentInstanceCount {
            try encodeContainer.encode(currentInstanceCount, forKey: .currentInstanceCount)
        }
        if let currentServerlessConfig = currentServerlessConfig {
            try encodeContainer.encode(currentServerlessConfig, forKey: .currentServerlessConfig)
        }
        if let currentWeight = currentWeight {
            try encodeContainer.encode(currentWeight, forKey: .currentWeight)
        }
        if let deployedImages = deployedImages {
            var deployedImagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deployedImages)
            for deployedimages0 in deployedImages {
                try deployedImagesContainer.encode(deployedimages0)
            }
        }
        if let desiredInstanceCount = desiredInstanceCount {
            try encodeContainer.encode(desiredInstanceCount, forKey: .desiredInstanceCount)
        }
        if let desiredServerlessConfig = desiredServerlessConfig {
            try encodeContainer.encode(desiredServerlessConfig, forKey: .desiredServerlessConfig)
        }
        if let desiredWeight = desiredWeight {
            try encodeContainer.encode(desiredWeight, forKey: .desiredWeight)
        }
        if let variantName = variantName {
            try encodeContainer.encode(variantName, forKey: .variantName)
        }
        if let variantStatus = variantStatus {
            var variantStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variantStatus)
            for productionvariantstatuslist0 in variantStatus {
                try variantStatusContainer.encode(productionvariantstatuslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .variantName)
        variantName = variantNameDecoded
        let deployedImagesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DeployedImage?].self, forKey: .deployedImages)
        var deployedImagesDecoded0:[SageMakerClientTypes.DeployedImage]? = nil
        if let deployedImagesContainer = deployedImagesContainer {
            deployedImagesDecoded0 = [SageMakerClientTypes.DeployedImage]()
            for structure0 in deployedImagesContainer {
                if let structure0 = structure0 {
                    deployedImagesDecoded0?.append(structure0)
                }
            }
        }
        deployedImages = deployedImagesDecoded0
        let currentWeightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .currentWeight)
        currentWeight = currentWeightDecoded
        let desiredWeightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .desiredWeight)
        desiredWeight = desiredWeightDecoded
        let currentInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentInstanceCount)
        currentInstanceCount = currentInstanceCountDecoded
        let desiredInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredInstanceCount)
        desiredInstanceCount = desiredInstanceCountDecoded
        let variantStatusContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariantStatus?].self, forKey: .variantStatus)
        var variantStatusDecoded0:[SageMakerClientTypes.ProductionVariantStatus]? = nil
        if let variantStatusContainer = variantStatusContainer {
            variantStatusDecoded0 = [SageMakerClientTypes.ProductionVariantStatus]()
            for structure0 in variantStatusContainer {
                if let structure0 = structure0 {
                    variantStatusDecoded0?.append(structure0)
                }
            }
        }
        variantStatus = variantStatusDecoded0
        let currentServerlessConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantServerlessConfig.self, forKey: .currentServerlessConfig)
        currentServerlessConfig = currentServerlessConfigDecoded
        let desiredServerlessConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantServerlessConfig.self, forKey: .desiredServerlessConfig)
        desiredServerlessConfig = desiredServerlessConfigDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes weight and capacities for a production variant associated with an endpoint. If you sent a request to the UpdateEndpointWeightsAndCapacities API and the endpoint status is Updating, you get different desired and current values.
    public struct ProductionVariantSummary: Swift.Equatable {
        /// The number of instances associated with the variant.
        public var currentInstanceCount: Swift.Int?
        /// The serverless configuration for the endpoint. Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.
        public var currentServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The weight associated with the variant.
        public var currentWeight: Swift.Float?
        /// An array of DeployedImage objects that specify the Amazon EC2 Container Registry paths of the inference images deployed on instances of this ProductionVariant.
        public var deployedImages: [SageMakerClientTypes.DeployedImage]?
        /// The number of instances requested in the UpdateEndpointWeightsAndCapacities request.
        public var desiredInstanceCount: Swift.Int?
        /// The serverless configuration requested for the endpoint update. Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.
        public var desiredServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The requested weight, as specified in the UpdateEndpointWeightsAndCapacities request.
        public var desiredWeight: Swift.Float?
        /// The name of the variant.
        /// This member is required.
        public var variantName: Swift.String?
        /// The endpoint variant status which describes the current deployment stage status or operational status.
        public var variantStatus: [SageMakerClientTypes.ProductionVariantStatus]?

        public init (
            currentInstanceCount: Swift.Int? = nil,
            currentServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            currentWeight: Swift.Float? = nil,
            deployedImages: [SageMakerClientTypes.DeployedImage]? = nil,
            desiredInstanceCount: Swift.Int? = nil,
            desiredServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            desiredWeight: Swift.Float? = nil,
            variantName: Swift.String? = nil,
            variantStatus: [SageMakerClientTypes.ProductionVariantStatus]? = nil
        )
        {
            self.currentInstanceCount = currentInstanceCount
            self.currentServerlessConfig = currentServerlessConfig
            self.currentWeight = currentWeight
            self.deployedImages = deployedImages
            self.desiredInstanceCount = desiredInstanceCount
            self.desiredServerlessConfig = desiredServerlessConfig
            self.desiredWeight = desiredWeight
            self.variantName = variantName
            self.variantStatus = variantStatus
        }
    }

}

extension SageMakerClientTypes.ProfilerConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case profilingIntervalInMilliseconds = "ProfilingIntervalInMilliseconds"
        case profilingParameters = "ProfilingParameters"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let profilingIntervalInMilliseconds = profilingIntervalInMilliseconds {
            try encodeContainer.encode(profilingIntervalInMilliseconds, forKey: .profilingIntervalInMilliseconds)
        }
        if let profilingParameters = profilingParameters {
            var profilingParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .profilingParameters)
            for (dictKey0, profilingparameters0) in profilingParameters {
                try profilingParametersContainer.encode(profilingparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let profilingIntervalInMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .profilingIntervalInMilliseconds)
        profilingIntervalInMilliseconds = profilingIntervalInMillisecondsDecoded
        let profilingParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .profilingParameters)
        var profilingParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let profilingParametersContainer = profilingParametersContainer {
            profilingParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, configvalue0) in profilingParametersContainer {
                if let configvalue0 = configvalue0 {
                    profilingParametersDecoded0?[key0] = configvalue0
                }
            }
        }
        profilingParameters = profilingParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Configuration information for Debugger system monitoring, framework profiling, and storage paths.
    public struct ProfilerConfig: Swift.Equatable {
        /// A time interval for capturing system metrics in milliseconds. Available values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.
        public var profilingIntervalInMilliseconds: Swift.Int?
        /// Configuration information for capturing framework metrics. Available key strings for different profiling options are DetailedProfilingConfig, PythonProfilingConfig, and DataLoaderProfilingConfig. The following codes are configuration structures for the ProfilingParameters parameter. To learn more about how to configure the ProfilingParameters parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
        public var profilingParameters: [Swift.String:Swift.String]?
        /// Path to Amazon S3 storage location for system and framework metrics.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init (
            profilingIntervalInMilliseconds: Swift.Int? = nil,
            profilingParameters: [Swift.String:Swift.String]? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.profilingIntervalInMilliseconds = profilingIntervalInMilliseconds
            self.profilingParameters = profilingParameters
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes.ProfilerConfigForUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disableProfiler = "DisableProfiler"
        case profilingIntervalInMilliseconds = "ProfilingIntervalInMilliseconds"
        case profilingParameters = "ProfilingParameters"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if disableProfiler != false {
            try encodeContainer.encode(disableProfiler, forKey: .disableProfiler)
        }
        if let profilingIntervalInMilliseconds = profilingIntervalInMilliseconds {
            try encodeContainer.encode(profilingIntervalInMilliseconds, forKey: .profilingIntervalInMilliseconds)
        }
        if let profilingParameters = profilingParameters {
            var profilingParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .profilingParameters)
            for (dictKey0, profilingparameters0) in profilingParameters {
                try profilingParametersContainer.encode(profilingparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let profilingIntervalInMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .profilingIntervalInMilliseconds)
        profilingIntervalInMilliseconds = profilingIntervalInMillisecondsDecoded
        let profilingParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .profilingParameters)
        var profilingParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let profilingParametersContainer = profilingParametersContainer {
            profilingParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, configvalue0) in profilingParametersContainer {
                if let configvalue0 = configvalue0 {
                    profilingParametersDecoded0?[key0] = configvalue0
                }
            }
        }
        profilingParameters = profilingParametersDecoded0
        let disableProfilerDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disableProfiler)
        disableProfiler = disableProfilerDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration information for updating the Debugger profile parameters, system and framework metrics configurations, and storage paths.
    public struct ProfilerConfigForUpdate: Swift.Equatable {
        /// To disable Debugger monitoring and profiling, set to True.
        public var disableProfiler: Swift.Bool
        /// A time interval for capturing system metrics in milliseconds. Available values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.
        public var profilingIntervalInMilliseconds: Swift.Int?
        /// Configuration information for capturing framework metrics. Available key strings for different profiling options are DetailedProfilingConfig, PythonProfilingConfig, and DataLoaderProfilingConfig. The following codes are configuration structures for the ProfilingParameters parameter. To learn more about how to configure the ProfilingParameters parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
        public var profilingParameters: [Swift.String:Swift.String]?
        /// Path to Amazon S3 storage location for system and framework metrics.
        public var s3OutputPath: Swift.String?

        public init (
            disableProfiler: Swift.Bool = false,
            profilingIntervalInMilliseconds: Swift.Int? = nil,
            profilingParameters: [Swift.String:Swift.String]? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.disableProfiler = disableProfiler
            self.profilingIntervalInMilliseconds = profilingIntervalInMilliseconds
            self.profilingParameters = profilingParameters
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes.ProfilerRuleConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceType = "InstanceType"
        case localPath = "LocalPath"
        case ruleConfigurationName = "RuleConfigurationName"
        case ruleEvaluatorImage = "RuleEvaluatorImage"
        case ruleParameters = "RuleParameters"
        case s3OutputPath = "S3OutputPath"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let ruleConfigurationName = ruleConfigurationName {
            try encodeContainer.encode(ruleConfigurationName, forKey: .ruleConfigurationName)
        }
        if let ruleEvaluatorImage = ruleEvaluatorImage {
            try encodeContainer.encode(ruleEvaluatorImage, forKey: .ruleEvaluatorImage)
        }
        if let ruleParameters = ruleParameters {
            var ruleParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .ruleParameters)
            for (dictKey0, ruleparameters0) in ruleParameters {
                try ruleParametersContainer.encode(ruleparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
        if volumeSizeInGB != 0 {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleConfigurationName)
        ruleConfigurationName = ruleConfigurationNameDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let ruleEvaluatorImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleEvaluatorImage)
        ruleEvaluatorImage = ruleEvaluatorImageDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let volumeSizeInGBDecoded = try containerValues.decode(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let ruleParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .ruleParameters)
        var ruleParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let ruleParametersContainer = ruleParametersContainer {
            ruleParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, configvalue0) in ruleParametersContainer {
                if let configvalue0 = configvalue0 {
                    ruleParametersDecoded0?[key0] = configvalue0
                }
            }
        }
        ruleParameters = ruleParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Configuration information for profiling rules.
    public struct ProfilerRuleConfiguration: Swift.Equatable {
        /// The instance type to deploy a Debugger custom rule for profiling a training job.
        public var instanceType: SageMakerClientTypes.ProcessingInstanceType?
        /// Path to local storage location for output of rules. Defaults to /opt/ml/processing/output/rule/.
        public var localPath: Swift.String?
        /// The name of the rule configuration. It must be unique relative to other rule configuration names.
        /// This member is required.
        public var ruleConfigurationName: Swift.String?
        /// The Amazon Elastic Container (ECR) Image for the managed rule evaluation.
        /// This member is required.
        public var ruleEvaluatorImage: Swift.String?
        /// Runtime configuration for rule container.
        public var ruleParameters: [Swift.String:Swift.String]?
        /// Path to Amazon S3 storage location for rules.
        public var s3OutputPath: Swift.String?
        /// The size, in GB, of the ML storage volume attached to the processing instance.
        public var volumeSizeInGB: Swift.Int

        public init (
            instanceType: SageMakerClientTypes.ProcessingInstanceType? = nil,
            localPath: Swift.String? = nil,
            ruleConfigurationName: Swift.String? = nil,
            ruleEvaluatorImage: Swift.String? = nil,
            ruleParameters: [Swift.String:Swift.String]? = nil,
            s3OutputPath: Swift.String? = nil,
            volumeSizeInGB: Swift.Int = 0
        )
        {
            self.instanceType = instanceType
            self.localPath = localPath
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluatorImage = ruleEvaluatorImage
            self.ruleParameters = ruleParameters
            self.s3OutputPath = s3OutputPath
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes.ProfilerRuleEvaluationStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastModifiedTime = "LastModifiedTime"
        case ruleConfigurationName = "RuleConfigurationName"
        case ruleEvaluationJobArn = "RuleEvaluationJobArn"
        case ruleEvaluationStatus = "RuleEvaluationStatus"
        case statusDetails = "StatusDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let ruleConfigurationName = ruleConfigurationName {
            try encodeContainer.encode(ruleConfigurationName, forKey: .ruleConfigurationName)
        }
        if let ruleEvaluationJobArn = ruleEvaluationJobArn {
            try encodeContainer.encode(ruleEvaluationJobArn, forKey: .ruleEvaluationJobArn)
        }
        if let ruleEvaluationStatus = ruleEvaluationStatus {
            try encodeContainer.encode(ruleEvaluationStatus.rawValue, forKey: .ruleEvaluationStatus)
        }
        if let statusDetails = statusDetails {
            try encodeContainer.encode(statusDetails, forKey: .statusDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleConfigurationName)
        ruleConfigurationName = ruleConfigurationNameDecoded
        let ruleEvaluationJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleEvaluationJobArn)
        ruleEvaluationJobArn = ruleEvaluationJobArnDecoded
        let ruleEvaluationStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RuleEvaluationStatus.self, forKey: .ruleEvaluationStatus)
        ruleEvaluationStatus = ruleEvaluationStatusDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// Information about the status of the rule evaluation.
    public struct ProfilerRuleEvaluationStatus: Swift.Equatable {
        /// Timestamp when the rule evaluation status was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The name of the rule configuration.
        public var ruleConfigurationName: Swift.String?
        /// The Amazon Resource Name (ARN) of the rule evaluation job.
        public var ruleEvaluationJobArn: Swift.String?
        /// Status of the rule evaluation.
        public var ruleEvaluationStatus: SageMakerClientTypes.RuleEvaluationStatus?
        /// Details from the rule evaluation.
        public var statusDetails: Swift.String?

        public init (
            lastModifiedTime: ClientRuntime.Date? = nil,
            ruleConfigurationName: Swift.String? = nil,
            ruleEvaluationJobArn: Swift.String? = nil,
            ruleEvaluationStatus: SageMakerClientTypes.RuleEvaluationStatus? = nil,
            statusDetails: Swift.String? = nil
        )
        {
            self.lastModifiedTime = lastModifiedTime
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluationJobArn = ruleEvaluationJobArn
            self.ruleEvaluationStatus = ruleEvaluationStatus
            self.statusDetails = statusDetails
        }
    }

}

extension SageMakerClientTypes {
    public enum ProfilingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ProfilingStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProfilingStatus(rawValue: rawValue) ?? ProfilingStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.Project: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case projectArn = "ProjectArn"
        case projectDescription = "ProjectDescription"
        case projectId = "ProjectId"
        case projectName = "ProjectName"
        case projectStatus = "ProjectStatus"
        case serviceCatalogProvisionedProductDetails = "ServiceCatalogProvisionedProductDetails"
        case serviceCatalogProvisioningDetails = "ServiceCatalogProvisioningDetails"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let projectArn = projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let projectDescription = projectDescription {
            try encodeContainer.encode(projectDescription, forKey: .projectDescription)
        }
        if let projectId = projectId {
            try encodeContainer.encode(projectId, forKey: .projectId)
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let projectStatus = projectStatus {
            try encodeContainer.encode(projectStatus.rawValue, forKey: .projectStatus)
        }
        if let serviceCatalogProvisionedProductDetails = serviceCatalogProvisionedProductDetails {
            try encodeContainer.encode(serviceCatalogProvisionedProductDetails, forKey: .serviceCatalogProvisionedProductDetails)
        }
        if let serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetails {
            try encodeContainer.encode(serviceCatalogProvisioningDetails, forKey: .serviceCatalogProvisioningDetails)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let projectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectId)
        projectId = projectIdDecoded
        let projectDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectDescription)
        projectDescription = projectDescriptionDecoded
        let serviceCatalogProvisioningDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ServiceCatalogProvisioningDetails.self, forKey: .serviceCatalogProvisioningDetails)
        serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetailsDecoded
        let serviceCatalogProvisionedProductDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ServiceCatalogProvisionedProductDetails.self, forKey: .serviceCatalogProvisionedProductDetails)
        serviceCatalogProvisionedProductDetails = serviceCatalogProvisionedProductDetailsDecoded
        let projectStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProjectStatus.self, forKey: .projectStatus)
        projectStatus = projectStatusDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
    }
}

extension SageMakerClientTypes {
    /// The properties of a project as returned by the Search API.
    public struct Project: Swift.Equatable {
        /// Who created the project.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// A timestamp specifying when the project was created.
        public var creationTime: ClientRuntime.Date?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// A timestamp container for when the project was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the project.
        public var projectArn: Swift.String?
        /// The description of the project.
        public var projectDescription: Swift.String?
        /// The ID of the project.
        public var projectId: Swift.String?
        /// The name of the project.
        public var projectName: Swift.String?
        /// The status of the project.
        public var projectStatus: SageMakerClientTypes.ProjectStatus?
        /// Details of a provisioned service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
        public var serviceCatalogProvisionedProductDetails: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails?
        /// Details that you specify to provision a service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
        public var serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails?
        /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
        public var tags: [SageMakerClientTypes.Tag]?

        public init (
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            projectArn: Swift.String? = nil,
            projectDescription: Swift.String? = nil,
            projectId: Swift.String? = nil,
            projectName: Swift.String? = nil,
            projectStatus: SageMakerClientTypes.ProjectStatus? = nil,
            serviceCatalogProvisionedProductDetails: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails? = nil,
            serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.projectArn = projectArn
            self.projectDescription = projectDescription
            self.projectId = projectId
            self.projectName = projectName
            self.projectStatus = projectStatus
            self.serviceCatalogProvisionedProductDetails = serviceCatalogProvisionedProductDetails
            self.serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetails
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {
    public enum ProjectSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectSortBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProjectSortBy(rawValue: rawValue) ?? ProjectSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ProjectSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectSortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProjectSortOrder(rawValue: rawValue) ?? ProjectSortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum ProjectStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createCompleted
        case createFailed
        case createInProgress
        case deleteCompleted
        case deleteFailed
        case deleteInProgress
        case pending
        case updateCompleted
        case updateFailed
        case updateInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectStatus] {
            return [
                .createCompleted,
                .createFailed,
                .createInProgress,
                .deleteCompleted,
                .deleteFailed,
                .deleteInProgress,
                .pending,
                .updateCompleted,
                .updateFailed,
                .updateInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createCompleted: return "CreateCompleted"
            case .createFailed: return "CreateFailed"
            case .createInProgress: return "CreateInProgress"
            case .deleteCompleted: return "DeleteCompleted"
            case .deleteFailed: return "DeleteFailed"
            case .deleteInProgress: return "DeleteInProgress"
            case .pending: return "Pending"
            case .updateCompleted: return "UpdateCompleted"
            case .updateFailed: return "UpdateFailed"
            case .updateInProgress: return "UpdateInProgress"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProjectStatus(rawValue: rawValue) ?? ProjectStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ProjectSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case projectArn = "ProjectArn"
        case projectDescription = "ProjectDescription"
        case projectId = "ProjectId"
        case projectName = "ProjectName"
        case projectStatus = "ProjectStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let projectArn = projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let projectDescription = projectDescription {
            try encodeContainer.encode(projectDescription, forKey: .projectDescription)
        }
        if let projectId = projectId {
            try encodeContainer.encode(projectId, forKey: .projectId)
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let projectStatus = projectStatus {
            try encodeContainer.encode(projectStatus.rawValue, forKey: .projectStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let projectDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectDescription)
        projectDescription = projectDescriptionDecoded
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let projectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectId)
        projectId = projectIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let projectStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProjectStatus.self, forKey: .projectStatus)
        projectStatus = projectStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// Information about a project.
    public struct ProjectSummary: Swift.Equatable {
        /// The time that the project was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the project.
        /// This member is required.
        public var projectArn: Swift.String?
        /// The description of the project.
        public var projectDescription: Swift.String?
        /// The ID of the project.
        /// This member is required.
        public var projectId: Swift.String?
        /// The name of the project.
        /// This member is required.
        public var projectName: Swift.String?
        /// The status of the project.
        /// This member is required.
        public var projectStatus: SageMakerClientTypes.ProjectStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            projectArn: Swift.String? = nil,
            projectDescription: Swift.String? = nil,
            projectId: Swift.String? = nil,
            projectName: Swift.String? = nil,
            projectStatus: SageMakerClientTypes.ProjectStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.projectArn = projectArn
            self.projectDescription = projectDescription
            self.projectId = projectId
            self.projectName = projectName
            self.projectStatus = projectStatus
        }
    }

}

extension SageMakerClientTypes.PropertyNameQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case propertyNameHint = "PropertyNameHint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let propertyNameHint = propertyNameHint {
            try encodeContainer.encode(propertyNameHint, forKey: .propertyNameHint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertyNameHintDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyNameHint)
        propertyNameHint = propertyNameHintDecoded
    }
}

extension SageMakerClientTypes {
    /// Part of the SuggestionQuery type. Specifies a hint for retrieving property names that begin with the specified text.
    public struct PropertyNameQuery: Swift.Equatable {
        /// Text that begins a property's name.
        /// This member is required.
        public var propertyNameHint: Swift.String?

        public init (
            propertyNameHint: Swift.String? = nil
        )
        {
            self.propertyNameHint = propertyNameHint
        }
    }

}

extension SageMakerClientTypes.PropertyNameSuggestion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case propertyName = "PropertyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let propertyName = propertyName {
            try encodeContainer.encode(propertyName, forKey: .propertyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyName)
        propertyName = propertyNameDecoded
    }
}

extension SageMakerClientTypes {
    /// A property name returned from a GetSearchSuggestions call that specifies a value in the PropertyNameQuery field.
    public struct PropertyNameSuggestion: Swift.Equatable {
        /// A suggested property name based on what you entered in the search textbox in the Amazon SageMaker console.
        public var propertyName: Swift.String?

        public init (
            propertyName: Swift.String? = nil
        )
        {
            self.propertyName = propertyName
        }
    }

}

extension SageMakerClientTypes.ProvisioningParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// A key value pair used when you provision a project as a service catalog product. For information, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public struct ProvisioningParameter: Swift.Equatable {
        /// The key that identifies a provisioning parameter.
        public var key: Swift.String?
        /// The value of the provisioning parameter.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension SageMakerClientTypes.PublicWorkforceTaskPrice: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amountInUsd = "AmountInUsd"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amountInUsd = amountInUsd {
            try encodeContainer.encode(amountInUsd, forKey: .amountInUsd)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amountInUsdDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.USD.self, forKey: .amountInUsd)
        amountInUsd = amountInUsdDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.
    ///
    /// * 0.036
    ///
    /// * 0.048
    ///
    /// * 0.060
    ///
    /// * 0.072
    ///
    /// * 0.120
    ///
    /// * 0.240
    ///
    /// * 0.360
    ///
    /// * 0.480
    ///
    /// * 0.600
    ///
    /// * 0.720
    ///
    /// * 0.840
    ///
    /// * 0.960
    ///
    /// * 1.080
    ///
    /// * 1.200
    ///
    ///
    /// Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.
    ///
    /// * 0.012
    ///
    /// * 0.024
    ///
    /// * 0.036
    ///
    /// * 0.048
    ///
    /// * 0.060
    ///
    /// * 0.072
    ///
    /// * 0.120
    ///
    /// * 0.240
    ///
    /// * 0.360
    ///
    /// * 0.480
    ///
    /// * 0.600
    ///
    /// * 0.720
    ///
    /// * 0.840
    ///
    /// * 0.960
    ///
    /// * 1.080
    ///
    /// * 1.200
    ///
    ///
    /// Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.
    ///
    /// * 0.840
    ///
    /// * 0.960
    ///
    /// * 1.080
    ///
    /// * 1.200
    ///
    ///
    /// Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.
    ///
    /// * 2.400
    ///
    /// * 2.280
    ///
    /// * 2.160
    ///
    /// * 2.040
    ///
    /// * 1.920
    ///
    /// * 1.800
    ///
    /// * 1.680
    ///
    /// * 1.560
    ///
    /// * 1.440
    ///
    /// * 1.320
    ///
    /// * 1.200
    ///
    /// * 1.080
    ///
    /// * 0.960
    ///
    /// * 0.840
    ///
    /// * 0.720
    ///
    /// * 0.600
    ///
    /// * 0.480
    ///
    /// * 0.360
    ///
    /// * 0.240
    ///
    /// * 0.120
    ///
    /// * 0.072
    ///
    /// * 0.060
    ///
    /// * 0.048
    ///
    /// * 0.036
    ///
    /// * 0.024
    ///
    /// * 0.012
    ///
    ///
    /// Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.
    ///
    /// * 1.200
    ///
    /// * 1.080
    ///
    /// * 0.960
    ///
    /// * 0.840
    ///
    /// * 0.720
    ///
    /// * 0.600
    ///
    /// * 0.480
    ///
    /// * 0.360
    ///
    /// * 0.240
    ///
    /// * 0.120
    ///
    /// * 0.072
    ///
    /// * 0.060
    ///
    /// * 0.048
    ///
    /// * 0.036
    ///
    /// * 0.024
    ///
    /// * 0.012
    ///
    ///
    /// Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.
    ///
    /// * 1.200
    ///
    /// * 1.080
    ///
    /// * 0.960
    ///
    /// * 0.840
    ///
    /// * 0.720
    ///
    /// * 0.600
    ///
    /// * 0.480
    ///
    /// * 0.360
    ///
    /// * 0.240
    ///
    /// * 0.120
    ///
    /// * 0.072
    ///
    /// * 0.060
    ///
    /// * 0.048
    ///
    /// * 0.036
    ///
    /// * 0.024
    ///
    /// * 0.012
    public struct PublicWorkforceTaskPrice: Swift.Equatable {
        /// Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars.
        public var amountInUsd: SageMakerClientTypes.USD?

        public init (
            amountInUsd: SageMakerClientTypes.USD? = nil
        )
        {
            self.amountInUsd = amountInUsd
        }
    }

}

extension PutModelPackageGroupPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
        case resourcePolicy = "ResourcePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let resourcePolicy = resourcePolicy {
            try encodeContainer.encode(resourcePolicy, forKey: .resourcePolicy)
        }
    }
}

extension PutModelPackageGroupPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutModelPackageGroupPolicyInput: Swift.Equatable {
    /// The name of the model group to add a resource policy to.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?
    /// The resource policy for the model group.
    /// This member is required.
    public var resourcePolicy: Swift.String?

    public init (
        modelPackageGroupName: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
        self.resourcePolicy = resourcePolicy
    }
}

struct PutModelPackageGroupPolicyInputBody: Swift.Equatable {
    let modelPackageGroupName: Swift.String?
    let resourcePolicy: Swift.String?
}

extension PutModelPackageGroupPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupName = "ModelPackageGroupName"
        case resourcePolicy = "ResourcePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

extension PutModelPackageGroupPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutModelPackageGroupPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutModelPackageGroupPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutModelPackageGroupPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutModelPackageGroupPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelPackageGroupArn = output.modelPackageGroupArn
        } else {
            self.modelPackageGroupArn = nil
        }
    }
}

public struct PutModelPackageGroupPolicyOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model package group.
    /// This member is required.
    public var modelPackageGroupArn: Swift.String?

    public init (
        modelPackageGroupArn: Swift.String? = nil
    )
    {
        self.modelPackageGroupArn = modelPackageGroupArn
    }
}

struct PutModelPackageGroupPolicyOutputResponseBody: Swift.Equatable {
    let modelPackageGroupArn: Swift.String?
}

extension PutModelPackageGroupPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageGroupArn = "ModelPackageGroupArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupArn)
        modelPackageGroupArn = modelPackageGroupArnDecoded
    }
}

extension SageMakerClientTypes.QualityCheckStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baselineUsedForDriftCheckConstraints = "BaselineUsedForDriftCheckConstraints"
        case baselineUsedForDriftCheckStatistics = "BaselineUsedForDriftCheckStatistics"
        case calculatedBaselineConstraints = "CalculatedBaselineConstraints"
        case calculatedBaselineStatistics = "CalculatedBaselineStatistics"
        case checkJobArn = "CheckJobArn"
        case checkType = "CheckType"
        case modelPackageGroupName = "ModelPackageGroupName"
        case registerNewBaseline = "RegisterNewBaseline"
        case skipCheck = "SkipCheck"
        case violationReport = "ViolationReport"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraints {
            try encodeContainer.encode(baselineUsedForDriftCheckConstraints, forKey: .baselineUsedForDriftCheckConstraints)
        }
        if let baselineUsedForDriftCheckStatistics = baselineUsedForDriftCheckStatistics {
            try encodeContainer.encode(baselineUsedForDriftCheckStatistics, forKey: .baselineUsedForDriftCheckStatistics)
        }
        if let calculatedBaselineConstraints = calculatedBaselineConstraints {
            try encodeContainer.encode(calculatedBaselineConstraints, forKey: .calculatedBaselineConstraints)
        }
        if let calculatedBaselineStatistics = calculatedBaselineStatistics {
            try encodeContainer.encode(calculatedBaselineStatistics, forKey: .calculatedBaselineStatistics)
        }
        if let checkJobArn = checkJobArn {
            try encodeContainer.encode(checkJobArn, forKey: .checkJobArn)
        }
        if let checkType = checkType {
            try encodeContainer.encode(checkType, forKey: .checkType)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if registerNewBaseline != false {
            try encodeContainer.encode(registerNewBaseline, forKey: .registerNewBaseline)
        }
        if skipCheck != false {
            try encodeContainer.encode(skipCheck, forKey: .skipCheck)
        }
        if let violationReport = violationReport {
            try encodeContainer.encode(violationReport, forKey: .violationReport)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkType)
        checkType = checkTypeDecoded
        let baselineUsedForDriftCheckStatisticsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baselineUsedForDriftCheckStatistics)
        baselineUsedForDriftCheckStatistics = baselineUsedForDriftCheckStatisticsDecoded
        let baselineUsedForDriftCheckConstraintsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baselineUsedForDriftCheckConstraints)
        baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraintsDecoded
        let calculatedBaselineStatisticsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .calculatedBaselineStatistics)
        calculatedBaselineStatistics = calculatedBaselineStatisticsDecoded
        let calculatedBaselineConstraintsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .calculatedBaselineConstraints)
        calculatedBaselineConstraints = calculatedBaselineConstraintsDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let violationReportDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .violationReport)
        violationReport = violationReportDecoded
        let checkJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkJobArn)
        checkJobArn = checkJobArnDecoded
        let skipCheckDecoded = try containerValues.decode(Swift.Bool.self, forKey: .skipCheck)
        skipCheck = skipCheckDecoded
        let registerNewBaselineDecoded = try containerValues.decode(Swift.Bool.self, forKey: .registerNewBaseline)
        registerNewBaseline = registerNewBaselineDecoded
    }
}

extension SageMakerClientTypes {
    /// Container for the metadata for a Quality check step. For more information, see the topic on [QualityCheck step](https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check) in the Amazon SageMaker Developer Guide.
    public struct QualityCheckStepMetadata: Swift.Equatable {
        /// The Amazon S3 URI of the baseline constraints file used for the drift check.
        public var baselineUsedForDriftCheckConstraints: Swift.String?
        /// The Amazon S3 URI of the baseline statistics file used for the drift check.
        public var baselineUsedForDriftCheckStatistics: Swift.String?
        /// The Amazon S3 URI of the newly calculated baseline constraints file.
        public var calculatedBaselineConstraints: Swift.String?
        /// The Amazon S3 URI of the newly calculated baseline statistics file.
        public var calculatedBaselineStatistics: Swift.String?
        /// The Amazon Resource Name (ARN) of the Quality check processing job that was run by this step execution.
        public var checkJobArn: Swift.String?
        /// The type of the Quality check step.
        public var checkType: Swift.String?
        /// The model package group name.
        public var modelPackageGroupName: Swift.String?
        /// This flag indicates if a newly calculated baseline can be accessed through step properties BaselineUsedForDriftCheckConstraints and BaselineUsedForDriftCheckStatistics. If it is set to False, the previous baseline of the configured check type must also be available. These can be accessed through the BaselineUsedForDriftCheckConstraints and  BaselineUsedForDriftCheckStatistics properties.
        public var registerNewBaseline: Swift.Bool
        /// This flag indicates if the drift check against the previous baseline will be skipped or not. If it is set to False, the previous baseline of the configured check type must be available.
        public var skipCheck: Swift.Bool
        /// The Amazon S3 URI of violation report if violations are detected.
        public var violationReport: Swift.String?

        public init (
            baselineUsedForDriftCheckConstraints: Swift.String? = nil,
            baselineUsedForDriftCheckStatistics: Swift.String? = nil,
            calculatedBaselineConstraints: Swift.String? = nil,
            calculatedBaselineStatistics: Swift.String? = nil,
            checkJobArn: Swift.String? = nil,
            checkType: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            registerNewBaseline: Swift.Bool = false,
            skipCheck: Swift.Bool = false,
            violationReport: Swift.String? = nil
        )
        {
            self.baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraints
            self.baselineUsedForDriftCheckStatistics = baselineUsedForDriftCheckStatistics
            self.calculatedBaselineConstraints = calculatedBaselineConstraints
            self.calculatedBaselineStatistics = calculatedBaselineStatistics
            self.checkJobArn = checkJobArn
            self.checkType = checkType
            self.modelPackageGroupName = modelPackageGroupName
            self.registerNewBaseline = registerNewBaseline
            self.skipCheck = skipCheck
            self.violationReport = violationReport
        }
    }

}

extension SageMakerClientTypes.QueryFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case lineageTypes = "LineageTypes"
        case modifiedAfter = "ModifiedAfter"
        case modifiedBefore = "ModifiedBefore"
        case properties = "Properties"
        case types = "Types"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let lineageTypes = lineageTypes {
            var lineageTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lineageTypes)
            for querylineagetypes0 in lineageTypes {
                try lineageTypesContainer.encode(querylineagetypes0.rawValue)
            }
        }
        if let modifiedAfter = modifiedAfter {
            try encodeContainer.encode(modifiedAfter.timeIntervalSince1970, forKey: .modifiedAfter)
        }
        if let modifiedBefore = modifiedBefore {
            try encodeContainer.encode(modifiedBefore.timeIntervalSince1970, forKey: .modifiedBefore)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, queryproperties0) in properties {
                try propertiesContainer.encode(queryproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for querytypes0 in types {
                try typesContainer.encode(querytypes0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .types)
        var typesDecoded0:[Swift.String]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [Swift.String]()
            for string0 in typesContainer {
                if let string0 = string0 {
                    typesDecoded0?.append(string0)
                }
            }
        }
        types = typesDecoded0
        let lineageTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.LineageType?].self, forKey: .lineageTypes)
        var lineageTypesDecoded0:[SageMakerClientTypes.LineageType]? = nil
        if let lineageTypesContainer = lineageTypesContainer {
            lineageTypesDecoded0 = [SageMakerClientTypes.LineageType]()
            for string0 in lineageTypesContainer {
                if let string0 = string0 {
                    lineageTypesDecoded0?.append(string0)
                }
            }
        }
        lineageTypes = lineageTypesDecoded0
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let modifiedBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modifiedBefore)
        modifiedBefore = modifiedBeforeDecoded
        let modifiedAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modifiedAfter)
        modifiedAfter = modifiedAfterDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string2560) in propertiesContainer {
                if let string2560 = string2560 {
                    propertiesDecoded0?[key0] = string2560
                }
            }
        }
        properties = propertiesDecoded0
    }
}

extension SageMakerClientTypes {
    /// A set of filters to narrow the set of lineage entities connected to the StartArn(s) returned by the QueryLineage API action.
    public struct QueryFilters: Swift.Equatable {
        /// Filter the lineage entities connected to the StartArn(s) after the create date.
        public var createdAfter: ClientRuntime.Date?
        /// Filter the lineage entities connected to the StartArn(s) by created date.
        public var createdBefore: ClientRuntime.Date?
        /// Filter the lineage entities connected to the StartArn(s) by the type of the lineage entity.
        public var lineageTypes: [SageMakerClientTypes.LineageType]?
        /// Filter the lineage entities connected to the StartArn(s) after the last modified date.
        public var modifiedAfter: ClientRuntime.Date?
        /// Filter the lineage entities connected to the StartArn(s) before the last modified date.
        public var modifiedBefore: ClientRuntime.Date?
        /// Filter the lineage entities connected to the StartArn(s) by a set if property key value pairs. If multiple pairs are provided, an entity will be included in the results if it matches any of the provided pairs.
        public var properties: [Swift.String:Swift.String]?
        /// Filter the lineage entities connected to the StartArn by type. For example: DataSet, Model, Endpoint, or ModelDeployment.
        public var types: [Swift.String]?

        public init (
            createdAfter: ClientRuntime.Date? = nil,
            createdBefore: ClientRuntime.Date? = nil,
            lineageTypes: [SageMakerClientTypes.LineageType]? = nil,
            modifiedAfter: ClientRuntime.Date? = nil,
            modifiedBefore: ClientRuntime.Date? = nil,
            properties: [Swift.String:Swift.String]? = nil,
            types: [Swift.String]? = nil
        )
        {
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.lineageTypes = lineageTypes
            self.modifiedAfter = modifiedAfter
            self.modifiedBefore = modifiedBefore
            self.properties = properties
            self.types = types
        }
    }

}

extension QueryLineageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case direction = "Direction"
        case filters = "Filters"
        case includeEdges = "IncludeEdges"
        case maxDepth = "MaxDepth"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startArns = "StartArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let direction = direction {
            try encodeContainer.encode(direction.rawValue, forKey: .direction)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if includeEdges != false {
            try encodeContainer.encode(includeEdges, forKey: .includeEdges)
        }
        if let maxDepth = maxDepth {
            try encodeContainer.encode(maxDepth, forKey: .maxDepth)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startArns = startArns {
            var startArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .startArns)
            for querylineagestartarns0 in startArns {
                try startArnsContainer.encode(querylineagestartarns0)
            }
        }
    }
}

extension QueryLineageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct QueryLineageInput: Swift.Equatable {
    /// Associations between lineage entities are directed. This parameter determines the direction from the StartArn(s) the query will look.
    public var direction: SageMakerClientTypes.Direction?
    /// A set of filtering parameters that allow you to specify which entities should be returned.
    ///
    /// * Properties - Key-value pairs to match on the lineage entities' properties.
    ///
    /// * LineageTypes - A set of lineage entity types to match on. For example: TrialComponent, Artifact, or Context.
    ///
    /// * CreatedBefore - Filter entities created before this date.
    ///
    /// * ModifiedBefore - Filter entities modified before this date.
    ///
    /// * ModifiedAfter - Filter entities modified after this date.
    public var filters: SageMakerClientTypes.QueryFilters?
    /// Setting this value to True will retrieve not only the entities of interest but also the [Associations](https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html) and lineage entities on the path. Set to False to only return lineage entities that match your query.
    public var includeEdges: Swift.Bool
    /// The maximum depth in lineage relationships from the StartArns that will be traversed. Depth is a measure of the number of Associations from the StartArn entity to the matched results.
    public var maxDepth: Swift.Int?
    /// Limits the number of vertices in the results. Use the NextToken in a response to to retrieve the next page of results.
    public var maxResults: Swift.Int?
    /// Limits the number of vertices in the request. Use the NextToken in a response to to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.
    /// This member is required.
    public var startArns: [Swift.String]?

    public init (
        direction: SageMakerClientTypes.Direction? = nil,
        filters: SageMakerClientTypes.QueryFilters? = nil,
        includeEdges: Swift.Bool = false,
        maxDepth: Swift.Int? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startArns: [Swift.String]? = nil
    )
    {
        self.direction = direction
        self.filters = filters
        self.includeEdges = includeEdges
        self.maxDepth = maxDepth
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startArns = startArns
    }
}

struct QueryLineageInputBody: Swift.Equatable {
    let startArns: [Swift.String]?
    let direction: SageMakerClientTypes.Direction?
    let includeEdges: Swift.Bool
    let filters: SageMakerClientTypes.QueryFilters?
    let maxDepth: Swift.Int?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension QueryLineageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case direction = "Direction"
        case filters = "Filters"
        case includeEdges = "IncludeEdges"
        case maxDepth = "MaxDepth"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startArns = "StartArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .startArns)
        var startArnsDecoded0:[Swift.String]? = nil
        if let startArnsContainer = startArnsContainer {
            startArnsDecoded0 = [Swift.String]()
            for string0 in startArnsContainer {
                if let string0 = string0 {
                    startArnsDecoded0?.append(string0)
                }
            }
        }
        startArns = startArnsDecoded0
        let directionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Direction.self, forKey: .direction)
        direction = directionDecoded
        let includeEdgesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeEdges)
        includeEdges = includeEdgesDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.QueryFilters.self, forKey: .filters)
        filters = filtersDecoded
        let maxDepthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxDepth)
        maxDepth = maxDepthDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension QueryLineageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension QueryLineageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum QueryLineageOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension QueryLineageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: QueryLineageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.edges = output.edges
            self.nextToken = output.nextToken
            self.vertices = output.vertices
        } else {
            self.edges = nil
            self.nextToken = nil
            self.vertices = nil
        }
    }
}

public struct QueryLineageOutputResponse: Swift.Equatable {
    /// A list of edges that connect vertices in the response.
    public var edges: [SageMakerClientTypes.Edge]?
    /// Limits the number of vertices in the response. Use the NextToken in a response to to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// A list of vertices connected to the start entity(ies) in the lineage graph.
    public var vertices: [SageMakerClientTypes.Vertex]?

    public init (
        edges: [SageMakerClientTypes.Edge]? = nil,
        nextToken: Swift.String? = nil,
        vertices: [SageMakerClientTypes.Vertex]? = nil
    )
    {
        self.edges = edges
        self.nextToken = nextToken
        self.vertices = vertices
    }
}

struct QueryLineageOutputResponseBody: Swift.Equatable {
    let vertices: [SageMakerClientTypes.Vertex]?
    let edges: [SageMakerClientTypes.Edge]?
    let nextToken: Swift.String?
}

extension QueryLineageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edges = "Edges"
        case nextToken = "NextToken"
        case vertices = "Vertices"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verticesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Vertex?].self, forKey: .vertices)
        var verticesDecoded0:[SageMakerClientTypes.Vertex]? = nil
        if let verticesContainer = verticesContainer {
            verticesDecoded0 = [SageMakerClientTypes.Vertex]()
            for structure0 in verticesContainer {
                if let structure0 = structure0 {
                    verticesDecoded0?.append(structure0)
                }
            }
        }
        vertices = verticesDecoded0
        let edgesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Edge?].self, forKey: .edges)
        var edgesDecoded0:[SageMakerClientTypes.Edge]? = nil
        if let edgesContainer = edgesContainer {
            edgesDecoded0 = [SageMakerClientTypes.Edge]()
            for structure0 in edgesContainer {
                if let structure0 = structure0 {
                    edgesDecoded0?.append(structure0)
                }
            }
        }
        edges = edgesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SageMakerClientTypes.RSessionAppSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SageMakerClientTypes {
    /// A collection of settings that apply to an RSessionGateway app.
    public struct RSessionAppSettings: Swift.Equatable {

    }

}

extension SageMakerClientTypes {
    public enum RStudioServerProAccessStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [RStudioServerProAccessStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RStudioServerProAccessStatus(rawValue: rawValue) ?? RStudioServerProAccessStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.RStudioServerProAppSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessStatus = "AccessStatus"
        case userGroup = "UserGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessStatus = accessStatus {
            try encodeContainer.encode(accessStatus.rawValue, forKey: .accessStatus)
        }
        if let userGroup = userGroup {
            try encodeContainer.encode(userGroup.rawValue, forKey: .userGroup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RStudioServerProAccessStatus.self, forKey: .accessStatus)
        accessStatus = accessStatusDecoded
        let userGroupDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RStudioServerProUserGroup.self, forKey: .userGroup)
        userGroup = userGroupDecoded
    }
}

extension SageMakerClientTypes {
    /// A collection of settings that configure user interaction with the RStudioServerPro app. RStudioServerProAppSettings cannot be updated. The RStudioServerPro app must be deleted and a new one created to make any changes.
    public struct RStudioServerProAppSettings: Swift.Equatable {
        /// Indicates whether the current user has access to the RStudioServerPro app.
        public var accessStatus: SageMakerClientTypes.RStudioServerProAccessStatus?
        /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to `User`. The `Admin` value allows the user access to the RStudio Administrative Dashboard.
        public var userGroup: SageMakerClientTypes.RStudioServerProUserGroup?

        public init (
            accessStatus: SageMakerClientTypes.RStudioServerProAccessStatus? = nil,
            userGroup: SageMakerClientTypes.RStudioServerProUserGroup? = nil
        )
        {
            self.accessStatus = accessStatus
            self.userGroup = userGroup
        }
    }

}

extension SageMakerClientTypes.RStudioServerProDomainSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultResourceSpec = "DefaultResourceSpec"
        case domainExecutionRoleArn = "DomainExecutionRoleArn"
        case rStudioConnectUrl = "RStudioConnectUrl"
        case rStudioPackageManagerUrl = "RStudioPackageManagerUrl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultResourceSpec = defaultResourceSpec {
            try encodeContainer.encode(defaultResourceSpec, forKey: .defaultResourceSpec)
        }
        if let domainExecutionRoleArn = domainExecutionRoleArn {
            try encodeContainer.encode(domainExecutionRoleArn, forKey: .domainExecutionRoleArn)
        }
        if let rStudioConnectUrl = rStudioConnectUrl {
            try encodeContainer.encode(rStudioConnectUrl, forKey: .rStudioConnectUrl)
        }
        if let rStudioPackageManagerUrl = rStudioPackageManagerUrl {
            try encodeContainer.encode(rStudioPackageManagerUrl, forKey: .rStudioPackageManagerUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainExecutionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainExecutionRoleArn)
        domainExecutionRoleArn = domainExecutionRoleArnDecoded
        let rStudioConnectUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rStudioConnectUrl)
        rStudioConnectUrl = rStudioConnectUrlDecoded
        let rStudioPackageManagerUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rStudioPackageManagerUrl)
        rStudioPackageManagerUrl = rStudioPackageManagerUrlDecoded
        let defaultResourceSpecDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceSpec.self, forKey: .defaultResourceSpec)
        defaultResourceSpec = defaultResourceSpecDecoded
    }
}

extension SageMakerClientTypes {
    /// A collection of settings that configure the RStudioServerPro Domain-level app.
    public struct RStudioServerProDomainSettings: Swift.Equatable {
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The ARN of the execution role for the RStudioServerPro Domain-level app.
        /// This member is required.
        public var domainExecutionRoleArn: Swift.String?
        /// A URL pointing to an RStudio Connect server.
        public var rStudioConnectUrl: Swift.String?
        /// A URL pointing to an RStudio Package Manager server.
        public var rStudioPackageManagerUrl: Swift.String?

        public init (
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            domainExecutionRoleArn: Swift.String? = nil,
            rStudioConnectUrl: Swift.String? = nil,
            rStudioPackageManagerUrl: Swift.String? = nil
        )
        {
            self.defaultResourceSpec = defaultResourceSpec
            self.domainExecutionRoleArn = domainExecutionRoleArn
            self.rStudioConnectUrl = rStudioConnectUrl
            self.rStudioPackageManagerUrl = rStudioPackageManagerUrl
        }
    }

}

extension SageMakerClientTypes.RStudioServerProDomainSettingsForUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultResourceSpec = "DefaultResourceSpec"
        case domainExecutionRoleArn = "DomainExecutionRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultResourceSpec = defaultResourceSpec {
            try encodeContainer.encode(defaultResourceSpec, forKey: .defaultResourceSpec)
        }
        if let domainExecutionRoleArn = domainExecutionRoleArn {
            try encodeContainer.encode(domainExecutionRoleArn, forKey: .domainExecutionRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainExecutionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainExecutionRoleArn)
        domainExecutionRoleArn = domainExecutionRoleArnDecoded
        let defaultResourceSpecDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceSpec.self, forKey: .defaultResourceSpec)
        defaultResourceSpec = defaultResourceSpecDecoded
    }
}

extension SageMakerClientTypes {
    /// A collection of settings that update the current configuration for the RStudioServerPro Domain-level app.
    public struct RStudioServerProDomainSettingsForUpdate: Swift.Equatable {
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The execution role for the RStudioServerPro Domain-level app.
        /// This member is required.
        public var domainExecutionRoleArn: Swift.String?

        public init (
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            domainExecutionRoleArn: Swift.String? = nil
        )
        {
            self.defaultResourceSpec = defaultResourceSpec
            self.domainExecutionRoleArn = domainExecutionRoleArn
        }
    }

}

extension SageMakerClientTypes {
    public enum RStudioServerProUserGroup: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case admin
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [RStudioServerProUserGroup] {
            return [
                .admin,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .admin: return "R_STUDIO_ADMIN"
            case .user: return "R_STUDIO_USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RStudioServerProUserGroup(rawValue: rawValue) ?? RStudioServerProUserGroup.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.RecommendationJobInputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointConfigurations = "EndpointConfigurations"
        case jobDurationInSeconds = "JobDurationInSeconds"
        case modelPackageVersionArn = "ModelPackageVersionArn"
        case resourceLimit = "ResourceLimit"
        case trafficPattern = "TrafficPattern"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointConfigurations = endpointConfigurations {
            var endpointConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .endpointConfigurations)
            for endpointinputconfigurations0 in endpointConfigurations {
                try endpointConfigurationsContainer.encode(endpointinputconfigurations0)
            }
        }
        if let jobDurationInSeconds = jobDurationInSeconds {
            try encodeContainer.encode(jobDurationInSeconds, forKey: .jobDurationInSeconds)
        }
        if let modelPackageVersionArn = modelPackageVersionArn {
            try encodeContainer.encode(modelPackageVersionArn, forKey: .modelPackageVersionArn)
        }
        if let resourceLimit = resourceLimit {
            try encodeContainer.encode(resourceLimit, forKey: .resourceLimit)
        }
        if let trafficPattern = trafficPattern {
            try encodeContainer.encode(trafficPattern, forKey: .trafficPattern)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageVersionArn)
        modelPackageVersionArn = modelPackageVersionArnDecoded
        let jobDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .jobDurationInSeconds)
        jobDurationInSeconds = jobDurationInSecondsDecoded
        let trafficPatternDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrafficPattern.self, forKey: .trafficPattern)
        trafficPattern = trafficPatternDecoded
        let resourceLimitDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobResourceLimit.self, forKey: .resourceLimit)
        resourceLimit = resourceLimitDecoded
        let endpointConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EndpointInputConfiguration?].self, forKey: .endpointConfigurations)
        var endpointConfigurationsDecoded0:[SageMakerClientTypes.EndpointInputConfiguration]? = nil
        if let endpointConfigurationsContainer = endpointConfigurationsContainer {
            endpointConfigurationsDecoded0 = [SageMakerClientTypes.EndpointInputConfiguration]()
            for structure0 in endpointConfigurationsContainer {
                if let structure0 = structure0 {
                    endpointConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        endpointConfigurations = endpointConfigurationsDecoded0
    }
}

extension SageMakerClientTypes {
    /// The input configuration of the recommendation job.
    public struct RecommendationJobInputConfig: Swift.Equatable {
        /// Specifies the endpoint configuration to use for a job.
        public var endpointConfigurations: [SageMakerClientTypes.EndpointInputConfiguration]?
        /// Specifies the maximum duration of the job, in seconds.>
        public var jobDurationInSeconds: Swift.Int?
        /// The Amazon Resource Name (ARN) of a versioned model package.
        /// This member is required.
        public var modelPackageVersionArn: Swift.String?
        /// Defines the resource limit of the job.
        public var resourceLimit: SageMakerClientTypes.RecommendationJobResourceLimit?
        /// Specifies the traffic pattern of the job.
        public var trafficPattern: SageMakerClientTypes.TrafficPattern?

        public init (
            endpointConfigurations: [SageMakerClientTypes.EndpointInputConfiguration]? = nil,
            jobDurationInSeconds: Swift.Int? = nil,
            modelPackageVersionArn: Swift.String? = nil,
            resourceLimit: SageMakerClientTypes.RecommendationJobResourceLimit? = nil,
            trafficPattern: SageMakerClientTypes.TrafficPattern? = nil
        )
        {
            self.endpointConfigurations = endpointConfigurations
            self.jobDurationInSeconds = jobDurationInSeconds
            self.modelPackageVersionArn = modelPackageVersionArn
            self.resourceLimit = resourceLimit
            self.trafficPattern = trafficPattern
        }
    }

}

extension SageMakerClientTypes.RecommendationJobResourceLimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxNumberOfTests = "MaxNumberOfTests"
        case maxParallelOfTests = "MaxParallelOfTests"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxNumberOfTests = maxNumberOfTests {
            try encodeContainer.encode(maxNumberOfTests, forKey: .maxNumberOfTests)
        }
        if let maxParallelOfTests = maxParallelOfTests {
            try encodeContainer.encode(maxParallelOfTests, forKey: .maxParallelOfTests)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxNumberOfTestsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxNumberOfTests)
        maxNumberOfTests = maxNumberOfTestsDecoded
        let maxParallelOfTestsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxParallelOfTests)
        maxParallelOfTests = maxParallelOfTestsDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the maximum number of jobs that can run in parallel and the maximum number of jobs that can run.
    public struct RecommendationJobResourceLimit: Swift.Equatable {
        /// Defines the maximum number of load tests.
        public var maxNumberOfTests: Swift.Int?
        /// Defines the maximum number of parallel load tests.
        public var maxParallelOfTests: Swift.Int?

        public init (
            maxNumberOfTests: Swift.Int? = nil,
            maxParallelOfTests: Swift.Int? = nil
        )
        {
            self.maxNumberOfTests = maxNumberOfTests
            self.maxParallelOfTests = maxParallelOfTests
        }
    }

}

extension SageMakerClientTypes {
    public enum RecommendationJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case pending
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .pending,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationJobStatus(rawValue: rawValue) ?? RecommendationJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.RecommendationJobStoppingConditions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxInvocations = "MaxInvocations"
        case modelLatencyThresholds = "ModelLatencyThresholds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxInvocations != 0 {
            try encodeContainer.encode(maxInvocations, forKey: .maxInvocations)
        }
        if let modelLatencyThresholds = modelLatencyThresholds {
            var modelLatencyThresholdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .modelLatencyThresholds)
            for modellatencythresholds0 in modelLatencyThresholds {
                try modelLatencyThresholdsContainer.encode(modellatencythresholds0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxInvocationsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxInvocations)
        maxInvocations = maxInvocationsDecoded
        let modelLatencyThresholdsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelLatencyThreshold?].self, forKey: .modelLatencyThresholds)
        var modelLatencyThresholdsDecoded0:[SageMakerClientTypes.ModelLatencyThreshold]? = nil
        if let modelLatencyThresholdsContainer = modelLatencyThresholdsContainer {
            modelLatencyThresholdsDecoded0 = [SageMakerClientTypes.ModelLatencyThreshold]()
            for structure0 in modelLatencyThresholdsContainer {
                if let structure0 = structure0 {
                    modelLatencyThresholdsDecoded0?.append(structure0)
                }
            }
        }
        modelLatencyThresholds = modelLatencyThresholdsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Specifies conditions for stopping a job. When a job reaches a stopping condition limit, SageMaker ends the job.
    public struct RecommendationJobStoppingConditions: Swift.Equatable {
        /// The maximum number of requests per minute expected for the endpoint.
        public var maxInvocations: Swift.Int
        /// The interval of time taken by a model to respond as viewed from SageMaker. The interval includes the local communication time taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.
        public var modelLatencyThresholds: [SageMakerClientTypes.ModelLatencyThreshold]?

        public init (
            maxInvocations: Swift.Int = 0,
            modelLatencyThresholds: [SageMakerClientTypes.ModelLatencyThreshold]? = nil
        )
        {
            self.maxInvocations = maxInvocations
            self.modelLatencyThresholds = modelLatencyThresholds
        }
    }

}

extension SageMakerClientTypes {
    public enum RecommendationJobType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case advanced
        case `default`
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationJobType] {
            return [
                .advanced,
                .default,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .advanced: return "Advanced"
            case .default: return "Default"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationJobType(rawValue: rawValue) ?? RecommendationJobType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.RecommendationMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case costPerHour = "CostPerHour"
        case costPerInference = "CostPerInference"
        case maxInvocations = "MaxInvocations"
        case modelLatency = "ModelLatency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if costPerHour != 0.0 {
            try encodeContainer.encode(costPerHour, forKey: .costPerHour)
        }
        if costPerInference != 0.0 {
            try encodeContainer.encode(costPerInference, forKey: .costPerInference)
        }
        if maxInvocations != 0 {
            try encodeContainer.encode(maxInvocations, forKey: .maxInvocations)
        }
        if modelLatency != 0 {
            try encodeContainer.encode(modelLatency, forKey: .modelLatency)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let costPerHourDecoded = try containerValues.decode(Swift.Float.self, forKey: .costPerHour)
        costPerHour = costPerHourDecoded
        let costPerInferenceDecoded = try containerValues.decode(Swift.Float.self, forKey: .costPerInference)
        costPerInference = costPerInferenceDecoded
        let maxInvocationsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxInvocations)
        maxInvocations = maxInvocationsDecoded
        let modelLatencyDecoded = try containerValues.decode(Swift.Int.self, forKey: .modelLatency)
        modelLatency = modelLatencyDecoded
    }
}

extension SageMakerClientTypes {
    /// The metrics of recommendations.
    public struct RecommendationMetrics: Swift.Equatable {
        /// Defines the cost per hour for the instance.
        /// This member is required.
        public var costPerHour: Swift.Float
        /// Defines the cost per inference for the instance .
        /// This member is required.
        public var costPerInference: Swift.Float
        /// The expected maximum number of requests per minute for the instance.
        /// This member is required.
        public var maxInvocations: Swift.Int
        /// The expected model latency at maximum invocation per minute for the instance.
        /// This member is required.
        public var modelLatency: Swift.Int

        public init (
            costPerHour: Swift.Float = 0.0,
            costPerInference: Swift.Float = 0.0,
            maxInvocations: Swift.Int = 0,
            modelLatency: Swift.Int = 0
        )
        {
            self.costPerHour = costPerHour
            self.costPerInference = costPerInference
            self.maxInvocations = maxInvocations
            self.modelLatency = modelLatency
        }
    }

}

extension SageMakerClientTypes {
    public enum RecordWrapper: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case recordio
        case sdkUnknown(Swift.String)

        public static var allCases: [RecordWrapper] {
            return [
                .none,
                .recordio,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "None"
            case .recordio: return "RecordIO"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecordWrapper(rawValue: rawValue) ?? RecordWrapper.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.RedshiftDatasetDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case clusterRoleArn = "ClusterRoleArn"
        case database = "Database"
        case dbUser = "DbUser"
        case kmsKeyId = "KmsKeyId"
        case outputCompression = "OutputCompression"
        case outputFormat = "OutputFormat"
        case outputS3Uri = "OutputS3Uri"
        case queryString = "QueryString"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let clusterRoleArn = clusterRoleArn {
            try encodeContainer.encode(clusterRoleArn, forKey: .clusterRoleArn)
        }
        if let database = database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let dbUser = dbUser {
            try encodeContainer.encode(dbUser, forKey: .dbUser)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let outputCompression = outputCompression {
            try encodeContainer.encode(outputCompression.rawValue, forKey: .outputCompression)
        }
        if let outputFormat = outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let outputS3Uri = outputS3Uri {
            try encodeContainer.encode(outputS3Uri, forKey: .outputS3Uri)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .database)
        database = databaseDecoded
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let clusterRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterRoleArn)
        clusterRoleArn = clusterRoleArnDecoded
        let outputS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Uri)
        outputS3Uri = outputS3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RedshiftResultFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let outputCompressionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RedshiftResultCompressionType.self, forKey: .outputCompression)
        outputCompression = outputCompressionDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration for Redshift Dataset Definition input.
    public struct RedshiftDatasetDefinition: Swift.Equatable {
        /// The Redshift cluster Identifier.
        /// This member is required.
        public var clusterId: Swift.String?
        /// The IAM role attached to your Redshift cluster that Amazon SageMaker uses to generate datasets.
        /// This member is required.
        public var clusterRoleArn: Swift.String?
        /// The name of the Redshift database used in Redshift query execution.
        /// This member is required.
        public var database: Swift.String?
        /// The database user name used in Redshift query execution.
        /// This member is required.
        public var dbUser: Swift.String?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data from a Redshift execution.
        public var kmsKeyId: Swift.String?
        /// The compression used for Redshift query results.
        public var outputCompression: SageMakerClientTypes.RedshiftResultCompressionType?
        /// The data storage format for Redshift query results.
        /// This member is required.
        public var outputFormat: SageMakerClientTypes.RedshiftResultFormat?
        /// The location in Amazon S3 where the Redshift query results are stored.
        /// This member is required.
        public var outputS3Uri: Swift.String?
        /// The SQL query statements to be executed.
        /// This member is required.
        public var queryString: Swift.String?

        public init (
            clusterId: Swift.String? = nil,
            clusterRoleArn: Swift.String? = nil,
            database: Swift.String? = nil,
            dbUser: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            outputCompression: SageMakerClientTypes.RedshiftResultCompressionType? = nil,
            outputFormat: SageMakerClientTypes.RedshiftResultFormat? = nil,
            outputS3Uri: Swift.String? = nil,
            queryString: Swift.String? = nil
        )
        {
            self.clusterId = clusterId
            self.clusterRoleArn = clusterRoleArn
            self.database = database
            self.dbUser = dbUser
            self.kmsKeyId = kmsKeyId
            self.outputCompression = outputCompression
            self.outputFormat = outputFormat
            self.outputS3Uri = outputS3Uri
            self.queryString = queryString
        }
    }

}

extension SageMakerClientTypes {
    /// The compression used for Redshift query results.
    public enum RedshiftResultCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bzip2
        case gzip
        case `none`
        case snappy
        case zstd
        case sdkUnknown(Swift.String)

        public static var allCases: [RedshiftResultCompressionType] {
            return [
                .bzip2,
                .gzip,
                .none,
                .snappy,
                .zstd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bzip2: return "BZIP2"
            case .gzip: return "GZIP"
            case .none: return "None"
            case .snappy: return "SNAPPY"
            case .zstd: return "ZSTD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RedshiftResultCompressionType(rawValue: rawValue) ?? RedshiftResultCompressionType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    /// The data storage format for Redshift query results.
    public enum RedshiftResultFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [RedshiftResultFormat] {
            return [
                .csv,
                .parquet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .parquet: return "PARQUET"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RedshiftResultFormat(rawValue: rawValue) ?? RedshiftResultFormat.sdkUnknown(rawValue)
        }
    }
}

extension RegisterDevicesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case devices = "Devices"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let devices = devices {
            var devicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .devices)
            for devices0 in devices {
                try devicesContainer.encode(devices0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension RegisterDevicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterDevicesInput: Swift.Equatable {
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// A list of devices to register with SageMaker Edge Manager.
    /// This member is required.
    public var devices: [SageMakerClientTypes.Device]?
    /// The tags associated with devices.
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        deviceFleetName: Swift.String? = nil,
        devices: [SageMakerClientTypes.Device]? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.devices = devices
        self.tags = tags
    }
}

struct RegisterDevicesInputBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
    let devices: [SageMakerClientTypes.Device]?
    let tags: [SageMakerClientTypes.Tag]?
}

extension RegisterDevicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case devices = "Devices"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let devicesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Device?].self, forKey: .devices)
        var devicesDecoded0:[SageMakerClientTypes.Device]? = nil
        if let devicesContainer = devicesContainer {
            devicesDecoded0 = [SageMakerClientTypes.Device]()
            for structure0 in devicesContainer {
                if let structure0 = structure0 {
                    devicesDecoded0?.append(structure0)
                }
            }
        }
        devices = devicesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension RegisterDevicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterDevicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterDevicesOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterDevicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RegisterDevicesOutputResponse: Swift.Equatable {

}

extension SageMakerClientTypes.RegisterModelStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension SageMakerClientTypes {
    /// Metadata for a register model job step.
    public struct RegisterModelStepMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the model package.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension RenderUiTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiArn = "HumanTaskUiArn"
        case roleArn = "RoleArn"
        case task = "Task"
        case uiTemplate = "UiTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskUiArn = humanTaskUiArn {
            try encodeContainer.encode(humanTaskUiArn, forKey: .humanTaskUiArn)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let task = task {
            try encodeContainer.encode(task, forKey: .task)
        }
        if let uiTemplate = uiTemplate {
            try encodeContainer.encode(uiTemplate, forKey: .uiTemplate)
        }
    }
}

extension RenderUiTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RenderUiTemplateInput: Swift.Equatable {
    /// The HumanTaskUiArn of the worker UI that you want to render. Do not provide a HumanTaskUiArn if you use the UiTemplate parameter. See a list of available Human Ui Amazon Resource Names (ARNs) in [UiConfig].
    public var humanTaskUiArn: Swift.String?
    /// The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A RenderableTask object containing a representative task to render.
    /// This member is required.
    public var task: SageMakerClientTypes.RenderableTask?
    /// A Template object containing the worker UI template to render.
    public var uiTemplate: SageMakerClientTypes.UiTemplate?

    public init (
        humanTaskUiArn: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        task: SageMakerClientTypes.RenderableTask? = nil,
        uiTemplate: SageMakerClientTypes.UiTemplate? = nil
    )
    {
        self.humanTaskUiArn = humanTaskUiArn
        self.roleArn = roleArn
        self.task = task
        self.uiTemplate = uiTemplate
    }
}

struct RenderUiTemplateInputBody: Swift.Equatable {
    let uiTemplate: SageMakerClientTypes.UiTemplate?
    let task: SageMakerClientTypes.RenderableTask?
    let roleArn: Swift.String?
    let humanTaskUiArn: Swift.String?
}

extension RenderUiTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiArn = "HumanTaskUiArn"
        case roleArn = "RoleArn"
        case task = "Task"
        case uiTemplate = "UiTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uiTemplateDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UiTemplate.self, forKey: .uiTemplate)
        uiTemplate = uiTemplateDecoded
        let taskDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RenderableTask.self, forKey: .task)
        task = taskDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let humanTaskUiArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiArn)
        humanTaskUiArn = humanTaskUiArnDecoded
    }
}

extension RenderUiTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RenderUiTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RenderUiTemplateOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension RenderUiTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RenderUiTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.renderedContent = output.renderedContent
        } else {
            self.errors = nil
            self.renderedContent = nil
        }
    }
}

public struct RenderUiTemplateOutputResponse: Swift.Equatable {
    /// A list of one or more RenderingError objects if any were encountered while rendering the template. If there were no errors, the list is empty.
    /// This member is required.
    public var errors: [SageMakerClientTypes.RenderingError]?
    /// A Liquid template that renders the HTML for the worker UI.
    /// This member is required.
    public var renderedContent: Swift.String?

    public init (
        errors: [SageMakerClientTypes.RenderingError]? = nil,
        renderedContent: Swift.String? = nil
    )
    {
        self.errors = errors
        self.renderedContent = renderedContent
    }
}

struct RenderUiTemplateOutputResponseBody: Swift.Equatable {
    let renderedContent: Swift.String?
    let errors: [SageMakerClientTypes.RenderingError]?
}

extension RenderUiTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case renderedContent = "RenderedContent"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let renderedContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renderedContent)
        renderedContent = renderedContentDecoded
        let errorsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.RenderingError?].self, forKey: .errors)
        var errorsDecoded0:[SageMakerClientTypes.RenderingError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [SageMakerClientTypes.RenderingError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension SageMakerClientTypes.RenderableTask: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input = "Input"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains input values for a task.
    public struct RenderableTask: Swift.Equatable {
        /// A JSON object that contains values for the variables defined in the template. It is made available to the template under the substitution variable task.input. For example, if you define a variable task.input.text in your template, you can supply the variable in the JSON object as "text": "sample text".
        /// This member is required.
        public var input: Swift.String?

        public init (
            input: Swift.String? = nil
        )
        {
            self.input = input
        }
    }

}

extension SageMakerClientTypes.RenderingError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SageMakerClientTypes {
    /// A description of an error that occurred while rendering the template.
    public struct RenderingError: Swift.Equatable {
        /// A unique identifier for a specific class of errors.
        /// This member is required.
        public var code: Swift.String?
        /// A human-readable message describing the error.
        /// This member is required.
        public var message: Swift.String?

        public init (
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension SageMakerClientTypes {
    public enum RepositoryAccessMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case platform
        case vpc
        case sdkUnknown(Swift.String)

        public static var allCases: [RepositoryAccessMode] {
            return [
                .platform,
                .vpc,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .platform: return "Platform"
            case .vpc: return "Vpc"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RepositoryAccessMode(rawValue: rawValue) ?? RepositoryAccessMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.RepositoryAuthConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case repositoryCredentialsProviderArn = "RepositoryCredentialsProviderArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let repositoryCredentialsProviderArn = repositoryCredentialsProviderArn {
            try encodeContainer.encode(repositoryCredentialsProviderArn, forKey: .repositoryCredentialsProviderArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryCredentialsProviderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryCredentialsProviderArn)
        repositoryCredentialsProviderArn = repositoryCredentialsProviderArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field of the ImageConfig object that you passed to a call to CreateModel and the private Docker registry where the model image is hosted requires authentication.
    public struct RepositoryAuthConfig: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of an Amazon Web Services Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an Amazon Web Services Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the Amazon Web Services Lambda Developer Guide.
        /// This member is required.
        public var repositoryCredentialsProviderArn: Swift.String?

        public init (
            repositoryCredentialsProviderArn: Swift.String? = nil
        )
        {
            self.repositoryCredentialsProviderArn = repositoryCredentialsProviderArn
        }
    }

}

extension SageMakerClientTypes.ResolvedAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobObjective = "AutoMLJobObjective"
        case completionCriteria = "CompletionCriteria"
        case problemType = "ProblemType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobObjective = autoMLJobObjective {
            try encodeContainer.encode(autoMLJobObjective, forKey: .autoMLJobObjective)
        }
        if let completionCriteria = completionCriteria {
            try encodeContainer.encode(completionCriteria, forKey: .completionCriteria)
        }
        if let problemType = problemType {
            try encodeContainer.encode(problemType.rawValue, forKey: .problemType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobObjectiveDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobObjective.self, forKey: .autoMLJobObjective)
        autoMLJobObjective = autoMLJobObjectiveDecoded
        let problemTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProblemType.self, forKey: .problemType)
        problemType = problemTypeDecoded
        let completionCriteriaDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobCompletionCriteria.self, forKey: .completionCriteria)
        completionCriteria = completionCriteriaDecoded
    }
}

extension SageMakerClientTypes {
    /// The resolved attributes.
    public struct ResolvedAttributes: Swift.Equatable {
        /// Specifies a metric to minimize or maximize as the objective of a job.
        public var autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
        /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?
        /// The problem type.
        public var problemType: SageMakerClientTypes.ProblemType?

        public init (
            autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective? = nil,
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil,
            problemType: SageMakerClientTypes.ProblemType? = nil
        )
        {
            self.autoMLJobObjective = autoMLJobObjective
            self.completionCriteria = completionCriteria
            self.problemType = problemType
        }
    }

}

extension SageMakerClientTypes.ResourceConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if instanceCount != 0 {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let volumeKmsKeyId = volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if volumeSizeInGB != 0 {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let volumeSizeInGBDecoded = try containerValues.decode(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the resources, including ML compute instances and ML storage volumes, to use for model training.
    public struct ResourceConfig: Swift.Equatable {
        /// The number of ML compute instances to use. For distributed training, provide a value greater than 1.
        /// This member is required.
        public var instanceCount: Swift.Int
        /// The ML compute instance type.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.TrainingInstanceType?
        /// The Amazon Web Services KMS key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the training job. Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a VolumeKmsKeyId when using an instance type with local storage. For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes). For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html). The VolumeKmsKeyId can be in any of the following formats:
        ///
        /// * // KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// The size of the ML storage volume that you want to provision. ML storage volumes store model artifacts and incremental states. Training algorithms might also use the ML storage volume for scratch space. If you want to store the training data in the ML storage volume, choose File as the TrainingInputMode in the algorithm specification. You must specify sufficient ML storage for your scenario. Amazon SageMaker supports only the General Purpose SSD (gp2) ML storage volume type. Certain Nitro-based instances include local storage with a fixed total size, dependent on the instance type. When using these instances for training, Amazon SageMaker mounts the local instance storage instead of Amazon EBS gp2 storage. You can't request a VolumeSizeInGB greater than the total size of the local instance storage. For a list of instance types that support local instance storage, including the total size per instance type, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes).
        /// This member is required.
        public var volumeSizeInGB: Swift.Int

        public init (
            instanceCount: Swift.Int = 0,
            instanceType: SageMakerClientTypes.TrainingInstanceType? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            volumeSizeInGB: Swift.Int = 0
        )
        {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension ResourceInUse {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceInUseBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Resource being accessed is in use.
public struct ResourceInUse: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceInUseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceLimitExceeded {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceLimitExceededBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have exceeded an Amazon SageMaker resource limit. For example, you might have too many training jobs created.
public struct ResourceLimitExceeded: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceLimitExceededBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceLimitExceededBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SageMakerClientTypes.ResourceLimits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxNumberOfTrainingJobs = "MaxNumberOfTrainingJobs"
        case maxParallelTrainingJobs = "MaxParallelTrainingJobs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxNumberOfTrainingJobs != 0 {
            try encodeContainer.encode(maxNumberOfTrainingJobs, forKey: .maxNumberOfTrainingJobs)
        }
        if maxParallelTrainingJobs != 0 {
            try encodeContainer.encode(maxParallelTrainingJobs, forKey: .maxParallelTrainingJobs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxNumberOfTrainingJobsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxNumberOfTrainingJobs)
        maxNumberOfTrainingJobs = maxNumberOfTrainingJobsDecoded
        let maxParallelTrainingJobsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxParallelTrainingJobs)
        maxParallelTrainingJobs = maxParallelTrainingJobsDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the maximum number of training jobs and parallel training jobs that a hyperparameter tuning job can launch.
    public struct ResourceLimits: Swift.Equatable {
        /// The maximum number of training jobs that a hyperparameter tuning job can launch.
        /// This member is required.
        public var maxNumberOfTrainingJobs: Swift.Int
        /// The maximum number of concurrent training jobs that a hyperparameter tuning job can launch.
        /// This member is required.
        public var maxParallelTrainingJobs: Swift.Int

        public init (
            maxNumberOfTrainingJobs: Swift.Int = 0,
            maxParallelTrainingJobs: Swift.Int = 0
        )
        {
            self.maxNumberOfTrainingJobs = maxNumberOfTrainingJobs
            self.maxParallelTrainingJobs = maxParallelTrainingJobs
        }
    }

}

extension ResourceNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Resource being access is not found.
public struct ResourceNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SageMakerClientTypes.ResourceSpec: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceType = "InstanceType"
        case lifecycleConfigArn = "LifecycleConfigArn"
        case sageMakerImageArn = "SageMakerImageArn"
        case sageMakerImageVersionArn = "SageMakerImageVersionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let lifecycleConfigArn = lifecycleConfigArn {
            try encodeContainer.encode(lifecycleConfigArn, forKey: .lifecycleConfigArn)
        }
        if let sageMakerImageArn = sageMakerImageArn {
            try encodeContainer.encode(sageMakerImageArn, forKey: .sageMakerImageArn)
        }
        if let sageMakerImageVersionArn = sageMakerImageVersionArn {
            try encodeContainer.encode(sageMakerImageVersionArn, forKey: .sageMakerImageVersionArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sageMakerImageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sageMakerImageArn)
        sageMakerImageArn = sageMakerImageArnDecoded
        let sageMakerImageVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sageMakerImageVersionArn)
        sageMakerImageVersionArn = sageMakerImageVersionArnDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let lifecycleConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleConfigArn)
        lifecycleConfigArn = lifecycleConfigArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
    public struct ResourceSpec: Swift.Equatable {
        /// The instance type that the image version runs on.
        public var instanceType: SageMakerClientTypes.AppInstanceType?
        /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        public var lifecycleConfigArn: Swift.String?
        /// The ARN of the SageMaker image that the image version belongs to.
        public var sageMakerImageArn: Swift.String?
        /// The ARN of the image version created on the instance.
        public var sageMakerImageVersionArn: Swift.String?

        public init (
            instanceType: SageMakerClientTypes.AppInstanceType? = nil,
            lifecycleConfigArn: Swift.String? = nil,
            sageMakerImageArn: Swift.String? = nil,
            sageMakerImageVersionArn: Swift.String? = nil
        )
        {
            self.instanceType = instanceType
            self.lifecycleConfigArn = lifecycleConfigArn
            self.sageMakerImageArn = sageMakerImageArn
            self.sageMakerImageVersionArn = sageMakerImageVersionArn
        }
    }

}

extension SageMakerClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case endpoint
        case experiment
        case experimentTrial
        case experimentTrialComponent
        case featureGroup
        case modelPackage
        case modelPackageGroup
        case pipeline
        case pipelineExecution
        case project
        case trainingJob
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .endpoint,
                .experiment,
                .experimentTrial,
                .experimentTrialComponent,
                .featureGroup,
                .modelPackage,
                .modelPackageGroup,
                .pipeline,
                .pipelineExecution,
                .project,
                .trainingJob,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .endpoint: return "Endpoint"
            case .experiment: return "Experiment"
            case .experimentTrial: return "ExperimentTrial"
            case .experimentTrialComponent: return "ExperimentTrialComponent"
            case .featureGroup: return "FeatureGroup"
            case .modelPackage: return "ModelPackage"
            case .modelPackageGroup: return "ModelPackageGroup"
            case .pipeline: return "Pipeline"
            case .pipelineExecution: return "PipelineExecution"
            case .project: return "Project"
            case .trainingJob: return "TrainingJob"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.RetentionPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case homeEfsFileSystem = "HomeEfsFileSystem"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let homeEfsFileSystem = homeEfsFileSystem {
            try encodeContainer.encode(homeEfsFileSystem.rawValue, forKey: .homeEfsFileSystem)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let homeEfsFileSystemDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RetentionType.self, forKey: .homeEfsFileSystem)
        homeEfsFileSystem = homeEfsFileSystemDecoded
    }
}

extension SageMakerClientTypes {
    /// The retention policy for data stored on an Amazon Elastic File System (EFS) volume.
    public struct RetentionPolicy: Swift.Equatable {
        /// The default is Retain, which specifies to keep the data stored on the EFS volume. Specify Delete to delete the data stored on the EFS volume.
        public var homeEfsFileSystem: SageMakerClientTypes.RetentionType?

        public init (
            homeEfsFileSystem: SageMakerClientTypes.RetentionType? = nil
        )
        {
            self.homeEfsFileSystem = homeEfsFileSystem
        }
    }

}

extension SageMakerClientTypes {
    public enum RetentionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case retain
        case sdkUnknown(Swift.String)

        public static var allCases: [RetentionType] {
            return [
                .delete,
                .retain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "Delete"
            case .retain: return "Retain"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RetentionType(rawValue: rawValue) ?? RetentionType.sdkUnknown(rawValue)
        }
    }
}

extension RetryPipelineExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
    }
}

extension RetryPipelineExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RetryPipelineExecutionInput: Swift.Equatable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct RetryPipelineExecutionInputBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
    let clientRequestToken: Swift.String?
}

extension RetryPipelineExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension RetryPipelineExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RetryPipelineExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RetryPipelineExecutionOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension RetryPipelineExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RetryPipelineExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecutionArn = output.pipelineExecutionArn
        } else {
            self.pipelineExecutionArn = nil
        }
    }
}

public struct RetryPipelineExecutionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init (
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct RetryPipelineExecutionOutputResponseBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
}

extension RetryPipelineExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
    }
}

extension SageMakerClientTypes.RetryStrategy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumRetryAttempts = "MaximumRetryAttempts"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumRetryAttempts != 0 {
            try encodeContainer.encode(maximumRetryAttempts, forKey: .maximumRetryAttempts)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumRetryAttemptsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maximumRetryAttempts)
        maximumRetryAttempts = maximumRetryAttemptsDecoded
    }
}

extension SageMakerClientTypes {
    /// The retry strategy to use when a training job fails due to an InternalServerError. RetryStrategy is specified as part of the CreateTrainingJob and CreateHyperParameterTuningJob requests. You can add the StoppingCondition parameter to the request to limit the training time for the complete job.
    public struct RetryStrategy: Swift.Equatable {
        /// The number of times to retry the job. When the job is retried, it's SecondaryStatus is changed to STARTING.
        /// This member is required.
        public var maximumRetryAttempts: Swift.Int

        public init (
            maximumRetryAttempts: Swift.Int = 0
        )
        {
            self.maximumRetryAttempts = maximumRetryAttempts
        }
    }

}

extension SageMakerClientTypes {
    public enum RootAccess: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [RootAccess] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RootAccess(rawValue: rawValue) ?? RootAccess.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum RuleEvaluationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case error
        case inProgress
        case issuesFound
        case noIssuesFound
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleEvaluationStatus] {
            return [
                .error,
                .inProgress,
                .issuesFound,
                .noIssuesFound,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .error: return "Error"
            case .inProgress: return "InProgress"
            case .issuesFound: return "IssuesFound"
            case .noIssuesFound: return "NoIssuesFound"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RuleEvaluationStatus(rawValue: rawValue) ?? RuleEvaluationStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum S3DataDistribution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullyReplicated
        case shardedByS3Key
        case sdkUnknown(Swift.String)

        public static var allCases: [S3DataDistribution] {
            return [
                .fullyReplicated,
                .shardedByS3Key,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullyReplicated: return "FullyReplicated"
            case .shardedByS3Key: return "ShardedByS3Key"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = S3DataDistribution(rawValue: rawValue) ?? S3DataDistribution.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.S3DataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeNames"
        case s3DataDistributionType = "S3DataDistributionType"
        case s3DataType = "S3DataType"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeNames = attributeNames {
            var attributeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeNames)
            for attributenames0 in attributeNames {
                try attributeNamesContainer.encode(attributenames0)
            }
        }
        if let s3DataDistributionType = s3DataDistributionType {
            try encodeContainer.encode(s3DataDistributionType.rawValue, forKey: .s3DataDistributionType)
        }
        if let s3DataType = s3DataType {
            try encodeContainer.encode(s3DataType.rawValue, forKey: .s3DataType)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3DataTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.S3DataType.self, forKey: .s3DataType)
        s3DataType = s3DataTypeDecoded
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let s3DataDistributionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.S3DataDistribution.self, forKey: .s3DataDistributionType)
        s3DataDistributionType = s3DataDistributionTypeDecoded
        let attributeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributeNames)
        var attributeNamesDecoded0:[Swift.String]? = nil
        if let attributeNamesContainer = attributeNamesContainer {
            attributeNamesDecoded0 = [Swift.String]()
            for string0 in attributeNamesContainer {
                if let string0 = string0 {
                    attributeNamesDecoded0?.append(string0)
                }
            }
        }
        attributeNames = attributeNamesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Describes the S3 data source.
    public struct S3DataSource: Swift.Equatable {
        /// A list of one or more attribute names to use that are found in a specified augmented manifest file.
        public var attributeNames: [Swift.String]?
        /// If you want Amazon SageMaker to replicate the entire dataset on each ML compute instance that is launched for model training, specify FullyReplicated. If you want Amazon SageMaker to replicate a subset of data on each ML compute instance that is launched for model training, specify ShardedByS3Key. If there are n ML compute instances launched for a training job, each instance gets approximately 1/n of the number of S3 objects. In this case, model training on each machine uses only the subset of training data. Don't choose more ML compute instances for training than available S3 objects. If you do, some nodes won't get any data and you will pay for nodes that aren't getting any training data. This applies in both File and Pipe modes. Keep this in mind when developing algorithms. In distributed training, where you use multiple ML compute EC2 instances, you might choose ShardedByS3Key. If the algorithm requires copying training data to the ML storage volume (when TrainingInputMode is set to File), this copies 1/n of the number of objects.
        public var s3DataDistributionType: SageMakerClientTypes.S3DataDistribution?
        /// If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects that match the specified key name prefix for model training. If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for model training. If you choose AugmentedManifestFile, S3Uri identifies an object that is an augmented manifest file in JSON lines format. This file contains the data you want to use for model training. AugmentedManifestFile can only be used if the Channel's input mode is Pipe.
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.S3DataType?
        /// Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest. For example:
        ///
        /// * A key name prefix might look like this: s3://bucketname/exampleprefix
        ///
        /// * A manifest might look like this: s3://bucketname/example.manifest A manifest is an S3 object which is a JSON file consisting of an array of elements. The first element is a prefix which is followed by one or more suffixes. SageMaker appends the suffix elements to the prefix to get a full set of S3Uri. Note that the prefix must be a valid non-empty S3Uri that precludes users from specifying a manifest whose individual S3Uri is sourced from different S3 buckets. The following code example shows a valid manifest format: [ {"prefix": "s3://customer_bucket/some/prefix/"}, "relative/path/to/custdata-1", "relative/path/custdata-2", ... "relative/path/custdata-N"] This JSON is equivalent to the following S3Uri list: s3://customer_bucket/some/prefix/relative/path/to/custdata-1s3://customer_bucket/some/prefix/relative/path/custdata-2...s3://customer_bucket/some/prefix/relative/path/custdata-N The complete set of S3Uri in this manifest is the input data for the channel for this data source. The object that each S3Uri points to must be readable by the IAM role that Amazon SageMaker uses to perform tasks on your behalf.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            attributeNames: [Swift.String]? = nil,
            s3DataDistributionType: SageMakerClientTypes.S3DataDistribution? = nil,
            s3DataType: SageMakerClientTypes.S3DataType? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.attributeNames = attributeNames
            self.s3DataDistributionType = s3DataDistributionType
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    public enum S3DataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case augmentedManifestFile
        case manifestFile
        case s3Prefix
        case sdkUnknown(Swift.String)

        public static var allCases: [S3DataType] {
            return [
                .augmentedManifestFile,
                .manifestFile,
                .s3Prefix,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .augmentedManifestFile: return "AugmentedManifestFile"
            case .manifestFile: return "ManifestFile"
            case .s3Prefix: return "S3Prefix"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = S3DataType(rawValue: rawValue) ?? S3DataType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.S3StorageConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case resolvedOutputS3Uri = "ResolvedOutputS3Uri"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let resolvedOutputS3Uri = resolvedOutputS3Uri {
            try encodeContainer.encode(resolvedOutputS3Uri, forKey: .resolvedOutputS3Uri)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resolvedOutputS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolvedOutputS3Uri)
        resolvedOutputS3Uri = resolvedOutputS3UriDecoded
    }
}

extension SageMakerClientTypes {
    /// The Amazon Simple Storage (Amazon S3) location and and security configuration for OfflineStore.
    public struct S3StorageConfig: Swift.Equatable {
        /// The Amazon Web Services Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location. The IAM roleARN that is passed as a parameter to CreateFeatureGroup must have below permissions to the KmsKeyId:
        ///
        /// * "kms:GenerateDataKey"
        public var kmsKeyId: Swift.String?
        /// The S3 path where offline records are written.
        public var resolvedOutputS3Uri: Swift.String?
        /// The S3 URI, or location in Amazon S3, of OfflineStore. S3 URIs have a format similar to the following: s3://example-bucket/prefix/.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            resolvedOutputS3Uri: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.resolvedOutputS3Uri = resolvedOutputS3Uri
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    public enum SagemakerServicecatalogStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [SagemakerServicecatalogStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SagemakerServicecatalogStatus(rawValue: rawValue) ?? SagemakerServicecatalogStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.ScheduleConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleExpression = "ScheduleExpression"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleExpression = scheduleExpression {
            try encodeContainer.encode(scheduleExpression, forKey: .scheduleExpression)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleExpression)
        scheduleExpression = scheduleExpressionDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration details about the monitoring schedule.
    public struct ScheduleConfig: Swift.Equatable {
        /// A cron expression that describes details about the monitoring schedule. Currently the only supported cron expressions are:
        ///
        /// * If you want to set the job to start every hour, please use the following: Hourly: cron(0 * ? * * *)
        ///
        /// * If you want to start the job daily: cron(0 [00-23] ? * * *)
        ///
        ///
        /// For example, the following are valid cron expressions:
        ///
        /// * Daily at noon UTC: cron(0 12 ? * * *)
        ///
        /// * Daily at midnight UTC: cron(0 0 ? * * *)
        ///
        ///
        /// To support running every 6, 12 hours, the following are also supported: cron(0 [00-23]/[01-24] ? * * *) For example, the following are valid cron expressions:
        ///
        /// * Every 12 hours, starting at 5pm UTC: cron(0 17/12 ? * * *)
        ///
        /// * Every two hours starting at midnight: cron(0 0/2 ? * * *)
        ///
        ///
        ///
        ///
        /// * Even though the cron expression is set to start at 5PM UTC, note that there could be a delay of 0-20 minutes from the actual requested time to run the execution.
        ///
        /// * We recommend that if you would like a daily schedule, you do not provide this parameter. Amazon SageMaker will pick a time for running every day.
        /// This member is required.
        public var scheduleExpression: Swift.String?

        public init (
            scheduleExpression: Swift.String? = nil
        )
        {
            self.scheduleExpression = scheduleExpression
        }
    }

}

extension SageMakerClientTypes {
    public enum ScheduleStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case scheduled
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleStatus] {
            return [
                .failed,
                .pending,
                .scheduled,
                .stopped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pending: return "Pending"
            case .scheduled: return "Scheduled"
            case .stopped: return "Stopped"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduleStatus(rawValue: rawValue) ?? ScheduleStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.SearchExpression: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case nestedFilters = "NestedFilters"
        case `operator` = "Operator"
        case subExpressions = "SubExpressions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filterlist0 in filters {
                try filtersContainer.encode(filterlist0)
            }
        }
        if let nestedFilters = nestedFilters {
            var nestedFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nestedFilters)
            for nestedfilterslist0 in nestedFilters {
                try nestedFiltersContainer.encode(nestedfilterslist0)
            }
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let subExpressions = subExpressions {
            var subExpressionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subExpressions)
            for searchexpressionlist0 in subExpressions {
                try subExpressionsContainer.encode(searchexpressionlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[SageMakerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SageMakerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nestedFiltersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NestedFilters?].self, forKey: .nestedFilters)
        var nestedFiltersDecoded0:[SageMakerClientTypes.NestedFilters]? = nil
        if let nestedFiltersContainer = nestedFiltersContainer {
            nestedFiltersDecoded0 = [SageMakerClientTypes.NestedFilters]()
            for structure0 in nestedFiltersContainer {
                if let structure0 = structure0 {
                    nestedFiltersDecoded0?.append(structure0)
                }
            }
        }
        nestedFilters = nestedFiltersDecoded0
        let subExpressionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.SearchExpression?].self, forKey: .subExpressions)
        var subExpressionsDecoded0:[SageMakerClientTypes.SearchExpression]? = nil
        if let subExpressionsContainer = subExpressionsContainer {
            subExpressionsDecoded0 = [SageMakerClientTypes.SearchExpression]()
            for structure0 in subExpressionsContainer {
                if let structure0 = structure0 {
                    subExpressionsDecoded0?.append(structure0)
                }
            }
        }
        subExpressions = subExpressionsDecoded0
        let operatorDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.BooleanOperator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}

extension SageMakerClientTypes {
    /// A multi-expression that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. You must specify at least one subexpression, filter, or nested filter. A SearchExpression can contain up to twenty elements. A SearchExpression contains the following components:
    ///
    /// * A list of Filter objects. Each filter defines a simple Boolean expression comprised of a resource property name, Boolean operator, and value.
    ///
    /// * A list of NestedFilter objects. Each nested filter defines a list of Boolean expressions using a list of resource properties. A nested filter is satisfied if a single object in the list satisfies all Boolean expressions.
    ///
    /// * A list of SearchExpression objects. A search expression object can be nested in a list of search expression objects.
    ///
    /// * A Boolean operator: And or Or.
    public struct SearchExpression: Swift.Equatable {
        /// A list of filter objects.
        public var filters: [SageMakerClientTypes.Filter]?
        /// A list of nested filter objects.
        public var nestedFilters: [SageMakerClientTypes.NestedFilters]?
        /// A Boolean operator used to evaluate the search expression. If you want every conditional statement in all lists to be satisfied for the entire search expression to be true, specify And. If only a single conditional statement needs to be true for the entire search expression to be true, specify Or. The default value is And.
        public var `operator`: SageMakerClientTypes.BooleanOperator?
        /// A list of search expression objects.
        public var subExpressions: [SageMakerClientTypes.SearchExpression]?

        public init (
            filters: [SageMakerClientTypes.Filter]? = nil,
            nestedFilters: [SageMakerClientTypes.NestedFilters]? = nil,
            `operator`: SageMakerClientTypes.BooleanOperator? = nil,
            subExpressions: [SageMakerClientTypes.SearchExpression]? = nil
        )
        {
            self.filters = filters
            self.nestedFilters = nestedFilters
            self.`operator` = `operator`
            self.subExpressions = subExpressions
        }
    }

}

extension SearchInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resource = "Resource"
        case searchExpression = "SearchExpression"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resource = resource {
            try encodeContainer.encode(resource.rawValue, forKey: .resource)
        }
        if let searchExpression = searchExpression {
            try encodeContainer.encode(searchExpression, forKey: .searchExpression)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension SearchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SearchInput: Swift.Equatable {
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// If more than MaxResults resources match the specified SearchExpression, the response includes a NextToken. The NextToken can be passed to the next SearchRequest to continue retrieving results.
    public var nextToken: Swift.String?
    /// The name of the Amazon SageMaker resource to search for.
    /// This member is required.
    public var resource: SageMakerClientTypes.ResourceType?
    /// A Boolean conditional statement. Resources must satisfy this condition to be included in search results. You must provide at least one subexpression, filter, or nested filter. The maximum number of recursive SubExpressions, NestedFilters, and Filters that can be included in a SearchExpression object is 50.
    public var searchExpression: SageMakerClientTypes.SearchExpression?
    /// The name of the resource property used to sort the SearchResults. The default is LastModifiedTime.
    public var sortBy: Swift.String?
    /// How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SearchSortOrder?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resource: SageMakerClientTypes.ResourceType? = nil,
        searchExpression: SageMakerClientTypes.SearchExpression? = nil,
        sortBy: Swift.String? = nil,
        sortOrder: SageMakerClientTypes.SearchSortOrder? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resource = resource
        self.searchExpression = searchExpression
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct SearchInputBody: Swift.Equatable {
    let resource: SageMakerClientTypes.ResourceType?
    let searchExpression: SageMakerClientTypes.SearchExpression?
    let sortBy: Swift.String?
    let sortOrder: SageMakerClientTypes.SearchSortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension SearchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resource = "Resource"
        case searchExpression = "SearchExpression"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceType.self, forKey: .resource)
        resource = resourceDecoded
        let searchExpressionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SearchExpression.self, forKey: .searchExpression)
        searchExpression = searchExpressionDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SearchSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension SearchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SearchOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SearchOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.results = output.results
        } else {
            self.nextToken = nil
            self.results = nil
        }
    }
}

public struct SearchOutputResponse: Swift.Equatable {
    /// If the result of the previous Search request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request.
    public var nextToken: Swift.String?
    /// A list of SearchRecord objects.
    public var results: [SageMakerClientTypes.SearchRecord]?

    public init (
        nextToken: Swift.String? = nil,
        results: [SageMakerClientTypes.SearchRecord]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

struct SearchOutputResponseBody: Swift.Equatable {
    let results: [SageMakerClientTypes.SearchRecord]?
    let nextToken: Swift.String?
}

extension SearchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.SearchRecord?].self, forKey: .results)
        var resultsDecoded0:[SageMakerClientTypes.SearchRecord]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [SageMakerClientTypes.SearchRecord]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SageMakerClientTypes.SearchRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
        case experiment = "Experiment"
        case featureGroup = "FeatureGroup"
        case modelPackage = "ModelPackage"
        case modelPackageGroup = "ModelPackageGroup"
        case pipeline = "Pipeline"
        case pipelineExecution = "PipelineExecution"
        case project = "Project"
        case trainingJob = "TrainingJob"
        case trial = "Trial"
        case trialComponent = "TrialComponent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let experiment = experiment {
            try encodeContainer.encode(experiment, forKey: .experiment)
        }
        if let featureGroup = featureGroup {
            try encodeContainer.encode(featureGroup, forKey: .featureGroup)
        }
        if let modelPackage = modelPackage {
            try encodeContainer.encode(modelPackage, forKey: .modelPackage)
        }
        if let modelPackageGroup = modelPackageGroup {
            try encodeContainer.encode(modelPackageGroup, forKey: .modelPackageGroup)
        }
        if let pipeline = pipeline {
            try encodeContainer.encode(pipeline, forKey: .pipeline)
        }
        if let pipelineExecution = pipelineExecution {
            try encodeContainer.encode(pipelineExecution, forKey: .pipelineExecution)
        }
        if let project = project {
            try encodeContainer.encode(project, forKey: .project)
        }
        if let trainingJob = trainingJob {
            try encodeContainer.encode(trainingJob, forKey: .trainingJob)
        }
        if let trial = trial {
            try encodeContainer.encode(trial, forKey: .trial)
        }
        if let trialComponent = trialComponent {
            try encodeContainer.encode(trialComponent, forKey: .trialComponent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJob.self, forKey: .trainingJob)
        trainingJob = trainingJobDecoded
        let experimentDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Experiment.self, forKey: .experiment)
        experiment = experimentDecoded
        let trialDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Trial.self, forKey: .trial)
        trial = trialDecoded
        let trialComponentDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponent.self, forKey: .trialComponent)
        trialComponent = trialComponentDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Endpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let modelPackageDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackage.self, forKey: .modelPackage)
        modelPackage = modelPackageDecoded
        let modelPackageGroupDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageGroup.self, forKey: .modelPackageGroup)
        modelPackageGroup = modelPackageGroupDecoded
        let pipelineDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Pipeline.self, forKey: .pipeline)
        pipeline = pipelineDecoded
        let pipelineExecutionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExecution.self, forKey: .pipelineExecution)
        pipelineExecution = pipelineExecutionDecoded
        let featureGroupDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureGroup.self, forKey: .featureGroup)
        featureGroup = featureGroupDecoded
        let projectDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Project.self, forKey: .project)
        project = projectDecoded
    }
}

extension SageMakerClientTypes {
    /// A single resource returned as part of the [Search] API response.
    public struct SearchRecord: Swift.Equatable {
        /// A hosted endpoint for real-time inference.
        public var endpoint: SageMakerClientTypes.Endpoint?
        /// The properties of an experiment.
        public var experiment: SageMakerClientTypes.Experiment?
        /// Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.
        public var featureGroup: SageMakerClientTypes.FeatureGroup?
        /// A versioned model that can be deployed for SageMaker inference.
        public var modelPackage: SageMakerClientTypes.ModelPackage?
        /// A group of versioned models in the model registry.
        public var modelPackageGroup: SageMakerClientTypes.ModelPackageGroup?
        /// A SageMaker Model Building Pipeline instance.
        public var pipeline: SageMakerClientTypes.Pipeline?
        /// An execution of a pipeline.
        public var pipelineExecution: SageMakerClientTypes.PipelineExecution?
        /// The properties of a project.
        public var project: SageMakerClientTypes.Project?
        /// The properties of a training job.
        public var trainingJob: SageMakerClientTypes.TrainingJob?
        /// The properties of a trial.
        public var trial: SageMakerClientTypes.Trial?
        /// The properties of a trial component.
        public var trialComponent: SageMakerClientTypes.TrialComponent?

        public init (
            endpoint: SageMakerClientTypes.Endpoint? = nil,
            experiment: SageMakerClientTypes.Experiment? = nil,
            featureGroup: SageMakerClientTypes.FeatureGroup? = nil,
            modelPackage: SageMakerClientTypes.ModelPackage? = nil,
            modelPackageGroup: SageMakerClientTypes.ModelPackageGroup? = nil,
            pipeline: SageMakerClientTypes.Pipeline? = nil,
            pipelineExecution: SageMakerClientTypes.PipelineExecution? = nil,
            project: SageMakerClientTypes.Project? = nil,
            trainingJob: SageMakerClientTypes.TrainingJob? = nil,
            trial: SageMakerClientTypes.Trial? = nil,
            trialComponent: SageMakerClientTypes.TrialComponent? = nil
        )
        {
            self.endpoint = endpoint
            self.experiment = experiment
            self.featureGroup = featureGroup
            self.modelPackage = modelPackage
            self.modelPackageGroup = modelPackageGroup
            self.pipeline = pipeline
            self.pipelineExecution = pipelineExecution
            self.project = project
            self.trainingJob = trainingJob
            self.trial = trial
            self.trialComponent = trialComponent
        }
    }

}

extension SageMakerClientTypes {
    public enum SearchSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SearchSortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SearchSortOrder(rawValue: rawValue) ?? SearchSortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SecondaryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case downloading
        case downloadingTrainingImage
        case failed
        case interrupted
        case launchingMlInstances
        case maxRuntimeExceeded
        case maxWaitTimeExceeded
        case preparingTrainingStack
        case restarting
        case starting
        case stopped
        case stopping
        case training
        case updating
        case uploading
        case sdkUnknown(Swift.String)

        public static var allCases: [SecondaryStatus] {
            return [
                .completed,
                .downloading,
                .downloadingTrainingImage,
                .failed,
                .interrupted,
                .launchingMlInstances,
                .maxRuntimeExceeded,
                .maxWaitTimeExceeded,
                .preparingTrainingStack,
                .restarting,
                .starting,
                .stopped,
                .stopping,
                .training,
                .updating,
                .uploading,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .downloading: return "Downloading"
            case .downloadingTrainingImage: return "DownloadingTrainingImage"
            case .failed: return "Failed"
            case .interrupted: return "Interrupted"
            case .launchingMlInstances: return "LaunchingMLInstances"
            case .maxRuntimeExceeded: return "MaxRuntimeExceeded"
            case .maxWaitTimeExceeded: return "MaxWaitTimeExceeded"
            case .preparingTrainingStack: return "PreparingTrainingStack"
            case .restarting: return "Restarting"
            case .starting: return "Starting"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .training: return "Training"
            case .updating: return "Updating"
            case .uploading: return "Uploading"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SecondaryStatus(rawValue: rawValue) ?? SecondaryStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.SecondaryStatusTransition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
        case status = "Status"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SecondaryStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}

extension SageMakerClientTypes {
    /// An array element of [DescribeTrainingJobResponse$SecondaryStatusTransitions]. It provides additional details about a status that the training job has transitioned through. A training job can be in one of several states, for example, starting, downloading, training, or uploading. Within each state, there are a number of intermediate states. For example, within the starting state, Amazon SageMaker could be starting the training job or launching the ML instances. These transitional states are referred to as the job's secondary status.
    public struct SecondaryStatusTransition: Swift.Equatable {
        /// A timestamp that shows when the training job transitioned out of this secondary status state into another secondary status state or when the training job has ended.
        public var endTime: ClientRuntime.Date?
        /// A timestamp that shows when the training job transitioned to the current secondary status state.
        /// This member is required.
        public var startTime: ClientRuntime.Date?
        /// Contains a secondary status information from a training job. Status might be one of the following secondary statuses: InProgress
        ///
        /// * Starting - Starting the training job.
        ///
        /// * Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.
        ///
        /// * Training - Training is in progress.
        ///
        /// * Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.
        ///
        ///
        /// Completed
        ///
        /// * Completed - The training job has completed.
        ///
        ///
        /// Failed
        ///
        /// * Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.
        ///
        ///
        /// Stopped
        ///
        /// * MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.
        ///
        /// * Stopped - The training job has stopped.
        ///
        ///
        /// Stopping
        ///
        /// * Stopping - Stopping the training job.
        ///
        ///
        /// We no longer support the following secondary statuses:
        ///
        /// * LaunchingMLInstances
        ///
        /// * PreparingTrainingStack
        ///
        /// * DownloadingTrainingImage
        /// This member is required.
        public var status: SageMakerClientTypes.SecondaryStatus?
        /// A detailed description of the progress within a secondary status. Amazon SageMaker provides secondary statuses and status messages that apply to each of them: Starting
        ///
        /// * Starting the training job.
        ///
        /// * Launching requested ML instances.
        ///
        /// * Insufficient capacity error from EC2 while launching instances, retrying!
        ///
        /// * Launched instance was unhealthy, replacing it!
        ///
        /// * Preparing the instances for training.
        ///
        ///
        /// Training
        ///
        /// * Downloading the training image.
        ///
        /// * Training image download completed. Training in progress.
        ///
        ///
        /// Status messages are subject to change. Therefore, we recommend not including them in code that programmatically initiates actions. For examples, don't use status messages in if statements. To have an overview of your training job's progress, view TrainingJobStatus and SecondaryStatus in [DescribeTrainingJob], and StatusMessage together. For example, at the start of a training job, you might see the following:
        ///
        /// * TrainingJobStatus - InProgress
        ///
        /// * SecondaryStatus - Training
        ///
        /// * StatusMessage - Downloading the training image
        public var statusMessage: Swift.String?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: SageMakerClientTypes.SecondaryStatus? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

extension SendPipelineExecutionStepFailureInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callbackToken = "CallbackToken"
        case clientRequestToken = "ClientRequestToken"
        case failureReason = "FailureReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callbackToken = callbackToken {
            try encodeContainer.encode(callbackToken, forKey: .callbackToken)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
    }
}

extension SendPipelineExecutionStepFailureInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SendPipelineExecutionStepFailureInput: Swift.Equatable {
    /// The pipeline generated token from the Amazon SQS queue.
    /// This member is required.
    public var callbackToken: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.
    public var clientRequestToken: Swift.String?
    /// A message describing why the step failed.
    public var failureReason: Swift.String?

    public init (
        callbackToken: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        failureReason: Swift.String? = nil
    )
    {
        self.callbackToken = callbackToken
        self.clientRequestToken = clientRequestToken
        self.failureReason = failureReason
    }
}

struct SendPipelineExecutionStepFailureInputBody: Swift.Equatable {
    let callbackToken: Swift.String?
    let failureReason: Swift.String?
    let clientRequestToken: Swift.String?
}

extension SendPipelineExecutionStepFailureInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callbackToken = "CallbackToken"
        case clientRequestToken = "ClientRequestToken"
        case failureReason = "FailureReason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callbackTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callbackToken)
        callbackToken = callbackTokenDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension SendPipelineExecutionStepFailureOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendPipelineExecutionStepFailureOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendPipelineExecutionStepFailureOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendPipelineExecutionStepFailureOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendPipelineExecutionStepFailureOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecutionArn = output.pipelineExecutionArn
        } else {
            self.pipelineExecutionArn = nil
        }
    }
}

public struct SendPipelineExecutionStepFailureOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init (
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct SendPipelineExecutionStepFailureOutputResponseBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
}

extension SendPipelineExecutionStepFailureOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
    }
}

extension SendPipelineExecutionStepSuccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callbackToken = "CallbackToken"
        case clientRequestToken = "ClientRequestToken"
        case outputParameters = "OutputParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callbackToken = callbackToken {
            try encodeContainer.encode(callbackToken, forKey: .callbackToken)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let outputParameters = outputParameters {
            var outputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputParameters)
            for outputparameterlist0 in outputParameters {
                try outputParametersContainer.encode(outputparameterlist0)
            }
        }
    }
}

extension SendPipelineExecutionStepSuccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SendPipelineExecutionStepSuccessInput: Swift.Equatable {
    /// The pipeline generated token from the Amazon SQS queue.
    /// This member is required.
    public var callbackToken: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.
    public var clientRequestToken: Swift.String?
    /// A list of the output parameters of the callback step.
    public var outputParameters: [SageMakerClientTypes.OutputParameter]?

    public init (
        callbackToken: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        outputParameters: [SageMakerClientTypes.OutputParameter]? = nil
    )
    {
        self.callbackToken = callbackToken
        self.clientRequestToken = clientRequestToken
        self.outputParameters = outputParameters
    }
}

struct SendPipelineExecutionStepSuccessInputBody: Swift.Equatable {
    let callbackToken: Swift.String?
    let outputParameters: [SageMakerClientTypes.OutputParameter]?
    let clientRequestToken: Swift.String?
}

extension SendPipelineExecutionStepSuccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callbackToken = "CallbackToken"
        case clientRequestToken = "ClientRequestToken"
        case outputParameters = "OutputParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callbackTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callbackToken)
        callbackToken = callbackTokenDecoded
        let outputParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.OutputParameter?].self, forKey: .outputParameters)
        var outputParametersDecoded0:[SageMakerClientTypes.OutputParameter]? = nil
        if let outputParametersContainer = outputParametersContainer {
            outputParametersDecoded0 = [SageMakerClientTypes.OutputParameter]()
            for structure0 in outputParametersContainer {
                if let structure0 = structure0 {
                    outputParametersDecoded0?.append(structure0)
                }
            }
        }
        outputParameters = outputParametersDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension SendPipelineExecutionStepSuccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendPipelineExecutionStepSuccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendPipelineExecutionStepSuccessOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendPipelineExecutionStepSuccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendPipelineExecutionStepSuccessOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecutionArn = output.pipelineExecutionArn
        } else {
            self.pipelineExecutionArn = nil
        }
    }
}

public struct SendPipelineExecutionStepSuccessOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init (
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct SendPipelineExecutionStepSuccessOutputResponseBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
}

extension SendPipelineExecutionStepSuccessOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
    }
}

extension SageMakerClientTypes.ServiceCatalogProvisionedProductDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case provisionedProductId = "ProvisionedProductId"
        case provisionedProductStatusMessage = "ProvisionedProductStatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let provisionedProductId = provisionedProductId {
            try encodeContainer.encode(provisionedProductId, forKey: .provisionedProductId)
        }
        if let provisionedProductStatusMessage = provisionedProductStatusMessage {
            try encodeContainer.encode(provisionedProductStatusMessage, forKey: .provisionedProductStatusMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let provisionedProductIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provisionedProductId)
        provisionedProductId = provisionedProductIdDecoded
        let provisionedProductStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provisionedProductStatusMessage)
        provisionedProductStatusMessage = provisionedProductStatusMessageDecoded
    }
}

extension SageMakerClientTypes {
    /// Details of a provisioned service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public struct ServiceCatalogProvisionedProductDetails: Swift.Equatable {
        /// The ID of the provisioned product.
        public var provisionedProductId: Swift.String?
        /// The current status of the product.
        ///
        /// * AVAILABLE - Stable state, ready to perform any operation. The most recent operation succeeded and completed.
        ///
        /// * UNDER_CHANGE - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.
        ///
        /// * TAINTED - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.
        ///
        /// * ERROR - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.
        ///
        /// * PLAN_IN_PROGRESS - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.
        public var provisionedProductStatusMessage: Swift.String?

        public init (
            provisionedProductId: Swift.String? = nil,
            provisionedProductStatusMessage: Swift.String? = nil
        )
        {
            self.provisionedProductId = provisionedProductId
            self.provisionedProductStatusMessage = provisionedProductStatusMessage
        }
    }

}

extension SageMakerClientTypes.ServiceCatalogProvisioningDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pathId = "PathId"
        case productId = "ProductId"
        case provisioningArtifactId = "ProvisioningArtifactId"
        case provisioningParameters = "ProvisioningParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pathId = pathId {
            try encodeContainer.encode(pathId, forKey: .pathId)
        }
        if let productId = productId {
            try encodeContainer.encode(productId, forKey: .productId)
        }
        if let provisioningArtifactId = provisioningArtifactId {
            try encodeContainer.encode(provisioningArtifactId, forKey: .provisioningArtifactId)
        }
        if let provisioningParameters = provisioningParameters {
            var provisioningParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .provisioningParameters)
            for provisioningparameters0 in provisioningParameters {
                try provisioningParametersContainer.encode(provisioningparameters0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productId)
        productId = productIdDecoded
        let provisioningArtifactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provisioningArtifactId)
        provisioningArtifactId = provisioningArtifactIdDecoded
        let pathIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pathId)
        pathId = pathIdDecoded
        let provisioningParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProvisioningParameter?].self, forKey: .provisioningParameters)
        var provisioningParametersDecoded0:[SageMakerClientTypes.ProvisioningParameter]? = nil
        if let provisioningParametersContainer = provisioningParametersContainer {
            provisioningParametersDecoded0 = [SageMakerClientTypes.ProvisioningParameter]()
            for structure0 in provisioningParametersContainer {
                if let structure0 = structure0 {
                    provisioningParametersDecoded0?.append(structure0)
                }
            }
        }
        provisioningParameters = provisioningParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Details that you specify to provision a service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public struct ServiceCatalogProvisioningDetails: Swift.Equatable {
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path.
        public var pathId: Swift.String?
        /// The ID of the product to provision.
        /// This member is required.
        public var productId: Swift.String?
        /// The ID of the provisioning artifact.
        public var provisioningArtifactId: Swift.String?
        /// A list of key value pairs that you specify when you provision a product.
        public var provisioningParameters: [SageMakerClientTypes.ProvisioningParameter]?

        public init (
            pathId: Swift.String? = nil,
            productId: Swift.String? = nil,
            provisioningArtifactId: Swift.String? = nil,
            provisioningParameters: [SageMakerClientTypes.ProvisioningParameter]? = nil
        )
        {
            self.pathId = pathId
            self.productId = productId
            self.provisioningArtifactId = provisioningArtifactId
            self.provisioningParameters = provisioningParameters
        }
    }

}

extension SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case provisioningArtifactId = "ProvisioningArtifactId"
        case provisioningParameters = "ProvisioningParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let provisioningArtifactId = provisioningArtifactId {
            try encodeContainer.encode(provisioningArtifactId, forKey: .provisioningArtifactId)
        }
        if let provisioningParameters = provisioningParameters {
            var provisioningParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .provisioningParameters)
            for provisioningparameters0 in provisioningParameters {
                try provisioningParametersContainer.encode(provisioningparameters0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let provisioningArtifactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provisioningArtifactId)
        provisioningArtifactId = provisioningArtifactIdDecoded
        let provisioningParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProvisioningParameter?].self, forKey: .provisioningParameters)
        var provisioningParametersDecoded0:[SageMakerClientTypes.ProvisioningParameter]? = nil
        if let provisioningParametersContainer = provisioningParametersContainer {
            provisioningParametersDecoded0 = [SageMakerClientTypes.ProvisioningParameter]()
            for structure0 in provisioningParametersContainer {
                if let structure0 = structure0 {
                    provisioningParametersDecoded0?.append(structure0)
                }
            }
        }
        provisioningParameters = provisioningParametersDecoded0
    }
}

extension SageMakerClientTypes {
    /// Details that you specify to provision a service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public struct ServiceCatalogProvisioningUpdateDetails: Swift.Equatable {
        /// The ID of the provisioning artifact.
        public var provisioningArtifactId: Swift.String?
        /// A list of key value pairs that you specify when you provision a product.
        public var provisioningParameters: [SageMakerClientTypes.ProvisioningParameter]?

        public init (
            provisioningArtifactId: Swift.String? = nil,
            provisioningParameters: [SageMakerClientTypes.ProvisioningParameter]? = nil
        )
        {
            self.provisioningArtifactId = provisioningArtifactId
            self.provisioningParameters = provisioningParameters
        }
    }

}

extension SageMakerClientTypes.SharingSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookOutputOption = "NotebookOutputOption"
        case s3KmsKeyId = "S3KmsKeyId"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookOutputOption = notebookOutputOption {
            try encodeContainer.encode(notebookOutputOption.rawValue, forKey: .notebookOutputOption)
        }
        if let s3KmsKeyId = s3KmsKeyId {
            try encodeContainer.encode(s3KmsKeyId, forKey: .s3KmsKeyId)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookOutputOptionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookOutputOption.self, forKey: .notebookOutputOption)
        notebookOutputOption = notebookOutputOptionDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let s3KmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KmsKeyId)
        s3KmsKeyId = s3KmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies options for sharing SageMaker Studio notebooks. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called. When SharingSettings is not specified, notebook sharing isn't allowed.
    public struct SharingSettings: Swift.Equatable {
        /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        public var notebookOutputOption: SageMakerClientTypes.NotebookOutputOption?
        /// When NotebookOutputOption is Allowed, the Amazon Web Services Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        public var s3KmsKeyId: Swift.String?
        /// When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        public var s3OutputPath: Swift.String?

        public init (
            notebookOutputOption: SageMakerClientTypes.NotebookOutputOption? = nil,
            s3KmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.notebookOutputOption = notebookOutputOption
            self.s3KmsKeyId = s3KmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes.ShuffleConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case seed = "Seed"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if seed != 0 {
            try encodeContainer.encode(seed, forKey: .seed)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let seedDecoded = try containerValues.decode(Swift.Int.self, forKey: .seed)
        seed = seedDecoded
    }
}

extension SageMakerClientTypes {
    /// A configuration for a shuffle option for input data in a channel. If you use S3Prefix for S3DataType, the results of the S3 key prefix matches are shuffled. If you use ManifestFile, the order of the S3 object references in the ManifestFile is shuffled. If you use AugmentedManifestFile, the order of the JSON lines in the AugmentedManifestFile is shuffled. The shuffling order is determined using the Seed value. For Pipe input mode, when ShuffleConfig is specified shuffling is done at the start of every epoch. With large datasets, this ensures that the order of the training data is different for each epoch, and it helps reduce bias and possible overfitting. In a multi-node training job when ShuffleConfig is combined with S3DataDistributionType of ShardedByS3Key, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.
    public struct ShuffleConfig: Swift.Equatable {
        /// Determines the shuffling order in ShuffleConfig value.
        /// This member is required.
        public var seed: Swift.Int

        public init (
            seed: Swift.Int = 0
        )
        {
            self.seed = seed
        }
    }

}

extension SageMakerClientTypes {
    public enum SortActionsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortActionsBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortActionsBy(rawValue: rawValue) ?? SortActionsBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortArtifactsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case sdkUnknown(Swift.String)

        public static var allCases: [SortArtifactsBy] {
            return [
                .creationTime,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortArtifactsBy(rawValue: rawValue) ?? SortArtifactsBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortAssociationsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case destinationArn
        case destinationType
        case sourceArn
        case sourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [SortAssociationsBy] {
            return [
                .creationTime,
                .destinationArn,
                .destinationType,
                .sourceArn,
                .sourceType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .destinationArn: return "DestinationArn"
            case .destinationType: return "DestinationType"
            case .sourceArn: return "SourceArn"
            case .sourceType: return "SourceType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortAssociationsBy(rawValue: rawValue) ?? SortAssociationsBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [SortBy] {
            return [
                .creationTime,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortBy(rawValue: rawValue) ?? SortBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortContextsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortContextsBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortContextsBy(rawValue: rawValue) ?? SortContextsBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortExperimentsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortExperimentsBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortExperimentsBy(rawValue: rawValue) ?? SortExperimentsBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortLineageGroupsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortLineageGroupsBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortLineageGroupsBy(rawValue: rawValue) ?? SortLineageGroupsBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortPipelineExecutionsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case pipelineExecutionArn
        case sdkUnknown(Swift.String)

        public static var allCases: [SortPipelineExecutionsBy] {
            return [
                .creationTime,
                .pipelineExecutionArn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .pipelineExecutionArn: return "PipelineExecutionArn"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortPipelineExecutionsBy(rawValue: rawValue) ?? SortPipelineExecutionsBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortPipelinesBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortPipelinesBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortPipelinesBy(rawValue: rawValue) ?? SortPipelinesBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortTrialComponentsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortTrialComponentsBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortTrialComponentsBy(rawValue: rawValue) ?? SortTrialComponentsBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum SortTrialsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortTrialsBy] {
            return [
                .creationTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortTrialsBy(rawValue: rawValue) ?? SortTrialsBy.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.SourceAlgorithm: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmName = "AlgorithmName"
        case modelDataUrl = "ModelDataUrl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if let modelDataUrl = modelDataUrl {
            try encodeContainer.encode(modelDataUrl, forKey: .modelDataUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelDataUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelDataUrl)
        modelDataUrl = modelDataUrlDecoded
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to.
    public struct SourceAlgorithm: Swift.Equatable {
        /// The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to.
        /// This member is required.
        public var algorithmName: Swift.String?
        /// The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The model artifacts must be in an S3 bucket that is in the same region as the algorithm.
        public var modelDataUrl: Swift.String?

        public init (
            algorithmName: Swift.String? = nil,
            modelDataUrl: Swift.String? = nil
        )
        {
            self.algorithmName = algorithmName
            self.modelDataUrl = modelDataUrl
        }
    }

}

extension SageMakerClientTypes.SourceAlgorithmSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceAlgorithms = "SourceAlgorithms"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceAlgorithms = sourceAlgorithms {
            var sourceAlgorithmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceAlgorithms)
            for sourcealgorithmlist0 in sourceAlgorithms {
                try sourceAlgorithmsContainer.encode(sourcealgorithmlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceAlgorithmsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.SourceAlgorithm?].self, forKey: .sourceAlgorithms)
        var sourceAlgorithmsDecoded0:[SageMakerClientTypes.SourceAlgorithm]? = nil
        if let sourceAlgorithmsContainer = sourceAlgorithmsContainer {
            sourceAlgorithmsDecoded0 = [SageMakerClientTypes.SourceAlgorithm]()
            for structure0 in sourceAlgorithmsContainer {
                if let structure0 = structure0 {
                    sourceAlgorithmsDecoded0?.append(structure0)
                }
            }
        }
        sourceAlgorithms = sourceAlgorithmsDecoded0
    }
}

extension SageMakerClientTypes {
    /// A list of algorithms that were used to create a model package.
    public struct SourceAlgorithmSpecification: Swift.Equatable {
        /// A list of the algorithms that were used to create a model package.
        /// This member is required.
        public var sourceAlgorithms: [SageMakerClientTypes.SourceAlgorithm]?

        public init (
            sourceAlgorithms: [SageMakerClientTypes.SourceAlgorithm]? = nil
        )
        {
            self.sourceAlgorithms = sourceAlgorithms
        }
    }

}

extension SageMakerClientTypes.SourceIpConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrs = "Cidrs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for cidrs0 in cidrs {
                try cidrsContainer.encode(cidrs0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
    }
}

extension SageMakerClientTypes {
    /// A list of IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses.
    public struct SourceIpConfig: Swift.Equatable {
        /// A list of one to ten [Classless Inter-Domain Routing](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) (CIDR) values. Maximum: Ten CIDR values The following Length Constraints apply to individual CIDR values in the CIDR value list.
        /// This member is required.
        public var cidrs: [Swift.String]?

        public init (
            cidrs: [Swift.String]? = nil
        )
        {
            self.cidrs = cidrs
        }
    }

}

extension SageMakerClientTypes {
    public enum SplitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case line
        case `none`
        case recordio
        case tfrecord
        case sdkUnknown(Swift.String)

        public static var allCases: [SplitType] {
            return [
                .line,
                .none,
                .recordio,
                .tfrecord,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .line: return "Line"
            case .none: return "None"
            case .recordio: return "RecordIO"
            case .tfrecord: return "TFRecord"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SplitType(rawValue: rawValue) ?? SplitType.sdkUnknown(rawValue)
        }
    }
}

extension StartMonitoringScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
    }
}

extension StartMonitoringScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartMonitoringScheduleInput: Swift.Equatable {
    /// The name of the schedule to start.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init (
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleName = monitoringScheduleName
    }
}

struct StartMonitoringScheduleInputBody: Swift.Equatable {
    let monitoringScheduleName: Swift.String?
}

extension StartMonitoringScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
    }
}

extension StartMonitoringScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMonitoringScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMonitoringScheduleOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMonitoringScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartMonitoringScheduleOutputResponse: Swift.Equatable {

}

extension StartNotebookInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookInstanceName = notebookInstanceName {
            try encodeContainer.encode(notebookInstanceName, forKey: .notebookInstanceName)
        }
    }
}

extension StartNotebookInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartNotebookInstanceInput: Swift.Equatable {
    /// The name of the notebook instance to start.
    /// This member is required.
    public var notebookInstanceName: Swift.String?

    public init (
        notebookInstanceName: Swift.String? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
    }
}

struct StartNotebookInstanceInputBody: Swift.Equatable {
    let notebookInstanceName: Swift.String?
}

extension StartNotebookInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
    }
}

extension StartNotebookInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartNotebookInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartNotebookInstanceOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartNotebookInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartNotebookInstanceOutputResponse: Swift.Equatable {

}

extension StartPipelineExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
        case pipelineName = "PipelineName"
        case pipelineParameters = "PipelineParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let pipelineExecutionDescription = pipelineExecutionDescription {
            try encodeContainer.encode(pipelineExecutionDescription, forKey: .pipelineExecutionDescription)
        }
        if let pipelineExecutionDisplayName = pipelineExecutionDisplayName {
            try encodeContainer.encode(pipelineExecutionDisplayName, forKey: .pipelineExecutionDisplayName)
        }
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let pipelineParameters = pipelineParameters {
            var pipelineParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineParameters)
            for parameterlist0 in pipelineParameters {
                try pipelineParametersContainer.encode(parameterlist0)
            }
        }
    }
}

extension StartPipelineExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartPipelineExecutionInput: Swift.Equatable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The description of the pipeline execution.
    public var pipelineExecutionDescription: Swift.String?
    /// The display name of the pipeline execution.
    public var pipelineExecutionDisplayName: Swift.String?
    /// The name of the pipeline.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// Contains a list of pipeline parameters. This list can be empty.
    public var pipelineParameters: [SageMakerClientTypes.Parameter]?

    public init (
        clientRequestToken: Swift.String? = nil,
        pipelineExecutionDescription: Swift.String? = nil,
        pipelineExecutionDisplayName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        pipelineParameters: [SageMakerClientTypes.Parameter]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.pipelineExecutionDescription = pipelineExecutionDescription
        self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
        self.pipelineName = pipelineName
        self.pipelineParameters = pipelineParameters
    }
}

struct StartPipelineExecutionInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineExecutionDisplayName: Swift.String?
    let pipelineParameters: [SageMakerClientTypes.Parameter]?
    let pipelineExecutionDescription: Swift.String?
    let clientRequestToken: Swift.String?
}

extension StartPipelineExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
        case pipelineName = "PipelineName"
        case pipelineParameters = "PipelineParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineExecutionDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDisplayName)
        pipelineExecutionDisplayName = pipelineExecutionDisplayNameDecoded
        let pipelineParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Parameter?].self, forKey: .pipelineParameters)
        var pipelineParametersDecoded0:[SageMakerClientTypes.Parameter]? = nil
        if let pipelineParametersContainer = pipelineParametersContainer {
            pipelineParametersDecoded0 = [SageMakerClientTypes.Parameter]()
            for structure0 in pipelineParametersContainer {
                if let structure0 = structure0 {
                    pipelineParametersDecoded0?.append(structure0)
                }
            }
        }
        pipelineParameters = pipelineParametersDecoded0
        let pipelineExecutionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDescription)
        pipelineExecutionDescription = pipelineExecutionDescriptionDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension StartPipelineExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartPipelineExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartPipelineExecutionOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartPipelineExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartPipelineExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecutionArn = output.pipelineExecutionArn
        } else {
            self.pipelineExecutionArn = nil
        }
    }
}

public struct StartPipelineExecutionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init (
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct StartPipelineExecutionOutputResponseBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
}

extension StartPipelineExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
    }
}

extension SageMakerClientTypes {
    public enum StepStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case executing
        case failed
        case starting
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StepStatus] {
            return [
                .executing,
                .failed,
                .starting,
                .stopped,
                .stopping,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .executing: return "Executing"
            case .failed: return "Failed"
            case .starting: return "Starting"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StepStatus(rawValue: rawValue) ?? StepStatus.sdkUnknown(rawValue)
        }
    }
}

extension StopAutoMLJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobName = "AutoMLJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobName = autoMLJobName {
            try encodeContainer.encode(autoMLJobName, forKey: .autoMLJobName)
        }
    }
}

extension StopAutoMLJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopAutoMLJobInput: Swift.Equatable {
    /// The name of the object you are requesting.
    /// This member is required.
    public var autoMLJobName: Swift.String?

    public init (
        autoMLJobName: Swift.String? = nil
    )
    {
        self.autoMLJobName = autoMLJobName
    }
}

struct StopAutoMLJobInputBody: Swift.Equatable {
    let autoMLJobName: Swift.String?
}

extension StopAutoMLJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobName = "AutoMLJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobName)
        autoMLJobName = autoMLJobNameDecoded
    }
}

extension StopAutoMLJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopAutoMLJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopAutoMLJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopAutoMLJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopAutoMLJobOutputResponse: Swift.Equatable {

}

extension StopCompilationJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compilationJobName = compilationJobName {
            try encodeContainer.encode(compilationJobName, forKey: .compilationJobName)
        }
    }
}

extension StopCompilationJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopCompilationJobInput: Swift.Equatable {
    /// The name of the model compilation job to stop.
    /// This member is required.
    public var compilationJobName: Swift.String?

    public init (
        compilationJobName: Swift.String? = nil
    )
    {
        self.compilationJobName = compilationJobName
    }
}

struct StopCompilationJobInputBody: Swift.Equatable {
    let compilationJobName: Swift.String?
}

extension StopCompilationJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
    }
}

extension StopCompilationJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopCompilationJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopCompilationJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopCompilationJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopCompilationJobOutputResponse: Swift.Equatable {

}

extension StopEdgePackagingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edgePackagingJobName = "EdgePackagingJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let edgePackagingJobName = edgePackagingJobName {
            try encodeContainer.encode(edgePackagingJobName, forKey: .edgePackagingJobName)
        }
    }
}

extension StopEdgePackagingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopEdgePackagingJobInput: Swift.Equatable {
    /// The name of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobName: Swift.String?

    public init (
        edgePackagingJobName: Swift.String? = nil
    )
    {
        self.edgePackagingJobName = edgePackagingJobName
    }
}

struct StopEdgePackagingJobInputBody: Swift.Equatable {
    let edgePackagingJobName: Swift.String?
}

extension StopEdgePackagingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edgePackagingJobName = "EdgePackagingJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgePackagingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobName)
        edgePackagingJobName = edgePackagingJobNameDecoded
    }
}

extension StopEdgePackagingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopEdgePackagingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopEdgePackagingJobOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension StopEdgePackagingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopEdgePackagingJobOutputResponse: Swift.Equatable {

}

extension StopHyperParameterTuningJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hyperParameterTuningJobName = hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
    }
}

extension StopHyperParameterTuningJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopHyperParameterTuningJobInput: Swift.Equatable {
    /// The name of the tuning job to stop.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?

    public init (
        hyperParameterTuningJobName: Swift.String? = nil
    )
    {
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
    }
}

struct StopHyperParameterTuningJobInputBody: Swift.Equatable {
    let hyperParameterTuningJobName: Swift.String?
}

extension StopHyperParameterTuningJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
    }
}

extension StopHyperParameterTuningJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopHyperParameterTuningJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopHyperParameterTuningJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopHyperParameterTuningJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopHyperParameterTuningJobOutputResponse: Swift.Equatable {

}

extension StopInferenceRecommendationsJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
    }
}

extension StopInferenceRecommendationsJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopInferenceRecommendationsJobInput: Swift.Equatable {
    /// The name of the job you want to stop.
    /// This member is required.
    public var jobName: Swift.String?

    public init (
        jobName: Swift.String? = nil
    )
    {
        self.jobName = jobName
    }
}

struct StopInferenceRecommendationsJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
}

extension StopInferenceRecommendationsJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
    }
}

extension StopInferenceRecommendationsJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopInferenceRecommendationsJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopInferenceRecommendationsJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopInferenceRecommendationsJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopInferenceRecommendationsJobOutputResponse: Swift.Equatable {

}

extension StopLabelingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelingJobName = "LabelingJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelingJobName = labelingJobName {
            try encodeContainer.encode(labelingJobName, forKey: .labelingJobName)
        }
    }
}

extension StopLabelingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopLabelingJobInput: Swift.Equatable {
    /// The name of the labeling job to stop.
    /// This member is required.
    public var labelingJobName: Swift.String?

    public init (
        labelingJobName: Swift.String? = nil
    )
    {
        self.labelingJobName = labelingJobName
    }
}

struct StopLabelingJobInputBody: Swift.Equatable {
    let labelingJobName: Swift.String?
}

extension StopLabelingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelingJobName = "LabelingJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobName)
        labelingJobName = labelingJobNameDecoded
    }
}

extension StopLabelingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopLabelingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopLabelingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopLabelingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopLabelingJobOutputResponse: Swift.Equatable {

}

extension StopMonitoringScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
    }
}

extension StopMonitoringScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopMonitoringScheduleInput: Swift.Equatable {
    /// The name of the schedule to stop.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init (
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleName = monitoringScheduleName
    }
}

struct StopMonitoringScheduleInputBody: Swift.Equatable {
    let monitoringScheduleName: Swift.String?
}

extension StopMonitoringScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
    }
}

extension StopMonitoringScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopMonitoringScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopMonitoringScheduleOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopMonitoringScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopMonitoringScheduleOutputResponse: Swift.Equatable {

}

extension StopNotebookInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookInstanceName = notebookInstanceName {
            try encodeContainer.encode(notebookInstanceName, forKey: .notebookInstanceName)
        }
    }
}

extension StopNotebookInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopNotebookInstanceInput: Swift.Equatable {
    /// The name of the notebook instance to terminate.
    /// This member is required.
    public var notebookInstanceName: Swift.String?

    public init (
        notebookInstanceName: Swift.String? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
    }
}

struct StopNotebookInstanceInputBody: Swift.Equatable {
    let notebookInstanceName: Swift.String?
}

extension StopNotebookInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceName = "NotebookInstanceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
    }
}

extension StopNotebookInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopNotebookInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopNotebookInstanceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension StopNotebookInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopNotebookInstanceOutputResponse: Swift.Equatable {

}

extension StopPipelineExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
    }
}

extension StopPipelineExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopPipelineExecutionInput: Swift.Equatable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct StopPipelineExecutionInputBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
    let clientRequestToken: Swift.String?
}

extension StopPipelineExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension StopPipelineExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopPipelineExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopPipelineExecutionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopPipelineExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StopPipelineExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecutionArn = output.pipelineExecutionArn
        } else {
            self.pipelineExecutionArn = nil
        }
    }
}

public struct StopPipelineExecutionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init (
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct StopPipelineExecutionOutputResponseBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
}

extension StopPipelineExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
    }
}

extension StopProcessingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processingJobName = "ProcessingJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let processingJobName = processingJobName {
            try encodeContainer.encode(processingJobName, forKey: .processingJobName)
        }
    }
}

extension StopProcessingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopProcessingJobInput: Swift.Equatable {
    /// The name of the processing job to stop.
    /// This member is required.
    public var processingJobName: Swift.String?

    public init (
        processingJobName: Swift.String? = nil
    )
    {
        self.processingJobName = processingJobName
    }
}

struct StopProcessingJobInputBody: Swift.Equatable {
    let processingJobName: Swift.String?
}

extension StopProcessingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processingJobName = "ProcessingJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
    }
}

extension StopProcessingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopProcessingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopProcessingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopProcessingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopProcessingJobOutputResponse: Swift.Equatable {

}

extension StopTrainingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trainingJobName = "TrainingJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trainingJobName = trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
    }
}

extension StopTrainingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopTrainingJobInput: Swift.Equatable {
    /// The name of the training job to stop.
    /// This member is required.
    public var trainingJobName: Swift.String?

    public init (
        trainingJobName: Swift.String? = nil
    )
    {
        self.trainingJobName = trainingJobName
    }
}

struct StopTrainingJobInputBody: Swift.Equatable {
    let trainingJobName: Swift.String?
}

extension StopTrainingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trainingJobName = "TrainingJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
    }
}

extension StopTrainingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopTrainingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopTrainingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopTrainingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopTrainingJobOutputResponse: Swift.Equatable {

}

extension StopTransformJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformJobName = "TransformJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let transformJobName = transformJobName {
            try encodeContainer.encode(transformJobName, forKey: .transformJobName)
        }
    }
}

extension StopTransformJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopTransformJobInput: Swift.Equatable {
    /// The name of the transform job to stop.
    /// This member is required.
    public var transformJobName: Swift.String?

    public init (
        transformJobName: Swift.String? = nil
    )
    {
        self.transformJobName = transformJobName
    }
}

struct StopTransformJobInputBody: Swift.Equatable {
    let transformJobName: Swift.String?
}

extension StopTransformJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transformJobName = "TransformJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobName)
        transformJobName = transformJobNameDecoded
    }
}

extension StopTransformJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopTransformJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopTransformJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopTransformJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopTransformJobOutputResponse: Swift.Equatable {

}

extension SageMakerClientTypes.StoppingCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxRuntimeInSeconds = "MaxRuntimeInSeconds"
        case maxWaitTimeInSeconds = "MaxWaitTimeInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxRuntimeInSeconds != 0 {
            try encodeContainer.encode(maxRuntimeInSeconds, forKey: .maxRuntimeInSeconds)
        }
        if let maxWaitTimeInSeconds = maxWaitTimeInSeconds {
            try encodeContainer.encode(maxWaitTimeInSeconds, forKey: .maxWaitTimeInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxRuntimeInSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRuntimeInSeconds)
        maxRuntimeInSeconds = maxRuntimeInSecondsDecoded
        let maxWaitTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxWaitTimeInSeconds)
        maxWaitTimeInSeconds = maxWaitTimeInSecondsDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training or compilation job. Use this API to cap model training costs. To stop a training job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. The training algorithms provided by Amazon SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with CreateModel. The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
    public struct StoppingCondition: Swift.Equatable {
        /// The maximum length of time, in seconds, that a training or compilation job can run. For compilation jobs, if the job does not complete during this time, you will receive a TimeOut error. We recommend starting with 900 seconds and increase as necessary based on your model. For all other jobs, if the job does not complete during this time, Amazon SageMaker ends the job. When RetryStrategy is specified in the job request, MaxRuntimeInSeconds specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days.
        public var maxRuntimeInSeconds: Swift.Int
        /// The maximum length of time, in seconds, that a managed Spot training job has to complete. It is the amount of time spent waiting for Spot capacity plus the amount of time the job can run. It must be equal to or greater than MaxRuntimeInSeconds. If the job does not complete during this time, Amazon SageMaker ends the job. When RetryStrategy is specified in the job request, MaxWaitTimeInSeconds specifies the maximum time for all of the attempts in total, not each individual attempt.
        public var maxWaitTimeInSeconds: Swift.Int?

        public init (
            maxRuntimeInSeconds: Swift.Int = 0,
            maxWaitTimeInSeconds: Swift.Int? = nil
        )
        {
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
            self.maxWaitTimeInSeconds = maxWaitTimeInSeconds
        }
    }

}

extension SageMakerClientTypes {
    public enum StudioLifecycleConfigAppType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case jupyterserver
        case kernelgateway
        case sdkUnknown(Swift.String)

        public static var allCases: [StudioLifecycleConfigAppType] {
            return [
                .jupyterserver,
                .kernelgateway,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .jupyterserver: return "JupyterServer"
            case .kernelgateway: return "KernelGateway"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StudioLifecycleConfigAppType(rawValue: rawValue) ?? StudioLifecycleConfigAppType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.StudioLifecycleConfigDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case studioLifecycleConfigAppType = "StudioLifecycleConfigAppType"
        case studioLifecycleConfigArn = "StudioLifecycleConfigArn"
        case studioLifecycleConfigName = "StudioLifecycleConfigName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let studioLifecycleConfigAppType = studioLifecycleConfigAppType {
            try encodeContainer.encode(studioLifecycleConfigAppType.rawValue, forKey: .studioLifecycleConfigAppType)
        }
        if let studioLifecycleConfigArn = studioLifecycleConfigArn {
            try encodeContainer.encode(studioLifecycleConfigArn, forKey: .studioLifecycleConfigArn)
        }
        if let studioLifecycleConfigName = studioLifecycleConfigName {
            try encodeContainer.encode(studioLifecycleConfigName, forKey: .studioLifecycleConfigName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioLifecycleConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigArn)
        studioLifecycleConfigArn = studioLifecycleConfigArnDecoded
        let studioLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioLifecycleConfigName)
        studioLifecycleConfigName = studioLifecycleConfigNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let studioLifecycleConfigAppTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StudioLifecycleConfigAppType.self, forKey: .studioLifecycleConfigAppType)
        studioLifecycleConfigAppType = studioLifecycleConfigAppTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// Details of the Studio Lifecycle Configuration.
    public struct StudioLifecycleConfigDetails: Swift.Equatable {
        /// The creation time of the Studio Lifecycle Configuration.
        public var creationTime: ClientRuntime.Date?
        /// This value is equivalent to CreationTime because Studio Lifecycle Configurations are immutable.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The App type to which the Lifecycle Configuration is attached.
        public var studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType?
        /// The Amazon Resource Name (ARN) of the Lifecycle Configuration.
        public var studioLifecycleConfigArn: Swift.String?
        /// The name of the Studio Lifecycle Configuration.
        public var studioLifecycleConfigName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType? = nil,
            studioLifecycleConfigArn: Swift.String? = nil,
            studioLifecycleConfigName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.studioLifecycleConfigAppType = studioLifecycleConfigAppType
            self.studioLifecycleConfigArn = studioLifecycleConfigArn
            self.studioLifecycleConfigName = studioLifecycleConfigName
        }
    }

}

extension SageMakerClientTypes {
    public enum StudioLifecycleConfigSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case lastmodifiedtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [StudioLifecycleConfigSortKey] {
            return [
                .creationtime,
                .lastmodifiedtime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .lastmodifiedtime: return "LastModifiedTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StudioLifecycleConfigSortKey(rawValue: rawValue) ?? StudioLifecycleConfigSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.SubscribedWorkteam: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listingId = "ListingId"
        case marketplaceDescription = "MarketplaceDescription"
        case marketplaceTitle = "MarketplaceTitle"
        case sellerName = "SellerName"
        case workteamArn = "WorkteamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let listingId = listingId {
            try encodeContainer.encode(listingId, forKey: .listingId)
        }
        if let marketplaceDescription = marketplaceDescription {
            try encodeContainer.encode(marketplaceDescription, forKey: .marketplaceDescription)
        }
        if let marketplaceTitle = marketplaceTitle {
            try encodeContainer.encode(marketplaceTitle, forKey: .marketplaceTitle)
        }
        if let sellerName = sellerName {
            try encodeContainer.encode(sellerName, forKey: .sellerName)
        }
        if let workteamArn = workteamArn {
            try encodeContainer.encode(workteamArn, forKey: .workteamArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
        let marketplaceTitleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marketplaceTitle)
        marketplaceTitle = marketplaceTitleDecoded
        let sellerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sellerName)
        sellerName = sellerNameDecoded
        let marketplaceDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marketplaceDescription)
        marketplaceDescription = marketplaceDescriptionDecoded
        let listingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .listingId)
        listingId = listingIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes a work team of a vendor that does the a labelling job.
    public struct SubscribedWorkteam: Swift.Equatable {
        /// Marketplace product listing ID.
        public var listingId: Swift.String?
        /// The description of the vendor from the Amazon Marketplace.
        public var marketplaceDescription: Swift.String?
        /// The title of the service provided by the vendor in the Amazon Marketplace.
        public var marketplaceTitle: Swift.String?
        /// The name of the vendor in the Amazon Marketplace.
        public var sellerName: Swift.String?
        /// The Amazon Resource Name (ARN) of the vendor that you have subscribed.
        /// This member is required.
        public var workteamArn: Swift.String?

        public init (
            listingId: Swift.String? = nil,
            marketplaceDescription: Swift.String? = nil,
            marketplaceTitle: Swift.String? = nil,
            sellerName: Swift.String? = nil,
            workteamArn: Swift.String? = nil
        )
        {
            self.listingId = listingId
            self.marketplaceDescription = marketplaceDescription
            self.marketplaceTitle = marketplaceTitle
            self.sellerName = sellerName
            self.workteamArn = workteamArn
        }
    }

}

extension SageMakerClientTypes.SuggestionQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case propertyNameQuery = "PropertyNameQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let propertyNameQuery = propertyNameQuery {
            try encodeContainer.encode(propertyNameQuery, forKey: .propertyNameQuery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertyNameQueryDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PropertyNameQuery.self, forKey: .propertyNameQuery)
        propertyNameQuery = propertyNameQueryDecoded
    }
}

extension SageMakerClientTypes {
    /// Specified in the [GetSearchSuggestions] request. Limits the property names that are included in the response.
    public struct SuggestionQuery: Swift.Equatable {
        /// Defines a property name hint. Only property names that begin with the specified hint are included in the response.
        public var propertyNameQuery: SageMakerClientTypes.PropertyNameQuery?

        public init (
            propertyNameQuery: SageMakerClientTypes.PropertyNameQuery? = nil
        )
        {
            self.propertyNameQuery = propertyNameQuery
        }
    }

}

extension SageMakerClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// A tag object that consists of a key and an optional value, used to manage metadata for SageMaker Amazon Web Services resources. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see [AddTags]. For more information on adding metadata to your Amazon Web Services resources with tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). For advice on best practices for managing Amazon Web Services resources with tagging, see [Tagging Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy](https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf).
    public struct Tag: Swift.Equatable {
        /// The tag key. Tag keys must be unique per resource.
        /// This member is required.
        public var key: Swift.String?
        /// The tag value.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    public enum TargetDevice: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aisage
        case ambaCv2
        case ambaCv22
        case ambaCv25
        case coreml
        case deeplens
        case imx8mplus
        case imx8qm
        case jacintoTda4vm
        case jetsonNano
        case jetsonTx1
        case jetsonTx2
        case jetsonXavier
        case lambda
        case mlC4
        case mlC5
        case mlEia2
        case mlG4dn
        case mlInf1
        case mlM4
        case mlM5
        case mlP2
        case mlP3
        case qcs603
        case qcs605
        case rasp3b
        case rk3288
        case rk3399
        case sbeC
        case sitaraAm57x
        case x86Win32
        case x86Win64
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetDevice] {
            return [
                .aisage,
                .ambaCv2,
                .ambaCv22,
                .ambaCv25,
                .coreml,
                .deeplens,
                .imx8mplus,
                .imx8qm,
                .jacintoTda4vm,
                .jetsonNano,
                .jetsonTx1,
                .jetsonTx2,
                .jetsonXavier,
                .lambda,
                .mlC4,
                .mlC5,
                .mlEia2,
                .mlG4dn,
                .mlInf1,
                .mlM4,
                .mlM5,
                .mlP2,
                .mlP3,
                .qcs603,
                .qcs605,
                .rasp3b,
                .rk3288,
                .rk3399,
                .sbeC,
                .sitaraAm57x,
                .x86Win32,
                .x86Win64,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aisage: return "aisage"
            case .ambaCv2: return "amba_cv2"
            case .ambaCv22: return "amba_cv22"
            case .ambaCv25: return "amba_cv25"
            case .coreml: return "coreml"
            case .deeplens: return "deeplens"
            case .imx8mplus: return "imx8mplus"
            case .imx8qm: return "imx8qm"
            case .jacintoTda4vm: return "jacinto_tda4vm"
            case .jetsonNano: return "jetson_nano"
            case .jetsonTx1: return "jetson_tx1"
            case .jetsonTx2: return "jetson_tx2"
            case .jetsonXavier: return "jetson_xavier"
            case .lambda: return "lambda"
            case .mlC4: return "ml_c4"
            case .mlC5: return "ml_c5"
            case .mlEia2: return "ml_eia2"
            case .mlG4dn: return "ml_g4dn"
            case .mlInf1: return "ml_inf1"
            case .mlM4: return "ml_m4"
            case .mlM5: return "ml_m5"
            case .mlP2: return "ml_p2"
            case .mlP3: return "ml_p3"
            case .qcs603: return "qcs603"
            case .qcs605: return "qcs605"
            case .rasp3b: return "rasp3b"
            case .rk3288: return "rk3288"
            case .rk3399: return "rk3399"
            case .sbeC: return "sbe_c"
            case .sitaraAm57x: return "sitara_am57x"
            case .x86Win32: return "x86_win32"
            case .x86Win64: return "x86_win64"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetDevice(rawValue: rawValue) ?? TargetDevice.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.TargetPlatform: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerator = "Accelerator"
        case arch = "Arch"
        case os = "Os"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerator = accelerator {
            try encodeContainer.encode(accelerator.rawValue, forKey: .accelerator)
        }
        if let arch = arch {
            try encodeContainer.encode(arch.rawValue, forKey: .arch)
        }
        if let os = os {
            try encodeContainer.encode(os.rawValue, forKey: .os)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let osDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TargetPlatformOs.self, forKey: .os)
        os = osDecoded
        let archDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TargetPlatformArch.self, forKey: .arch)
        arch = archDecoded
        let acceleratorDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TargetPlatformAccelerator.self, forKey: .accelerator)
        accelerator = acceleratorDecoded
    }
}

extension SageMakerClientTypes {
    /// Contains information about a target platform that you want your model to run on, such as OS, architecture, and accelerators. It is an alternative of TargetDevice.
    public struct TargetPlatform: Swift.Equatable {
        /// Specifies a target platform accelerator (optional).
        ///
        /// * NVIDIA: Nvidia graphics processing unit. It also requires gpu-code, trt-ver, cuda-ver compiler options
        ///
        /// * MALI: ARM Mali graphics processor
        ///
        /// * INTEL_GRAPHICS: Integrated Intel graphics
        public var accelerator: SageMakerClientTypes.TargetPlatformAccelerator?
        /// Specifies a target platform architecture.
        ///
        /// * X86_64: 64-bit version of the x86 instruction set.
        ///
        /// * X86: 32-bit version of the x86 instruction set.
        ///
        /// * ARM64: ARMv8 64-bit CPU.
        ///
        /// * ARM_EABIHF: ARMv7 32-bit, Hard Float.
        ///
        /// * ARM_EABI: ARMv7 32-bit, Soft Float. Used by Android 32-bit ARM platform.
        /// This member is required.
        public var arch: SageMakerClientTypes.TargetPlatformArch?
        /// Specifies a target platform OS.
        ///
        /// * LINUX: Linux-based operating systems.
        ///
        /// * ANDROID: Android operating systems. Android API level can be specified using the ANDROID_PLATFORM compiler option. For example, "CompilerOptions": {'ANDROID_PLATFORM': 28}
        /// This member is required.
        public var os: SageMakerClientTypes.TargetPlatformOs?

        public init (
            accelerator: SageMakerClientTypes.TargetPlatformAccelerator? = nil,
            arch: SageMakerClientTypes.TargetPlatformArch? = nil,
            os: SageMakerClientTypes.TargetPlatformOs? = nil
        )
        {
            self.accelerator = accelerator
            self.arch = arch
            self.os = os
        }
    }

}

extension SageMakerClientTypes {
    public enum TargetPlatformAccelerator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case intelGraphics
        case mali
        case nvidia
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetPlatformAccelerator] {
            return [
                .intelGraphics,
                .mali,
                .nvidia,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .intelGraphics: return "INTEL_GRAPHICS"
            case .mali: return "MALI"
            case .nvidia: return "NVIDIA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetPlatformAccelerator(rawValue: rawValue) ?? TargetPlatformAccelerator.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum TargetPlatformArch: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case arm64
        case armEabi
        case armEabihf
        case x86
        case x8664
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetPlatformArch] {
            return [
                .arm64,
                .armEabi,
                .armEabihf,
                .x86,
                .x8664,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .arm64: return "ARM64"
            case .armEabi: return "ARM_EABI"
            case .armEabihf: return "ARM_EABIHF"
            case .x86: return "X86"
            case .x8664: return "X86_64"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetPlatformArch(rawValue: rawValue) ?? TargetPlatformArch.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum TargetPlatformOs: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case android
        case linux
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetPlatformOs] {
            return [
                .android,
                .linux,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .android: return "ANDROID"
            case .linux: return "LINUX"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetPlatformOs(rawValue: rawValue) ?? TargetPlatformOs.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.TensorBoardAppSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultResourceSpec = "DefaultResourceSpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultResourceSpec = defaultResourceSpec {
            try encodeContainer.encode(defaultResourceSpec, forKey: .defaultResourceSpec)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultResourceSpecDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceSpec.self, forKey: .defaultResourceSpec)
        defaultResourceSpec = defaultResourceSpecDecoded
    }
}

extension SageMakerClientTypes {
    /// The TensorBoard app settings.
    public struct TensorBoardAppSettings: Swift.Equatable {
        /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?

        public init (
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil
        )
        {
            self.defaultResourceSpec = defaultResourceSpec
        }
    }

}

extension SageMakerClientTypes.TensorBoardOutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case localPath = "LocalPath"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
    }
}

extension SageMakerClientTypes {
    /// Configuration of storage locations for the Debugger TensorBoard output data.
    public struct TensorBoardOutputConfig: Swift.Equatable {
        /// Path to local storage location for tensorBoard output. Defaults to /opt/ml/output/tensorboard.
        public var localPath: Swift.String?
        /// Path to Amazon S3 storage location for TensorBoard output.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init (
            localPath: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes.TrafficPattern: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case phases = "Phases"
        case trafficType = "TrafficType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let phases = phases {
            var phasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phases)
            for phases0 in phases {
                try phasesContainer.encode(phases0)
            }
        }
        if let trafficType = trafficType {
            try encodeContainer.encode(trafficType.rawValue, forKey: .trafficType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrafficType.self, forKey: .trafficType)
        trafficType = trafficTypeDecoded
        let phasesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Phase?].self, forKey: .phases)
        var phasesDecoded0:[SageMakerClientTypes.Phase]? = nil
        if let phasesContainer = phasesContainer {
            phasesDecoded0 = [SageMakerClientTypes.Phase]()
            for structure0 in phasesContainer {
                if let structure0 = structure0 {
                    phasesDecoded0?.append(structure0)
                }
            }
        }
        phases = phasesDecoded0
    }
}

extension SageMakerClientTypes {
    /// Defines the traffic pattern of the load test.
    public struct TrafficPattern: Swift.Equatable {
        /// Defines the phases traffic specification.
        public var phases: [SageMakerClientTypes.Phase]?
        /// Defines the traffic patterns.
        public var trafficType: SageMakerClientTypes.TrafficType?

        public init (
            phases: [SageMakerClientTypes.Phase]? = nil,
            trafficType: SageMakerClientTypes.TrafficType? = nil
        )
        {
            self.phases = phases
            self.trafficType = trafficType
        }
    }

}

extension SageMakerClientTypes.TrafficRoutingConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case canarySize = "CanarySize"
        case linearStepSize = "LinearStepSize"
        case type = "Type"
        case waitIntervalInSeconds = "WaitIntervalInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let canarySize = canarySize {
            try encodeContainer.encode(canarySize, forKey: .canarySize)
        }
        if let linearStepSize = linearStepSize {
            try encodeContainer.encode(linearStepSize, forKey: .linearStepSize)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let waitIntervalInSeconds = waitIntervalInSeconds {
            try encodeContainer.encode(waitIntervalInSeconds, forKey: .waitIntervalInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrafficRoutingConfigType.self, forKey: .type)
        type = typeDecoded
        let waitIntervalInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitIntervalInSeconds)
        waitIntervalInSeconds = waitIntervalInSecondsDecoded
        let canarySizeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CapacitySize.self, forKey: .canarySize)
        canarySize = canarySizeDecoded
        let linearStepSizeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CapacitySize.self, forKey: .linearStepSize)
        linearStepSize = linearStepSizeDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the traffic routing strategy during an endpoint deployment to shift traffic from the old fleet to the new fleet.
    public struct TrafficRoutingConfig: Swift.Equatable {
        /// Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count.
        public var canarySize: SageMakerClientTypes.CapacitySize?
        /// Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count.
        public var linearStepSize: SageMakerClientTypes.CapacitySize?
        /// Traffic routing strategy type.
        ///
        /// * ALL_AT_ONCE: Endpoint traffic shifts to the new fleet in a single step.
        ///
        /// * CANARY: Endpoint traffic shifts to the new fleet in two steps. The first step is the canary, which is a small portion of the traffic. The second step is the remainder of the traffic.
        ///
        /// * LINEAR: Endpoint traffic shifts to the new fleet in n steps of a configurable size.
        /// This member is required.
        public var type: SageMakerClientTypes.TrafficRoutingConfigType?
        /// The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet.
        /// This member is required.
        public var waitIntervalInSeconds: Swift.Int?

        public init (
            canarySize: SageMakerClientTypes.CapacitySize? = nil,
            linearStepSize: SageMakerClientTypes.CapacitySize? = nil,
            type: SageMakerClientTypes.TrafficRoutingConfigType? = nil,
            waitIntervalInSeconds: Swift.Int? = nil
        )
        {
            self.canarySize = canarySize
            self.linearStepSize = linearStepSize
            self.type = type
            self.waitIntervalInSeconds = waitIntervalInSeconds
        }
    }

}

extension SageMakerClientTypes {
    public enum TrafficRoutingConfigType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allAtOnce
        case canary
        case linear
        case sdkUnknown(Swift.String)

        public static var allCases: [TrafficRoutingConfigType] {
            return [
                .allAtOnce,
                .canary,
                .linear,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allAtOnce: return "ALL_AT_ONCE"
            case .canary: return "CANARY"
            case .linear: return "LINEAR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrafficRoutingConfigType(rawValue: rawValue) ?? TrafficRoutingConfigType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum TrafficType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case phases
        case sdkUnknown(Swift.String)

        public static var allCases: [TrafficType] {
            return [
                .phases,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .phases: return "PHASES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrafficType(rawValue: rawValue) ?? TrafficType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    /// The training input mode that the algorithm supports. For more information about input modes, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Pipe mode If an algorithm supports Pipe mode, Amazon SageMaker streams data directly from Amazon S3 to the container. File mode If an algorithm supports File mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container. You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any. For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training. FastFile mode If an algorithm supports FastFile mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk. FastFile mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.
    public enum TrainingInputMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fastfile
        case file
        case pipe
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingInputMode] {
            return [
                .fastfile,
                .file,
                .pipe,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fastfile: return "FastFile"
            case .file: return "File"
            case .pipe: return "Pipe"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrainingInputMode(rawValue: rawValue) ?? TrainingInputMode.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum TrainingInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Xlarge
        case mlC5n18xlarge
        case mlC5n2xlarge
        case mlC5n4xlarge
        case mlC5n9xlarge
        case mlC5nXlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Xlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP3dn24xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlP4d24xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingInstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Xlarge,
                .mlC5n18xlarge,
                .mlC5n2xlarge,
                .mlC5n4xlarge,
                .mlC5n9xlarge,
                .mlC5nXlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Xlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP3dn24xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlP4d24xlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC5n18xlarge: return "ml.c5n.18xlarge"
            case .mlC5n2xlarge: return "ml.c5n.2xlarge"
            case .mlC5n4xlarge: return "ml.c5n.4xlarge"
            case .mlC5n9xlarge: return "ml.c5n.9xlarge"
            case .mlC5nXlarge: return "ml.c5n.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP3dn24xlarge: return "ml.p3dn.24xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlP4d24xlarge: return "ml.p4d.24xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrainingInstanceType(rawValue: rawValue) ?? TrainingInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.TrainingJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case billableTimeInSeconds = "BillableTimeInSeconds"
        case checkpointConfig = "CheckpointConfig"
        case creationTime = "CreationTime"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case debugRuleEvaluationStatuses = "DebugRuleEvaluationStatuses"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case finalMetricDataList = "FinalMetricDataList"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case labelingJobArn = "LabelingJobArn"
        case lastModifiedTime = "LastModifiedTime"
        case modelArtifacts = "ModelArtifacts"
        case outputDataConfig = "OutputDataConfig"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case secondaryStatus = "SecondaryStatus"
        case secondaryStatusTransitions = "SecondaryStatusTransitions"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingEndTime = "TrainingEndTime"
        case trainingJobArn = "TrainingJobArn"
        case trainingJobName = "TrainingJobName"
        case trainingJobStatus = "TrainingJobStatus"
        case trainingStartTime = "TrainingStartTime"
        case trainingTimeInSeconds = "TrainingTimeInSeconds"
        case tuningJobArn = "TuningJobArn"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmSpecification = algorithmSpecification {
            try encodeContainer.encode(algorithmSpecification, forKey: .algorithmSpecification)
        }
        if let autoMLJobArn = autoMLJobArn {
            try encodeContainer.encode(autoMLJobArn, forKey: .autoMLJobArn)
        }
        if let billableTimeInSeconds = billableTimeInSeconds {
            try encodeContainer.encode(billableTimeInSeconds, forKey: .billableTimeInSeconds)
        }
        if let checkpointConfig = checkpointConfig {
            try encodeContainer.encode(checkpointConfig, forKey: .checkpointConfig)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let debugHookConfig = debugHookConfig {
            try encodeContainer.encode(debugHookConfig, forKey: .debugHookConfig)
        }
        if let debugRuleConfigurations = debugRuleConfigurations {
            var debugRuleConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .debugRuleConfigurations)
            for debugruleconfigurations0 in debugRuleConfigurations {
                try debugRuleConfigurationsContainer.encode(debugruleconfigurations0)
            }
        }
        if let debugRuleEvaluationStatuses = debugRuleEvaluationStatuses {
            var debugRuleEvaluationStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .debugRuleEvaluationStatuses)
            for debugruleevaluationstatuses0 in debugRuleEvaluationStatuses {
                try debugRuleEvaluationStatusesContainer.encode(debugruleevaluationstatuses0)
            }
        }
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if enableManagedSpotTraining != false {
            try encodeContainer.encode(enableManagedSpotTraining, forKey: .enableManagedSpotTraining)
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, trainingenvironmentmap0) in environment {
                try environmentContainer.encode(trainingenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let finalMetricDataList = finalMetricDataList {
            var finalMetricDataListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalMetricDataList)
            for finalmetricdatalist0 in finalMetricDataList {
                try finalMetricDataListContainer.encode(finalmetricdatalist0)
            }
        }
        if let hyperParameters = hyperParameters {
            var hyperParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .hyperParameters)
            for (dictKey0, hyperparameters0) in hyperParameters {
                try hyperParametersContainer.encode(hyperparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for inputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(inputdataconfig0)
            }
        }
        if let labelingJobArn = labelingJobArn {
            try encodeContainer.encode(labelingJobArn, forKey: .labelingJobArn)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let modelArtifacts = modelArtifacts {
            try encodeContainer.encode(modelArtifacts, forKey: .modelArtifacts)
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let resourceConfig = resourceConfig {
            try encodeContainer.encode(resourceConfig, forKey: .resourceConfig)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let secondaryStatus = secondaryStatus {
            try encodeContainer.encode(secondaryStatus.rawValue, forKey: .secondaryStatus)
        }
        if let secondaryStatusTransitions = secondaryStatusTransitions {
            var secondaryStatusTransitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryStatusTransitions)
            for secondarystatustransitions0 in secondaryStatusTransitions {
                try secondaryStatusTransitionsContainer.encode(secondarystatustransitions0)
            }
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let tensorBoardOutputConfig = tensorBoardOutputConfig {
            try encodeContainer.encode(tensorBoardOutputConfig, forKey: .tensorBoardOutputConfig)
        }
        if let trainingEndTime = trainingEndTime {
            try encodeContainer.encode(trainingEndTime.timeIntervalSince1970, forKey: .trainingEndTime)
        }
        if let trainingJobArn = trainingJobArn {
            try encodeContainer.encode(trainingJobArn, forKey: .trainingJobArn)
        }
        if let trainingJobName = trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
        if let trainingJobStatus = trainingJobStatus {
            try encodeContainer.encode(trainingJobStatus.rawValue, forKey: .trainingJobStatus)
        }
        if let trainingStartTime = trainingStartTime {
            try encodeContainer.encode(trainingStartTime.timeIntervalSince1970, forKey: .trainingStartTime)
        }
        if let trainingTimeInSeconds = trainingTimeInSeconds {
            try encodeContainer.encode(trainingTimeInSeconds, forKey: .trainingTimeInSeconds)
        }
        if let tuningJobArn = tuningJobArn {
            try encodeContainer.encode(tuningJobArn, forKey: .tuningJobArn)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let tuningJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tuningJobArn)
        tuningJobArn = tuningJobArnDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let modelArtifactsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelArtifacts.self, forKey: .modelArtifacts)
        modelArtifacts = modelArtifactsDecoded
        let trainingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatus.self, forKey: .trainingJobStatus)
        trainingJobStatus = trainingJobStatusDecoded
        let secondaryStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SecondaryStatus.self, forKey: .secondaryStatus)
        secondaryStatus = secondaryStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, hyperparametervalue0) in hyperParametersContainer {
                if let hyperparametervalue0 = hyperparametervalue0 {
                    hyperParametersDecoded0?[key0] = hyperparametervalue0
                }
            }
        }
        hyperParameters = hyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Channel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.Channel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let secondaryStatusTransitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.SecondaryStatusTransition?].self, forKey: .secondaryStatusTransitions)
        var secondaryStatusTransitionsDecoded0:[SageMakerClientTypes.SecondaryStatusTransition]? = nil
        if let secondaryStatusTransitionsContainer = secondaryStatusTransitionsContainer {
            secondaryStatusTransitionsDecoded0 = [SageMakerClientTypes.SecondaryStatusTransition]()
            for structure0 in secondaryStatusTransitionsContainer {
                if let structure0 = structure0 {
                    secondaryStatusTransitionsDecoded0?.append(structure0)
                }
            }
        }
        secondaryStatusTransitions = secondaryStatusTransitionsDecoded0
        let finalMetricDataListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MetricData?].self, forKey: .finalMetricDataList)
        var finalMetricDataListDecoded0:[SageMakerClientTypes.MetricData]? = nil
        if let finalMetricDataListContainer = finalMetricDataListContainer {
            finalMetricDataListDecoded0 = [SageMakerClientTypes.MetricData]()
            for structure0 in finalMetricDataListContainer {
                if let structure0 = structure0 {
                    finalMetricDataListDecoded0?.append(structure0)
                }
            }
        }
        finalMetricDataList = finalMetricDataListDecoded0
        let enableNetworkIsolationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableManagedSpotTraining)
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let trainingTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .trainingTimeInSeconds)
        trainingTimeInSeconds = trainingTimeInSecondsDecoded
        let billableTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billableTimeInSeconds)
        billableTimeInSeconds = billableTimeInSecondsDecoded
        let debugHookConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DebugHookConfig.self, forKey: .debugHookConfig)
        debugHookConfig = debugHookConfigDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let debugRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DebugRuleConfiguration?].self, forKey: .debugRuleConfigurations)
        var debugRuleConfigurationsDecoded0:[SageMakerClientTypes.DebugRuleConfiguration]? = nil
        if let debugRuleConfigurationsContainer = debugRuleConfigurationsContainer {
            debugRuleConfigurationsDecoded0 = [SageMakerClientTypes.DebugRuleConfiguration]()
            for structure0 in debugRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    debugRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        debugRuleConfigurations = debugRuleConfigurationsDecoded0
        let tensorBoardOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TensorBoardOutputConfig.self, forKey: .tensorBoardOutputConfig)
        tensorBoardOutputConfig = tensorBoardOutputConfigDecoded
        let debugRuleEvaluationStatusesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DebugRuleEvaluationStatus?].self, forKey: .debugRuleEvaluationStatuses)
        var debugRuleEvaluationStatusesDecoded0:[SageMakerClientTypes.DebugRuleEvaluationStatus]? = nil
        if let debugRuleEvaluationStatusesContainer = debugRuleEvaluationStatusesContainer {
            debugRuleEvaluationStatusesDecoded0 = [SageMakerClientTypes.DebugRuleEvaluationStatus]()
            for structure0 in debugRuleEvaluationStatusesContainer {
                if let structure0 = structure0 {
                    debugRuleEvaluationStatusesDecoded0?.append(structure0)
                }
            }
        }
        debugRuleEvaluationStatuses = debugRuleEvaluationStatusesDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, trainingenvironmentvalue0) in environmentContainer {
                if let trainingenvironmentvalue0 = trainingenvironmentvalue0 {
                    environmentDecoded0?[key0] = trainingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let retryStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Contains information about a training job.
    public struct TrainingJob: Swift.Equatable {
        /// Information about the algorithm used for training, and algorithm metadata.
        public var algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
        /// The Amazon Resource Name (ARN) of the job.
        public var autoMLJobArn: Swift.String?
        /// The billable time in seconds.
        public var billableTimeInSeconds: Swift.Int?
        /// Contains information about the output location for managed spot training checkpoint data.
        public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
        /// A timestamp that indicates when the training job was created.
        public var creationTime: ClientRuntime.Date?
        /// Configuration information for the Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
        public var debugHookConfig: SageMakerClientTypes.DebugHookConfig?
        /// Information about the debug rule configuration.
        public var debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
        /// Information about the evaluation status of the rules for the training job.
        public var debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.
        public var enableInterContainerTrafficEncryption: Swift.Bool
        /// When true, enables managed spot training using Amazon EC2 Spot instances to run training jobs instead of on-demand instances. For more information, see [Managed Spot Training](https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html).
        public var enableManagedSpotTraining: Swift.Bool
        /// If the TrainingJob was created with network isolation, the value is set to true. If network isolation is enabled, nodes can't communicate beyond the VPC they run in.
        public var enableNetworkIsolation: Swift.Bool
        /// The environment variables to set in the Docker container.
        public var environment: [Swift.String:Swift.String]?
        /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
        ///
        /// * [CreateProcessingJob]
        ///
        /// * [CreateTrainingJob]
        ///
        /// * [CreateTransformJob]
        public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
        /// If the training job failed, the reason it failed.
        public var failureReason: Swift.String?
        /// A list of final metric values that are set when the training job completes. Used only if the training job was configured to use metrics.
        public var finalMetricDataList: [SageMakerClientTypes.MetricData]?
        /// Algorithm-specific parameters.
        public var hyperParameters: [Swift.String:Swift.String]?
        /// An array of Channel objects that describes each data input channel.
        public var inputDataConfig: [SageMakerClientTypes.Channel]?
        /// The Amazon Resource Name (ARN) of the labeling job.
        public var labelingJobArn: Swift.String?
        /// A timestamp that indicates when the status of the training job was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// Information about the Amazon S3 location that is configured for storing model artifacts.
        public var modelArtifacts: SageMakerClientTypes.ModelArtifacts?
        /// The S3 path where model artifacts that you configured when creating the job are stored. Amazon SageMaker creates subfolders for model artifacts.
        public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
        /// Resources, including ML compute instances and ML storage volumes, that are configured for model training.
        public var resourceConfig: SageMakerClientTypes.ResourceConfig?
        /// The number of times to retry the job when the job fails due to an InternalServerError.
        public var retryStrategy: SageMakerClientTypes.RetryStrategy?
        /// The Amazon Web Services Identity and Access Management (IAM) role configured for the training job.
        public var roleArn: Swift.String?
        /// Provides detailed information about the state of the training job. For detailed information about the secondary status of the training job, see StatusMessage under [SecondaryStatusTransition]. Amazon SageMaker provides primary statuses and secondary statuses that apply to each of them: InProgress
        ///
        /// * Starting - Starting the training job.
        ///
        /// * Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.
        ///
        /// * Training - Training is in progress.
        ///
        /// * Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.
        ///
        ///
        /// Completed
        ///
        /// * Completed - The training job has completed.
        ///
        ///
        /// Failed
        ///
        /// * Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.
        ///
        ///
        /// Stopped
        ///
        /// * MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.
        ///
        /// * Stopped - The training job has stopped.
        ///
        ///
        /// Stopping
        ///
        /// * Stopping - Stopping the training job.
        ///
        ///
        /// Valid values for SecondaryStatus are subject to change. We no longer support the following secondary statuses:
        ///
        /// * LaunchingMLInstances
        ///
        /// * PreparingTrainingStack
        ///
        /// * DownloadingTrainingImage
        public var secondaryStatus: SageMakerClientTypes.SecondaryStatus?
        /// A history of all of the secondary statuses that the training job has transitioned through.
        public var secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]?
        /// Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
        public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
        /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
        public var tags: [SageMakerClientTypes.Tag]?
        /// Configuration of storage locations for the Debugger TensorBoard output data.
        public var tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
        /// Indicates the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.
        public var trainingEndTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the training job.
        public var trainingJobArn: Swift.String?
        /// The name of the training job.
        public var trainingJobName: Swift.String?
        /// The status of the training job. Training job statuses are:
        ///
        /// * InProgress - The training is in progress.
        ///
        /// * Completed - The training job has completed.
        ///
        /// * Failed - The training job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTrainingJobResponse call.
        ///
        /// * Stopping - The training job is stopping.
        ///
        /// * Stopped - The training job has stopped.
        ///
        ///
        /// For more detailed information, see SecondaryStatus.
        public var trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
        /// Indicates the time when the training job starts on training instances. You are billed for the time interval between this time and the value of TrainingEndTime. The start time in CloudWatch Logs might be later than this time. The difference is due to the time it takes to download the training data and to the size of the training container.
        public var trainingStartTime: ClientRuntime.Date?
        /// The training time in seconds.
        public var trainingTimeInSeconds: Swift.Int?
        /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the training job was launched by a hyperparameter tuning job.
        public var tuningJobArn: Swift.String?
        /// A [VpcConfig] object that specifies the VPC that this training job has access to. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init (
            algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification? = nil,
            autoMLJobArn: Swift.String? = nil,
            billableTimeInSeconds: Swift.Int? = nil,
            checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
            creationTime: ClientRuntime.Date? = nil,
            debugHookConfig: SageMakerClientTypes.DebugHookConfig? = nil,
            debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]? = nil,
            debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]? = nil,
            enableInterContainerTrafficEncryption: Swift.Bool = false,
            enableManagedSpotTraining: Swift.Bool = false,
            enableNetworkIsolation: Swift.Bool = false,
            environment: [Swift.String:Swift.String]? = nil,
            experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
            failureReason: Swift.String? = nil,
            finalMetricDataList: [SageMakerClientTypes.MetricData]? = nil,
            hyperParameters: [Swift.String:Swift.String]? = nil,
            inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
            labelingJobArn: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            modelArtifacts: SageMakerClientTypes.ModelArtifacts? = nil,
            outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
            resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
            retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
            roleArn: Swift.String? = nil,
            secondaryStatus: SageMakerClientTypes.SecondaryStatus? = nil,
            secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]? = nil,
            stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig? = nil,
            trainingEndTime: ClientRuntime.Date? = nil,
            trainingJobArn: Swift.String? = nil,
            trainingJobName: Swift.String? = nil,
            trainingJobStatus: SageMakerClientTypes.TrainingJobStatus? = nil,
            trainingStartTime: ClientRuntime.Date? = nil,
            trainingTimeInSeconds: Swift.Int? = nil,
            tuningJobArn: Swift.String? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.algorithmSpecification = algorithmSpecification
            self.autoMLJobArn = autoMLJobArn
            self.billableTimeInSeconds = billableTimeInSeconds
            self.checkpointConfig = checkpointConfig
            self.creationTime = creationTime
            self.debugHookConfig = debugHookConfig
            self.debugRuleConfigurations = debugRuleConfigurations
            self.debugRuleEvaluationStatuses = debugRuleEvaluationStatuses
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.environment = environment
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.finalMetricDataList = finalMetricDataList
            self.hyperParameters = hyperParameters
            self.inputDataConfig = inputDataConfig
            self.labelingJobArn = labelingJobArn
            self.lastModifiedTime = lastModifiedTime
            self.modelArtifacts = modelArtifacts
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.retryStrategy = retryStrategy
            self.roleArn = roleArn
            self.secondaryStatus = secondaryStatus
            self.secondaryStatusTransitions = secondaryStatusTransitions
            self.stoppingCondition = stoppingCondition
            self.tags = tags
            self.tensorBoardOutputConfig = tensorBoardOutputConfig
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
            self.trainingStartTime = trainingStartTime
            self.trainingTimeInSeconds = trainingTimeInSeconds
            self.tuningJobArn = tuningJobArn
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes.TrainingJobDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case outputDataConfig = "OutputDataConfig"
        case resourceConfig = "ResourceConfig"
        case stoppingCondition = "StoppingCondition"
        case trainingInputMode = "TrainingInputMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hyperParameters = hyperParameters {
            var hyperParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .hyperParameters)
            for (dictKey0, hyperparameters0) in hyperParameters {
                try hyperParametersContainer.encode(hyperparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for inputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(inputdataconfig0)
            }
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let resourceConfig = resourceConfig {
            try encodeContainer.encode(resourceConfig, forKey: .resourceConfig)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let trainingInputMode = trainingInputMode {
            try encodeContainer.encode(trainingInputMode.rawValue, forKey: .trainingInputMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingInputModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingInputMode.self, forKey: .trainingInputMode)
        trainingInputMode = trainingInputModeDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, hyperparametervalue0) in hyperParametersContainer {
                if let hyperparametervalue0 = hyperparametervalue0 {
                    hyperParametersDecoded0?[key0] = hyperparametervalue0
                }
            }
        }
        hyperParameters = hyperParametersDecoded0
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Channel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.Channel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the input needed to run a training job using the algorithm.
    public struct TrainingJobDefinition: Swift.Equatable {
        /// The hyperparameters used for the training job.
        public var hyperParameters: [Swift.String:Swift.String]?
        /// An array of Channel objects, each of which specifies an input source.
        /// This member is required.
        public var inputDataConfig: [SageMakerClientTypes.Channel]?
        /// the path to the S3 bucket where you want to store model artifacts. Amazon SageMaker creates subfolders for the artifacts.
        /// This member is required.
        public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
        /// The resources, including the ML compute instances and ML storage volumes, to use for model training.
        /// This member is required.
        public var resourceConfig: SageMakerClientTypes.ResourceConfig?
        /// Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts.
        /// This member is required.
        public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
        /// The training input mode that the algorithm supports. For more information about input modes, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Pipe mode If an algorithm supports Pipe mode, Amazon SageMaker streams data directly from Amazon S3 to the container. File mode If an algorithm supports File mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container. You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any. For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training. FastFile mode If an algorithm supports FastFile mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk. FastFile mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.
        /// This member is required.
        public var trainingInputMode: SageMakerClientTypes.TrainingInputMode?

        public init (
            hyperParameters: [Swift.String:Swift.String]? = nil,
            inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
            outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
            resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
            stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
            trainingInputMode: SageMakerClientTypes.TrainingInputMode? = nil
        )
        {
            self.hyperParameters = hyperParameters
            self.inputDataConfig = inputDataConfig
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.stoppingCondition = stoppingCondition
            self.trainingInputMode = trainingInputMode
        }
    }

}

extension SageMakerClientTypes {
    public enum TrainingJobEarlyStoppingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingJobEarlyStoppingType] {
            return [
                .auto,
                .off,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "Auto"
            case .off: return "Off"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrainingJobEarlyStoppingType(rawValue: rawValue) ?? TrainingJobEarlyStoppingType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum TrainingJobSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case finalobjectivemetricvalue
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingJobSortByOptions] {
            return [
                .creationtime,
                .finalobjectivemetricvalue,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .finalobjectivemetricvalue: return "FinalObjectiveMetricValue"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrainingJobSortByOptions(rawValue: rawValue) ?? TrainingJobSortByOptions.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum TrainingJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrainingJobStatus(rawValue: rawValue) ?? TrainingJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.TrainingJobStatusCounters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completed = "Completed"
        case inProgress = "InProgress"
        case nonRetryableError = "NonRetryableError"
        case retryableError = "RetryableError"
        case stopped = "Stopped"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if completed != 0 {
            try encodeContainer.encode(completed, forKey: .completed)
        }
        if inProgress != 0 {
            try encodeContainer.encode(inProgress, forKey: .inProgress)
        }
        if nonRetryableError != 0 {
            try encodeContainer.encode(nonRetryableError, forKey: .nonRetryableError)
        }
        if retryableError != 0 {
            try encodeContainer.encode(retryableError, forKey: .retryableError)
        }
        if stopped != 0 {
            try encodeContainer.encode(stopped, forKey: .stopped)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let completedDecoded = try containerValues.decode(Swift.Int.self, forKey: .completed)
        completed = completedDecoded
        let inProgressDecoded = try containerValues.decode(Swift.Int.self, forKey: .inProgress)
        inProgress = inProgressDecoded
        let retryableErrorDecoded = try containerValues.decode(Swift.Int.self, forKey: .retryableError)
        retryableError = retryableErrorDecoded
        let nonRetryableErrorDecoded = try containerValues.decode(Swift.Int.self, forKey: .nonRetryableError)
        nonRetryableError = nonRetryableErrorDecoded
        let stoppedDecoded = try containerValues.decode(Swift.Int.self, forKey: .stopped)
        stopped = stoppedDecoded
    }
}

extension SageMakerClientTypes {
    /// The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.
    public struct TrainingJobStatusCounters: Swift.Equatable {
        /// The number of completed training jobs launched by the hyperparameter tuning job.
        public var completed: Swift.Int
        /// The number of in-progress training jobs launched by a hyperparameter tuning job.
        public var inProgress: Swift.Int
        /// The number of training jobs that failed and can't be retried. A failed training job can't be retried if it failed because a client error occurred.
        public var nonRetryableError: Swift.Int
        /// The number of training jobs that failed, but can be retried. A failed training job can be retried only if it failed because an internal service error occurred.
        public var retryableError: Swift.Int
        /// The number of training jobs launched by a hyperparameter tuning job that were manually stopped.
        public var stopped: Swift.Int

        public init (
            completed: Swift.Int = 0,
            inProgress: Swift.Int = 0,
            nonRetryableError: Swift.Int = 0,
            retryableError: Swift.Int = 0,
            stopped: Swift.Int = 0
        )
        {
            self.completed = completed
            self.inProgress = inProgress
            self.nonRetryableError = nonRetryableError
            self.retryableError = retryableError
            self.stopped = stopped
        }
    }

}

extension SageMakerClientTypes.TrainingJobStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension SageMakerClientTypes {
    /// Metadata for a training job step.
    public struct TrainingJobStepMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the training job that was run by this step execution.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes.TrainingJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case trainingEndTime = "TrainingEndTime"
        case trainingJobArn = "TrainingJobArn"
        case trainingJobName = "TrainingJobName"
        case trainingJobStatus = "TrainingJobStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let trainingEndTime = trainingEndTime {
            try encodeContainer.encode(trainingEndTime.timeIntervalSince1970, forKey: .trainingEndTime)
        }
        if let trainingJobArn = trainingJobArn {
            try encodeContainer.encode(trainingJobArn, forKey: .trainingJobArn)
        }
        if let trainingJobName = trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
        if let trainingJobStatus = trainingJobStatus {
            try encodeContainer.encode(trainingJobStatus.rawValue, forKey: .trainingJobStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let trainingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatus.self, forKey: .trainingJobStatus)
        trainingJobStatus = trainingJobStatusDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about a training job.
    public struct TrainingJobSummary: Swift.Equatable {
        /// A timestamp that shows when the training job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// Timestamp when the training job was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// A timestamp that shows when the training job ended. This field is set only if the training job has one of the terminal statuses (Completed, Failed, or Stopped).
        public var trainingEndTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the training job.
        /// This member is required.
        public var trainingJobArn: Swift.String?
        /// The name of the training job that you want a summary for.
        /// This member is required.
        public var trainingJobName: Swift.String?
        /// The status of the training job.
        /// This member is required.
        public var trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            trainingEndTime: ClientRuntime.Date? = nil,
            trainingJobArn: Swift.String? = nil,
            trainingJobName: Swift.String? = nil,
            trainingJobStatus: SageMakerClientTypes.TrainingJobStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
        }
    }

}

extension SageMakerClientTypes.TrainingSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricDefinitions = "MetricDefinitions"
        case supportedHyperParameters = "SupportedHyperParameters"
        case supportedTrainingInstanceTypes = "SupportedTrainingInstanceTypes"
        case supportedTuningJobObjectiveMetrics = "SupportedTuningJobObjectiveMetrics"
        case supportsDistributedTraining = "SupportsDistributedTraining"
        case trainingChannels = "TrainingChannels"
        case trainingImage = "TrainingImage"
        case trainingImageDigest = "TrainingImageDigest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricDefinitions = metricDefinitions {
            var metricDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricDefinitions)
            for metricdefinitionlist0 in metricDefinitions {
                try metricDefinitionsContainer.encode(metricdefinitionlist0)
            }
        }
        if let supportedHyperParameters = supportedHyperParameters {
            var supportedHyperParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedHyperParameters)
            for hyperparameterspecifications0 in supportedHyperParameters {
                try supportedHyperParametersContainer.encode(hyperparameterspecifications0)
            }
        }
        if let supportedTrainingInstanceTypes = supportedTrainingInstanceTypes {
            var supportedTrainingInstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedTrainingInstanceTypes)
            for traininginstancetypes0 in supportedTrainingInstanceTypes {
                try supportedTrainingInstanceTypesContainer.encode(traininginstancetypes0.rawValue)
            }
        }
        if let supportedTuningJobObjectiveMetrics = supportedTuningJobObjectiveMetrics {
            var supportedTuningJobObjectiveMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedTuningJobObjectiveMetrics)
            for hyperparametertuningjobobjectives0 in supportedTuningJobObjectiveMetrics {
                try supportedTuningJobObjectiveMetricsContainer.encode(hyperparametertuningjobobjectives0)
            }
        }
        if supportsDistributedTraining != false {
            try encodeContainer.encode(supportsDistributedTraining, forKey: .supportsDistributedTraining)
        }
        if let trainingChannels = trainingChannels {
            var trainingChannelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trainingChannels)
            for channelspecifications0 in trainingChannels {
                try trainingChannelsContainer.encode(channelspecifications0)
            }
        }
        if let trainingImage = trainingImage {
            try encodeContainer.encode(trainingImage, forKey: .trainingImage)
        }
        if let trainingImageDigest = trainingImageDigest {
            try encodeContainer.encode(trainingImageDigest, forKey: .trainingImageDigest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingImage)
        trainingImage = trainingImageDecoded
        let trainingImageDigestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingImageDigest)
        trainingImageDigest = trainingImageDigestDecoded
        let supportedHyperParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterSpecification?].self, forKey: .supportedHyperParameters)
        var supportedHyperParametersDecoded0:[SageMakerClientTypes.HyperParameterSpecification]? = nil
        if let supportedHyperParametersContainer = supportedHyperParametersContainer {
            supportedHyperParametersDecoded0 = [SageMakerClientTypes.HyperParameterSpecification]()
            for structure0 in supportedHyperParametersContainer {
                if let structure0 = structure0 {
                    supportedHyperParametersDecoded0?.append(structure0)
                }
            }
        }
        supportedHyperParameters = supportedHyperParametersDecoded0
        let supportedTrainingInstanceTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrainingInstanceType?].self, forKey: .supportedTrainingInstanceTypes)
        var supportedTrainingInstanceTypesDecoded0:[SageMakerClientTypes.TrainingInstanceType]? = nil
        if let supportedTrainingInstanceTypesContainer = supportedTrainingInstanceTypesContainer {
            supportedTrainingInstanceTypesDecoded0 = [SageMakerClientTypes.TrainingInstanceType]()
            for string0 in supportedTrainingInstanceTypesContainer {
                if let string0 = string0 {
                    supportedTrainingInstanceTypesDecoded0?.append(string0)
                }
            }
        }
        supportedTrainingInstanceTypes = supportedTrainingInstanceTypesDecoded0
        let supportsDistributedTrainingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .supportsDistributedTraining)
        supportsDistributedTraining = supportsDistributedTrainingDecoded
        let metricDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MetricDefinition?].self, forKey: .metricDefinitions)
        var metricDefinitionsDecoded0:[SageMakerClientTypes.MetricDefinition]? = nil
        if let metricDefinitionsContainer = metricDefinitionsContainer {
            metricDefinitionsDecoded0 = [SageMakerClientTypes.MetricDefinition]()
            for structure0 in metricDefinitionsContainer {
                if let structure0 = structure0 {
                    metricDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        metricDefinitions = metricDefinitionsDecoded0
        let trainingChannelsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ChannelSpecification?].self, forKey: .trainingChannels)
        var trainingChannelsDecoded0:[SageMakerClientTypes.ChannelSpecification]? = nil
        if let trainingChannelsContainer = trainingChannelsContainer {
            trainingChannelsDecoded0 = [SageMakerClientTypes.ChannelSpecification]()
            for structure0 in trainingChannelsContainer {
                if let structure0 = structure0 {
                    trainingChannelsDecoded0?.append(structure0)
                }
            }
        }
        trainingChannels = trainingChannelsDecoded0
        let supportedTuningJobObjectiveMetricsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterTuningJobObjective?].self, forKey: .supportedTuningJobObjectiveMetrics)
        var supportedTuningJobObjectiveMetricsDecoded0:[SageMakerClientTypes.HyperParameterTuningJobObjective]? = nil
        if let supportedTuningJobObjectiveMetricsContainer = supportedTuningJobObjectiveMetricsContainer {
            supportedTuningJobObjectiveMetricsDecoded0 = [SageMakerClientTypes.HyperParameterTuningJobObjective]()
            for structure0 in supportedTuningJobObjectiveMetricsContainer {
                if let structure0 = structure0 {
                    supportedTuningJobObjectiveMetricsDecoded0?.append(structure0)
                }
            }
        }
        supportedTuningJobObjectiveMetrics = supportedTuningJobObjectiveMetricsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Defines how the algorithm is used for a training job.
    public struct TrainingSpecification: Swift.Equatable {
        /// A list of MetricDefinition objects, which are used for parsing metrics generated by the algorithm.
        public var metricDefinitions: [SageMakerClientTypes.MetricDefinition]?
        /// A list of the HyperParameterSpecification objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.>
        public var supportedHyperParameters: [SageMakerClientTypes.HyperParameterSpecification]?
        /// A list of the instance types that this algorithm can use for training.
        /// This member is required.
        public var supportedTrainingInstanceTypes: [SageMakerClientTypes.TrainingInstanceType]?
        /// A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.
        public var supportedTuningJobObjectiveMetrics: [SageMakerClientTypes.HyperParameterTuningJobObjective]?
        /// Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.
        public var supportsDistributedTraining: Swift.Bool
        /// A list of ChannelSpecification objects, which specify the input sources to be used by the algorithm.
        /// This member is required.
        public var trainingChannels: [SageMakerClientTypes.ChannelSpecification]?
        /// The Amazon ECR registry path of the Docker image that contains the training algorithm.
        /// This member is required.
        public var trainingImage: Swift.String?
        /// An MD5 hash of the training algorithm that identifies the Docker image used for training.
        public var trainingImageDigest: Swift.String?

        public init (
            metricDefinitions: [SageMakerClientTypes.MetricDefinition]? = nil,
            supportedHyperParameters: [SageMakerClientTypes.HyperParameterSpecification]? = nil,
            supportedTrainingInstanceTypes: [SageMakerClientTypes.TrainingInstanceType]? = nil,
            supportedTuningJobObjectiveMetrics: [SageMakerClientTypes.HyperParameterTuningJobObjective]? = nil,
            supportsDistributedTraining: Swift.Bool = false,
            trainingChannels: [SageMakerClientTypes.ChannelSpecification]? = nil,
            trainingImage: Swift.String? = nil,
            trainingImageDigest: Swift.String? = nil
        )
        {
            self.metricDefinitions = metricDefinitions
            self.supportedHyperParameters = supportedHyperParameters
            self.supportedTrainingInstanceTypes = supportedTrainingInstanceTypes
            self.supportedTuningJobObjectiveMetrics = supportedTuningJobObjectiveMetrics
            self.supportsDistributedTraining = supportsDistributedTraining
            self.trainingChannels = trainingChannels
            self.trainingImage = trainingImage
            self.trainingImageDigest = trainingImageDigest
        }
    }

}

extension SageMakerClientTypes.TransformDataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3DataSource = "S3DataSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3DataSource = s3DataSource {
            try encodeContainer.encode(s3DataSource, forKey: .s3DataSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3DataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformS3DataSource.self, forKey: .s3DataSource)
        s3DataSource = s3DataSourceDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the location of the channel data.
    public struct TransformDataSource: Swift.Equatable {
        /// The S3 location of the data source that is associated with a channel.
        /// This member is required.
        public var s3DataSource: SageMakerClientTypes.TransformS3DataSource?

        public init (
            s3DataSource: SageMakerClientTypes.TransformS3DataSource? = nil
        )
        {
            self.s3DataSource = s3DataSource
        }
    }

}

extension SageMakerClientTypes.TransformInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compressionType = "CompressionType"
        case contentType = "ContentType"
        case dataSource = "DataSource"
        case splitType = "SplitType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compressionType = compressionType {
            try encodeContainer.encode(compressionType.rawValue, forKey: .compressionType)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
        if let dataSource = dataSource {
            try encodeContainer.encode(dataSource, forKey: .dataSource)
        }
        if let splitType = splitType {
            try encodeContainer.encode(splitType.rawValue, forKey: .splitType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformDataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let contentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let compressionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CompressionType.self, forKey: .compressionType)
        compressionType = compressionTypeDecoded
        let splitTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SplitType.self, forKey: .splitType)
        splitType = splitTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the input source of a transform job and the way the transform job consumes it.
    public struct TransformInput: Swift.Equatable {
        /// If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
        public var compressionType: SageMakerClientTypes.CompressionType?
        /// The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
        public var contentType: Swift.String?
        /// Describes the location of the channel data, which is, the S3 location of the input data that the model can consume.
        /// This member is required.
        public var dataSource: SageMakerClientTypes.TransformDataSource?
        /// The method to use to split the transform job's data files into smaller batches. Splitting is necessary when the total size of each object is too large to fit in a single request. You can also use data splitting to improve performance by processing multiple concurrent mini-batches. The default value for SplitType is None, which indicates that input data files are not split, and request payloads contain the entire contents of an input object. Set the value of this parameter to Line to split records on a newline character boundary. SplitType also supports a number of record-oriented binary data formats. Currently, the supported record formats are:
        ///
        /// * RecordIO
        ///
        /// * TFRecord
        ///
        ///
        /// When splitting is enabled, the size of a mini-batch depends on the values of the BatchStrategy and MaxPayloadInMB parameters. When the value of BatchStrategy is MultiRecord, Amazon SageMaker sends the maximum number of records in each request, up to the MaxPayloadInMB limit. If the value of BatchStrategy is SingleRecord, Amazon SageMaker sends individual records in each request. Some data formats represent a record as a binary payload wrapped with extra padding bytes. When splitting is applied to a binary data format, padding is removed if the value of BatchStrategy is set to SingleRecord. Padding is not removed if the value of BatchStrategy is set to MultiRecord. For more information about RecordIO, see [Create a Dataset Using RecordIO](https://mxnet.apache.org/api/faq/recordio) in the MXNet documentation. For more information about TFRecord, see [Consuming TFRecord data](https://www.tensorflow.org/guide/data#consuming_tfrecord_data) in the TensorFlow documentation.
        public var splitType: SageMakerClientTypes.SplitType?

        public init (
            compressionType: SageMakerClientTypes.CompressionType? = nil,
            contentType: Swift.String? = nil,
            dataSource: SageMakerClientTypes.TransformDataSource? = nil,
            splitType: SageMakerClientTypes.SplitType? = nil
        )
        {
            self.compressionType = compressionType
            self.contentType = contentType
            self.dataSource = dataSource
            self.splitType = splitType
        }
    }

}

extension SageMakerClientTypes {
    public enum TransformInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Xlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Xlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [TransformInstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Xlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Xlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransformInstanceType(rawValue: rawValue) ?? TransformInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.TransformJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobArn = "AutoMLJobArn"
        case batchStrategy = "BatchStrategy"
        case creationTime = "CreationTime"
        case dataProcessing = "DataProcessing"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case labelingJobArn = "LabelingJobArn"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case modelClientConfig = "ModelClientConfig"
        case modelName = "ModelName"
        case tags = "Tags"
        case transformEndTime = "TransformEndTime"
        case transformInput = "TransformInput"
        case transformJobArn = "TransformJobArn"
        case transformJobName = "TransformJobName"
        case transformJobStatus = "TransformJobStatus"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
        case transformStartTime = "TransformStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobArn = autoMLJobArn {
            try encodeContainer.encode(autoMLJobArn, forKey: .autoMLJobArn)
        }
        if let batchStrategy = batchStrategy {
            try encodeContainer.encode(batchStrategy.rawValue, forKey: .batchStrategy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dataProcessing = dataProcessing {
            try encodeContainer.encode(dataProcessing, forKey: .dataProcessing)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, transformenvironmentmap0) in environment {
                try environmentContainer.encode(transformenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let labelingJobArn = labelingJobArn {
            try encodeContainer.encode(labelingJobArn, forKey: .labelingJobArn)
        }
        if let maxConcurrentTransforms = maxConcurrentTransforms {
            try encodeContainer.encode(maxConcurrentTransforms, forKey: .maxConcurrentTransforms)
        }
        if let maxPayloadInMB = maxPayloadInMB {
            try encodeContainer.encode(maxPayloadInMB, forKey: .maxPayloadInMB)
        }
        if let modelClientConfig = modelClientConfig {
            try encodeContainer.encode(modelClientConfig, forKey: .modelClientConfig)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let transformEndTime = transformEndTime {
            try encodeContainer.encode(transformEndTime.timeIntervalSince1970, forKey: .transformEndTime)
        }
        if let transformInput = transformInput {
            try encodeContainer.encode(transformInput, forKey: .transformInput)
        }
        if let transformJobArn = transformJobArn {
            try encodeContainer.encode(transformJobArn, forKey: .transformJobArn)
        }
        if let transformJobName = transformJobName {
            try encodeContainer.encode(transformJobName, forKey: .transformJobName)
        }
        if let transformJobStatus = transformJobStatus {
            try encodeContainer.encode(transformJobStatus.rawValue, forKey: .transformJobStatus)
        }
        if let transformOutput = transformOutput {
            try encodeContainer.encode(transformOutput, forKey: .transformOutput)
        }
        if let transformResources = transformResources {
            try encodeContainer.encode(transformResources, forKey: .transformResources)
        }
        if let transformStartTime = transformStartTime {
            try encodeContainer.encode(transformStartTime.timeIntervalSince1970, forKey: .transformStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobName)
        transformJobName = transformJobNameDecoded
        let transformJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobArn)
        transformJobArn = transformJobArnDecoded
        let transformJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJobStatus.self, forKey: .transformJobStatus)
        transformJobStatus = transformJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let maxConcurrentTransformsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentTransforms)
        maxConcurrentTransforms = maxConcurrentTransformsDecoded
        let modelClientConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelClientConfig.self, forKey: .modelClientConfig)
        modelClientConfig = modelClientConfigDecoded
        let maxPayloadInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPayloadInMB)
        maxPayloadInMB = maxPayloadInMBDecoded
        let batchStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.BatchStrategy.self, forKey: .batchStrategy)
        batchStrategy = batchStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, transformenvironmentvalue0) in environmentContainer {
                if let transformenvironmentvalue0 = transformenvironmentvalue0 {
                    environmentDecoded0?[key0] = transformenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let transformInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformInput.self, forKey: .transformInput)
        transformInput = transformInputDecoded
        let transformOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformOutput.self, forKey: .transformOutput)
        transformOutput = transformOutputDecoded
        let transformResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformResources.self, forKey: .transformResources)
        transformResources = transformResourcesDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let transformStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transformStartTime)
        transformStartTime = transformStartTimeDecoded
        let transformEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transformEndTime)
        transformEndTime = transformEndTimeDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let dataProcessingDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataProcessing.self, forKey: .dataProcessing)
        dataProcessing = dataProcessingDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SageMakerClientTypes {
    /// A batch transform job. For information about SageMaker batch transform, see [Use Batch Transform](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html).
    public struct TransformJob: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AutoML job that created the transform job.
        public var autoMLJobArn: Swift.String?
        /// Specifies the number of records to include in a mini-batch for an HTTP inference request. A record is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record.
        public var batchStrategy: SageMakerClientTypes.BatchStrategy?
        /// A timestamp that shows when the transform Job was created.
        public var creationTime: ClientRuntime.Date?
        /// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see [Associate Prediction Results with their Corresponding Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
        public var dataProcessing: SageMakerClientTypes.DataProcessing?
        /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
        public var environment: [Swift.String:Swift.String]?
        /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
        ///
        /// * [CreateProcessingJob]
        ///
        /// * [CreateTrainingJob]
        ///
        /// * [CreateTransformJob]
        public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
        /// If the transform job failed, the reason it failed.
        public var failureReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the labeling job that created the transform job.
        public var labelingJobArn: Swift.String?
        /// The maximum number of parallel requests that can be sent to each instance in a transform job. If MaxConcurrentTransforms is set to 0 or left unset, SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm. If the execution-parameters endpoint is not enabled, the default value is 1. For built-in algorithms, you don't need to set a value for MaxConcurrentTransforms.
        public var maxConcurrentTransforms: Swift.Int?
        /// The maximum allowed size of the payload, in MB. A payload is the data portion of a record (without metadata). The value in MaxPayloadInMB must be greater than, or equal to, the size of a single record. To estimate the size of a record in MB, divide the size of your dataset by the number of records. To ensure that the records fit within the maximum payload size, we recommend using a slightly larger value. The default value is 6 MB. For cases where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding, set the value to 0. This feature works only in supported algorithms. Currently, SageMaker built-in algorithms do not support HTTP chunked encoding.
        public var maxPayloadInMB: Swift.Int?
        /// Configures the timeout and maximum number of retries for processing a transform job invocation.
        public var modelClientConfig: SageMakerClientTypes.ModelClientConfig?
        /// The name of the model associated with the transform job.
        public var modelName: Swift.String?
        /// A list of tags associated with the transform job.
        public var tags: [SageMakerClientTypes.Tag]?
        /// Indicates when the transform job has been completed, or has stopped or failed. You are billed for the time interval between this time and the value of TransformStartTime.
        public var transformEndTime: ClientRuntime.Date?
        /// Describes the input source of a transform job and the way the transform job consumes it.
        public var transformInput: SageMakerClientTypes.TransformInput?
        /// The Amazon Resource Name (ARN) of the transform job.
        public var transformJobArn: Swift.String?
        /// The name of the transform job.
        public var transformJobName: Swift.String?
        /// The status of the transform job. Transform job statuses are:
        ///
        /// * InProgress - The job is in progress.
        ///
        /// * Completed - The job has completed.
        ///
        /// * Failed - The transform job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTransformJob call.
        ///
        /// * Stopping - The transform job is stopping.
        ///
        /// * Stopped - The transform job has stopped.
        public var transformJobStatus: SageMakerClientTypes.TransformJobStatus?
        /// Describes the results of a transform job.
        public var transformOutput: SageMakerClientTypes.TransformOutput?
        /// Describes the resources, including ML instance types and ML instance count, to use for transform job.
        public var transformResources: SageMakerClientTypes.TransformResources?
        /// Indicates when the transform job starts on ML instances. You are billed for the time interval between this time and the value of TransformEndTime.
        public var transformStartTime: ClientRuntime.Date?

        public init (
            autoMLJobArn: Swift.String? = nil,
            batchStrategy: SageMakerClientTypes.BatchStrategy? = nil,
            creationTime: ClientRuntime.Date? = nil,
            dataProcessing: SageMakerClientTypes.DataProcessing? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
            failureReason: Swift.String? = nil,
            labelingJobArn: Swift.String? = nil,
            maxConcurrentTransforms: Swift.Int? = nil,
            maxPayloadInMB: Swift.Int? = nil,
            modelClientConfig: SageMakerClientTypes.ModelClientConfig? = nil,
            modelName: Swift.String? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            transformEndTime: ClientRuntime.Date? = nil,
            transformInput: SageMakerClientTypes.TransformInput? = nil,
            transformJobArn: Swift.String? = nil,
            transformJobName: Swift.String? = nil,
            transformJobStatus: SageMakerClientTypes.TransformJobStatus? = nil,
            transformOutput: SageMakerClientTypes.TransformOutput? = nil,
            transformResources: SageMakerClientTypes.TransformResources? = nil,
            transformStartTime: ClientRuntime.Date? = nil
        )
        {
            self.autoMLJobArn = autoMLJobArn
            self.batchStrategy = batchStrategy
            self.creationTime = creationTime
            self.dataProcessing = dataProcessing
            self.environment = environment
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.labelingJobArn = labelingJobArn
            self.maxConcurrentTransforms = maxConcurrentTransforms
            self.maxPayloadInMB = maxPayloadInMB
            self.modelClientConfig = modelClientConfig
            self.modelName = modelName
            self.tags = tags
            self.transformEndTime = transformEndTime
            self.transformInput = transformInput
            self.transformJobArn = transformJobArn
            self.transformJobName = transformJobName
            self.transformJobStatus = transformJobStatus
            self.transformOutput = transformOutput
            self.transformResources = transformResources
            self.transformStartTime = transformStartTime
        }
    }

}

extension SageMakerClientTypes.TransformJobDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchStrategy = "BatchStrategy"
        case environment = "Environment"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case transformInput = "TransformInput"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchStrategy = batchStrategy {
            try encodeContainer.encode(batchStrategy.rawValue, forKey: .batchStrategy)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, transformenvironmentmap0) in environment {
                try environmentContainer.encode(transformenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let maxConcurrentTransforms = maxConcurrentTransforms {
            try encodeContainer.encode(maxConcurrentTransforms, forKey: .maxConcurrentTransforms)
        }
        if let maxPayloadInMB = maxPayloadInMB {
            try encodeContainer.encode(maxPayloadInMB, forKey: .maxPayloadInMB)
        }
        if let transformInput = transformInput {
            try encodeContainer.encode(transformInput, forKey: .transformInput)
        }
        if let transformOutput = transformOutput {
            try encodeContainer.encode(transformOutput, forKey: .transformOutput)
        }
        if let transformResources = transformResources {
            try encodeContainer.encode(transformResources, forKey: .transformResources)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxConcurrentTransformsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentTransforms)
        maxConcurrentTransforms = maxConcurrentTransformsDecoded
        let maxPayloadInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPayloadInMB)
        maxPayloadInMB = maxPayloadInMBDecoded
        let batchStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.BatchStrategy.self, forKey: .batchStrategy)
        batchStrategy = batchStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, transformenvironmentvalue0) in environmentContainer {
                if let transformenvironmentvalue0 = transformenvironmentvalue0 {
                    environmentDecoded0?[key0] = transformenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let transformInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformInput.self, forKey: .transformInput)
        transformInput = transformInputDecoded
        let transformOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformOutput.self, forKey: .transformOutput)
        transformOutput = transformOutputDecoded
        let transformResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformResources.self, forKey: .transformResources)
        transformResources = transformResourcesDecoded
    }
}

extension SageMakerClientTypes {
    /// Defines the input needed to run a transform job using the inference specification specified in the algorithm.
    public struct TransformJobDefinition: Swift.Equatable {
        /// A string that determines the number of records included in a single mini-batch. SingleRecord means only one record is used per mini-batch. MultiRecord means a mini-batch is set to contain as many records that can fit within the MaxPayloadInMB limit.
        public var batchStrategy: SageMakerClientTypes.BatchStrategy?
        /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
        public var environment: [Swift.String:Swift.String]?
        /// The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
        public var maxConcurrentTransforms: Swift.Int?
        /// The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
        public var maxPayloadInMB: Swift.Int?
        /// A description of the input source and the way the transform job consumes it.
        /// This member is required.
        public var transformInput: SageMakerClientTypes.TransformInput?
        /// Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
        /// This member is required.
        public var transformOutput: SageMakerClientTypes.TransformOutput?
        /// Identifies the ML compute instances for the transform job.
        /// This member is required.
        public var transformResources: SageMakerClientTypes.TransformResources?

        public init (
            batchStrategy: SageMakerClientTypes.BatchStrategy? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            maxConcurrentTransforms: Swift.Int? = nil,
            maxPayloadInMB: Swift.Int? = nil,
            transformInput: SageMakerClientTypes.TransformInput? = nil,
            transformOutput: SageMakerClientTypes.TransformOutput? = nil,
            transformResources: SageMakerClientTypes.TransformResources? = nil
        )
        {
            self.batchStrategy = batchStrategy
            self.environment = environment
            self.maxConcurrentTransforms = maxConcurrentTransforms
            self.maxPayloadInMB = maxPayloadInMB
            self.transformInput = transformInput
            self.transformOutput = transformOutput
            self.transformResources = transformResources
        }
    }

}

extension SageMakerClientTypes {
    public enum TransformJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [TransformJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransformJobStatus(rawValue: rawValue) ?? TransformJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.TransformJobStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension SageMakerClientTypes {
    /// Metadata for a transform job step.
    public struct TransformJobStepMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the transform job that was run by this step execution.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes.TransformJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case transformEndTime = "TransformEndTime"
        case transformJobArn = "TransformJobArn"
        case transformJobName = "TransformJobName"
        case transformJobStatus = "TransformJobStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let transformEndTime = transformEndTime {
            try encodeContainer.encode(transformEndTime.timeIntervalSince1970, forKey: .transformEndTime)
        }
        if let transformJobArn = transformJobArn {
            try encodeContainer.encode(transformJobArn, forKey: .transformJobArn)
        }
        if let transformJobName = transformJobName {
            try encodeContainer.encode(transformJobName, forKey: .transformJobName)
        }
        if let transformJobStatus = transformJobStatus {
            try encodeContainer.encode(transformJobStatus.rawValue, forKey: .transformJobStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobName)
        transformJobName = transformJobNameDecoded
        let transformJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobArn)
        transformJobArn = transformJobArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let transformEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transformEndTime)
        transformEndTime = transformEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let transformJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJobStatus.self, forKey: .transformJobStatus)
        transformJobStatus = transformJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides a summary of a transform job. Multiple TransformJobSummary objects are returned as a list after in response to a [ListTransformJobs] call.
    public struct TransformJobSummary: Swift.Equatable {
        /// A timestamp that shows when the transform Job was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// If the transform job failed, the reason it failed.
        public var failureReason: Swift.String?
        /// Indicates when the transform job was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// Indicates when the transform job ends on compute instances. For successful jobs and stopped jobs, this is the exact time recorded after the results are uploaded. For failed jobs, this is when Amazon SageMaker detected that the job failed.
        public var transformEndTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the transform job.
        /// This member is required.
        public var transformJobArn: Swift.String?
        /// The name of the transform job.
        /// This member is required.
        public var transformJobName: Swift.String?
        /// The status of the transform job.
        /// This member is required.
        public var transformJobStatus: SageMakerClientTypes.TransformJobStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            transformEndTime: ClientRuntime.Date? = nil,
            transformJobArn: Swift.String? = nil,
            transformJobName: Swift.String? = nil,
            transformJobStatus: SageMakerClientTypes.TransformJobStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.transformEndTime = transformEndTime
            self.transformJobArn = transformJobArn
            self.transformJobName = transformJobName
            self.transformJobStatus = transformJobStatus
        }
    }

}

extension SageMakerClientTypes.TransformOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accept = "Accept"
        case assembleWith = "AssembleWith"
        case kmsKeyId = "KmsKeyId"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accept = accept {
            try encodeContainer.encode(accept, forKey: .accept)
        }
        if let assembleWith = assembleWith {
            try encodeContainer.encode(assembleWith.rawValue, forKey: .assembleWith)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let acceptDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accept)
        accept = acceptDecoded
        let assembleWithDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AssemblyType.self, forKey: .assembleWith)
        assembleWith = assembleWithDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the results of a transform job.
    public struct TransformOutput: Swift.Equatable {
        /// The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
        public var accept: Swift.String?
        /// Defines how to assemble the results of the transform job as a single S3 object. Choose a format that is most convenient to you. To concatenate the results in binary format, specify None. To add a newline character at the end of every transformed record, specify Line.
        public var assembleWith: SageMakerClientTypes.AssemblyType?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats:
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Alias name: alias/ExampleAlias
        ///
        /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
        ///
        ///
        /// If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KMS key policy must grant permission to the IAM role that you specify in your [CreateModel] request. For more information, see [Using Key Policies in Amazon Web Services KMS](http://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job. For example, s3://bucket-name/key-name-prefix. For every S3 object used as input for the transform job, batch transform stores the transformed data with an .out suffix in a corresponding subfolder in the location in the output prefix. For example, for the input data stored at s3://bucket-name/input-name-prefix/dataset01/data.csv, batch transform stores the transformed data at s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out. Batch transform doesn't upload partially processed objects. For an input S3 object that contains multiple records, it creates an .out file only if the transform job succeeds on the entire file. When the input contains multiple S3 objects, the batch transform job processes the listed S3 objects and uploads only the output for successfully processed objects. If any object fails in the transform job batch transform marks the job as failed to prompt investigation.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init (
            accept: Swift.String? = nil,
            assembleWith: SageMakerClientTypes.AssemblyType? = nil,
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.accept = accept
            self.assembleWith = assembleWith
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes.TransformResources: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case volumeKmsKeyId = "VolumeKmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let volumeKmsKeyId = volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the resources, including ML instance types and ML instance count, to use for transform job.
    public struct TransformResources: Swift.Equatable {
        /// The number of ML compute instances to use in the transform job. For distributed transform jobs, specify a value greater than 1. The default value is 1.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The ML compute instance type for the transform job. If you are using built-in algorithms to transform moderately sized datasets, we recommend using ml.m4.xlarge or ml.m5.largeinstance types.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.TransformInstanceType?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job. Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a VolumeKmsKeyId when using an instance type with local storage. For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes). For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html). The VolumeKmsKeyId can be any of the following formats:
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Alias name: alias/ExampleAlias
        ///
        /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
        public var volumeKmsKeyId: Swift.String?

        public init (
            instanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.TransformInstanceType? = nil,
            volumeKmsKeyId: Swift.String? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
        }
    }

}

extension SageMakerClientTypes.TransformS3DataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3DataType = "S3DataType"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3DataType = s3DataType {
            try encodeContainer.encode(s3DataType.rawValue, forKey: .s3DataType)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3DataTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.S3DataType.self, forKey: .s3DataType)
        s3DataType = s3DataTypeDecoded
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
    }
}

extension SageMakerClientTypes {
    /// Describes the S3 data source.
    public struct TransformS3DataSource: Swift.Equatable {
        /// If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for batch transform. If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for batch transform. The following values are compatible: ManifestFile, S3Prefix The following value is not compatible: AugmentedManifestFile
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.S3DataType?
        /// Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest. For example:
        ///
        /// * A key name prefix might look like this: s3://bucketname/exampleprefix.
        ///
        /// * A manifest might look like this: s3://bucketname/example.manifest The manifest is an S3 object which is a JSON file with the following format: [ {"prefix": "s3://customer_bucket/some/prefix/"},"relative/path/to/custdata-1","relative/path/custdata-2",..."relative/path/custdata-N"] The preceding JSON matches the following S3Uris: s3://customer_bucket/some/prefix/relative/path/to/custdata-1s3://customer_bucket/some/prefix/relative/path/custdata-2...s3://customer_bucket/some/prefix/relative/path/custdata-N The complete set of S3Uris in this manifest constitutes the input data for the channel for this datasource. The object that each S3Uris points to must be readable by the IAM role that Amazon SageMaker uses to perform tasks on your behalf.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            s3DataType: SageMakerClientTypes.S3DataType? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes.Trial: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case experimentName = "ExperimentName"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case metadataProperties = "MetadataProperties"
        case source = "Source"
        case tags = "Tags"
        case trialArn = "TrialArn"
        case trialComponentSummaries = "TrialComponentSummaries"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trialArn = trialArn {
            try encodeContainer.encode(trialArn, forKey: .trialArn)
        }
        if let trialComponentSummaries = trialComponentSummaries {
            var trialComponentSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trialComponentSummaries)
            for trialcomponentsimplesummaries0 in trialComponentSummaries {
                try trialComponentSummariesContainer.encode(trialcomponentsimplesummaries0)
            }
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let trialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialArn)
        trialArn = trialArnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialSource.self, forKey: .source)
        source = sourceDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let trialComponentSummariesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrialComponentSimpleSummary?].self, forKey: .trialComponentSummaries)
        var trialComponentSummariesDecoded0:[SageMakerClientTypes.TrialComponentSimpleSummary]? = nil
        if let trialComponentSummariesContainer = trialComponentSummariesContainer {
            trialComponentSummariesDecoded0 = [SageMakerClientTypes.TrialComponentSimpleSummary]()
            for structure0 in trialComponentSummariesContainer {
                if let structure0 = structure0 {
                    trialComponentSummariesDecoded0?.append(structure0)
                }
            }
        }
        trialComponentSummaries = trialComponentSummariesDecoded0
    }
}

extension SageMakerClientTypes {
    /// The properties of a trial as returned by the [Search] API.
    public struct Trial: Swift.Equatable {
        /// Who created the trial.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the trial was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the trial as displayed. If DisplayName isn't specified, TrialName is displayed.
        public var displayName: Swift.String?
        /// The name of the experiment the trial is part of.
        public var experimentName: Swift.String?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// Who last modified the trial.
        public var lastModifiedTime: ClientRuntime.Date?
        /// Metadata properties of the tracking entity, trial, or trial component.
        public var metadataProperties: SageMakerClientTypes.MetadataProperties?
        /// The source of the trial.
        public var source: SageMakerClientTypes.TrialSource?
        /// The list of tags that are associated with the trial. You can use [Search] API to search on the tags.
        public var tags: [SageMakerClientTypes.Tag]?
        /// The Amazon Resource Name (ARN) of the trial.
        public var trialArn: Swift.String?
        /// A list of the components associated with the trial. For each component, a summary of the component's properties is included.
        public var trialComponentSummaries: [SageMakerClientTypes.TrialComponentSimpleSummary]?
        /// The name of the trial.
        public var trialName: Swift.String?

        public init (
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            displayName: Swift.String? = nil,
            experimentName: Swift.String? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
            source: SageMakerClientTypes.TrialSource? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            trialArn: Swift.String? = nil,
            trialComponentSummaries: [SageMakerClientTypes.TrialComponentSimpleSummary]? = nil,
            trialName: Swift.String? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.experimentName = experimentName
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.metadataProperties = metadataProperties
            self.source = source
            self.tags = tags
            self.trialArn = trialArn
            self.trialComponentSummaries = trialComponentSummaries
            self.trialName = trialName
        }
    }

}

extension SageMakerClientTypes.TrialComponent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case metadataProperties = "MetadataProperties"
        case metrics = "Metrics"
        case outputArtifacts = "OutputArtifacts"
        case parameters = "Parameters"
        case parents = "Parents"
        case source = "Source"
        case sourceDetail = "SourceDetail"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
        case trialComponentArn = "TrialComponentArn"
        case trialComponentName = "TrialComponentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .inputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in inputArtifacts {
                try inputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let lineageGroupArn = lineageGroupArn {
            try encodeContainer.encode(lineageGroupArn, forKey: .lineageGroupArn)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metrics)
            for trialcomponentmetricsummaries0 in metrics {
                try metricsContainer.encode(trialcomponentmetricsummaries0)
            }
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .outputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in outputArtifacts {
                try outputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, trialcomponentparameters0) in parameters {
                try parametersContainer.encode(trialcomponentparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let parents = parents {
            var parentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parents)
            for parents0 in parents {
                try parentsContainer.encode(parents0)
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceDetail = sourceDetail {
            try encodeContainer.encode(sourceDetail, forKey: .sourceDetail)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trialComponentArn = trialComponentArn {
            try encodeContainer.encode(trialComponentArn, forKey: .trialComponentArn)
        }
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentSource.self, forKey: .source)
        source = sourceDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentParameterValue?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]()
            for (key0, trialcomponentparametervalue0) in parametersContainer {
                if let trialcomponentparametervalue0 = trialcomponentparametervalue0 {
                    parametersDecoded0?[key0] = trialcomponentparametervalue0
                }
            }
        }
        parameters = parametersDecoded0
        let inputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in inputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    inputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in outputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    outputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let metricsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrialComponentMetricSummary?].self, forKey: .metrics)
        var metricsDecoded0:[SageMakerClientTypes.TrialComponentMetricSummary]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [SageMakerClientTypes.TrialComponentMetricSummary]()
            for structure0 in metricsContainer {
                if let structure0 = structure0 {
                    metricsDecoded0?.append(structure0)
                }
            }
        }
        metrics = metricsDecoded0
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let sourceDetailDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentSourceDetail.self, forKey: .sourceDetail)
        sourceDetail = sourceDetailDecoded
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let parentsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Parent?].self, forKey: .parents)
        var parentsDecoded0:[SageMakerClientTypes.Parent]? = nil
        if let parentsContainer = parentsContainer {
            parentsDecoded0 = [SageMakerClientTypes.Parent]()
            for structure0 in parentsContainer {
                if let structure0 = structure0 {
                    parentsDecoded0?.append(structure0)
                }
            }
        }
        parents = parentsDecoded0
    }
}

extension SageMakerClientTypes {
    /// The properties of a trial component as returned by the [Search] API.
    public struct TrialComponent: Swift.Equatable {
        /// Who created the trial component.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the component was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the component as displayed. If DisplayName isn't specified, TrialComponentName is displayed.
        public var displayName: Swift.String?
        /// When the component ended.
        public var endTime: ClientRuntime.Date?
        /// The input artifacts of the component.
        public var inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// When the component was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the lineage group resource.
        public var lineageGroupArn: Swift.String?
        /// Metadata properties of the tracking entity, trial, or trial component.
        public var metadataProperties: SageMakerClientTypes.MetadataProperties?
        /// The metrics for the component.
        public var metrics: [SageMakerClientTypes.TrialComponentMetricSummary]?
        /// The output artifacts of the component.
        public var outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
        /// The hyperparameters of the component.
        public var parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]?
        /// An array of the parents of the component. A parent is a trial the component is associated with and the experiment the trial is part of. A component might not have any parents.
        public var parents: [SageMakerClientTypes.Parent]?
        /// The Amazon Resource Name (ARN) and job type of the source of the component.
        public var source: SageMakerClientTypes.TrialComponentSource?
        /// Details of the source of the component.
        public var sourceDetail: SageMakerClientTypes.TrialComponentSourceDetail?
        /// When the component started.
        public var startTime: ClientRuntime.Date?
        /// The status of the trial component.
        public var status: SageMakerClientTypes.TrialComponentStatus?
        /// The list of tags that are associated with the component. You can use [Search] API to search on the tags.
        public var tags: [SageMakerClientTypes.Tag]?
        /// The Amazon Resource Name (ARN) of the trial component.
        public var trialComponentArn: Swift.String?
        /// The name of the trial component.
        public var trialComponentName: Swift.String?

        public init (
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            displayName: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            lineageGroupArn: Swift.String? = nil,
            metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
            metrics: [SageMakerClientTypes.TrialComponentMetricSummary]? = nil,
            outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil,
            parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil,
            parents: [SageMakerClientTypes.Parent]? = nil,
            source: SageMakerClientTypes.TrialComponentSource? = nil,
            sourceDetail: SageMakerClientTypes.TrialComponentSourceDetail? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: SageMakerClientTypes.TrialComponentStatus? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            trialComponentArn: Swift.String? = nil,
            trialComponentName: Swift.String? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.endTime = endTime
            self.inputArtifacts = inputArtifacts
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.lineageGroupArn = lineageGroupArn
            self.metadataProperties = metadataProperties
            self.metrics = metrics
            self.outputArtifacts = outputArtifacts
            self.parameters = parameters
            self.parents = parents
            self.source = source
            self.sourceDetail = sourceDetail
            self.startTime = startTime
            self.status = status
            self.tags = tags
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
        }
    }

}

extension SageMakerClientTypes.TrialComponentArtifact: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mediaType = "MediaType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mediaType = mediaType {
            try encodeContainer.encode(mediaType, forKey: .mediaType)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mediaTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaType)
        mediaType = mediaTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SageMakerClientTypes {
    /// Represents an input or output artifact of a trial component. You specify TrialComponentArtifact as part of the InputArtifacts and OutputArtifacts parameters in the [CreateTrialComponent] request. Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types. Examples of output artifacts are metrics, snapshots, logs, and images.
    public struct TrialComponentArtifact: Swift.Equatable {
        /// The media type of the artifact, which indicates the type of data in the artifact file. The media type consists of a type and a subtype concatenated with a slash (/) character, for example, text/csv, image/jpeg, and s3/uri. The type specifies the category of the media. The subtype specifies the kind of data.
        public var mediaType: Swift.String?
        /// The location of the artifact.
        /// This member is required.
        public var value: Swift.String?

        public init (
            mediaType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.mediaType = mediaType
            self.value = value
        }
    }

}

extension SageMakerClientTypes.TrialComponentMetricSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case avg = "Avg"
        case count = "Count"
        case last = "Last"
        case max = "Max"
        case metricName = "MetricName"
        case min = "Min"
        case sourceArn = "SourceArn"
        case stdDev = "StdDev"
        case timeStamp = "TimeStamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let avg = avg {
            try encodeContainer.encode(avg, forKey: .avg)
        }
        if let count = count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let last = last {
            try encodeContainer.encode(last, forKey: .last)
        }
        if let max = max {
            try encodeContainer.encode(max, forKey: .max)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let min = min {
            try encodeContainer.encode(min, forKey: .min)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let stdDev = stdDev {
            try encodeContainer.encode(stdDev, forKey: .stdDev)
        }
        if let timeStamp = timeStamp {
            try encodeContainer.encode(timeStamp.timeIntervalSince1970, forKey: .timeStamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let timeStampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timeStamp)
        timeStamp = timeStampDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .max)
        max = maxDecoded
        let minDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .min)
        min = minDecoded
        let lastDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .last)
        last = lastDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let avgDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .avg)
        avg = avgDecoded
        let stdDevDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .stdDev)
        stdDev = stdDevDecoded
    }
}

extension SageMakerClientTypes {
    /// A summary of the metrics of a trial component.
    public struct TrialComponentMetricSummary: Swift.Equatable {
        /// The average value of the metric.
        public var avg: Swift.Double?
        /// The number of samples used to generate the metric.
        public var count: Swift.Int?
        /// The most recent value of the metric.
        public var last: Swift.Double?
        /// The maximum value of the metric.
        public var max: Swift.Double?
        /// The name of the metric.
        public var metricName: Swift.String?
        /// The minimum value of the metric.
        public var min: Swift.Double?
        /// The Amazon Resource Name (ARN) of the source.
        public var sourceArn: Swift.String?
        /// The standard deviation of the metric.
        public var stdDev: Swift.Double?
        /// When the metric was last updated.
        public var timeStamp: ClientRuntime.Date?

        public init (
            avg: Swift.Double? = nil,
            count: Swift.Int? = nil,
            last: Swift.Double? = nil,
            max: Swift.Double? = nil,
            metricName: Swift.String? = nil,
            min: Swift.Double? = nil,
            sourceArn: Swift.String? = nil,
            stdDev: Swift.Double? = nil,
            timeStamp: ClientRuntime.Date? = nil
        )
        {
            self.avg = avg
            self.count = count
            self.last = last
            self.max = max
            self.metricName = metricName
            self.min = min
            self.sourceArn = sourceArn
            self.stdDev = stdDev
            self.timeStamp = timeStamp
        }
    }

}

extension SageMakerClientTypes.TrialComponentParameterValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numbervalue = "NumberValue"
        case stringvalue = "StringValue"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .numbervalue(numbervalue):
                try container.encode(numbervalue, forKey: .numbervalue)
            case let .stringvalue(stringvalue):
                try container.encode(stringvalue, forKey: .stringvalue)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let stringvalueDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .stringvalue)
        if let stringvalue = stringvalueDecoded {
            self = .stringvalue(stringvalue)
            return
        }
        let numbervalueDecoded = try values.decodeIfPresent(Swift.Double.self, forKey: .numbervalue)
        if let numbervalue = numbervalueDecoded {
            self = .numbervalue(numbervalue)
            return
        }
        self = .sdkUnknown("")
    }
}

extension SageMakerClientTypes {
    /// The value of a hyperparameter. Only one of NumberValue or StringValue can be specified. This object is specified in the [CreateTrialComponent] request.
    public enum TrialComponentParameterValue: Swift.Equatable {
        /// The string value of a categorical hyperparameter. If you specify a value for this parameter, you can't specify the NumberValue parameter.
        case stringvalue(Swift.String)
        /// The numeric value of a numeric hyperparameter. If you specify a value for this parameter, you can't specify the StringValue parameter.
        case numbervalue(Swift.Double)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {
    public enum TrialComponentPrimaryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [TrialComponentPrimaryStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrialComponentPrimaryStatus(rawValue: rawValue) ?? TrialComponentPrimaryStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.TrialComponentSimpleSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case trialComponentArn = "TrialComponentArn"
        case trialComponentName = "TrialComponentName"
        case trialComponentSource = "TrialComponentSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let trialComponentArn = trialComponentArn {
            try encodeContainer.encode(trialComponentArn, forKey: .trialComponentArn)
        }
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
        if let trialComponentSource = trialComponentSource {
            try encodeContainer.encode(trialComponentSource, forKey: .trialComponentSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
        let trialComponentSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentSource.self, forKey: .trialComponentSource)
        trialComponentSource = trialComponentSourceDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}

extension SageMakerClientTypes {
    /// A short summary of a trial component.
    public struct TrialComponentSimpleSummary: Swift.Equatable {
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the component was created.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the trial component.
        public var trialComponentArn: Swift.String?
        /// The name of the trial component.
        public var trialComponentName: Swift.String?
        /// The Amazon Resource Name (ARN) and job type of the source of a trial component.
        public var trialComponentSource: SageMakerClientTypes.TrialComponentSource?

        public init (
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            trialComponentArn: Swift.String? = nil,
            trialComponentName: Swift.String? = nil,
            trialComponentSource: SageMakerClientTypes.TrialComponentSource? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
            self.trialComponentSource = trialComponentSource
        }
    }

}

extension SageMakerClientTypes.TrialComponentSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceArn = "SourceArn"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// The Amazon Resource Name (ARN) and job type of the source of a trial component.
    public struct TrialComponentSource: Swift.Equatable {
        /// The source ARN.
        /// This member is required.
        public var sourceArn: Swift.String?
        /// The source job type.
        public var sourceType: Swift.String?

        public init (
            sourceArn: Swift.String? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
        }
    }

}

extension SageMakerClientTypes.TrialComponentSourceDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processingJob = "ProcessingJob"
        case sourceArn = "SourceArn"
        case trainingJob = "TrainingJob"
        case transformJob = "TransformJob"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let processingJob = processingJob {
            try encodeContainer.encode(processingJob, forKey: .processingJob)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let trainingJob = trainingJob {
            try encodeContainer.encode(trainingJob, forKey: .trainingJob)
        }
        if let transformJob = transformJob {
            try encodeContainer.encode(transformJob, forKey: .transformJob)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let trainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJob.self, forKey: .trainingJob)
        trainingJob = trainingJobDecoded
        let processingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingJob.self, forKey: .processingJob)
        processingJob = processingJobDecoded
        let transformJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJob.self, forKey: .transformJob)
        transformJob = transformJobDecoded
    }
}

extension SageMakerClientTypes {
    /// Detailed information about the source of a trial component. Either ProcessingJob or TrainingJob is returned.
    public struct TrialComponentSourceDetail: Swift.Equatable {
        /// Information about a processing job that's the source of a trial component.
        public var processingJob: SageMakerClientTypes.ProcessingJob?
        /// The Amazon Resource Name (ARN) of the source.
        public var sourceArn: Swift.String?
        /// Information about a training job that's the source of a trial component.
        public var trainingJob: SageMakerClientTypes.TrainingJob?
        /// Information about a transform job that's the source of a trial component.
        public var transformJob: SageMakerClientTypes.TransformJob?

        public init (
            processingJob: SageMakerClientTypes.ProcessingJob? = nil,
            sourceArn: Swift.String? = nil,
            trainingJob: SageMakerClientTypes.TrainingJob? = nil,
            transformJob: SageMakerClientTypes.TransformJob? = nil
        )
        {
            self.processingJob = processingJob
            self.sourceArn = sourceArn
            self.trainingJob = trainingJob
            self.transformJob = transformJob
        }
    }

}

extension SageMakerClientTypes.TrialComponentStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case primaryStatus = "PrimaryStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let primaryStatus = primaryStatus {
            try encodeContainer.encode(primaryStatus.rawValue, forKey: .primaryStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let primaryStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentPrimaryStatus.self, forKey: .primaryStatus)
        primaryStatus = primaryStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SageMakerClientTypes {
    /// The status of the trial component.
    public struct TrialComponentStatus: Swift.Equatable {
        /// If the component failed, a message describing why.
        public var message: Swift.String?
        /// The status of the trial component.
        public var primaryStatus: SageMakerClientTypes.TrialComponentPrimaryStatus?

        public init (
            message: Swift.String? = nil,
            primaryStatus: SageMakerClientTypes.TrialComponentPrimaryStatus? = nil
        )
        {
            self.message = message
            self.primaryStatus = primaryStatus
        }
    }

}

extension SageMakerClientTypes.TrialComponentSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case startTime = "StartTime"
        case status = "Status"
        case trialComponentArn = "TrialComponentArn"
        case trialComponentName = "TrialComponentName"
        case trialComponentSource = "TrialComponentSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let trialComponentArn = trialComponentArn {
            try encodeContainer.encode(trialComponentArn, forKey: .trialComponentArn)
        }
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
        if let trialComponentSource = trialComponentSource {
            try encodeContainer.encode(trialComponentSource, forKey: .trialComponentSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let trialComponentSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentSource.self, forKey: .trialComponentSource)
        trialComponentSource = trialComponentSourceDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
    }
}

extension SageMakerClientTypes {
    /// A summary of the properties of a trial component. To get all the properties, call the [DescribeTrialComponent] API and provide the TrialComponentName.
    public struct TrialComponentSummary: Swift.Equatable {
        /// Who created the trial component.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the component was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the component as displayed. If DisplayName isn't specified, TrialComponentName is displayed.
        public var displayName: Swift.String?
        /// When the component ended.
        public var endTime: ClientRuntime.Date?
        /// Who last modified the component.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// When the component was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// When the component started.
        public var startTime: ClientRuntime.Date?
        /// The status of the component. States include:
        ///
        /// * InProgress
        ///
        /// * Completed
        ///
        /// * Failed
        public var status: SageMakerClientTypes.TrialComponentStatus?
        /// The ARN of the trial component.
        public var trialComponentArn: Swift.String?
        /// The name of the trial component.
        public var trialComponentName: Swift.String?
        /// The Amazon Resource Name (ARN) and job type of the source of a trial component.
        public var trialComponentSource: SageMakerClientTypes.TrialComponentSource?

        public init (
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: ClientRuntime.Date? = nil,
            displayName: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: SageMakerClientTypes.TrialComponentStatus? = nil,
            trialComponentArn: Swift.String? = nil,
            trialComponentName: Swift.String? = nil,
            trialComponentSource: SageMakerClientTypes.TrialComponentSource? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.endTime = endTime
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.startTime = startTime
            self.status = status
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
            self.trialComponentSource = trialComponentSource
        }
    }

}

extension SageMakerClientTypes.TrialSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceArn = "SourceArn"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// The source of the trial.
    public struct TrialSource: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the source.
        /// This member is required.
        public var sourceArn: Swift.String?
        /// The source job type.
        public var sourceType: Swift.String?

        public init (
            sourceArn: Swift.String? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
        }
    }

}

extension SageMakerClientTypes.TrialSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case lastModifiedTime = "LastModifiedTime"
        case trialArn = "TrialArn"
        case trialName = "TrialName"
        case trialSource = "TrialSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let trialArn = trialArn {
            try encodeContainer.encode(trialArn, forKey: .trialArn)
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
        if let trialSource = trialSource {
            try encodeContainer.encode(trialSource, forKey: .trialSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialArn)
        trialArn = trialArnDecoded
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let trialSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialSource.self, forKey: .trialSource)
        trialSource = trialSourceDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// A summary of the properties of a trial. To get the complete set of properties, call the [DescribeTrial] API and provide the TrialName.
    public struct TrialSummary: Swift.Equatable {
        /// When the trial was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the trial as displayed. If DisplayName isn't specified, TrialName is displayed.
        public var displayName: Swift.String?
        /// When the trial was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the trial.
        public var trialArn: Swift.String?
        /// The name of the trial.
        public var trialName: Swift.String?
        /// The source of the trial.
        public var trialSource: SageMakerClientTypes.TrialSource?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            displayName: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            trialArn: Swift.String? = nil,
            trialName: Swift.String? = nil,
            trialSource: SageMakerClientTypes.TrialSource? = nil
        )
        {
            self.creationTime = creationTime
            self.displayName = displayName
            self.lastModifiedTime = lastModifiedTime
            self.trialArn = trialArn
            self.trialName = trialName
            self.trialSource = trialSource
        }
    }

}

extension SageMakerClientTypes.TuningJobCompletionCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetObjectiveMetricValue = "TargetObjectiveMetricValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetObjectiveMetricValue = targetObjectiveMetricValue {
            try encodeContainer.encode(targetObjectiveMetricValue, forKey: .targetObjectiveMetricValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetObjectiveMetricValueDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .targetObjectiveMetricValue)
        targetObjectiveMetricValue = targetObjectiveMetricValueDecoded
    }
}

extension SageMakerClientTypes {
    /// The job completion criteria.
    public struct TuningJobCompletionCriteria: Swift.Equatable {
        /// The value of the objective metric.
        /// This member is required.
        public var targetObjectiveMetricValue: Swift.Float?

        public init (
            targetObjectiveMetricValue: Swift.Float? = nil
        )
        {
            self.targetObjectiveMetricValue = targetObjectiveMetricValue
        }
    }

}

extension SageMakerClientTypes.TuningJobStepMetaData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension SageMakerClientTypes {
    /// Metadata for a tuning step.
    public struct TuningJobStepMetaData: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes.USD: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cents = "Cents"
        case dollars = "Dollars"
        case tenthFractionsOfACent = "TenthFractionsOfACent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cents != 0 {
            try encodeContainer.encode(cents, forKey: .cents)
        }
        if dollars != 0 {
            try encodeContainer.encode(dollars, forKey: .dollars)
        }
        if tenthFractionsOfACent != 0 {
            try encodeContainer.encode(tenthFractionsOfACent, forKey: .tenthFractionsOfACent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dollarsDecoded = try containerValues.decode(Swift.Int.self, forKey: .dollars)
        dollars = dollarsDecoded
        let centsDecoded = try containerValues.decode(Swift.Int.self, forKey: .cents)
        cents = centsDecoded
        let tenthFractionsOfACentDecoded = try containerValues.decode(Swift.Int.self, forKey: .tenthFractionsOfACent)
        tenthFractionsOfACent = tenthFractionsOfACentDecoded
    }
}

extension SageMakerClientTypes {
    /// Represents an amount of money in United States dollars.
    public struct USD: Swift.Equatable {
        /// The fractional portion, in cents, of the amount.
        public var cents: Swift.Int
        /// The whole number of dollars in the amount.
        public var dollars: Swift.Int
        /// Fractions of a cent, in tenths.
        public var tenthFractionsOfACent: Swift.Int

        public init (
            cents: Swift.Int = 0,
            dollars: Swift.Int = 0,
            tenthFractionsOfACent: Swift.Int = 0
        )
        {
            self.cents = cents
            self.dollars = dollars
            self.tenthFractionsOfACent = tenthFractionsOfACent
        }
    }

}

extension SageMakerClientTypes.UiConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case humanTaskUiArn = "HumanTaskUiArn"
        case uiTemplateS3Uri = "UiTemplateS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskUiArn = humanTaskUiArn {
            try encodeContainer.encode(humanTaskUiArn, forKey: .humanTaskUiArn)
        }
        if let uiTemplateS3Uri = uiTemplateS3Uri {
            try encodeContainer.encode(uiTemplateS3Uri, forKey: .uiTemplateS3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uiTemplateS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uiTemplateS3Uri)
        uiTemplateS3Uri = uiTemplateS3UriDecoded
        let humanTaskUiArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .humanTaskUiArn)
        humanTaskUiArn = humanTaskUiArnDecoded
    }
}

extension SageMakerClientTypes {
    /// Provided configuration information for the worker UI for a labeling job. Provide either HumanTaskUiArn or UiTemplateS3Uri. For named entity recognition, 3D point cloud and video frame labeling jobs, use HumanTaskUiArn. For all other Ground Truth built-in task types and custom task types, use UiTemplateS3Uri to specify the location of a worker task template in Amazon S3.
    public struct UiConfig: Swift.Equatable {
        /// The ARN of the worker task template used to render the worker UI and tools for labeling job tasks. Use this parameter when you are creating a labeling job for named entity recognition, 3D point cloud and video frame labeling jobs. Use your labeling job task type to select one of the following ARNs and use it with this parameter when you create a labeling job. Replace aws-region with the Amazon Web Services Region you are creating your labeling job in. For example, replace aws-region with us-west-1 if you create a labeling job in US West (N. California). Named Entity Recognition Use the following HumanTaskUiArn for named entity recognition labeling jobs: arn:aws:sagemaker:aws-region:394669845002:human-task-ui/NamedEntityRecognition 3D Point Cloud HumanTaskUiArns Use this HumanTaskUiArn for 3D point cloud object detection and 3D point cloud object detection adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectDetection
        ///
        ///
        /// Use this HumanTaskUiArn for 3D point cloud object tracking and 3D point cloud object tracking adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectTracking
        ///
        ///
        /// Use this HumanTaskUiArn for 3D point cloud semantic segmentation and 3D point cloud semantic segmentation adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudSemanticSegmentation
        ///
        ///
        /// Video Frame HumanTaskUiArns Use this HumanTaskUiArn for video frame object detection and video frame object detection adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:region:394669845002:human-task-ui/VideoObjectDetection
        ///
        ///
        /// Use this HumanTaskUiArn for video frame object tracking and video frame object tracking adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:aws-region:394669845002:human-task-ui/VideoObjectTracking
        public var humanTaskUiArn: Swift.String?
        /// The Amazon S3 bucket location of the UI template, or worker task template. This is the template used to render the worker UI and tools for labeling job tasks. For more information about the contents of a UI template, see [ Creating Your Custom Labeling Task Template](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step2.html).
        public var uiTemplateS3Uri: Swift.String?

        public init (
            humanTaskUiArn: Swift.String? = nil,
            uiTemplateS3Uri: Swift.String? = nil
        )
        {
            self.humanTaskUiArn = humanTaskUiArn
            self.uiTemplateS3Uri = uiTemplateS3Uri
        }
    }

}

extension SageMakerClientTypes.UiTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension SageMakerClientTypes {
    /// The Liquid template for the worker user interface.
    public struct UiTemplate: Swift.Equatable {
        /// The content of the Liquid template for the worker user interface.
        /// This member is required.
        public var content: Swift.String?

        public init (
            content: Swift.String? = nil
        )
        {
            self.content = content
        }
    }

}

extension SageMakerClientTypes.UiTemplateInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentSha256 = "ContentSha256"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentSha256 = contentSha256 {
            try encodeContainer.encode(contentSha256, forKey: .contentSha256)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let contentSha256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentSha256)
        contentSha256 = contentSha256Decoded
    }
}

extension SageMakerClientTypes {
    /// Container for user interface template information.
    public struct UiTemplateInfo: Swift.Equatable {
        /// The SHA-256 digest of the contents of the template.
        public var contentSha256: Swift.String?
        /// The URL for the user interface template.
        public var url: Swift.String?

        public init (
            contentSha256: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.contentSha256 = contentSha256
            self.url = url
        }
    }

}

extension UpdateActionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
        case description = "Description"
        case properties = "Properties"
        case propertiesToRemove = "PropertiesToRemove"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, lineageentityparameters0) in properties {
                try propertiesContainer.encode(lineageentityparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let propertiesToRemove = propertiesToRemove {
            var propertiesToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .propertiesToRemove)
            for listlineageentityparameterkey0 in propertiesToRemove {
                try propertiesToRemoveContainer.encode(listlineageentityparameterkey0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension UpdateActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateActionInput: Swift.Equatable {
    /// The name of the action to update.
    /// This member is required.
    public var actionName: Swift.String?
    /// The new description for the action.
    public var description: Swift.String?
    /// The new list of properties. Overwrites the current property list.
    public var properties: [Swift.String:Swift.String]?
    /// A list of properties to remove.
    public var propertiesToRemove: [Swift.String]?
    /// The new status for the action.
    public var status: SageMakerClientTypes.ActionStatus?

    public init (
        actionName: Swift.String? = nil,
        description: Swift.String? = nil,
        properties: [Swift.String:Swift.String]? = nil,
        propertiesToRemove: [Swift.String]? = nil,
        status: SageMakerClientTypes.ActionStatus? = nil
    )
    {
        self.actionName = actionName
        self.description = description
        self.properties = properties
        self.propertiesToRemove = propertiesToRemove
        self.status = status
    }
}

struct UpdateActionInputBody: Swift.Equatable {
    let actionName: Swift.String?
    let description: Swift.String?
    let status: SageMakerClientTypes.ActionStatus?
    let properties: [Swift.String:Swift.String]?
    let propertiesToRemove: [Swift.String]?
}

extension UpdateActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
        case description = "Description"
        case properties = "Properties"
        case propertiesToRemove = "PropertiesToRemove"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ActionStatus.self, forKey: .status)
        status = statusDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let propertiesToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .propertiesToRemove)
        var propertiesToRemoveDecoded0:[Swift.String]? = nil
        if let propertiesToRemoveContainer = propertiesToRemoveContainer {
            propertiesToRemoveDecoded0 = [Swift.String]()
            for string0 in propertiesToRemoveContainer {
                if let string0 = string0 {
                    propertiesToRemoveDecoded0?.append(string0)
                }
            }
        }
        propertiesToRemove = propertiesToRemoveDecoded0
    }
}

extension UpdateActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateActionOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionArn = output.actionArn
        } else {
            self.actionArn = nil
        }
    }
}

public struct UpdateActionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the action.
    public var actionArn: Swift.String?

    public init (
        actionArn: Swift.String? = nil
    )
    {
        self.actionArn = actionArn
    }
}

struct UpdateActionOutputResponseBody: Swift.Equatable {
    let actionArn: Swift.String?
}

extension UpdateActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionArn = "ActionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionArn)
        actionArn = actionArnDecoded
    }
}

extension UpdateAppImageConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigName = "AppImageConfigName"
        case kernelGatewayImageConfig = "KernelGatewayImageConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appImageConfigName = appImageConfigName {
            try encodeContainer.encode(appImageConfigName, forKey: .appImageConfigName)
        }
        if let kernelGatewayImageConfig = kernelGatewayImageConfig {
            try encodeContainer.encode(kernelGatewayImageConfig, forKey: .kernelGatewayImageConfig)
        }
    }
}

extension UpdateAppImageConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAppImageConfigInput: Swift.Equatable {
    /// The name of the AppImageConfig to update.
    /// This member is required.
    public var appImageConfigName: Swift.String?
    /// The new KernelGateway app to run on the image.
    public var kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?

    public init (
        appImageConfigName: Swift.String? = nil,
        kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig? = nil
    )
    {
        self.appImageConfigName = appImageConfigName
        self.kernelGatewayImageConfig = kernelGatewayImageConfig
    }
}

struct UpdateAppImageConfigInputBody: Swift.Equatable {
    let appImageConfigName: Swift.String?
    let kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?
}

extension UpdateAppImageConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigName = "AppImageConfigName"
        case kernelGatewayImageConfig = "KernelGatewayImageConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appImageConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigName)
        appImageConfigName = appImageConfigNameDecoded
        let kernelGatewayImageConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.KernelGatewayImageConfig.self, forKey: .kernelGatewayImageConfig)
        kernelGatewayImageConfig = kernelGatewayImageConfigDecoded
    }
}

extension UpdateAppImageConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAppImageConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAppImageConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAppImageConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateAppImageConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appImageConfigArn = output.appImageConfigArn
        } else {
            self.appImageConfigArn = nil
        }
    }
}

public struct UpdateAppImageConfigOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the AppImageConfig.
    public var appImageConfigArn: Swift.String?

    public init (
        appImageConfigArn: Swift.String? = nil
    )
    {
        self.appImageConfigArn = appImageConfigArn
    }
}

struct UpdateAppImageConfigOutputResponseBody: Swift.Equatable {
    let appImageConfigArn: Swift.String?
}

extension UpdateAppImageConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appImageConfigArn = "AppImageConfigArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appImageConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appImageConfigArn)
        appImageConfigArn = appImageConfigArnDecoded
    }
}

extension UpdateArtifactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
        case artifactName = "ArtifactName"
        case properties = "Properties"
        case propertiesToRemove = "PropertiesToRemove"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactArn = artifactArn {
            try encodeContainer.encode(artifactArn, forKey: .artifactArn)
        }
        if let artifactName = artifactName {
            try encodeContainer.encode(artifactName, forKey: .artifactName)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, lineageentityparameters0) in properties {
                try propertiesContainer.encode(lineageentityparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let propertiesToRemove = propertiesToRemove {
            var propertiesToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .propertiesToRemove)
            for listlineageentityparameterkey0 in propertiesToRemove {
                try propertiesToRemoveContainer.encode(listlineageentityparameterkey0)
            }
        }
    }
}

extension UpdateArtifactInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateArtifactInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the artifact to update.
    /// This member is required.
    public var artifactArn: Swift.String?
    /// The new name for the artifact.
    public var artifactName: Swift.String?
    /// The new list of properties. Overwrites the current property list.
    public var properties: [Swift.String:Swift.String]?
    /// A list of properties to remove.
    public var propertiesToRemove: [Swift.String]?

    public init (
        artifactArn: Swift.String? = nil,
        artifactName: Swift.String? = nil,
        properties: [Swift.String:Swift.String]? = nil,
        propertiesToRemove: [Swift.String]? = nil
    )
    {
        self.artifactArn = artifactArn
        self.artifactName = artifactName
        self.properties = properties
        self.propertiesToRemove = propertiesToRemove
    }
}

struct UpdateArtifactInputBody: Swift.Equatable {
    let artifactArn: Swift.String?
    let artifactName: Swift.String?
    let properties: [Swift.String:Swift.String]?
    let propertiesToRemove: [Swift.String]?
}

extension UpdateArtifactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
        case artifactName = "ArtifactName"
        case properties = "Properties"
        case propertiesToRemove = "PropertiesToRemove"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactArn)
        artifactArn = artifactArnDecoded
        let artifactNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactName)
        artifactName = artifactNameDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let propertiesToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .propertiesToRemove)
        var propertiesToRemoveDecoded0:[Swift.String]? = nil
        if let propertiesToRemoveContainer = propertiesToRemoveContainer {
            propertiesToRemoveDecoded0 = [Swift.String]()
            for string0 in propertiesToRemoveContainer {
                if let string0 = string0 {
                    propertiesToRemoveDecoded0?.append(string0)
                }
            }
        }
        propertiesToRemove = propertiesToRemoveDecoded0
    }
}

extension UpdateArtifactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateArtifactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateArtifactOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateArtifactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateArtifactOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.artifactArn = output.artifactArn
        } else {
            self.artifactArn = nil
        }
    }
}

public struct UpdateArtifactOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the artifact.
    public var artifactArn: Swift.String?

    public init (
        artifactArn: Swift.String? = nil
    )
    {
        self.artifactArn = artifactArn
    }
}

struct UpdateArtifactOutputResponseBody: Swift.Equatable {
    let artifactArn: Swift.String?
}

extension UpdateArtifactOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactArn = "ArtifactArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactArn)
        artifactArn = artifactArnDecoded
    }
}

extension UpdateCodeRepositoryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryName = "CodeRepositoryName"
        case gitConfig = "GitConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeRepositoryName = codeRepositoryName {
            try encodeContainer.encode(codeRepositoryName, forKey: .codeRepositoryName)
        }
        if let gitConfig = gitConfig {
            try encodeContainer.encode(gitConfig, forKey: .gitConfig)
        }
    }
}

extension UpdateCodeRepositoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateCodeRepositoryInput: Swift.Equatable {
    /// The name of the Git repository to update.
    /// This member is required.
    public var codeRepositoryName: Swift.String?
    /// The configuration of the git repository, including the URL and the Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
    public var gitConfig: SageMakerClientTypes.GitConfigForUpdate?

    public init (
        codeRepositoryName: Swift.String? = nil,
        gitConfig: SageMakerClientTypes.GitConfigForUpdate? = nil
    )
    {
        self.codeRepositoryName = codeRepositoryName
        self.gitConfig = gitConfig
    }
}

struct UpdateCodeRepositoryInputBody: Swift.Equatable {
    let codeRepositoryName: Swift.String?
    let gitConfig: SageMakerClientTypes.GitConfigForUpdate?
}

extension UpdateCodeRepositoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryName = "CodeRepositoryName"
        case gitConfig = "GitConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryName)
        codeRepositoryName = codeRepositoryNameDecoded
        let gitConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.GitConfigForUpdate.self, forKey: .gitConfig)
        gitConfig = gitConfigDecoded
    }
}

extension UpdateCodeRepositoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCodeRepositoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCodeRepositoryOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCodeRepositoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateCodeRepositoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeRepositoryArn = output.codeRepositoryArn
        } else {
            self.codeRepositoryArn = nil
        }
    }
}

public struct UpdateCodeRepositoryOutputResponse: Swift.Equatable {
    /// The ARN of the Git repository.
    /// This member is required.
    public var codeRepositoryArn: Swift.String?

    public init (
        codeRepositoryArn: Swift.String? = nil
    )
    {
        self.codeRepositoryArn = codeRepositoryArn
    }
}

struct UpdateCodeRepositoryOutputResponseBody: Swift.Equatable {
    let codeRepositoryArn: Swift.String?
}

extension UpdateCodeRepositoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeRepositoryArn = "CodeRepositoryArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositoryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeRepositoryArn)
        codeRepositoryArn = codeRepositoryArnDecoded
    }
}

extension UpdateContextInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextName = "ContextName"
        case description = "Description"
        case properties = "Properties"
        case propertiesToRemove = "PropertiesToRemove"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contextName = contextName {
            try encodeContainer.encode(contextName, forKey: .contextName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, lineageentityparameters0) in properties {
                try propertiesContainer.encode(lineageentityparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let propertiesToRemove = propertiesToRemove {
            var propertiesToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .propertiesToRemove)
            for listlineageentityparameterkey0 in propertiesToRemove {
                try propertiesToRemoveContainer.encode(listlineageentityparameterkey0)
            }
        }
    }
}

extension UpdateContextInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateContextInput: Swift.Equatable {
    /// The name of the context to update.
    /// This member is required.
    public var contextName: Swift.String?
    /// The new description for the context.
    public var description: Swift.String?
    /// The new list of properties. Overwrites the current property list.
    public var properties: [Swift.String:Swift.String]?
    /// A list of properties to remove.
    public var propertiesToRemove: [Swift.String]?

    public init (
        contextName: Swift.String? = nil,
        description: Swift.String? = nil,
        properties: [Swift.String:Swift.String]? = nil,
        propertiesToRemove: [Swift.String]? = nil
    )
    {
        self.contextName = contextName
        self.description = description
        self.properties = properties
        self.propertiesToRemove = propertiesToRemove
    }
}

struct UpdateContextInputBody: Swift.Equatable {
    let contextName: Swift.String?
    let description: Swift.String?
    let properties: [Swift.String:Swift.String]?
    let propertiesToRemove: [Swift.String]?
}

extension UpdateContextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextName = "ContextName"
        case description = "Description"
        case properties = "Properties"
        case propertiesToRemove = "PropertiesToRemove"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextName)
        contextName = contextNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let propertiesToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .propertiesToRemove)
        var propertiesToRemoveDecoded0:[Swift.String]? = nil
        if let propertiesToRemoveContainer = propertiesToRemoveContainer {
            propertiesToRemoveDecoded0 = [Swift.String]()
            for string0 in propertiesToRemoveContainer {
                if let string0 = string0 {
                    propertiesToRemoveDecoded0?.append(string0)
                }
            }
        }
        propertiesToRemove = propertiesToRemoveDecoded0
    }
}

extension UpdateContextOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContextOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateContextOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContextOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateContextOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contextArn = output.contextArn
        } else {
            self.contextArn = nil
        }
    }
}

public struct UpdateContextOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the context.
    public var contextArn: Swift.String?

    public init (
        contextArn: Swift.String? = nil
    )
    {
        self.contextArn = contextArn
    }
}

struct UpdateContextOutputResponseBody: Swift.Equatable {
    let contextArn: Swift.String?
}

extension UpdateContextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextArn = "ContextArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextArn)
        contextArn = contextArnDecoded
    }
}

extension UpdateDeviceFleetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case deviceFleetName = "DeviceFleetName"
        case enableIotRoleAlias = "EnableIotRoleAlias"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let enableIotRoleAlias = enableIotRoleAlias {
            try encodeContainer.encode(enableIotRoleAlias, forKey: .enableIotRoleAlias)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdateDeviceFleetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDeviceFleetInput: Swift.Equatable {
    /// Description of the fleet.
    public var description: Swift.String?
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}". For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".
    public var enableIotRoleAlias: Swift.Bool?
    /// Output configuration for storing sample data collected by the fleet.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The Amazon Resource Name (ARN) of the device.
    public var roleArn: Swift.String?

    public init (
        description: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        enableIotRoleAlias: Swift.Bool? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.description = description
        self.deviceFleetName = deviceFleetName
        self.enableIotRoleAlias = enableIotRoleAlias
        self.outputConfig = outputConfig
        self.roleArn = roleArn
    }
}

struct UpdateDeviceFleetInputBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
    let roleArn: Swift.String?
    let description: Swift.String?
    let outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    let enableIotRoleAlias: Swift.Bool?
}

extension UpdateDeviceFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case deviceFleetName = "DeviceFleetName"
        case enableIotRoleAlias = "EnableIotRoleAlias"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgeOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let enableIotRoleAliasDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableIotRoleAlias)
        enableIotRoleAlias = enableIotRoleAliasDecoded
    }
}

extension UpdateDeviceFleetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDeviceFleetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDeviceFleetOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDeviceFleetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateDeviceFleetOutputResponse: Swift.Equatable {

}

extension UpdateDevicesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case devices = "Devices"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let devices = devices {
            var devicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .devices)
            for devices0 in devices {
                try devicesContainer.encode(devices0)
            }
        }
    }
}

extension UpdateDevicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDevicesInput: Swift.Equatable {
    /// The name of the fleet the devices belong to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// List of devices to register with Edge Manager agent.
    /// This member is required.
    public var devices: [SageMakerClientTypes.Device]?

    public init (
        deviceFleetName: Swift.String? = nil,
        devices: [SageMakerClientTypes.Device]? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.devices = devices
    }
}

struct UpdateDevicesInputBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
    let devices: [SageMakerClientTypes.Device]?
}

extension UpdateDevicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case devices = "Devices"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let devicesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Device?].self, forKey: .devices)
        var devicesDecoded0:[SageMakerClientTypes.Device]? = nil
        if let devicesContainer = devicesContainer {
            devicesDecoded0 = [SageMakerClientTypes.Device]()
            for structure0 in devicesContainer {
                if let structure0 = structure0 {
                    devicesDecoded0?.append(structure0)
                }
            }
        }
        devices = devicesDecoded0
    }
}

extension UpdateDevicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDevicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDevicesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDevicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateDevicesOutputResponse: Swift.Equatable {

}

extension UpdateDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultUserSettings = "DefaultUserSettings"
        case domainId = "DomainId"
        case domainSettingsForUpdate = "DomainSettingsForUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultUserSettings = defaultUserSettings {
            try encodeContainer.encode(defaultUserSettings, forKey: .defaultUserSettings)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let domainSettingsForUpdate = domainSettingsForUpdate {
            try encodeContainer.encode(domainSettingsForUpdate, forKey: .domainSettingsForUpdate)
        }
    }
}

extension UpdateDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDomainInput: Swift.Equatable {
    /// A collection of settings.
    public var defaultUserSettings: SageMakerClientTypes.UserSettings?
    /// The ID of the domain to be updated.
    /// This member is required.
    public var domainId: Swift.String?
    /// A collection of DomainSettings configuration values to update.
    public var domainSettingsForUpdate: SageMakerClientTypes.DomainSettingsForUpdate?

    public init (
        defaultUserSettings: SageMakerClientTypes.UserSettings? = nil,
        domainId: Swift.String? = nil,
        domainSettingsForUpdate: SageMakerClientTypes.DomainSettingsForUpdate? = nil
    )
    {
        self.defaultUserSettings = defaultUserSettings
        self.domainId = domainId
        self.domainSettingsForUpdate = domainSettingsForUpdate
    }
}

struct UpdateDomainInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let defaultUserSettings: SageMakerClientTypes.UserSettings?
    let domainSettingsForUpdate: SageMakerClientTypes.DomainSettingsForUpdate?
}

extension UpdateDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultUserSettings = "DefaultUserSettings"
        case domainId = "DomainId"
        case domainSettingsForUpdate = "DomainSettingsForUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let defaultUserSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserSettings.self, forKey: .defaultUserSettings)
        defaultUserSettings = defaultUserSettingsDecoded
        let domainSettingsForUpdateDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DomainSettingsForUpdate.self, forKey: .domainSettingsForUpdate)
        domainSettingsForUpdate = domainSettingsForUpdateDecoded
    }
}

extension UpdateDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDomainOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainArn = output.domainArn
        } else {
            self.domainArn = nil
        }
    }
}

public struct UpdateDomainOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the domain.
    public var domainArn: Swift.String?

    public init (
        domainArn: Swift.String? = nil
    )
    {
        self.domainArn = domainArn
    }
}

struct UpdateDomainOutputResponseBody: Swift.Equatable {
    let domainArn: Swift.String?
}

extension UpdateDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainArn = "DomainArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
    }
}

extension UpdateEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfig = "DeploymentConfig"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case excludeRetainedVariantProperties = "ExcludeRetainedVariantProperties"
        case retainAllVariantProperties = "RetainAllVariantProperties"
        case retainDeploymentConfig = "RetainDeploymentConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentConfig = deploymentConfig {
            try encodeContainer.encode(deploymentConfig, forKey: .deploymentConfig)
        }
        if let endpointConfigName = endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let excludeRetainedVariantProperties = excludeRetainedVariantProperties {
            var excludeRetainedVariantPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeRetainedVariantProperties)
            for variantpropertylist0 in excludeRetainedVariantProperties {
                try excludeRetainedVariantPropertiesContainer.encode(variantpropertylist0)
            }
        }
        if retainAllVariantProperties != false {
            try encodeContainer.encode(retainAllVariantProperties, forKey: .retainAllVariantProperties)
        }
        if retainDeploymentConfig != false {
            try encodeContainer.encode(retainDeploymentConfig, forKey: .retainDeploymentConfig)
        }
    }
}

extension UpdateEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateEndpointInput: Swift.Equatable {
    /// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
    public var deploymentConfig: SageMakerClientTypes.DeploymentConfig?
    /// The name of the new endpoint configuration.
    /// This member is required.
    public var endpointConfigName: Swift.String?
    /// The name of the endpoint whose configuration you want to update.
    /// This member is required.
    public var endpointName: Swift.String?
    /// When you are updating endpoint resources with [UpdateEndpointInput$RetainAllVariantProperties], whose value is set to true, ExcludeRetainedVariantProperties specifies the list of type [VariantProperty] to override with the values provided by EndpointConfig. If you don't specify a value for ExcludeAllVariantProperties, no variant properties are overridden.
    public var excludeRetainedVariantProperties: [SageMakerClientTypes.VariantProperty]?
    /// When updating endpoint resources, enables or disables the retention of [variant properties](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html), such as the instance count or the variant weight. To retain the variant properties of an endpoint when updating it, set RetainAllVariantProperties to true. To use the variant properties specified in a new EndpointConfig call when updating an endpoint, set RetainAllVariantProperties to false. The default is false.
    public var retainAllVariantProperties: Swift.Bool
    /// Specifies whether to reuse the last deployment configuration. The default value is false (the configuration is not reused).
    public var retainDeploymentConfig: Swift.Bool

    public init (
        deploymentConfig: SageMakerClientTypes.DeploymentConfig? = nil,
        endpointConfigName: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        excludeRetainedVariantProperties: [SageMakerClientTypes.VariantProperty]? = nil,
        retainAllVariantProperties: Swift.Bool = false,
        retainDeploymentConfig: Swift.Bool = false
    )
    {
        self.deploymentConfig = deploymentConfig
        self.endpointConfigName = endpointConfigName
        self.endpointName = endpointName
        self.excludeRetainedVariantProperties = excludeRetainedVariantProperties
        self.retainAllVariantProperties = retainAllVariantProperties
        self.retainDeploymentConfig = retainDeploymentConfig
    }
}

struct UpdateEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let endpointConfigName: Swift.String?
    let retainAllVariantProperties: Swift.Bool
    let excludeRetainedVariantProperties: [SageMakerClientTypes.VariantProperty]?
    let deploymentConfig: SageMakerClientTypes.DeploymentConfig?
    let retainDeploymentConfig: Swift.Bool
}

extension UpdateEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfig = "DeploymentConfig"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case excludeRetainedVariantProperties = "ExcludeRetainedVariantProperties"
        case retainAllVariantProperties = "RetainAllVariantProperties"
        case retainDeploymentConfig = "RetainDeploymentConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let retainAllVariantPropertiesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .retainAllVariantProperties)
        retainAllVariantProperties = retainAllVariantPropertiesDecoded
        let excludeRetainedVariantPropertiesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.VariantProperty?].self, forKey: .excludeRetainedVariantProperties)
        var excludeRetainedVariantPropertiesDecoded0:[SageMakerClientTypes.VariantProperty]? = nil
        if let excludeRetainedVariantPropertiesContainer = excludeRetainedVariantPropertiesContainer {
            excludeRetainedVariantPropertiesDecoded0 = [SageMakerClientTypes.VariantProperty]()
            for structure0 in excludeRetainedVariantPropertiesContainer {
                if let structure0 = structure0 {
                    excludeRetainedVariantPropertiesDecoded0?.append(structure0)
                }
            }
        }
        excludeRetainedVariantProperties = excludeRetainedVariantPropertiesDecoded0
        let deploymentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DeploymentConfig.self, forKey: .deploymentConfig)
        deploymentConfig = deploymentConfigDecoded
        let retainDeploymentConfigDecoded = try containerValues.decode(Swift.Bool.self, forKey: .retainDeploymentConfig)
        retainDeploymentConfig = retainDeploymentConfigDecoded
    }
}

extension UpdateEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateEndpointOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpointArn = output.endpointArn
        } else {
            self.endpointArn = nil
        }
    }
}

public struct UpdateEndpointOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the endpoint.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init (
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

struct UpdateEndpointOutputResponseBody: Swift.Equatable {
    let endpointArn: Swift.String?
}

extension UpdateEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointArn = "EndpointArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
    }
}

extension UpdateEndpointWeightsAndCapacitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredWeightsAndCapacities = "DesiredWeightsAndCapacities"
        case endpointName = "EndpointName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredWeightsAndCapacities = desiredWeightsAndCapacities {
            var desiredWeightsAndCapacitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .desiredWeightsAndCapacities)
            for desiredweightandcapacitylist0 in desiredWeightsAndCapacities {
                try desiredWeightsAndCapacitiesContainer.encode(desiredweightandcapacitylist0)
            }
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
    }
}

extension UpdateEndpointWeightsAndCapacitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateEndpointWeightsAndCapacitiesInput: Swift.Equatable {
    /// An object that provides new capacity and weight values for a variant.
    /// This member is required.
    public var desiredWeightsAndCapacities: [SageMakerClientTypes.DesiredWeightAndCapacity]?
    /// The name of an existing Amazon SageMaker endpoint.
    /// This member is required.
    public var endpointName: Swift.String?

    public init (
        desiredWeightsAndCapacities: [SageMakerClientTypes.DesiredWeightAndCapacity]? = nil,
        endpointName: Swift.String? = nil
    )
    {
        self.desiredWeightsAndCapacities = desiredWeightsAndCapacities
        self.endpointName = endpointName
    }
}

struct UpdateEndpointWeightsAndCapacitiesInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let desiredWeightsAndCapacities: [SageMakerClientTypes.DesiredWeightAndCapacity]?
}

extension UpdateEndpointWeightsAndCapacitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredWeightsAndCapacities = "DesiredWeightsAndCapacities"
        case endpointName = "EndpointName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let desiredWeightsAndCapacitiesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DesiredWeightAndCapacity?].self, forKey: .desiredWeightsAndCapacities)
        var desiredWeightsAndCapacitiesDecoded0:[SageMakerClientTypes.DesiredWeightAndCapacity]? = nil
        if let desiredWeightsAndCapacitiesContainer = desiredWeightsAndCapacitiesContainer {
            desiredWeightsAndCapacitiesDecoded0 = [SageMakerClientTypes.DesiredWeightAndCapacity]()
            for structure0 in desiredWeightsAndCapacitiesContainer {
                if let structure0 = structure0 {
                    desiredWeightsAndCapacitiesDecoded0?.append(structure0)
                }
            }
        }
        desiredWeightsAndCapacities = desiredWeightsAndCapacitiesDecoded0
    }
}

extension UpdateEndpointWeightsAndCapacitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEndpointWeightsAndCapacitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateEndpointWeightsAndCapacitiesOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEndpointWeightsAndCapacitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateEndpointWeightsAndCapacitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpointArn = output.endpointArn
        } else {
            self.endpointArn = nil
        }
    }
}

public struct UpdateEndpointWeightsAndCapacitiesOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the updated endpoint.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init (
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

struct UpdateEndpointWeightsAndCapacitiesOutputResponseBody: Swift.Equatable {
    let endpointArn: Swift.String?
}

extension UpdateEndpointWeightsAndCapacitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointArn = "EndpointArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
    }
}

extension UpdateExperimentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayName = "DisplayName"
        case experimentName = "ExperimentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
    }
}

extension UpdateExperimentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateExperimentInput: Swift.Equatable {
    /// The description of the experiment.
    public var description: Swift.String?
    /// The name of the experiment as displayed. The name doesn't need to be unique. If DisplayName isn't specified, ExperimentName is displayed.
    public var displayName: Swift.String?
    /// The name of the experiment to update.
    /// This member is required.
    public var experimentName: Swift.String?

    public init (
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        experimentName: Swift.String? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.experimentName = experimentName
    }
}

struct UpdateExperimentInputBody: Swift.Equatable {
    let experimentName: Swift.String?
    let displayName: Swift.String?
    let description: Swift.String?
}

extension UpdateExperimentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayName = "DisplayName"
        case experimentName = "ExperimentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateExperimentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateExperimentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateExperimentOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateExperimentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateExperimentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.experimentArn = output.experimentArn
        } else {
            self.experimentArn = nil
        }
    }
}

public struct UpdateExperimentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the experiment.
    public var experimentArn: Swift.String?

    public init (
        experimentArn: Swift.String? = nil
    )
    {
        self.experimentArn = experimentArn
    }
}

struct UpdateExperimentOutputResponseBody: Swift.Equatable {
    let experimentArn: Swift.String?
}

extension UpdateExperimentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case experimentArn = "ExperimentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .experimentArn)
        experimentArn = experimentArnDecoded
    }
}

extension UpdateImageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProperties = "DeleteProperties"
        case description = "Description"
        case displayName = "DisplayName"
        case imageName = "ImageName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleteProperties = deleteProperties {
            var deletePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deleteProperties)
            for imagedeletepropertylist0 in deleteProperties {
                try deletePropertiesContainer.encode(imagedeletepropertylist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdateImageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateImageInput: Swift.Equatable {
    /// A list of properties to delete. Only the Description and DisplayName properties can be deleted.
    public var deleteProperties: [Swift.String]?
    /// The new description for the image.
    public var description: Swift.String?
    /// The new display name for the image.
    public var displayName: Swift.String?
    /// The name of the image to update.
    /// This member is required.
    public var imageName: Swift.String?
    /// The new Amazon Resource Name (ARN) for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.
    public var roleArn: Swift.String?

    public init (
        deleteProperties: [Swift.String]? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        imageName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.deleteProperties = deleteProperties
        self.description = description
        self.displayName = displayName
        self.imageName = imageName
        self.roleArn = roleArn
    }
}

struct UpdateImageInputBody: Swift.Equatable {
    let deleteProperties: [Swift.String]?
    let description: Swift.String?
    let displayName: Swift.String?
    let imageName: Swift.String?
    let roleArn: Swift.String?
}

extension UpdateImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProperties = "DeleteProperties"
        case description = "Description"
        case displayName = "DisplayName"
        case imageName = "ImageName"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deletePropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deleteProperties)
        var deletePropertiesDecoded0:[Swift.String]? = nil
        if let deletePropertiesContainer = deletePropertiesContainer {
            deletePropertiesDecoded0 = [Swift.String]()
            for string0 in deletePropertiesContainer {
                if let string0 = string0 {
                    deletePropertiesDecoded0?.append(string0)
                }
            }
        }
        deleteProperties = deletePropertiesDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateImageOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateImageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.imageArn = output.imageArn
        } else {
            self.imageArn = nil
        }
    }
}

public struct UpdateImageOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the image.
    public var imageArn: Swift.String?

    public init (
        imageArn: Swift.String? = nil
    )
    {
        self.imageArn = imageArn
    }
}

struct UpdateImageOutputResponseBody: Swift.Equatable {
    let imageArn: Swift.String?
}

extension UpdateImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageArn = "ImageArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageArn)
        imageArn = imageArnDecoded
    }
}

extension UpdateModelPackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecificationsToAdd = "AdditionalInferenceSpecificationsToAdd"
        case approvalDescription = "ApprovalDescription"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case customerMetadataPropertiesToRemove = "CustomerMetadataPropertiesToRemove"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelPackageArn = "ModelPackageArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInferenceSpecificationsToAdd = additionalInferenceSpecificationsToAdd {
            var additionalInferenceSpecificationsToAddContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalInferenceSpecificationsToAdd)
            for additionalinferencespecifications0 in additionalInferenceSpecificationsToAdd {
                try additionalInferenceSpecificationsToAddContainer.encode(additionalinferencespecifications0)
            }
        }
        if let approvalDescription = approvalDescription {
            try encodeContainer.encode(approvalDescription, forKey: .approvalDescription)
        }
        if let customerMetadataProperties = customerMetadataProperties {
            var customerMetadataPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customerMetadataProperties)
            for (dictKey0, customermetadatamap0) in customerMetadataProperties {
                try customerMetadataPropertiesContainer.encode(customermetadatamap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let customerMetadataPropertiesToRemove = customerMetadataPropertiesToRemove {
            var customerMetadataPropertiesToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customerMetadataPropertiesToRemove)
            for customermetadatakeylist0 in customerMetadataPropertiesToRemove {
                try customerMetadataPropertiesToRemoveContainer.encode(customermetadatakeylist0)
            }
        }
        if let modelApprovalStatus = modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelPackageArn = modelPackageArn {
            try encodeContainer.encode(modelPackageArn, forKey: .modelPackageArn)
        }
    }
}

extension UpdateModelPackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateModelPackageInput: Swift.Equatable {
    /// An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.
    public var additionalInferenceSpecificationsToAdd: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
    /// A description for the approval status of the model.
    public var approvalDescription: Swift.String?
    /// The metadata properties associated with the model package versions.
    public var customerMetadataProperties: [Swift.String:Swift.String]?
    /// The metadata properties associated with the model package versions to remove.
    public var customerMetadataPropertiesToRemove: [Swift.String]?
    /// The approval status of the model.
    public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    /// The Amazon Resource Name (ARN) of the model package.
    /// This member is required.
    public var modelPackageArn: Swift.String?

    public init (
        additionalInferenceSpecificationsToAdd: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil,
        approvalDescription: Swift.String? = nil,
        customerMetadataProperties: [Swift.String:Swift.String]? = nil,
        customerMetadataPropertiesToRemove: [Swift.String]? = nil,
        modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
        modelPackageArn: Swift.String? = nil
    )
    {
        self.additionalInferenceSpecificationsToAdd = additionalInferenceSpecificationsToAdd
        self.approvalDescription = approvalDescription
        self.customerMetadataProperties = customerMetadataProperties
        self.customerMetadataPropertiesToRemove = customerMetadataPropertiesToRemove
        self.modelApprovalStatus = modelApprovalStatus
        self.modelPackageArn = modelPackageArn
    }
}

struct UpdateModelPackageInputBody: Swift.Equatable {
    let modelPackageArn: Swift.String?
    let modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    let approvalDescription: Swift.String?
    let customerMetadataProperties: [Swift.String:Swift.String]?
    let customerMetadataPropertiesToRemove: [Swift.String]?
    let additionalInferenceSpecificationsToAdd: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
}

extension UpdateModelPackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecificationsToAdd = "AdditionalInferenceSpecificationsToAdd"
        case approvalDescription = "ApprovalDescription"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case customerMetadataPropertiesToRemove = "CustomerMetadataPropertiesToRemove"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelPackageArn = "ModelPackageArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let approvalDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalDescription)
        approvalDescription = approvalDescriptionDecoded
        let customerMetadataPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customerMetadataProperties)
        var customerMetadataPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let customerMetadataPropertiesContainer = customerMetadataPropertiesContainer {
            customerMetadataPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, customermetadatavalue0) in customerMetadataPropertiesContainer {
                if let customermetadatavalue0 = customermetadatavalue0 {
                    customerMetadataPropertiesDecoded0?[key0] = customermetadatavalue0
                }
            }
        }
        customerMetadataProperties = customerMetadataPropertiesDecoded0
        let customerMetadataPropertiesToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .customerMetadataPropertiesToRemove)
        var customerMetadataPropertiesToRemoveDecoded0:[Swift.String]? = nil
        if let customerMetadataPropertiesToRemoveContainer = customerMetadataPropertiesToRemoveContainer {
            customerMetadataPropertiesToRemoveDecoded0 = [Swift.String]()
            for string0 in customerMetadataPropertiesToRemoveContainer {
                if let string0 = string0 {
                    customerMetadataPropertiesToRemoveDecoded0?.append(string0)
                }
            }
        }
        customerMetadataPropertiesToRemove = customerMetadataPropertiesToRemoveDecoded0
        let additionalInferenceSpecificationsToAddContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AdditionalInferenceSpecificationDefinition?].self, forKey: .additionalInferenceSpecificationsToAdd)
        var additionalInferenceSpecificationsToAddDecoded0:[SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil
        if let additionalInferenceSpecificationsToAddContainer = additionalInferenceSpecificationsToAddContainer {
            additionalInferenceSpecificationsToAddDecoded0 = [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]()
            for structure0 in additionalInferenceSpecificationsToAddContainer {
                if let structure0 = structure0 {
                    additionalInferenceSpecificationsToAddDecoded0?.append(structure0)
                }
            }
        }
        additionalInferenceSpecificationsToAdd = additionalInferenceSpecificationsToAddDecoded0
    }
}

extension UpdateModelPackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateModelPackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateModelPackageOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateModelPackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateModelPackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelPackageArn = output.modelPackageArn
        } else {
            self.modelPackageArn = nil
        }
    }
}

public struct UpdateModelPackageOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model.
    /// This member is required.
    public var modelPackageArn: Swift.String?

    public init (
        modelPackageArn: Swift.String? = nil
    )
    {
        self.modelPackageArn = modelPackageArn
    }
}

struct UpdateModelPackageOutputResponseBody: Swift.Equatable {
    let modelPackageArn: Swift.String?
}

extension UpdateModelPackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageArn = "ModelPackageArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
    }
}

extension UpdateMonitoringScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleConfig = "MonitoringScheduleConfig"
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monitoringScheduleConfig = monitoringScheduleConfig {
            try encodeContainer.encode(monitoringScheduleConfig, forKey: .monitoringScheduleConfig)
        }
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
    }
}

extension UpdateMonitoringScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateMonitoringScheduleInput: Swift.Equatable {
    /// The configuration object that specifies the monitoring schedule and defines the monitoring job.
    /// This member is required.
    public var monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
    /// The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init (
        monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig? = nil,
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleConfig = monitoringScheduleConfig
        self.monitoringScheduleName = monitoringScheduleName
    }
}

struct UpdateMonitoringScheduleInputBody: Swift.Equatable {
    let monitoringScheduleName: Swift.String?
    let monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
}

extension UpdateMonitoringScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleConfig = "MonitoringScheduleConfig"
        case monitoringScheduleName = "MonitoringScheduleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let monitoringScheduleConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringScheduleConfig.self, forKey: .monitoringScheduleConfig)
        monitoringScheduleConfig = monitoringScheduleConfigDecoded
    }
}

extension UpdateMonitoringScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMonitoringScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMonitoringScheduleOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMonitoringScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateMonitoringScheduleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.monitoringScheduleArn = output.monitoringScheduleArn
        } else {
            self.monitoringScheduleArn = nil
        }
    }
}

public struct UpdateMonitoringScheduleOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the monitoring schedule.
    /// This member is required.
    public var monitoringScheduleArn: Swift.String?

    public init (
        monitoringScheduleArn: Swift.String? = nil
    )
    {
        self.monitoringScheduleArn = monitoringScheduleArn
    }
}

struct UpdateMonitoringScheduleOutputResponseBody: Swift.Equatable {
    let monitoringScheduleArn: Swift.String?
}

extension UpdateMonitoringScheduleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringScheduleArn = "MonitoringScheduleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
    }
}

extension UpdateNotebookInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorTypes = "AcceleratorTypes"
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case defaultCodeRepository = "DefaultCodeRepository"
        case disassociateAcceleratorTypes = "DisassociateAcceleratorTypes"
        case disassociateAdditionalCodeRepositories = "DisassociateAdditionalCodeRepositories"
        case disassociateDefaultCodeRepository = "DisassociateDefaultCodeRepository"
        case disassociateLifecycleConfig = "DisassociateLifecycleConfig"
        case instanceType = "InstanceType"
        case lifecycleConfigName = "LifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case roleArn = "RoleArn"
        case rootAccess = "RootAccess"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorTypes = acceleratorTypes {
            var acceleratorTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .acceleratorTypes)
            for notebookinstanceacceleratortypes0 in acceleratorTypes {
                try acceleratorTypesContainer.encode(notebookinstanceacceleratortypes0.rawValue)
            }
        }
        if let additionalCodeRepositories = additionalCodeRepositories {
            var additionalCodeRepositoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalCodeRepositories)
            for additionalcoderepositorynamesorurls0 in additionalCodeRepositories {
                try additionalCodeRepositoriesContainer.encode(additionalcoderepositorynamesorurls0)
            }
        }
        if let defaultCodeRepository = defaultCodeRepository {
            try encodeContainer.encode(defaultCodeRepository, forKey: .defaultCodeRepository)
        }
        if disassociateAcceleratorTypes != false {
            try encodeContainer.encode(disassociateAcceleratorTypes, forKey: .disassociateAcceleratorTypes)
        }
        if disassociateAdditionalCodeRepositories != false {
            try encodeContainer.encode(disassociateAdditionalCodeRepositories, forKey: .disassociateAdditionalCodeRepositories)
        }
        if disassociateDefaultCodeRepository != false {
            try encodeContainer.encode(disassociateDefaultCodeRepository, forKey: .disassociateDefaultCodeRepository)
        }
        if disassociateLifecycleConfig != false {
            try encodeContainer.encode(disassociateLifecycleConfig, forKey: .disassociateLifecycleConfig)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let lifecycleConfigName = lifecycleConfigName {
            try encodeContainer.encode(lifecycleConfigName, forKey: .lifecycleConfigName)
        }
        if let notebookInstanceName = notebookInstanceName {
            try encodeContainer.encode(notebookInstanceName, forKey: .notebookInstanceName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let rootAccess = rootAccess {
            try encodeContainer.encode(rootAccess.rawValue, forKey: .rootAccess)
        }
        if let volumeSizeInGB = volumeSizeInGB {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }
}

extension UpdateNotebookInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateNotebookInstanceInput: Swift.Equatable {
    /// A list of the Elastic Inference (EI) instance types to associate with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
    public var acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    /// An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with Amazon SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var additionalCodeRepositories: [Swift.String]?
    /// The Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with Amazon SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var defaultCodeRepository: Swift.String?
    /// A list of the Elastic Inference (EI) instance types to remove from this notebook instance. This operation is idempotent. If you specify an accelerator type that is not associated with the notebook instance when you call this method, it does not throw an error.
    public var disassociateAcceleratorTypes: Swift.Bool
    /// A list of names or URLs of the default Git repositories to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.
    public var disassociateAdditionalCodeRepositories: Swift.Bool
    /// The name or URL of the default Git repository to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.
    public var disassociateDefaultCodeRepository: Swift.Bool
    /// Set to true to remove the notebook instance lifecycle configuration currently associated with the notebook instance. This operation is idempotent. If you specify a lifecycle configuration that is not associated with the notebook instance when you call this method, it does not throw an error.
    public var disassociateLifecycleConfig: Swift.Bool
    /// The Amazon ML compute instance type.
    public var instanceType: SageMakerClientTypes.InstanceType?
    /// The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
    public var lifecycleConfigName: Swift.String?
    /// The name of the notebook instance to update.
    /// This member is required.
    public var notebookInstanceName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can assume to access the notebook instance. For more information, see [Amazon SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission.
    public var roleArn: Swift.String?
    /// Whether root access is enabled or disabled for users of the notebook instance. The default value is Enabled. If you set this to Disabled, users don't have root access on the notebook instance, but lifecycle configuration scripts still run with root permissions.
    public var rootAccess: SageMakerClientTypes.RootAccess?
    /// The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB. ML storage volumes are encrypted, so Amazon SageMaker can't determine the amount of available free space on the volume. Because of this, you can increase the volume size when you update a notebook instance, but you can't decrease the volume size. If you want to decrease the size of the ML storage volume in use, create a new notebook instance with the desired size.
    public var volumeSizeInGB: Swift.Int?

    public init (
        acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [Swift.String]? = nil,
        defaultCodeRepository: Swift.String? = nil,
        disassociateAcceleratorTypes: Swift.Bool = false,
        disassociateAdditionalCodeRepositories: Swift.Bool = false,
        disassociateDefaultCodeRepository: Swift.Bool = false,
        disassociateLifecycleConfig: Swift.Bool = false,
        instanceType: SageMakerClientTypes.InstanceType? = nil,
        lifecycleConfigName: Swift.String? = nil,
        notebookInstanceName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        rootAccess: SageMakerClientTypes.RootAccess? = nil,
        volumeSizeInGB: Swift.Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.defaultCodeRepository = defaultCodeRepository
        self.disassociateAcceleratorTypes = disassociateAcceleratorTypes
        self.disassociateAdditionalCodeRepositories = disassociateAdditionalCodeRepositories
        self.disassociateDefaultCodeRepository = disassociateDefaultCodeRepository
        self.disassociateLifecycleConfig = disassociateLifecycleConfig
        self.instanceType = instanceType
        self.lifecycleConfigName = lifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.volumeSizeInGB = volumeSizeInGB
    }
}

struct UpdateNotebookInstanceInputBody: Swift.Equatable {
    let notebookInstanceName: Swift.String?
    let instanceType: SageMakerClientTypes.InstanceType?
    let roleArn: Swift.String?
    let lifecycleConfigName: Swift.String?
    let disassociateLifecycleConfig: Swift.Bool
    let volumeSizeInGB: Swift.Int?
    let defaultCodeRepository: Swift.String?
    let additionalCodeRepositories: [Swift.String]?
    let acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    let disassociateAcceleratorTypes: Swift.Bool
    let disassociateDefaultCodeRepository: Swift.Bool
    let disassociateAdditionalCodeRepositories: Swift.Bool
    let rootAccess: SageMakerClientTypes.RootAccess?
}

extension UpdateNotebookInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorTypes = "AcceleratorTypes"
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case defaultCodeRepository = "DefaultCodeRepository"
        case disassociateAcceleratorTypes = "DisassociateAcceleratorTypes"
        case disassociateAdditionalCodeRepositories = "DisassociateAdditionalCodeRepositories"
        case disassociateDefaultCodeRepository = "DisassociateDefaultCodeRepository"
        case disassociateLifecycleConfig = "DisassociateLifecycleConfig"
        case instanceType = "InstanceType"
        case lifecycleConfigName = "LifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case roleArn = "RoleArn"
        case rootAccess = "RootAccess"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let lifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleConfigName)
        lifecycleConfigName = lifecycleConfigNameDecoded
        let disassociateLifecycleConfigDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disassociateLifecycleConfig)
        disassociateLifecycleConfig = disassociateLifecycleConfigDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let defaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultCodeRepository)
        defaultCodeRepository = defaultCodeRepositoryDecoded
        let additionalCodeRepositoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalCodeRepositories)
        var additionalCodeRepositoriesDecoded0:[Swift.String]? = nil
        if let additionalCodeRepositoriesContainer = additionalCodeRepositoriesContainer {
            additionalCodeRepositoriesDecoded0 = [Swift.String]()
            for string0 in additionalCodeRepositoriesContainer {
                if let string0 = string0 {
                    additionalCodeRepositoriesDecoded0?.append(string0)
                }
            }
        }
        additionalCodeRepositories = additionalCodeRepositoriesDecoded0
        let acceleratorTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceAcceleratorType?].self, forKey: .acceleratorTypes)
        var acceleratorTypesDecoded0:[SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil
        if let acceleratorTypesContainer = acceleratorTypesContainer {
            acceleratorTypesDecoded0 = [SageMakerClientTypes.NotebookInstanceAcceleratorType]()
            for string0 in acceleratorTypesContainer {
                if let string0 = string0 {
                    acceleratorTypesDecoded0?.append(string0)
                }
            }
        }
        acceleratorTypes = acceleratorTypesDecoded0
        let disassociateAcceleratorTypesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disassociateAcceleratorTypes)
        disassociateAcceleratorTypes = disassociateAcceleratorTypesDecoded
        let disassociateDefaultCodeRepositoryDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disassociateDefaultCodeRepository)
        disassociateDefaultCodeRepository = disassociateDefaultCodeRepositoryDecoded
        let disassociateAdditionalCodeRepositoriesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disassociateAdditionalCodeRepositories)
        disassociateAdditionalCodeRepositories = disassociateAdditionalCodeRepositoriesDecoded
        let rootAccessDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RootAccess.self, forKey: .rootAccess)
        rootAccess = rootAccessDecoded
    }
}

extension UpdateNotebookInstanceLifecycleConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case onCreate = "OnCreate"
        case onStart = "OnStart"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName {
            try encodeContainer.encode(notebookInstanceLifecycleConfigName, forKey: .notebookInstanceLifecycleConfigName)
        }
        if let onCreate = onCreate {
            var onCreateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onCreate)
            for notebookinstancelifecycleconfiglist0 in onCreate {
                try onCreateContainer.encode(notebookinstancelifecycleconfiglist0)
            }
        }
        if let onStart = onStart {
            var onStartContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onStart)
            for notebookinstancelifecycleconfiglist0 in onStart {
                try onStartContainer.encode(notebookinstancelifecycleconfiglist0)
            }
        }
    }
}

extension UpdateNotebookInstanceLifecycleConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateNotebookInstanceLifecycleConfigInput: Swift.Equatable {
    /// The name of the lifecycle configuration.
    /// This member is required.
    public var notebookInstanceLifecycleConfigName: Swift.String?
    /// The shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.
    public var onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    /// The shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.
    public var onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?

    public init (
        notebookInstanceLifecycleConfigName: Swift.String? = nil,
        onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil,
        onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
    )
    {
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.onCreate = onCreate
        self.onStart = onStart
    }
}

struct UpdateNotebookInstanceLifecycleConfigInputBody: Swift.Equatable {
    let notebookInstanceLifecycleConfigName: Swift.String?
    let onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    let onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
}

extension UpdateNotebookInstanceLifecycleConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case onCreate = "OnCreate"
        case onStart = "OnStart"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let onCreateContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceLifecycleHook?].self, forKey: .onCreate)
        var onCreateDecoded0:[SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
        if let onCreateContainer = onCreateContainer {
            onCreateDecoded0 = [SageMakerClientTypes.NotebookInstanceLifecycleHook]()
            for structure0 in onCreateContainer {
                if let structure0 = structure0 {
                    onCreateDecoded0?.append(structure0)
                }
            }
        }
        onCreate = onCreateDecoded0
        let onStartContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceLifecycleHook?].self, forKey: .onStart)
        var onStartDecoded0:[SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
        if let onStartContainer = onStartContainer {
            onStartDecoded0 = [SageMakerClientTypes.NotebookInstanceLifecycleHook]()
            for structure0 in onStartContainer {
                if let structure0 = structure0 {
                    onStartDecoded0?.append(structure0)
                }
            }
        }
        onStart = onStartDecoded0
    }
}

extension UpdateNotebookInstanceLifecycleConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNotebookInstanceLifecycleConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateNotebookInstanceLifecycleConfigOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNotebookInstanceLifecycleConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateNotebookInstanceLifecycleConfigOutputResponse: Swift.Equatable {

}

extension UpdateNotebookInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNotebookInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateNotebookInstanceOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNotebookInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateNotebookInstanceOutputResponse: Swift.Equatable {

}

extension UpdatePipelineExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
        if let pipelineExecutionDescription = pipelineExecutionDescription {
            try encodeContainer.encode(pipelineExecutionDescription, forKey: .pipelineExecutionDescription)
        }
        if let pipelineExecutionDisplayName = pipelineExecutionDisplayName {
            try encodeContainer.encode(pipelineExecutionDisplayName, forKey: .pipelineExecutionDisplayName)
        }
    }
}

extension UpdatePipelineExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdatePipelineExecutionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?
    /// The description of the pipeline execution.
    public var pipelineExecutionDescription: Swift.String?
    /// The display name of the pipeline execution.
    public var pipelineExecutionDisplayName: Swift.String?

    public init (
        pipelineExecutionArn: Swift.String? = nil,
        pipelineExecutionDescription: Swift.String? = nil,
        pipelineExecutionDisplayName: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
        self.pipelineExecutionDescription = pipelineExecutionDescription
        self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
    }
}

struct UpdatePipelineExecutionInputBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
    let pipelineExecutionDescription: Swift.String?
    let pipelineExecutionDisplayName: Swift.String?
}

extension UpdatePipelineExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let pipelineExecutionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDescription)
        pipelineExecutionDescription = pipelineExecutionDescriptionDecoded
        let pipelineExecutionDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDisplayName)
        pipelineExecutionDisplayName = pipelineExecutionDisplayNameDecoded
    }
}

extension UpdatePipelineExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePipelineExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdatePipelineExecutionOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePipelineExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdatePipelineExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecutionArn = output.pipelineExecutionArn
        } else {
            self.pipelineExecutionArn = nil
        }
    }
}

public struct UpdatePipelineExecutionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the updated pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init (
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

struct UpdatePipelineExecutionOutputResponseBody: Swift.Equatable {
    let pipelineExecutionArn: Swift.String?
}

extension UpdatePipelineExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
    }
}

extension UpdatePipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineDefinition = "PipelineDefinition"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineDefinition = pipelineDefinition {
            try encodeContainer.encode(pipelineDefinition, forKey: .pipelineDefinition)
        }
        if let pipelineDescription = pipelineDescription {
            try encodeContainer.encode(pipelineDescription, forKey: .pipelineDescription)
        }
        if let pipelineDisplayName = pipelineDisplayName {
            try encodeContainer.encode(pipelineDisplayName, forKey: .pipelineDisplayName)
        }
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdatePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdatePipelineInput: Swift.Equatable {
    /// The JSON pipeline definition.
    public var pipelineDefinition: Swift.String?
    /// The description of the pipeline.
    public var pipelineDescription: Swift.String?
    /// The display name of the pipeline.
    public var pipelineDisplayName: Swift.String?
    /// The name of the pipeline to update.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The Amazon Resource Name (ARN) that the pipeline uses to execute.
    public var roleArn: Swift.String?

    public init (
        pipelineDefinition: Swift.String? = nil,
        pipelineDescription: Swift.String? = nil,
        pipelineDisplayName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.pipelineDefinition = pipelineDefinition
        self.pipelineDescription = pipelineDescription
        self.pipelineDisplayName = pipelineDisplayName
        self.pipelineName = pipelineName
        self.roleArn = roleArn
    }
}

struct UpdatePipelineInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineDisplayName: Swift.String?
    let pipelineDefinition: Swift.String?
    let pipelineDescription: Swift.String?
    let roleArn: Swift.String?
}

extension UpdatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineDefinition = "PipelineDefinition"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDisplayName)
        pipelineDisplayName = pipelineDisplayNameDecoded
        let pipelineDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDefinition)
        pipelineDefinition = pipelineDefinitionDecoded
        let pipelineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDescription)
        pipelineDescription = pipelineDescriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdatePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdatePipelineOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdatePipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineArn = output.pipelineArn
        } else {
            self.pipelineArn = nil
        }
    }
}

public struct UpdatePipelineOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the updated pipeline.
    public var pipelineArn: Swift.String?

    public init (
        pipelineArn: Swift.String? = nil
    )
    {
        self.pipelineArn = pipelineArn
    }
}

struct UpdatePipelineOutputResponseBody: Swift.Equatable {
    let pipelineArn: Swift.String?
}

extension UpdatePipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineArn = "PipelineArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
    }
}

extension UpdateProjectInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectDescription = "ProjectDescription"
        case projectName = "ProjectName"
        case serviceCatalogProvisioningUpdateDetails = "ServiceCatalogProvisioningUpdateDetails"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectDescription = projectDescription {
            try encodeContainer.encode(projectDescription, forKey: .projectDescription)
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let serviceCatalogProvisioningUpdateDetails = serviceCatalogProvisioningUpdateDetails {
            try encodeContainer.encode(serviceCatalogProvisioningUpdateDetails, forKey: .serviceCatalogProvisioningUpdateDetails)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

extension UpdateProjectInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateProjectInput: Swift.Equatable {
    /// The description for the project.
    public var projectDescription: Swift.String?
    /// The name of the project.
    /// This member is required.
    public var projectName: Swift.String?
    /// The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public var serviceCatalogProvisioningUpdateDetails: SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?

    public init (
        projectDescription: Swift.String? = nil,
        projectName: Swift.String? = nil,
        serviceCatalogProvisioningUpdateDetails: SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.projectDescription = projectDescription
        self.projectName = projectName
        self.serviceCatalogProvisioningUpdateDetails = serviceCatalogProvisioningUpdateDetails
        self.tags = tags
    }
}

struct UpdateProjectInputBody: Swift.Equatable {
    let projectName: Swift.String?
    let projectDescription: Swift.String?
    let serviceCatalogProvisioningUpdateDetails: SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails?
    let tags: [SageMakerClientTypes.Tag]?
}

extension UpdateProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectDescription = "ProjectDescription"
        case projectName = "ProjectName"
        case serviceCatalogProvisioningUpdateDetails = "ServiceCatalogProvisioningUpdateDetails"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let projectDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectDescription)
        projectDescription = projectDescriptionDecoded
        let serviceCatalogProvisioningUpdateDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails.self, forKey: .serviceCatalogProvisioningUpdateDetails)
        serviceCatalogProvisioningUpdateDetails = serviceCatalogProvisioningUpdateDetailsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension UpdateProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateProjectOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateProjectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.projectArn = output.projectArn
        } else {
            self.projectArn = nil
        }
    }
}

public struct UpdateProjectOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the project.
    /// This member is required.
    public var projectArn: Swift.String?

    public init (
        projectArn: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
    }
}

struct UpdateProjectOutputResponseBody: Swift.Equatable {
    let projectArn: Swift.String?
}

extension UpdateProjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectArn = "ProjectArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
    }
}

extension UpdateTrainingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case trainingJobName = "TrainingJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let profilerConfig = profilerConfig {
            try encodeContainer.encode(profilerConfig, forKey: .profilerConfig)
        }
        if let profilerRuleConfigurations = profilerRuleConfigurations {
            var profilerRuleConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .profilerRuleConfigurations)
            for profilerruleconfigurations0 in profilerRuleConfigurations {
                try profilerRuleConfigurationsContainer.encode(profilerruleconfigurations0)
            }
        }
        if let trainingJobName = trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
    }
}

extension UpdateTrainingJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTrainingJobInput: Swift.Equatable {
    /// Configuration information for Debugger system monitoring, framework profiling, and storage paths.
    public var profilerConfig: SageMakerClientTypes.ProfilerConfigForUpdate?
    /// Configuration information for Debugger rules for profiling system and framework metrics.
    public var profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    /// The name of a training job to update the Debugger profiling configuration.
    /// This member is required.
    public var trainingJobName: Swift.String?

    public init (
        profilerConfig: SageMakerClientTypes.ProfilerConfigForUpdate? = nil,
        profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]? = nil,
        trainingJobName: Swift.String? = nil
    )
    {
        self.profilerConfig = profilerConfig
        self.profilerRuleConfigurations = profilerRuleConfigurations
        self.trainingJobName = trainingJobName
    }
}

struct UpdateTrainingJobInputBody: Swift.Equatable {
    let trainingJobName: Swift.String?
    let profilerConfig: SageMakerClientTypes.ProfilerConfigForUpdate?
    let profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
}

extension UpdateTrainingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case trainingJobName = "TrainingJobName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let profilerConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProfilerConfigForUpdate.self, forKey: .profilerConfig)
        profilerConfig = profilerConfigDecoded
        let profilerRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProfilerRuleConfiguration?].self, forKey: .profilerRuleConfigurations)
        var profilerRuleConfigurationsDecoded0:[SageMakerClientTypes.ProfilerRuleConfiguration]? = nil
        if let profilerRuleConfigurationsContainer = profilerRuleConfigurationsContainer {
            profilerRuleConfigurationsDecoded0 = [SageMakerClientTypes.ProfilerRuleConfiguration]()
            for structure0 in profilerRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    profilerRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        profilerRuleConfigurations = profilerRuleConfigurationsDecoded0
    }
}

extension UpdateTrainingJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTrainingJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTrainingJobOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTrainingJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateTrainingJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trainingJobArn = output.trainingJobArn
        } else {
            self.trainingJobArn = nil
        }
    }
}

public struct UpdateTrainingJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the training job.
    /// This member is required.
    public var trainingJobArn: Swift.String?

    public init (
        trainingJobArn: Swift.String? = nil
    )
    {
        self.trainingJobArn = trainingJobArn
    }
}

struct UpdateTrainingJobOutputResponseBody: Swift.Equatable {
    let trainingJobArn: Swift.String?
}

extension UpdateTrainingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trainingJobArn = "TrainingJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
    }
}

extension UpdateTrialComponentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case inputArtifactsToRemove = "InputArtifactsToRemove"
        case outputArtifacts = "OutputArtifacts"
        case outputArtifactsToRemove = "OutputArtifactsToRemove"
        case parameters = "Parameters"
        case parametersToRemove = "ParametersToRemove"
        case startTime = "StartTime"
        case status = "Status"
        case trialComponentName = "TrialComponentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .inputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in inputArtifacts {
                try inputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let inputArtifactsToRemove = inputArtifactsToRemove {
            var inputArtifactsToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputArtifactsToRemove)
            for listtrialcomponentkey2560 in inputArtifactsToRemove {
                try inputArtifactsToRemoveContainer.encode(listtrialcomponentkey2560)
            }
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .outputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in outputArtifacts {
                try outputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let outputArtifactsToRemove = outputArtifactsToRemove {
            var outputArtifactsToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputArtifactsToRemove)
            for listtrialcomponentkey2560 in outputArtifactsToRemove {
                try outputArtifactsToRemoveContainer.encode(listtrialcomponentkey2560)
            }
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, trialcomponentparameters0) in parameters {
                try parametersContainer.encode(trialcomponentparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let parametersToRemove = parametersToRemove {
            var parametersToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parametersToRemove)
            for listtrialcomponentkey2560 in parametersToRemove {
                try parametersToRemoveContainer.encode(listtrialcomponentkey2560)
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let trialComponentName = trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
    }
}

extension UpdateTrialComponentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTrialComponentInput: Swift.Equatable {
    /// The name of the component as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialComponentName is displayed.
    public var displayName: Swift.String?
    /// When the component ended.
    public var endTime: ClientRuntime.Date?
    /// Replaces all of the component's input artifacts with the specified artifacts.
    public var inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    /// The input artifacts to remove from the component.
    public var inputArtifactsToRemove: [Swift.String]?
    /// Replaces all of the component's output artifacts with the specified artifacts.
    public var outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    /// The output artifacts to remove from the component.
    public var outputArtifactsToRemove: [Swift.String]?
    /// Replaces all of the component's hyperparameters with the specified hyperparameters.
    public var parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]?
    /// The hyperparameters to remove from the component.
    public var parametersToRemove: [Swift.String]?
    /// When the component started.
    public var startTime: ClientRuntime.Date?
    /// The new status of the component.
    public var status: SageMakerClientTypes.TrialComponentStatus?
    /// The name of the component to update.
    /// This member is required.
    public var trialComponentName: Swift.String?

    public init (
        displayName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil,
        inputArtifactsToRemove: [Swift.String]? = nil,
        outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil,
        outputArtifactsToRemove: [Swift.String]? = nil,
        parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil,
        parametersToRemove: [Swift.String]? = nil,
        startTime: ClientRuntime.Date? = nil,
        status: SageMakerClientTypes.TrialComponentStatus? = nil,
        trialComponentName: Swift.String? = nil
    )
    {
        self.displayName = displayName
        self.endTime = endTime
        self.inputArtifacts = inputArtifacts
        self.inputArtifactsToRemove = inputArtifactsToRemove
        self.outputArtifacts = outputArtifacts
        self.outputArtifactsToRemove = outputArtifactsToRemove
        self.parameters = parameters
        self.parametersToRemove = parametersToRemove
        self.startTime = startTime
        self.status = status
        self.trialComponentName = trialComponentName
    }
}

struct UpdateTrialComponentInputBody: Swift.Equatable {
    let trialComponentName: Swift.String?
    let displayName: Swift.String?
    let status: SageMakerClientTypes.TrialComponentStatus?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]?
    let parametersToRemove: [Swift.String]?
    let inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    let inputArtifactsToRemove: [Swift.String]?
    let outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    let outputArtifactsToRemove: [Swift.String]?
}

extension UpdateTrialComponentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case inputArtifactsToRemove = "InputArtifactsToRemove"
        case outputArtifacts = "OutputArtifacts"
        case outputArtifactsToRemove = "OutputArtifactsToRemove"
        case parameters = "Parameters"
        case parametersToRemove = "ParametersToRemove"
        case startTime = "StartTime"
        case status = "Status"
        case trialComponentName = "TrialComponentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentParameterValue?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]()
            for (key0, trialcomponentparametervalue0) in parametersContainer {
                if let trialcomponentparametervalue0 = trialcomponentparametervalue0 {
                    parametersDecoded0?[key0] = trialcomponentparametervalue0
                }
            }
        }
        parameters = parametersDecoded0
        let parametersToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .parametersToRemove)
        var parametersToRemoveDecoded0:[Swift.String]? = nil
        if let parametersToRemoveContainer = parametersToRemoveContainer {
            parametersToRemoveDecoded0 = [Swift.String]()
            for string0 in parametersToRemoveContainer {
                if let string0 = string0 {
                    parametersToRemoveDecoded0?.append(string0)
                }
            }
        }
        parametersToRemove = parametersToRemoveDecoded0
        let inputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in inputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    inputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let inputArtifactsToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputArtifactsToRemove)
        var inputArtifactsToRemoveDecoded0:[Swift.String]? = nil
        if let inputArtifactsToRemoveContainer = inputArtifactsToRemoveContainer {
            inputArtifactsToRemoveDecoded0 = [Swift.String]()
            for string0 in inputArtifactsToRemoveContainer {
                if let string0 = string0 {
                    inputArtifactsToRemoveDecoded0?.append(string0)
                }
            }
        }
        inputArtifactsToRemove = inputArtifactsToRemoveDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in outputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    outputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let outputArtifactsToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .outputArtifactsToRemove)
        var outputArtifactsToRemoveDecoded0:[Swift.String]? = nil
        if let outputArtifactsToRemoveContainer = outputArtifactsToRemoveContainer {
            outputArtifactsToRemoveDecoded0 = [Swift.String]()
            for string0 in outputArtifactsToRemoveContainer {
                if let string0 = string0 {
                    outputArtifactsToRemoveDecoded0?.append(string0)
                }
            }
        }
        outputArtifactsToRemove = outputArtifactsToRemoveDecoded0
    }
}

extension UpdateTrialComponentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTrialComponentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTrialComponentOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTrialComponentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateTrialComponentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trialComponentArn = output.trialComponentArn
        } else {
            self.trialComponentArn = nil
        }
    }
}

public struct UpdateTrialComponentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the trial component.
    public var trialComponentArn: Swift.String?

    public init (
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialComponentArn = trialComponentArn
    }
}

struct UpdateTrialComponentOutputResponseBody: Swift.Equatable {
    let trialComponentArn: Swift.String?
}

extension UpdateTrialComponentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialComponentArn = "TrialComponentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
    }
}

extension UpdateTrialInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }
}

extension UpdateTrialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTrialInput: Swift.Equatable {
    /// The name of the trial as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialName is displayed.
    public var displayName: Swift.String?
    /// The name of the trial to update.
    /// This member is required.
    public var trialName: Swift.String?

    public init (
        displayName: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.displayName = displayName
        self.trialName = trialName
    }
}

struct UpdateTrialInputBody: Swift.Equatable {
    let trialName: Swift.String?
    let displayName: Swift.String?
}

extension UpdateTrialInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case trialName = "TrialName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
    }
}

extension UpdateTrialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTrialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTrialOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTrialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateTrialOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trialArn = output.trialArn
        } else {
            self.trialArn = nil
        }
    }
}

public struct UpdateTrialOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?

    public init (
        trialArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
    }
}

struct UpdateTrialOutputResponseBody: Swift.Equatable {
    let trialArn: Swift.String?
}

extension UpdateTrialOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trialArn = "TrialArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialArn)
        trialArn = trialArnDecoded
    }
}

extension UpdateUserProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
        case userSettings = "UserSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
        if let userSettings = userSettings {
            try encodeContainer.encode(userSettings, forKey: .userSettings)
        }
    }
}

extension UpdateUserProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateUserProfileInput: Swift.Equatable {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The user profile name.
    /// This member is required.
    public var userProfileName: Swift.String?
    /// A collection of settings.
    public var userSettings: SageMakerClientTypes.UserSettings?

    public init (
        domainId: Swift.String? = nil,
        userProfileName: Swift.String? = nil,
        userSettings: SageMakerClientTypes.UserSettings? = nil
    )
    {
        self.domainId = domainId
        self.userProfileName = userProfileName
        self.userSettings = userSettings
    }
}

struct UpdateUserProfileInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileName: Swift.String?
    let userSettings: SageMakerClientTypes.UserSettings?
}

extension UpdateUserProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case userProfileName = "UserProfileName"
        case userSettings = "UserSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let userSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserSettings.self, forKey: .userSettings)
        userSettings = userSettingsDecoded
    }
}

extension UpdateUserProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceInUse" : self = .resourceInUse(try ResourceInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserProfileOutputError: Swift.Error, Swift.Equatable {
    case resourceInUse(ResourceInUse)
    case resourceLimitExceeded(ResourceLimitExceeded)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateUserProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userProfileArn = output.userProfileArn
        } else {
            self.userProfileArn = nil
        }
    }
}

public struct UpdateUserProfileOutputResponse: Swift.Equatable {
    /// The user profile Amazon Resource Name (ARN).
    public var userProfileArn: Swift.String?

    public init (
        userProfileArn: Swift.String? = nil
    )
    {
        self.userProfileArn = userProfileArn
    }
}

struct UpdateUserProfileOutputResponseBody: Swift.Equatable {
    let userProfileArn: Swift.String?
}

extension UpdateUserProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userProfileArn = "UserProfileArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileArn)
        userProfileArn = userProfileArnDecoded
    }
}

extension UpdateWorkforceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case oidcConfig = "OidcConfig"
        case sourceIpConfig = "SourceIpConfig"
        case workforceName = "WorkforceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let oidcConfig = oidcConfig {
            try encodeContainer.encode(oidcConfig, forKey: .oidcConfig)
        }
        if let sourceIpConfig = sourceIpConfig {
            try encodeContainer.encode(sourceIpConfig, forKey: .sourceIpConfig)
        }
        if let workforceName = workforceName {
            try encodeContainer.encode(workforceName, forKey: .workforceName)
        }
    }
}

extension UpdateWorkforceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateWorkforceInput: Swift.Equatable {
    /// Use this parameter to update your OIDC Identity Provider (IdP) configuration for a workforce made using your own IdP.
    public var oidcConfig: SageMakerClientTypes.OidcConfig?
    /// A list of one to ten worker IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)) that can be used to access tasks assigned to this workforce. Maximum: Ten CIDR values
    public var sourceIpConfig: SageMakerClientTypes.SourceIpConfig?
    /// The name of the private workforce that you want to update. You can find your workforce name by using the operation.
    /// This member is required.
    public var workforceName: Swift.String?

    public init (
        oidcConfig: SageMakerClientTypes.OidcConfig? = nil,
        sourceIpConfig: SageMakerClientTypes.SourceIpConfig? = nil,
        workforceName: Swift.String? = nil
    )
    {
        self.oidcConfig = oidcConfig
        self.sourceIpConfig = sourceIpConfig
        self.workforceName = workforceName
    }
}

struct UpdateWorkforceInputBody: Swift.Equatable {
    let workforceName: Swift.String?
    let sourceIpConfig: SageMakerClientTypes.SourceIpConfig?
    let oidcConfig: SageMakerClientTypes.OidcConfig?
}

extension UpdateWorkforceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case oidcConfig = "OidcConfig"
        case sourceIpConfig = "SourceIpConfig"
        case workforceName = "WorkforceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
        let sourceIpConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SourceIpConfig.self, forKey: .sourceIpConfig)
        sourceIpConfig = sourceIpConfigDecoded
        let oidcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OidcConfig.self, forKey: .oidcConfig)
        oidcConfig = oidcConfigDecoded
    }
}

extension UpdateWorkforceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateWorkforceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateWorkforceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateWorkforceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateWorkforceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.workforce = output.workforce
        } else {
            self.workforce = nil
        }
    }
}

public struct UpdateWorkforceOutputResponse: Swift.Equatable {
    /// A single private workforce. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see [Create a Private Workforce](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html).
    /// This member is required.
    public var workforce: SageMakerClientTypes.Workforce?

    public init (
        workforce: SageMakerClientTypes.Workforce? = nil
    )
    {
        self.workforce = workforce
    }
}

struct UpdateWorkforceOutputResponseBody: Swift.Equatable {
    let workforce: SageMakerClientTypes.Workforce?
}

extension UpdateWorkforceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workforce = "Workforce"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Workforce.self, forKey: .workforce)
        workforce = workforceDecoded
    }
}

extension UpdateWorkteamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case memberDefinitions = "MemberDefinitions"
        case notificationConfiguration = "NotificationConfiguration"
        case workteamName = "WorkteamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let memberDefinitions = memberDefinitions {
            var memberDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memberDefinitions)
            for memberdefinitions0 in memberDefinitions {
                try memberDefinitionsContainer.encode(memberdefinitions0)
            }
        }
        if let notificationConfiguration = notificationConfiguration {
            try encodeContainer.encode(notificationConfiguration, forKey: .notificationConfiguration)
        }
        if let workteamName = workteamName {
            try encodeContainer.encode(workteamName, forKey: .workteamName)
        }
    }
}

extension UpdateWorkteamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateWorkteamInput: Swift.Equatable {
    /// An updated description for the work team.
    public var description: Swift.String?
    /// A list of MemberDefinition objects that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition. You should not provide input for both of these parameters in a single request. For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito user groups within the user pool used to create a workforce. All of the CognitoMemberDefinition objects that make up the member definition must have the same ClientId and UserPool values. To add a Amazon Cognito user group to an existing worker pool, see [Adding groups to a User Pool]. For more information about user pools, see [Amazon Cognito User Pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html). For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in OidcMemberDefinition by listing those groups in Groups. Be aware that user groups that are already in the work team must also be listed in Groups when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update.
    public var memberDefinitions: [SageMakerClientTypes.MemberDefinition]?
    /// Configures SNS topic notifications for available or expiring work items
    public var notificationConfiguration: SageMakerClientTypes.NotificationConfiguration?
    /// The name of the work team to update.
    /// This member is required.
    public var workteamName: Swift.String?

    public init (
        description: Swift.String? = nil,
        memberDefinitions: [SageMakerClientTypes.MemberDefinition]? = nil,
        notificationConfiguration: SageMakerClientTypes.NotificationConfiguration? = nil,
        workteamName: Swift.String? = nil
    )
    {
        self.description = description
        self.memberDefinitions = memberDefinitions
        self.notificationConfiguration = notificationConfiguration
        self.workteamName = workteamName
    }
}

struct UpdateWorkteamInputBody: Swift.Equatable {
    let workteamName: Swift.String?
    let memberDefinitions: [SageMakerClientTypes.MemberDefinition]?
    let description: Swift.String?
    let notificationConfiguration: SageMakerClientTypes.NotificationConfiguration?
}

extension UpdateWorkteamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case memberDefinitions = "MemberDefinitions"
        case notificationConfiguration = "NotificationConfiguration"
        case workteamName = "WorkteamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamName)
        workteamName = workteamNameDecoded
        let memberDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MemberDefinition?].self, forKey: .memberDefinitions)
        var memberDefinitionsDecoded0:[SageMakerClientTypes.MemberDefinition]? = nil
        if let memberDefinitionsContainer = memberDefinitionsContainer {
            memberDefinitionsDecoded0 = [SageMakerClientTypes.MemberDefinition]()
            for structure0 in memberDefinitionsContainer {
                if let structure0 = structure0 {
                    memberDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        memberDefinitions = memberDefinitionsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
    }
}

extension UpdateWorkteamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateWorkteamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceLimitExceeded" : self = .resourceLimitExceeded(try ResourceLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateWorkteamOutputError: Swift.Error, Swift.Equatable {
    case resourceLimitExceeded(ResourceLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateWorkteamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateWorkteamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.workteam = output.workteam
        } else {
            self.workteam = nil
        }
    }
}

public struct UpdateWorkteamOutputResponse: Swift.Equatable {
    /// A Workteam object that describes the updated work team.
    /// This member is required.
    public var workteam: SageMakerClientTypes.Workteam?

    public init (
        workteam: SageMakerClientTypes.Workteam? = nil
    )
    {
        self.workteam = workteam
    }
}

struct UpdateWorkteamOutputResponseBody: Swift.Equatable {
    let workteam: SageMakerClientTypes.Workteam?
}

extension UpdateWorkteamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workteam = "Workteam"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Workteam.self, forKey: .workteam)
        workteam = workteamDecoded
    }
}

extension SageMakerClientTypes.UserContext: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainId = "DomainId"
        case userProfileArn = "UserProfileArn"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let userProfileArn = userProfileArn {
            try encodeContainer.encode(userProfileArn, forKey: .userProfileArn)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileArn)
        userProfileArn = userProfileArnDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
    }
}

extension SageMakerClientTypes {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
    public struct UserContext: Swift.Equatable {
        /// The domain associated with the user.
        public var domainId: Swift.String?
        /// The Amazon Resource Name (ARN) of the user's profile.
        public var userProfileArn: Swift.String?
        /// The name of the user's profile.
        public var userProfileName: Swift.String?

        public init (
            domainId: Swift.String? = nil,
            userProfileArn: Swift.String? = nil,
            userProfileName: Swift.String? = nil
        )
        {
            self.domainId = domainId
            self.userProfileArn = userProfileArn
            self.userProfileName = userProfileName
        }
    }

}

extension SageMakerClientTypes.UserProfileDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case domainId = "DomainId"
        case lastModifiedTime = "LastModifiedTime"
        case status = "Status"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserProfileStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SageMakerClientTypes {
    /// The user profile details.
    public struct UserProfileDetails: Swift.Equatable {
        /// The creation time.
        public var creationTime: ClientRuntime.Date?
        /// The domain ID.
        public var domainId: Swift.String?
        /// The last modified time.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The status.
        public var status: SageMakerClientTypes.UserProfileStatus?
        /// The user profile name.
        public var userProfileName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            domainId: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            status: SageMakerClientTypes.UserProfileStatus? = nil,
            userProfileName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.domainId = domainId
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.userProfileName = userProfileName
        }
    }

}

extension SageMakerClientTypes {
    public enum UserProfileSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case lastmodifiedtime
        case sdkUnknown(Swift.String)

        public static var allCases: [UserProfileSortKey] {
            return [
                .creationtime,
                .lastmodifiedtime,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .lastmodifiedtime: return "LastModifiedTime"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UserProfileSortKey(rawValue: rawValue) ?? UserProfileSortKey.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum UserProfileStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleteFailed
        case deleting
        case failed
        case inservice
        case pending
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [UserProfileStatus] {
            return [
                .deleteFailed,
                .deleting,
                .failed,
                .inservice,
                .pending,
                .updateFailed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleteFailed: return "Delete_Failed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .pending: return "Pending"
            case .updateFailed: return "Update_Failed"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UserProfileStatus(rawValue: rawValue) ?? UserProfileStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.UserSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionRole = "ExecutionRole"
        case jupyterServerAppSettings = "JupyterServerAppSettings"
        case kernelGatewayAppSettings = "KernelGatewayAppSettings"
        case rSessionAppSettings = "RSessionAppSettings"
        case rStudioServerProAppSettings = "RStudioServerProAppSettings"
        case securityGroups = "SecurityGroups"
        case sharingSettings = "SharingSettings"
        case tensorBoardAppSettings = "TensorBoardAppSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionRole = executionRole {
            try encodeContainer.encode(executionRole, forKey: .executionRole)
        }
        if let jupyterServerAppSettings = jupyterServerAppSettings {
            try encodeContainer.encode(jupyterServerAppSettings, forKey: .jupyterServerAppSettings)
        }
        if let kernelGatewayAppSettings = kernelGatewayAppSettings {
            try encodeContainer.encode(kernelGatewayAppSettings, forKey: .kernelGatewayAppSettings)
        }
        if let rSessionAppSettings = rSessionAppSettings {
            try encodeContainer.encode(rSessionAppSettings, forKey: .rSessionAppSettings)
        }
        if let rStudioServerProAppSettings = rStudioServerProAppSettings {
            try encodeContainer.encode(rStudioServerProAppSettings, forKey: .rStudioServerProAppSettings)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygroupids0 in securityGroups {
                try securityGroupsContainer.encode(securitygroupids0)
            }
        }
        if let sharingSettings = sharingSettings {
            try encodeContainer.encode(sharingSettings, forKey: .sharingSettings)
        }
        if let tensorBoardAppSettings = tensorBoardAppSettings {
            try encodeContainer.encode(tensorBoardAppSettings, forKey: .tensorBoardAppSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRole)
        executionRole = executionRoleDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sharingSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SharingSettings.self, forKey: .sharingSettings)
        sharingSettings = sharingSettingsDecoded
        let jupyterServerAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.JupyterServerAppSettings.self, forKey: .jupyterServerAppSettings)
        jupyterServerAppSettings = jupyterServerAppSettingsDecoded
        let kernelGatewayAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.KernelGatewayAppSettings.self, forKey: .kernelGatewayAppSettings)
        kernelGatewayAppSettings = kernelGatewayAppSettingsDecoded
        let tensorBoardAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TensorBoardAppSettings.self, forKey: .tensorBoardAppSettings)
        tensorBoardAppSettings = tensorBoardAppSettingsDecoded
        let rStudioServerProAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RStudioServerProAppSettings.self, forKey: .rStudioServerProAppSettings)
        rStudioServerProAppSettings = rStudioServerProAppSettingsDecoded
        let rSessionAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RSessionAppSettings.self, forKey: .rSessionAppSettings)
        rSessionAppSettings = rSessionAppSettingsDecoded
    }
}

extension SageMakerClientTypes {
    /// A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called. SecurityGroups is aggregated when specified in both calls. For all other settings in UserSettings, the values specified in CreateUserProfile take precedence over those specified in CreateDomain.
    public struct UserSettings: Swift.Equatable {
        /// The execution role for the user.
        public var executionRole: Swift.String?
        /// The Jupyter server's app settings.
        public var jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings?
        /// The kernel gateway app settings.
        public var kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings?
        /// A collection of settings that configure the RSessionGateway app.
        public var rSessionAppSettings: SageMakerClientTypes.RSessionAppSettings?
        /// A collection of settings that configure user interaction with the RStudioServerPro app.
        public var rStudioServerProAppSettings: SageMakerClientTypes.RStudioServerProAppSettings?
        /// The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication. Optional when the CreateDomain.AppNetworkAccessType parameter is set to PublicInternetOnly. Required when the CreateDomain.AppNetworkAccessType parameter is set to VpcOnly. Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.
        public var securityGroups: [Swift.String]?
        /// Specifies options for sharing SageMaker Studio notebooks.
        public var sharingSettings: SageMakerClientTypes.SharingSettings?
        /// The TensorBoard app settings.
        public var tensorBoardAppSettings: SageMakerClientTypes.TensorBoardAppSettings?

        public init (
            executionRole: Swift.String? = nil,
            jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings? = nil,
            kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings? = nil,
            rSessionAppSettings: SageMakerClientTypes.RSessionAppSettings? = nil,
            rStudioServerProAppSettings: SageMakerClientTypes.RStudioServerProAppSettings? = nil,
            securityGroups: [Swift.String]? = nil,
            sharingSettings: SageMakerClientTypes.SharingSettings? = nil,
            tensorBoardAppSettings: SageMakerClientTypes.TensorBoardAppSettings? = nil
        )
        {
            self.executionRole = executionRole
            self.jupyterServerAppSettings = jupyterServerAppSettings
            self.kernelGatewayAppSettings = kernelGatewayAppSettings
            self.rSessionAppSettings = rSessionAppSettings
            self.rStudioServerProAppSettings = rStudioServerProAppSettings
            self.securityGroups = securityGroups
            self.sharingSettings = sharingSettings
            self.tensorBoardAppSettings = tensorBoardAppSettings
        }
    }

}

extension SageMakerClientTypes.VariantProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case variantPropertyType = "VariantPropertyType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let variantPropertyType = variantPropertyType {
            try encodeContainer.encode(variantPropertyType.rawValue, forKey: .variantPropertyType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variantPropertyTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VariantPropertyType.self, forKey: .variantPropertyType)
        variantPropertyType = variantPropertyTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// Specifies a production variant property type for an Endpoint. If you are updating an endpoint with the [UpdateEndpointInput$RetainAllVariantProperties] option set to true, the VariantProperty objects listed in [UpdateEndpointInput$ExcludeRetainedVariantProperties] override the existing variant properties of the endpoint.
    public struct VariantProperty: Swift.Equatable {
        /// The type of variant property. The supported values are:
        ///
        /// * DesiredInstanceCount: Overrides the existing variant instance counts using the [ProductionVariant$InitialInstanceCount] values in the [CreateEndpointConfigInput$ProductionVariants].
        ///
        /// * DesiredWeight: Overrides the existing variant weights using the [ProductionVariant$InitialVariantWeight] values in the [CreateEndpointConfigInput$ProductionVariants].
        ///
        /// * DataCaptureConfig: (Not currently supported.)
        /// This member is required.
        public var variantPropertyType: SageMakerClientTypes.VariantPropertyType?

        public init (
            variantPropertyType: SageMakerClientTypes.VariantPropertyType? = nil
        )
        {
            self.variantPropertyType = variantPropertyType
        }
    }

}

extension SageMakerClientTypes {
    public enum VariantPropertyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case datacaptureconfig
        case desiredinstancecount
        case desiredweight
        case sdkUnknown(Swift.String)

        public static var allCases: [VariantPropertyType] {
            return [
                .datacaptureconfig,
                .desiredinstancecount,
                .desiredweight,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .datacaptureconfig: return "DataCaptureConfig"
            case .desiredinstancecount: return "DesiredInstanceCount"
            case .desiredweight: return "DesiredWeight"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VariantPropertyType(rawValue: rawValue) ?? VariantPropertyType.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes {
    public enum VariantStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activatingTraffic
        case baking
        case creating
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [VariantStatus] {
            return [
                .activatingTraffic,
                .baking,
                .creating,
                .deleting,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activatingTraffic: return "ActivatingTraffic"
            case .baking: return "Baking"
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VariantStatus(rawValue: rawValue) ?? VariantStatus.sdkUnknown(rawValue)
        }
    }
}

extension SageMakerClientTypes.Vertex: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case lineageType = "LineageType"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let lineageType = lineageType {
            try encodeContainer.encode(lineageType.rawValue, forKey: .lineageType)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let lineageTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LineageType.self, forKey: .lineageType)
        lineageType = lineageTypeDecoded
    }
}

extension SageMakerClientTypes {
    /// A lineage entity connected to the starting entity(ies).
    public struct Vertex: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the lineage entity resource.
        public var arn: Swift.String?
        /// The type of resource of the lineage entity.
        public var lineageType: SageMakerClientTypes.LineageType?
        /// The type of the lineage entity resource. For example: DataSet, Model, Endpoint, etc...
        public var type: Swift.String?

        public init (
            arn: Swift.String? = nil,
            lineageType: SageMakerClientTypes.LineageType? = nil,
            type: Swift.String? = nil
        )
        {
            self.arn = arn
            self.lineageType = lineageType
            self.type = type
        }
    }

}

extension SageMakerClientTypes.VpcConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
        case subnets = "Subnets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for vpcsecuritygroupids0 in securityGroupIds {
                try securityGroupIdsContainer.encode(vpcsecuritygroupids0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for subnets0 in subnets {
                try subnetsContainer.encode(subnets0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
    }
}

extension SageMakerClientTypes {
    /// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
    public struct VpcConfig: Swift.Equatable {
        /// The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The ID of the subnets in the VPC to which you want to connect your training job or model. For information about the availability of specific instance types, see [Supported Instance Types and Availability Zones](https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html).
        /// This member is required.
        public var subnets: [Swift.String]?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }
    }

}

extension SageMakerClientTypes.Workforce: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cognitoConfig = "CognitoConfig"
        case createDate = "CreateDate"
        case lastUpdatedDate = "LastUpdatedDate"
        case oidcConfig = "OidcConfig"
        case sourceIpConfig = "SourceIpConfig"
        case subDomain = "SubDomain"
        case workforceArn = "WorkforceArn"
        case workforceName = "WorkforceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cognitoConfig = cognitoConfig {
            try encodeContainer.encode(cognitoConfig, forKey: .cognitoConfig)
        }
        if let createDate = createDate {
            try encodeContainer.encode(createDate.timeIntervalSince1970, forKey: .createDate)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate.timeIntervalSince1970, forKey: .lastUpdatedDate)
        }
        if let oidcConfig = oidcConfig {
            try encodeContainer.encode(oidcConfig, forKey: .oidcConfig)
        }
        if let sourceIpConfig = sourceIpConfig {
            try encodeContainer.encode(sourceIpConfig, forKey: .sourceIpConfig)
        }
        if let subDomain = subDomain {
            try encodeContainer.encode(subDomain, forKey: .subDomain)
        }
        if let workforceArn = workforceArn {
            try encodeContainer.encode(workforceArn, forKey: .workforceArn)
        }
        if let workforceName = workforceName {
            try encodeContainer.encode(workforceName, forKey: .workforceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
        let workforceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceArn)
        workforceArn = workforceArnDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let sourceIpConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SourceIpConfig.self, forKey: .sourceIpConfig)
        sourceIpConfig = sourceIpConfigDecoded
        let subDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subDomain)
        subDomain = subDomainDecoded
        let cognitoConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CognitoConfig.self, forKey: .cognitoConfig)
        cognitoConfig = cognitoConfigDecoded
        let oidcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OidcConfigForResponse.self, forKey: .oidcConfig)
        oidcConfig = oidcConfigDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createDate)
        createDate = createDateDecoded
    }
}

extension SageMakerClientTypes {
    /// A single private workforce, which is automatically created when you create your first private work team. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see [Create a Private Workforce](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html).
    public struct Workforce: Swift.Equatable {
        /// The configuration of an Amazon Cognito workforce. A single Cognito workforce is created using and corresponds to a single [ Amazon Cognito user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
        public var cognitoConfig: SageMakerClientTypes.CognitoConfig?
        /// The date that the workforce is created.
        public var createDate: ClientRuntime.Date?
        /// The most recent date that was used to successfully add one or more IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)) to a private workforce's allow list.
        public var lastUpdatedDate: ClientRuntime.Date?
        /// The configuration of an OIDC Identity Provider (IdP) private workforce.
        public var oidcConfig: SageMakerClientTypes.OidcConfigForResponse?
        /// A list of one to ten IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)) to be added to the workforce allow list. By default, a workforce isn't restricted to specific IP addresses.
        public var sourceIpConfig: SageMakerClientTypes.SourceIpConfig?
        /// The subdomain for your OIDC Identity Provider.
        public var subDomain: Swift.String?
        /// The Amazon Resource Name (ARN) of the private workforce.
        /// This member is required.
        public var workforceArn: Swift.String?
        /// The name of the private workforce.
        /// This member is required.
        public var workforceName: Swift.String?

        public init (
            cognitoConfig: SageMakerClientTypes.CognitoConfig? = nil,
            createDate: ClientRuntime.Date? = nil,
            lastUpdatedDate: ClientRuntime.Date? = nil,
            oidcConfig: SageMakerClientTypes.OidcConfigForResponse? = nil,
            sourceIpConfig: SageMakerClientTypes.SourceIpConfig? = nil,
            subDomain: Swift.String? = nil,
            workforceArn: Swift.String? = nil,
            workforceName: Swift.String? = nil
        )
        {
            self.cognitoConfig = cognitoConfig
            self.createDate = createDate
            self.lastUpdatedDate = lastUpdatedDate
            self.oidcConfig = oidcConfig
            self.sourceIpConfig = sourceIpConfig
            self.subDomain = subDomain
            self.workforceArn = workforceArn
            self.workforceName = workforceName
        }
    }

}

extension SageMakerClientTypes.Workteam: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case description = "Description"
        case lastUpdatedDate = "LastUpdatedDate"
        case memberDefinitions = "MemberDefinitions"
        case notificationConfiguration = "NotificationConfiguration"
        case productListingIds = "ProductListingIds"
        case subDomain = "SubDomain"
        case workforceArn = "WorkforceArn"
        case workteamArn = "WorkteamArn"
        case workteamName = "WorkteamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createDate = createDate {
            try encodeContainer.encode(createDate.timeIntervalSince1970, forKey: .createDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate.timeIntervalSince1970, forKey: .lastUpdatedDate)
        }
        if let memberDefinitions = memberDefinitions {
            var memberDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memberDefinitions)
            for memberdefinitions0 in memberDefinitions {
                try memberDefinitionsContainer.encode(memberdefinitions0)
            }
        }
        if let notificationConfiguration = notificationConfiguration {
            try encodeContainer.encode(notificationConfiguration, forKey: .notificationConfiguration)
        }
        if let productListingIds = productListingIds {
            var productListingIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productListingIds)
            for productlistings0 in productListingIds {
                try productListingIdsContainer.encode(productlistings0)
            }
        }
        if let subDomain = subDomain {
            try encodeContainer.encode(subDomain, forKey: .subDomain)
        }
        if let workforceArn = workforceArn {
            try encodeContainer.encode(workforceArn, forKey: .workforceArn)
        }
        if let workteamArn = workteamArn {
            try encodeContainer.encode(workteamArn, forKey: .workteamArn)
        }
        if let workteamName = workteamName {
            try encodeContainer.encode(workteamName, forKey: .workteamName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamName)
        workteamName = workteamNameDecoded
        let memberDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MemberDefinition?].self, forKey: .memberDefinitions)
        var memberDefinitionsDecoded0:[SageMakerClientTypes.MemberDefinition]? = nil
        if let memberDefinitionsContainer = memberDefinitionsContainer {
            memberDefinitionsDecoded0 = [SageMakerClientTypes.MemberDefinition]()
            for structure0 in memberDefinitionsContainer {
                if let structure0 = structure0 {
                    memberDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        memberDefinitions = memberDefinitionsDecoded0
        let workteamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
        let workforceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceArn)
        workforceArn = workforceArnDecoded
        let productListingIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .productListingIds)
        var productListingIdsDecoded0:[Swift.String]? = nil
        if let productListingIdsContainer = productListingIdsContainer {
            productListingIdsDecoded0 = [Swift.String]()
            for string0 in productListingIdsContainer {
                if let string0 = string0 {
                    productListingIdsDecoded0?.append(string0)
                }
            }
        }
        productListingIds = productListingIdsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let subDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subDomain)
        subDomain = subDomainDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createDate)
        createDate = createDateDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
    }
}

extension SageMakerClientTypes {
    /// Provides details about a labeling work team.
    public struct Workteam: Swift.Equatable {
        /// The date and time that the work team was created (timestamp).
        public var createDate: ClientRuntime.Date?
        /// A description of the work team.
        /// This member is required.
        public var description: Swift.String?
        /// The date and time that the work team was last updated (timestamp).
        public var lastUpdatedDate: ClientRuntime.Date?
        /// A list of MemberDefinition objects that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition.
        /// This member is required.
        public var memberDefinitions: [SageMakerClientTypes.MemberDefinition]?
        /// Configures SNS notifications of available or expiring work items for work teams.
        public var notificationConfiguration: SageMakerClientTypes.NotificationConfiguration?
        /// The Amazon Marketplace identifier for a vendor's work team.
        public var productListingIds: [Swift.String]?
        /// The URI of the labeling job's user interface. Workers open this URI to start labeling your data objects.
        public var subDomain: Swift.String?
        /// The Amazon Resource Name (ARN) of the workforce.
        public var workforceArn: Swift.String?
        /// The Amazon Resource Name (ARN) that identifies the work team.
        /// This member is required.
        public var workteamArn: Swift.String?
        /// The name of the work team.
        /// This member is required.
        public var workteamName: Swift.String?

        public init (
            createDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: ClientRuntime.Date? = nil,
            memberDefinitions: [SageMakerClientTypes.MemberDefinition]? = nil,
            notificationConfiguration: SageMakerClientTypes.NotificationConfiguration? = nil,
            productListingIds: [Swift.String]? = nil,
            subDomain: Swift.String? = nil,
            workforceArn: Swift.String? = nil,
            workteamArn: Swift.String? = nil,
            workteamName: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.memberDefinitions = memberDefinitions
            self.notificationConfiguration = notificationConfiguration
            self.productListingIds = productListingIds
            self.subDomain = subDomain
            self.workforceArn = workforceArn
            self.workteamArn = workteamArn
            self.workteamName = workteamName
        }
    }

}
