// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the [AWS Elemental MediaTailor User Guide](https://docs.aws.amazon.com/mediatailor/latest/ug/). Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).
public protocol MediaTailorClientProtocol {
    /// Configures Amazon CloudWatch log settings for a playback configuration.
    func configureLogsForPlaybackConfiguration(input: ConfigureLogsForPlaybackConfigurationInput) async throws -> ConfigureLogsForPlaybackConfigurationOutputResponse
    /// Creates a channel.
    func createChannel(input: CreateChannelInput) async throws -> CreateChannelOutputResponse
    /// Creates a new prefetch schedule for the specified playback configuration.
    func createPrefetchSchedule(input: CreatePrefetchScheduleInput) async throws -> CreatePrefetchScheduleOutputResponse
    /// Creates a program.
    func createProgram(input: CreateProgramInput) async throws -> CreateProgramOutputResponse
    /// Creates a source location on a specific channel.
    func createSourceLocation(input: CreateSourceLocationInput) async throws -> CreateSourceLocationOutputResponse
    /// Creates name for a specific VOD source in a source location.
    func createVodSource(input: CreateVodSourceInput) async throws -> CreateVodSourceOutputResponse
    /// Deletes a channel. You must stop the channel before it can be deleted.
    func deleteChannel(input: DeleteChannelInput) async throws -> DeleteChannelOutputResponse
    /// Deletes a channel's IAM policy.
    func deleteChannelPolicy(input: DeleteChannelPolicyInput) async throws -> DeleteChannelPolicyOutputResponse
    /// Deletes the playback configuration for the specified name.
    func deletePlaybackConfiguration(input: DeletePlaybackConfigurationInput) async throws -> DeletePlaybackConfigurationOutputResponse
    /// Deletes a prefetch schedule for a specific playback configuration. If you call DeletePrefetchSchedule on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code.
    func deletePrefetchSchedule(input: DeletePrefetchScheduleInput) async throws -> DeletePrefetchScheduleOutputResponse
    /// Deletes a specific program on a specific channel.
    func deleteProgram(input: DeleteProgramInput) async throws -> DeleteProgramOutputResponse
    /// Deletes a source location on a specific channel.
    func deleteSourceLocation(input: DeleteSourceLocationInput) async throws -> DeleteSourceLocationOutputResponse
    /// Deletes a specific VOD source in a specific source location.
    func deleteVodSource(input: DeleteVodSourceInput) async throws -> DeleteVodSourceOutputResponse
    /// Describes the properties of a specific channel.
    func describeChannel(input: DescribeChannelInput) async throws -> DescribeChannelOutputResponse
    /// Retrieves the properties of the requested program.
    func describeProgram(input: DescribeProgramInput) async throws -> DescribeProgramOutputResponse
    /// Retrieves the properties of the requested source location.
    func describeSourceLocation(input: DescribeSourceLocationInput) async throws -> DescribeSourceLocationOutputResponse
    /// Provides details about a specific VOD source in a specific source location.
    func describeVodSource(input: DescribeVodSourceInput) async throws -> DescribeVodSourceOutputResponse
    /// Retrieves information about a channel's IAM policy.
    func getChannelPolicy(input: GetChannelPolicyInput) async throws -> GetChannelPolicyOutputResponse
    /// Retrieves information about your channel's schedule.
    func getChannelSchedule(input: GetChannelScheduleInput) async throws -> GetChannelScheduleOutputResponse
    /// Returns the playback configuration for the specified name.
    func getPlaybackConfiguration(input: GetPlaybackConfigurationInput) async throws -> GetPlaybackConfigurationOutputResponse
    /// Returns information about the prefetch schedule for a specific playback configuration. If you call GetPrefetchSchedule on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code.
    func getPrefetchSchedule(input: GetPrefetchScheduleInput) async throws -> GetPrefetchScheduleOutputResponse
    /// Returns a list of alerts for the given resource.
    func listAlerts(input: ListAlertsInput) async throws -> ListAlertsOutputResponse
    /// Retrieves a list of channels that are associated with this account.
    func listChannels(input: ListChannelsInput) async throws -> ListChannelsOutputResponse
    /// Returns a list of the playback configurations defined in AWS Elemental MediaTailor. You can specify a maximum number of configurations to return at a time. The default maximum is 50. Results are returned in pagefuls. If MediaTailor has more configurations than the specified maximum, it provides parameters in the response that you can use to retrieve the next pageful.
    func listPlaybackConfigurations(input: ListPlaybackConfigurationsInput) async throws -> ListPlaybackConfigurationsOutputResponse
    /// Creates a new prefetch schedule.
    func listPrefetchSchedules(input: ListPrefetchSchedulesInput) async throws -> ListPrefetchSchedulesOutputResponse
    /// Retrieves a list of source locations.
    func listSourceLocations(input: ListSourceLocationsInput) async throws -> ListSourceLocationsOutputResponse
    /// Returns a list of the tags assigned to the specified playback configuration resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Lists all the VOD sources in a source location.
    func listVodSources(input: ListVodSourcesInput) async throws -> ListVodSourcesOutputResponse
    /// Creates an IAM policy for the channel.
    func putChannelPolicy(input: PutChannelPolicyInput) async throws -> PutChannelPolicyOutputResponse
    /// Adds a new playback configuration to AWS Elemental MediaTailor.
    func putPlaybackConfiguration(input: PutPlaybackConfigurationInput) async throws -> PutPlaybackConfigurationOutputResponse
    /// Starts a specific channel.
    func startChannel(input: StartChannelInput) async throws -> StartChannelOutputResponse
    /// Stops a specific channel.
    func stopChannel(input: StopChannelInput) async throws -> StopChannelOutputResponse
    /// Adds tags to the specified playback configuration resource. You can specify one or more tags to add.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Removes tags from the specified playback configuration resource. You can specify one or more tags to remove.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates an existing channel.
    func updateChannel(input: UpdateChannelInput) async throws -> UpdateChannelOutputResponse
    /// Updates a source location on a specific channel.
    func updateSourceLocation(input: UpdateSourceLocationInput) async throws -> UpdateSourceLocationOutputResponse
    /// Updates a specific VOD source in a specific source location.
    func updateVodSource(input: UpdateVodSourceInput) async throws -> UpdateVodSourceOutputResponse
}

public enum MediaTailorClientTypes {}
