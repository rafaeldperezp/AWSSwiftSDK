// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListApplicationsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListApplicationsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListApplicationsOutputResponse`
extension ServiceCatalogAppRegistryClient {
    public func listApplicationsPaginated(input: ListApplicationsInput) -> ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutputResponse>(input: input, inputKey: \ListApplicationsInput.nextToken, outputKey: \ListApplicationsOutputResponse.nextToken, paginationFunction: self.listApplications(input:))
    }
}

extension ListApplicationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationsInput {
        return ListApplicationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListAssociatedAttributeGroupsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAssociatedAttributeGroupsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAssociatedAttributeGroupsOutputResponse`
extension ServiceCatalogAppRegistryClient {
    public func listAssociatedAttributeGroupsPaginated(input: ListAssociatedAttributeGroupsInput) -> ClientRuntime.PaginatorSequence<ListAssociatedAttributeGroupsInput, ListAssociatedAttributeGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssociatedAttributeGroupsInput, ListAssociatedAttributeGroupsOutputResponse>(input: input, inputKey: \ListAssociatedAttributeGroupsInput.nextToken, outputKey: \ListAssociatedAttributeGroupsOutputResponse.nextToken, paginationFunction: self.listAssociatedAttributeGroups(input:))
    }
}

extension ListAssociatedAttributeGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssociatedAttributeGroupsInput {
        return ListAssociatedAttributeGroupsInput(
            application: self.application,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListAssociatedResourcesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAssociatedResourcesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAssociatedResourcesOutputResponse`
extension ServiceCatalogAppRegistryClient {
    public func listAssociatedResourcesPaginated(input: ListAssociatedResourcesInput) -> ClientRuntime.PaginatorSequence<ListAssociatedResourcesInput, ListAssociatedResourcesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssociatedResourcesInput, ListAssociatedResourcesOutputResponse>(input: input, inputKey: \ListAssociatedResourcesInput.nextToken, outputKey: \ListAssociatedResourcesOutputResponse.nextToken, paginationFunction: self.listAssociatedResources(input:))
    }
}

extension ListAssociatedResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssociatedResourcesInput {
        return ListAssociatedResourcesInput(
            application: self.application,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListAttributeGroupsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAttributeGroupsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAttributeGroupsOutputResponse`
extension ServiceCatalogAppRegistryClient {
    public func listAttributeGroupsPaginated(input: ListAttributeGroupsInput) -> ClientRuntime.PaginatorSequence<ListAttributeGroupsInput, ListAttributeGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAttributeGroupsInput, ListAttributeGroupsOutputResponse>(input: input, inputKey: \ListAttributeGroupsInput.nextToken, outputKey: \ListAttributeGroupsOutputResponse.nextToken, paginationFunction: self.listAttributeGroups(input:))
    }
}

extension ListAttributeGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAttributeGroupsInput {
        return ListAttributeGroupsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
