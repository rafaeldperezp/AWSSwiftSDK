// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Amazon Personalize is a machine learning service that makes it easy to add individualized recommendations to customers.
public protocol PersonalizeClientProtocol {
    /// Creates a batch inference job. The operation can handle up to 50 million records and the input file must be in JSON format. For more information, see [recommendations-batch].
    func createBatchInferenceJob(input: CreateBatchInferenceJobInput) async throws -> CreateBatchInferenceJobOutputResponse
    /// Creates a batch segment job. The operation can handle up to 50 million records and the input file must be in JSON format. For more information, see [recommendations-batch].
    func createBatchSegmentJob(input: CreateBatchSegmentJobInput) async throws -> CreateBatchSegmentJobOutputResponse
    /// Creates a campaign that deploys a solution version. When a client calls the [GetRecommendations](https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html) and [GetPersonalizedRanking](https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetPersonalizedRanking.html) APIs, a campaign is specified in the request. Minimum Provisioned TPS and Auto-Scaling A transaction is a single GetRecommendations or GetPersonalizedRanking call. Transactions per second (TPS) is the throughput and unit of billing for Amazon Personalize. The minimum provisioned TPS (minProvisionedTPS) specifies the baseline throughput provisioned by Amazon Personalize, and thus, the minimum billing charge. If your TPS increases beyond minProvisionedTPS, Amazon Personalize auto-scales the provisioned capacity up and down, but never below minProvisionedTPS. There's a short time delay while the capacity is increased that might cause loss of transactions. The actual TPS used is calculated as the average requests/second within a 5-minute window. You pay for maximum of either the minimum provisioned TPS or the actual TPS. We recommend starting with a low minProvisionedTPS, track your usage using Amazon CloudWatch metrics, and then increase the minProvisionedTPS as necessary. Status A campaign can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    /// * DELETE PENDING > DELETE IN_PROGRESS
    ///
    ///
    /// To get the campaign status, call [DescribeCampaign]. Wait until the status of the campaign is ACTIVE before asking the campaign for recommendations. Related APIs
    ///
    /// * [ListCampaigns]
    ///
    /// * [DescribeCampaign]
    ///
    /// * [UpdateCampaign]
    ///
    /// * [DeleteCampaign]
    func createCampaign(input: CreateCampaignInput) async throws -> CreateCampaignOutputResponse
    /// Creates an empty dataset and adds it to the specified dataset group. Use [CreateDatasetImportJob] to import your training data to a dataset. There are three types of datasets:
    ///
    /// * Interactions
    ///
    /// * Items
    ///
    /// * Users
    ///
    ///
    /// Each dataset type has an associated schema with required field types. Only the Interactions dataset is required in order to train a model (also referred to as creating a solution). A dataset can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    /// * DELETE PENDING > DELETE IN_PROGRESS
    ///
    ///
    /// To get the status of the dataset, call [DescribeDataset]. Related APIs
    ///
    /// * [CreateDatasetGroup]
    ///
    /// * [ListDatasets]
    ///
    /// * [DescribeDataset]
    ///
    /// * [DeleteDataset]
    func createDataset(input: CreateDatasetInput) async throws -> CreateDatasetOutputResponse
    /// Creates a job that exports data from your dataset to an Amazon S3 bucket. To allow Amazon Personalize to export the training data, you must specify an service-linked IAM role that gives Amazon Personalize PutObject permissions for your Amazon S3 bucket. For information, see [Exporting a dataset](https://docs.aws.amazon.com/personalize/latest/dg/export-data.html) in the Amazon Personalize developer guide. Status A dataset export job can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    ///
    /// To get the status of the export job, call [DescribeDatasetExportJob], and specify the Amazon Resource Name (ARN) of the dataset export job. The dataset export is complete when the status shows as ACTIVE. If the status shows as CREATE FAILED, the response includes a failureReason key, which describes why the job failed.
    func createDatasetExportJob(input: CreateDatasetExportJobInput) async throws -> CreateDatasetExportJobOutputResponse
    /// Creates an empty dataset group. A dataset group is a container for Amazon Personalize resources. A dataset group can contain at most three datasets, one for each type of dataset:
    ///
    /// * Interactions
    ///
    /// * Items
    ///
    /// * Users
    ///
    ///
    /// A dataset group can be a Domain dataset group, where you specify a domain and use pre-configured resources like recommenders, or a Custom dataset group, where you use custom resources, such as a solution with a solution version, that you deploy with a campaign. If you start with a Domain dataset group, you can still add custom resources such as solutions and solution versions trained with recipes for custom use cases and deployed with campaigns. A dataset group can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    /// * DELETE PENDING
    ///
    ///
    /// To get the status of the dataset group, call [DescribeDatasetGroup]. If the status shows as CREATE FAILED, the response includes a failureReason key, which describes why the creation failed. You must wait until the status of the dataset group is ACTIVE before adding a dataset to the group. You can specify an Key Management Service (KMS) key to encrypt the datasets in the group. If you specify a KMS key, you must also include an Identity and Access Management (IAM) role that has permission to access the key. APIs that require a dataset group ARN in the request
    ///
    /// * [CreateDataset]
    ///
    /// * [CreateEventTracker]
    ///
    /// * [CreateSolution]
    ///
    ///
    /// Related APIs
    ///
    /// * [ListDatasetGroups]
    ///
    /// * [DescribeDatasetGroup]
    ///
    /// * [DeleteDatasetGroup]
    func createDatasetGroup(input: CreateDatasetGroupInput) async throws -> CreateDatasetGroupOutputResponse
    /// Creates a job that imports training data from your data source (an Amazon S3 bucket) to an Amazon Personalize dataset. To allow Amazon Personalize to import the training data, you must specify an IAM service role that has permission to read from the data source, as Amazon Personalize makes a copy of your data and processes it internally. For information on granting access to your Amazon S3 bucket, see [Giving Amazon Personalize Access to Amazon S3 Resources](https://docs.aws.amazon.com/personalize/latest/dg/granting-personalize-s3-access.html). The dataset import job replaces any existing data in the dataset that you imported in bulk. Status A dataset import job can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    ///
    /// To get the status of the import job, call [DescribeDatasetImportJob], providing the Amazon Resource Name (ARN) of the dataset import job. The dataset import is complete when the status shows as ACTIVE. If the status shows as CREATE FAILED, the response includes a failureReason key, which describes why the job failed. Importing takes time. You must wait until the status shows as ACTIVE before training a model using the dataset. Related APIs
    ///
    /// * [ListDatasetImportJobs]
    ///
    /// * [DescribeDatasetImportJob]
    func createDatasetImportJob(input: CreateDatasetImportJobInput) async throws -> CreateDatasetImportJobOutputResponse
    /// Creates an event tracker that you use when adding event data to a specified dataset group using the [PutEvents](https://docs.aws.amazon.com/personalize/latest/dg/API_UBS_PutEvents.html) API. Only one event tracker can be associated with a dataset group. You will get an error if you call CreateEventTracker using the same dataset group as an existing event tracker. When you create an event tracker, the response includes a tracking ID, which you pass as a parameter when you use the [PutEvents](https://docs.aws.amazon.com/personalize/latest/dg/API_UBS_PutEvents.html) operation. Amazon Personalize then appends the event data to the Interactions dataset of the dataset group you specify in your event tracker. The event tracker can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    /// * DELETE PENDING > DELETE IN_PROGRESS
    ///
    ///
    /// To get the status of the event tracker, call [DescribeEventTracker]. The event tracker must be in the ACTIVE state before using the tracking ID. Related APIs
    ///
    /// * [ListEventTrackers]
    ///
    /// * [DescribeEventTracker]
    ///
    /// * [DeleteEventTracker]
    func createEventTracker(input: CreateEventTrackerInput) async throws -> CreateEventTrackerOutputResponse
    /// Creates a recommendation filter. For more information, see [filter].
    func createFilter(input: CreateFilterInput) async throws -> CreateFilterOutputResponse
    /// Creates a recommender with the recipe (a Domain dataset group use case) you specify. You create recommenders for a Domain dataset group and specify the recommender's Amazon Resource Name (ARN) when you make a [GetRecommendations](https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html) request. Status A recommender can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    /// * DELETE PENDING > DELETE IN_PROGRESS
    ///
    ///
    /// To get the recommender status, call [DescribeRecommender]. Wait until the status of the recommender is ACTIVE before asking the recommender for recommendations. Related APIs
    ///
    /// * [ListRecommenders]
    ///
    /// * [DescribeRecommender]
    ///
    /// * [UpdateRecommender]
    ///
    /// * [DeleteRecommender]
    func createRecommender(input: CreateRecommenderInput) async throws -> CreateRecommenderOutputResponse
    /// Creates an Amazon Personalize schema from the specified schema string. The schema you create must be in Avro JSON format. Amazon Personalize recognizes three schema variants. Each schema is associated with a dataset type and has a set of required field and keywords. If you are creating a schema for a dataset in a Domain dataset group, you provide the domain of the Domain dataset group. You specify a schema when you call [CreateDataset]. Related APIs
    ///
    /// * [ListSchemas]
    ///
    /// * [DescribeSchema]
    ///
    /// * [DeleteSchema]
    func createSchema(input: CreateSchemaInput) async throws -> CreateSchemaOutputResponse
    /// Creates the configuration for training a model. A trained model is known as a solution. After the configuration is created, you train the model (create a solution) by calling the [CreateSolutionVersion] operation. Every time you call CreateSolutionVersion, a new version of the solution is created. After creating a solution version, you check its accuracy by calling [GetSolutionMetrics]. When you are satisfied with the version, you deploy it using [CreateCampaign]. The campaign provides recommendations to a client through the [GetRecommendations](https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html) API. To train a model, Amazon Personalize requires training data and a recipe. The training data comes from the dataset group that you provide in the request. A recipe specifies the training algorithm and a feature transformation. You can specify one of the predefined recipes provided by Amazon Personalize. Alternatively, you can specify performAutoML and Amazon Personalize will analyze your data and select the optimum USER_PERSONALIZATION recipe for you. Amazon Personalize doesn't support configuring the hpoObjective for solution hyperparameter optimization at this time. Status A solution can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    /// * DELETE PENDING > DELETE IN_PROGRESS
    ///
    ///
    /// To get the status of the solution, call [DescribeSolution]. Wait until the status shows as ACTIVE before calling CreateSolutionVersion. Related APIs
    ///
    /// * [ListSolutions]
    ///
    /// * [CreateSolutionVersion]
    ///
    /// * [DescribeSolution]
    ///
    /// * [DeleteSolution]
    ///
    ///
    ///
    ///
    /// * [ListSolutionVersions]
    ///
    /// * [DescribeSolutionVersion]
    func createSolution(input: CreateSolutionInput) async throws -> CreateSolutionOutputResponse
    /// Trains or retrains an active solution in a Custom dataset group. A solution is created using the [CreateSolution] operation and must be in the ACTIVE state before calling CreateSolutionVersion. A new version of the solution is created every time you call this operation. Status A solution version can be in one of the following states:
    ///
    /// * CREATE PENDING
    ///
    /// * CREATE IN_PROGRESS
    ///
    /// * ACTIVE
    ///
    /// * CREATE FAILED
    ///
    /// * CREATE STOPPING
    ///
    /// * CREATE STOPPED
    ///
    ///
    /// To get the status of the version, call [DescribeSolutionVersion]. Wait until the status shows as ACTIVE before calling CreateCampaign. If the status shows as CREATE FAILED, the response includes a failureReason key, which describes why the job failed. Related APIs
    ///
    /// * [ListSolutionVersions]
    ///
    /// * [DescribeSolutionVersion]
    ///
    ///
    ///
    ///
    /// * [ListSolutions]
    ///
    /// * [CreateSolution]
    ///
    /// * [DescribeSolution]
    ///
    /// * [DeleteSolution]
    func createSolutionVersion(input: CreateSolutionVersionInput) async throws -> CreateSolutionVersionOutputResponse
    /// Removes a campaign by deleting the solution deployment. The solution that the campaign is based on is not deleted and can be redeployed when needed. A deleted campaign can no longer be specified in a [GetRecommendations](https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html) request. For more information on campaigns, see [CreateCampaign].
    func deleteCampaign(input: DeleteCampaignInput) async throws -> DeleteCampaignOutputResponse
    /// Deletes a dataset. You can't delete a dataset if an associated DatasetImportJob or SolutionVersion is in the CREATE PENDING or IN PROGRESS state. For more information on datasets, see [CreateDataset].
    func deleteDataset(input: DeleteDatasetInput) async throws -> DeleteDatasetOutputResponse
    /// Deletes a dataset group. Before you delete a dataset group, you must delete the following:
    ///
    /// * All associated event trackers.
    ///
    /// * All associated solutions.
    ///
    /// * All datasets in the dataset group.
    func deleteDatasetGroup(input: DeleteDatasetGroupInput) async throws -> DeleteDatasetGroupOutputResponse
    /// Deletes the event tracker. Does not delete the event-interactions dataset from the associated dataset group. For more information on event trackers, see [CreateEventTracker].
    func deleteEventTracker(input: DeleteEventTrackerInput) async throws -> DeleteEventTrackerOutputResponse
    /// Deletes a filter.
    func deleteFilter(input: DeleteFilterInput) async throws -> DeleteFilterOutputResponse
    /// Deactivates and removes a recommender. A deleted recommender can no longer be specified in a [GetRecommendations](https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html) request.
    func deleteRecommender(input: DeleteRecommenderInput) async throws -> DeleteRecommenderOutputResponse
    /// Deletes a schema. Before deleting a schema, you must delete all datasets referencing the schema. For more information on schemas, see [CreateSchema].
    func deleteSchema(input: DeleteSchemaInput) async throws -> DeleteSchemaOutputResponse
    /// Deletes all versions of a solution and the Solution object itself. Before deleting a solution, you must delete all campaigns based on the solution. To determine what campaigns are using the solution, call [ListCampaigns] and supply the Amazon Resource Name (ARN) of the solution. You can't delete a solution if an associated SolutionVersion is in the CREATE PENDING or IN PROGRESS state. For more information on solutions, see [CreateSolution].
    func deleteSolution(input: DeleteSolutionInput) async throws -> DeleteSolutionOutputResponse
    /// Describes the given algorithm.
    func describeAlgorithm(input: DescribeAlgorithmInput) async throws -> DescribeAlgorithmOutputResponse
    /// Gets the properties of a batch inference job including name, Amazon Resource Name (ARN), status, input and output configurations, and the ARN of the solution version used to generate the recommendations.
    func describeBatchInferenceJob(input: DescribeBatchInferenceJobInput) async throws -> DescribeBatchInferenceJobOutputResponse
    /// Gets the properties of a batch segment job including name, Amazon Resource Name (ARN), status, input and output configurations, and the ARN of the solution version used to generate segments.
    func describeBatchSegmentJob(input: DescribeBatchSegmentJobInput) async throws -> DescribeBatchSegmentJobOutputResponse
    /// Describes the given campaign, including its status. A campaign can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    /// * DELETE PENDING > DELETE IN_PROGRESS
    ///
    ///
    /// When the status is CREATE FAILED, the response includes the failureReason key, which describes why. For more information on campaigns, see [CreateCampaign].
    func describeCampaign(input: DescribeCampaignInput) async throws -> DescribeCampaignOutputResponse
    /// Describes the given dataset. For more information on datasets, see [CreateDataset].
    func describeDataset(input: DescribeDatasetInput) async throws -> DescribeDatasetOutputResponse
    /// Describes the dataset export job created by [CreateDatasetExportJob], including the export job status.
    func describeDatasetExportJob(input: DescribeDatasetExportJobInput) async throws -> DescribeDatasetExportJobOutputResponse
    /// Describes the given dataset group. For more information on dataset groups, see [CreateDatasetGroup].
    func describeDatasetGroup(input: DescribeDatasetGroupInput) async throws -> DescribeDatasetGroupOutputResponse
    /// Describes the dataset import job created by [CreateDatasetImportJob], including the import job status.
    func describeDatasetImportJob(input: DescribeDatasetImportJobInput) async throws -> DescribeDatasetImportJobOutputResponse
    /// Describes an event tracker. The response includes the trackingId and status of the event tracker. For more information on event trackers, see [CreateEventTracker].
    func describeEventTracker(input: DescribeEventTrackerInput) async throws -> DescribeEventTrackerOutputResponse
    /// Describes the given feature transformation.
    func describeFeatureTransformation(input: DescribeFeatureTransformationInput) async throws -> DescribeFeatureTransformationOutputResponse
    /// Describes a filter's properties.
    func describeFilter(input: DescribeFilterInput) async throws -> DescribeFilterOutputResponse
    /// Describes a recipe. A recipe contains three items:
    ///
    /// * An algorithm that trains a model.
    ///
    /// * Hyperparameters that govern the training.
    ///
    /// * Feature transformation information for modifying the input data before training.
    ///
    ///
    /// Amazon Personalize provides a set of predefined recipes. You specify a recipe when you create a solution with the [CreateSolution] API. CreateSolution trains a model by using the algorithm in the specified recipe and a training dataset. The solution, when deployed as a campaign, can provide recommendations using the [GetRecommendations](https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html) API.
    func describeRecipe(input: DescribeRecipeInput) async throws -> DescribeRecipeOutputResponse
    /// Describes the given recommender, including its status. A recommender can be in one of the following states:
    ///
    /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
    ///
    /// * DELETE PENDING > DELETE IN_PROGRESS
    ///
    ///
    /// When the status is CREATE FAILED, the response includes the failureReason key, which describes why. For more information on recommenders, see [CreateRecommender](https://docs.aws.amazon.com/personalize/latest/dg/API_CreateRecommender.html).
    func describeRecommender(input: DescribeRecommenderInput) async throws -> DescribeRecommenderOutputResponse
    /// Describes a schema. For more information on schemas, see [CreateSchema].
    func describeSchema(input: DescribeSchemaInput) async throws -> DescribeSchemaOutputResponse
    /// Describes a solution. For more information on solutions, see [CreateSolution].
    func describeSolution(input: DescribeSolutionInput) async throws -> DescribeSolutionOutputResponse
    /// Describes a specific version of a solution. For more information on solutions, see [CreateSolution].
    func describeSolutionVersion(input: DescribeSolutionVersionInput) async throws -> DescribeSolutionVersionOutputResponse
    /// Gets the metrics for the specified solution version.
    func getSolutionMetrics(input: GetSolutionMetricsInput) async throws -> GetSolutionMetricsOutputResponse
    /// Gets a list of the batch inference jobs that have been performed off of a solution version.
    func listBatchInferenceJobs(input: ListBatchInferenceJobsInput) async throws -> ListBatchInferenceJobsOutputResponse
    /// Gets a list of the batch segment jobs that have been performed off of a solution version that you specify.
    func listBatchSegmentJobs(input: ListBatchSegmentJobsInput) async throws -> ListBatchSegmentJobsOutputResponse
    /// Returns a list of campaigns that use the given solution. When a solution is not specified, all the campaigns associated with the account are listed. The response provides the properties for each campaign, including the Amazon Resource Name (ARN). For more information on campaigns, see [CreateCampaign].
    func listCampaigns(input: ListCampaignsInput) async throws -> ListCampaignsOutputResponse
    /// Returns a list of dataset export jobs that use the given dataset. When a dataset is not specified, all the dataset export jobs associated with the account are listed. The response provides the properties for each dataset export job, including the Amazon Resource Name (ARN). For more information on dataset export jobs, see [CreateDatasetExportJob]. For more information on datasets, see [CreateDataset].
    func listDatasetExportJobs(input: ListDatasetExportJobsInput) async throws -> ListDatasetExportJobsOutputResponse
    /// Returns a list of dataset groups. The response provides the properties for each dataset group, including the Amazon Resource Name (ARN). For more information on dataset groups, see [CreateDatasetGroup].
    func listDatasetGroups(input: ListDatasetGroupsInput) async throws -> ListDatasetGroupsOutputResponse
    /// Returns a list of dataset import jobs that use the given dataset. When a dataset is not specified, all the dataset import jobs associated with the account are listed. The response provides the properties for each dataset import job, including the Amazon Resource Name (ARN). For more information on dataset import jobs, see [CreateDatasetImportJob]. For more information on datasets, see [CreateDataset].
    func listDatasetImportJobs(input: ListDatasetImportJobsInput) async throws -> ListDatasetImportJobsOutputResponse
    /// Returns the list of datasets contained in the given dataset group. The response provides the properties for each dataset, including the Amazon Resource Name (ARN). For more information on datasets, see [CreateDataset].
    func listDatasets(input: ListDatasetsInput) async throws -> ListDatasetsOutputResponse
    /// Returns the list of event trackers associated with the account. The response provides the properties for each event tracker, including the Amazon Resource Name (ARN) and tracking ID. For more information on event trackers, see [CreateEventTracker].
    func listEventTrackers(input: ListEventTrackersInput) async throws -> ListEventTrackersOutputResponse
    /// Lists all filters that belong to a given dataset group.
    func listFilters(input: ListFiltersInput) async throws -> ListFiltersOutputResponse
    /// Returns a list of available recipes. The response provides the properties for each recipe, including the recipe's Amazon Resource Name (ARN).
    func listRecipes(input: ListRecipesInput) async throws -> ListRecipesOutputResponse
    /// Returns a list of recommenders in a given Domain dataset group. When a Domain dataset group is not specified, all the recommenders associated with the account are listed. The response provides the properties for each recommender, including the Amazon Resource Name (ARN). For more information on recommenders, see [CreateRecommender](https://docs.aws.amazon.com/personalize/latest/dg/API_CreateRecommender.html).
    func listRecommenders(input: ListRecommendersInput) async throws -> ListRecommendersOutputResponse
    /// Returns the list of schemas associated with the account. The response provides the properties for each schema, including the Amazon Resource Name (ARN). For more information on schemas, see [CreateSchema].
    func listSchemas(input: ListSchemasInput) async throws -> ListSchemasOutputResponse
    /// Returns a list of solutions that use the given dataset group. When a dataset group is not specified, all the solutions associated with the account are listed. The response provides the properties for each solution, including the Amazon Resource Name (ARN). For more information on solutions, see [CreateSolution].
    func listSolutions(input: ListSolutionsInput) async throws -> ListSolutionsOutputResponse
    /// Returns a list of solution versions for the given solution. When a solution is not specified, all the solution versions associated with the account are listed. The response provides the properties for each solution version, including the Amazon Resource Name (ARN). For more information on solutions, see [CreateSolution].
    func listSolutionVersions(input: ListSolutionVersionsInput) async throws -> ListSolutionVersionsOutputResponse
    /// Stops creating a solution version that is in a state of CREATE_PENDING or CREATE IN_PROGRESS. Depending on the current state of the solution version, the solution version state changes as follows:
    ///
    /// * CREATE_PENDING > CREATE_STOPPED or
    ///
    /// * CREATE_IN_PROGRESS > CREATE_STOPPING > CREATE_STOPPED
    ///
    ///
    /// You are billed for all of the training completed up until you stop the solution version creation. You cannot resume creating a solution version once it has been stopped.
    func stopSolutionVersionCreation(input: StopSolutionVersionCreationInput) async throws -> StopSolutionVersionCreationOutputResponse
    /// Updates a campaign by either deploying a new solution or changing the value of the campaign's minProvisionedTPS parameter. To update a campaign, the campaign status must be ACTIVE or CREATE FAILED. Check the campaign status using the [DescribeCampaign] API. You must wait until the status of the updated campaign is ACTIVE before asking the campaign for recommendations. For more information on campaigns, see [CreateCampaign].
    func updateCampaign(input: UpdateCampaignInput) async throws -> UpdateCampaignOutputResponse
    /// Updates the recommender to modify the recommender configuration.
    func updateRecommender(input: UpdateRecommenderInput) async throws -> UpdateRecommenderOutputResponse
}

public enum PersonalizeClientTypes {}
